-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- VMTestDatabase.mesa      22-Feb-83 15:00:23 by CAJ -- Virtual memory test program.-- VMTestDatabase is a database which models Pilot VM.  All access to the model-- database goes through the procedures in this interface.DIRECTORY  BackingStore USING [Run],  Environment USING [PageCount, PageNumber],  Space USING [Access, Class, Life, SwapUnitOption, SwapUnitSize, Usage],  VM USING [BackingStoreRuns, Interval, Swappability];VMTestDatabase: DEFINITIONS =  BEGIN  ------------  -- PUBLIC types, constants, variables:  ArrayDescriptor: TYPE = LONG DESCRIPTOR FOR ARRAY [0..0) OF WORD;  Attributes: TYPE = RECORD [    inUse,  -- operation-level locking mechanism    transferring,  -- backing store transfer in progress    mapped,  -- if FALSE then remainder undefined    clean, alive,    readonly, swappable, startOfSwapUnit, endOfSwapUnit, activating, copyingIn,    copyingOut, deactivating, forcingOut: BOOLEAN];  unmappedPage: Attributes = [inUse: FALSE, transferring: FALSE,    mapped: FALSE, clean: FALSE, alive: FALSE, readonly: FALSE, swappable: FALSE,    startOfSwapUnit: FALSE, endOfSwapUnit: FALSE, activating: FALSE,    copyingIn: FALSE, copyingOut: FALSE, deactivating: FALSE, forcingOut: FALSE];  MappedUnmapped: TYPE = {mapped, unmapped};  -- Model of a map unit - one exists for each mapped interval of test VM  MapUnit: TYPE = LONG POINTER TO MapUnitData;  MapUnitData: TYPE = RECORD [    id: LONG STRING,    interval: VM.Interval,    backingStoreRuns: VM.BackingStoreRuns,    backed: BOOLEAN,    usage: Space.Usage,  -- currently unused by test program    class: Space.Class,  -- currently unused by test program    access: Space.Access,    swapUnits: Space.SwapUnitOption,    life: Space.Life,    swappability: VM.Swappability];  ------------  -- PUBLIC procedures: Map units  CreateMapUnit: PROCEDURE [    id: LONG STRING, interval: VM.Interval, backed: BOOLEAN,    runs: VM.BackingStoreRuns, usage: Space.Usage, class: Space.Class,    access: Space.Access, swapUnits: Space.SwapUnitOption,    life: Space.Life, swappability: VM.Swappability]    RETURNS [MapUnit];  DestroyMapUnit: PROCEDURE [mapUnit: MapUnit, updatePages: BOOLEAN];  GetMapUnit: PROCEDURE [page: Environment.PageNumber] RETURNS [mapUnit: MapUnit];  -- Find the total number of pages of backing store for map unit  TotalBS: PROCEDURE [runs: VM.BackingStoreRuns]    RETURNS [pages: Environment.PageCount];  MapDatabasePages: PROCEDURE [mapUnit: MapUnit];  UnmapDatabasePages: PROCEDURE [mapUnit: MapUnit];  -- Determines whether all pages in interval are expected state.  The  -- nullInterval always verifies.  VerifyMapState: PROCEDURE [interval: VM.Interval, expect: MappedUnmapped]    RETURNS [BOOLEAN];  ------------  -- PUBLIC procedures: Swap units  -- Determine the interval covering all swap units which are entirely included  -- within the parameter interval.  There may be unmapped intervals embedded  -- in the enclosing interval.  If none of interval is mapped, then  -- VM.nullInterval is returned.  FindEnclosedSwapUnits: PROCEDURE [interval: VM.Interval] RETURNS [VM.Interval];  -- Determine the interval covering all swap units which include any portion of  -- the parameter interval.  There may be unmapped intervals embedded in the  -- enclosing interval.  If none of interval is mapped, then VM.nullInterval  -- is returned.  FindEnclosingSwapUnits: PROCEDURE [interval: VM.Interval] RETURNS [VM.Interval];  MakeUnitarySwapData: PROCEDURE RETURNS [option: Space.SwapUnitOption];  MakeUniformSwapData: PROCEDURE [size: Space.SwapUnitSize]    RETURNS [option: Space.SwapUnitOption];  MakeIrregularSwapData: PROCEDURE [sizes: ArrayDescriptor]    RETURNS [option: Space.SwapUnitOption];  ------------  -- PUBLIC procedures:  -- Page/interval protection procedures  -- Ensure interval is in test program's VM, and acquire it.  This must be  -- the first action in any modelled VM operation on the database.  CheckAndAcquireInterval: PROCEDURE [interval: VM.Interval];  -- Change page ownership to match new interval boundaries as adjusted by a  -- particular operation.  The call is a noop if new = current.  CorrectAcquiredInterval: PROCEDURE [current, new: VM.Interval];  -- Protect an interval of pages while a backing store transfer is in progress.  Lock: PROCEDURE [interval: VM.Interval];  -- Frees pages acquired by CheckAndAcquireInterval or CorrectAcquiredInterval  -- for initiation of another operation  ReleaseInterval: PROCEDURE [interval: VM.Interval];  --  Releases pages acquired by Lock for backing store transfer.  Unlock: PROCEDURE [interval: VM.Interval];  -- Page state procedures  -- All of the Clear/Get/Mark procedures may be called by an operation only  -- for an interval which it has AcquireInterval'd.  ClearActivating: PROCEDURE [interval: VM.Interval];  ClearCopyingIn: PROCEDURE [interval: VM.Interval];  ClearCopyingOut: PROCEDURE [interval: VM.Interval];  ClearDeactivating: PROCEDURE [interval: VM.Interval];  ClearForcingOut: PROCEDURE [interval: VM.Interval];  GetAlternateRun: PROCEDURE [page: Environment.PageNumber]    RETURNS [run: LONG POINTER TO BackingStore.Run];  GetPageAttributes: PROCEDURE [page: Environment.PageNumber]    RETURNS [attributes: Attributes];  GetPageSeed: PROCEDURE [page: Environment.PageNumber]    RETURNS [seed: CARDINAL];  GetRunIndex: PROCEDURE [page: Environment.PageNumber]    RETURNS [index: CARDINAL];  GetRunOffset: PROCEDURE [page: Environment.PageNumber]    RETURNS [offset: CARDINAL];  MarkActivating: PROCEDURE [interval: VM.Interval];  MarkAlive: PROCEDURE [interval: VM.Interval];  MarkClean: PROCEDURE [interval: VM.Interval];  MarkCopyingIn: PROCEDURE [interval: VM.Interval];  MarkCopyingOut: PROCEDURE [interval: VM.Interval];  MarkDeactivating: PROCEDURE [interval: VM.Interval];  MarkDead: PROCEDURE [interval: VM.Interval];  MarkDirty: PROCEDURE [interval: VM.Interval];  MarkForcingOut: PROCEDURE [interval: VM.Interval];  MarkReadonly: PROCEDURE [interval: VM.Interval];  MarkResident: PROCEDURE [interval: VM.Interval];  MarkSwappable: PROCEDURE [interval: VM.Interval];  MarkWritable: PROCEDURE [interval: VM.Interval];  SetAlternateRun: PROCEDURE [    interval: VM.Interval, run: LONG POINTER TO BackingStore.Run];  -- Replace the expected contents of a test VM page  SetSeed: PUBLIC PROCEDURE [interval: VM.Interval];  -- Determine whether page has a state where page contents are considered  -- undefined by Pilot (dead page or unbacked + resident data unit page).  UndefinedPageContents: PROCEDURE [    page: Environment.PageNumber] RETURNS [BOOLEAN];  -- Determine whether page is defined to be all zeros.  --  (This is currently only available via a bootswitch option to cause  --   initialization of data map units to zeros.)  ZeroPageContents: PROCEDURE [page: Environment.PageNumber] RETURNS [BOOLEAN];  ------------  -- PUBLIC procedures: Miscellaneous  -- Create and initialize the database.  Initialize: PROCEDURE [pagesInTestVM: Environment.PageCount] ;  -- Get the number of pages in test VM.  GetTestVMSize: PROCEDURE RETURNS [Environment.PageCount];  -- Terminate database and release its resources.  Shutdown: PROCEDURE;  -- Find real VM page number for script client (test VM relative) page number  --   No check is made for valid page number.  UserToVMPage: PROCEDURE [page: Environment.PageNumber]    RETURNS [Environment.PageNumber];  -- Find user (script) page number for actual VM page number  --   No check is made for valid page number.  VMToUserPage: PROCEDURE [page: Environment.PageNumber]    RETURNS [Environment.PageNumber];  -- Convert script user's zero-relative interval to actual VM interval.  VMInterval: PROCEDURE [interval: VM.Interval] RETURNS [VM.Interval];  ------------  -- PUBLIC SIGNALs and ERRORs:  TestVMTooBig: SIGNAL;  END.LOG17-Aug-82 13:27:43   CAJ    Created file.