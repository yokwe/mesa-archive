-- Copyright (C) 1985, 1988  by Xerox Corporation. All rights reserved. -- FloppyEditUtilitiesImpl.mesa	last edited by: CAJ	29-Feb-88 11:21:36-- This module contains data view utility routines for the floppy disk editor.DIRECTORY  Floppy USING [FileID, nullFileID],  FloppyEditInternal USING [data, heap, Msg],  FloppyEditUtilities,  MsgSW USING [Clear],  String USING [    AppendChar, AppendOctal, AppendString, AppendSubString, InvalidNumber,    Replace, StringToOctal, SubString, SubStringDescriptor];FloppyEditUtilitiesImpl: PROGRAM  IMPORTS FloppyEditInternal, MsgSW, String EXPORTS FloppyEditUtilities =  BEGIN  --//////////////////  -- Procedures  ReplaceFileID: PUBLIC PROCEDURE [    pString: LONG POINTER TO LONG STRING, pID: LONG POINTER TO Floppy.FileID] =    BEGIN    -- Make Floppy.FileID of pString and store back to pID.  If it is not a    -- valid id, restore pString to string form of pID.    valid: BOOLEAN;    id: Floppy.FileID;    MsgSW.Clear[FloppyEditInternal.data.msgSW];    [valid, id] ¬ ValidateFileID[pString^];    IF valid THEN pID^ ¬ id    ELSE      BEGIN      FloppyEditInternal.Msg["Invalid ID"L, TRUE];      ReplaceFileIDString[pString, pID^];      END;    END;  -- ReplaceFileID  ReplaceFileIDString: PUBLIC PROCEDURE [    heapString: LONG POINTER TO LONG STRING, id: Floppy.FileID] =    BEGIN    -- Replaces string pointed to by heapString by a string it makes of id.    s: STRING ¬ [24];    p1: LONG POINTER = @id;  -- workaround compiler delicacy    p: LONG POINTER TO ARRAY [0..SIZE[Floppy.FileID]) OF UNSPECIFIED = p1;    String.AppendChar[s, '[];    FOR i: [0..SIZE[Floppy.FileID]) IN [0..SIZE[Floppy.FileID] - 1) DO      String.AppendOctal[s, p[i]];      String.AppendString[to: s, from: ", "L];      ENDLOOP;    String.AppendOctal[s, p[SIZE[Floppy.FileID] - 1]];    String.AppendChar[s, ']];    --assumes strings taken from system heap    String.Replace[heapString, s, FloppyEditInternal.heap];    END;  ValidateFileID: PUBLIC PROCEDURE [s: LONG STRING]    RETURNS [valid: BOOLEAN, id: Floppy.FileID] =    BEGIN    -- Makes and validates legal form of Floppy.FileID from the string supplied.    currentNumber: STRING ¬ [64];    startPos: CARDINAL;    curPos: CARDINAL;    len: CARDINAL;    subStringDesc: String.SubStringDescriptor;    subString: String.SubString ¬ @subStringDesc;    p1: LONG POINTER = @id;  -- workaround compiler delicacy    p: LONG POINTER TO ARRAY [0..SIZE[Floppy.FileID]) OF UNSPECIFIED = p1;    id ¬ Floppy.nullFileID;    valid ¬ TRUE;    -- Skip over any leading characters that are not octal digits    FOR startPos IN [0..s.length) DO      IF s[startPos] IN ['0..'7] THEN EXIT;      REPEAT FINISHED => GO TO nullReturn;  -- a bogus ID was given      ENDLOOP;    -- Now process each word of the ID    FOR word: [0..SIZE[Floppy.FileID]) IN [0..SIZE[Floppy.FileID]) DO      -- parse each word      curPos ¬ startPos;      WHILE s[curPos] IN ['0..'7] DO        curPos ¬ curPos + 1;        IF curPos >= s.length THEN RETURN;  -- Truncate the UID        ENDLOOP;      IF s[curPos] = 'B OR s[curPos] = 'b THEN len ¬ curPos - startPos + 1      ELSE len ¬ curPos - startPos;      currentNumber.length ¬ 0;      subString^ ¬ [s, startPos, len];      String.AppendSubString[to: currentNumber, from: subString];      p[word] ¬ String.StringToOctal[        currentNumber ! String.InvalidNumber => GO TO nullReturn];      startPos ¬ startPos + len;      UNTIL s[startPos] IN ['0..'7] DO        startPos ¬ startPos + 1;        IF startPos >= s.length THEN RETURN;  -- Truncate the UID        ENDLOOP;      ENDLOOP;    EXITS nullReturn => RETURN[FALSE, Floppy.nullFileID];    END;  -- ValidateFileID  END.LOG 2-Jan-85 15:37:07   CAJ	Created file.23-Apr-85 16:35:08   CAJ	Copyright.29-Feb-88 11:21:20   CAJ	LONG the POINTERs.