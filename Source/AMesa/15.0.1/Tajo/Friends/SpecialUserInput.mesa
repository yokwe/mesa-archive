-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- File: SpecialUserInput.mesa Last modified by:-- PXK    ,	 9-Nov-82 11:28:59-- JGS on	17-Nov-82 15:33:09DIRECTORY  Keys USING [KeyBits, KeyName, DownUp],  Process USING [Milliseconds],  System USING [Pulses],  UserTerminal USING [Coordinate],  Window USING [Handle];SpecialUserInput: DEFINITIONS =  BEGIN  KeyName: TYPE = Keys.KeyName;  DownUp: TYPE = Keys.DownUp;    Coords: TYPE = UserTerminal.Coordinate;    -- Procedure Types  MouseSNRType: TYPE = PROC RETURNS [place: Coords];  KeySNRType: TYPE = PROCEDURE [    key: KeyName, downUp: DownUp, place: Coords, time: System.Pulses];      HotSpotOffset: TYPE = [0..16);  GetMouseAndCursorPosition: PROCEDURE RETURNS [screenPlace: Coords];  SetMouseAndCursorPosition: PROCEDURE [    screenPlace: Coords, hotX, hotY: HotSpotOffset];  SwapMouseSNR: PROCEDURE [new: MouseSNRType] RETURNS [old: MouseSNRType];  SwapKeySNR: PROCEDURE [new: KeySNRType] RETURNS [old: KeySNRType];      -- Queue routines used by both Interrupt level and Notifier      Queue: TYPE = LONG POINTER TO QueueObject;  QueueObject: TYPE = RECORD [    time: System.Pulses,    place: Coords,    keys: Keys.KeyBits,    item: CARDINAL];  QueueSequence: TYPE = LONG POINTER TO QueueSequenceObject;  QueueSequenceObject: TYPE = RECORD [    queues: SEQUENCE length: NAT OF QueueObject];    -- Client Interface for Queues  CreateQueues: PROCEDURE [nQueues: CARDINAL] RETURNS [QueueSequence];  Copy: PROCEDURE [q, template: Queue] = INLINE {q­ ¬ template­};  ConsumeTo: PROCEDURE [q: Queue];    QueueEmpty: PROCEDURE [q: Queue, waitInterval: Process.Milliseconds]    RETURNS [BOOLEAN];  GetMouseEvent: PROCEDURE [    q: Queue] RETURNS [isMouse: BOOLEAN, action: ActionBody];  FlushQueue: PROCEDURE;  EnqueueEvent, InternalEnqueueAction: PROCEDURE [    key: Keys.KeyName, downUp: Keys.DownUp, place: Coords, time: System.Pulses];  EnqueueMagicMouseEvent: PROC;  GetAction: PROCEDURE [    q: Queue, waitMode: WaitMode ¬ forever,    waitInterval: Process.Milliseconds ¬ 100, acceptance: Acceptance ¬ clicks]    RETURNS [a: ActionBody];    mouseKey: KeyName = D2;  maxMouseEntries: CARDINAL;    WaitMode: TYPE = {forever, dontWait, timed};  Acceptance: TYPE = {clicks, clicksAndMotion, all};    ActionKind: TYPE = {mousePosition, enter, exit, keyDown, keyUp, timedOut};  Action: TYPE = LONG POINTER TO ActionBody;  ActionBody: TYPE = RECORD [    contents: SELECT kind: ActionKind FROM      mousePosition => [place: Coords ¬ NULL],      enter, exit => [],      keyDown, keyUp => [key: Keys.KeyName ¬ NULL],      timedOut => [],  -- no value for timedOut actions      ENDCASE];    -- and a way to be the default input focus    backStopInputFocus: Window.Handle;    END. -- of SpecialUserInput   