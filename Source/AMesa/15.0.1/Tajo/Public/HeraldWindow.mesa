-- HeraldWindow.mesa - last edit by-- JGS		18-Aug-81  8:36:18-- Mark		 4-Jun-81 16:56:26-- RXR   	15-Oct-81 10:26:06-- LXR    	15-Oct-82 11:02:38-- PXK    	 8-Nov-82 18:13:38-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Cursor USING [Defined],  Format USING [StringProc],  System USING [defaultSwitches, Switches],  UserTerminal USING [CursorArray],  Volume USING [ID, systemID],  Window USING [Handle];HeraldWindow: DEFINITIONS IMPORTS System, Volume =  BEGIN  -- TYPEs  ConfirmProcType: TYPE = PROCEDURE [    post: Format.StringProc, cleanup: BOOLEAN ¬ TRUE] RETURNS [okay: BOOLEAN];  CursorState: TYPE = {invert, negative, positive};    Slot: TYPE = LONG POINTER TO SlotObject;  SlotObject: TYPE;  InvalidSwitches: SIGNAL;    -- Variables  displayedPages: READONLY LONG CARDINAL;  switches: READONLY System.Switches;  window: READONLY Window.Handle;  -- PROCEDUREs  -- Booting and switches  AlwaysConfirm: ConfirmProcType;  AppendLogicalVolumeName: PROCEDURE [    s: LONG STRING, id: Volume.ID ¬ Volume.systemID];  AppendPhysicalVolumeName: PROCEDURE [s: LONG STRING];  AppendSwitches: PROCEDURE [s: LONG STRING];  BootFromFile: PROCEDURE [    name: LONG STRING, bootSwitches: System.Switches ¬ switches,    postProc: Format.StringProc ¬ DefaultPost,    confirmProc: ConfirmProcType ¬ DefaultConfirm];  -- Always scans name for switches; if found, they are used instead of bootSwitches.  BootFromVolumeID: PROCEDURE [    id: Volume.ID, bootSwitches: System.Switches ¬ switches,    postProc: Format.StringProc ¬ DefaultPost,    confirmProc: ConfirmProcType ¬ DefaultConfirm];  BootFromVolumeName: PROCEDURE [    name: LONG STRING, bootSwitches: System.Switches ¬ switches,    postProc: Format.StringProc ¬ DefaultPost,    confirmProc: ConfirmProcType ¬ DefaultConfirm];  -- Always scans name for switches; if found, they are used instead of bootSwitches.  DefaultConfirm: ConfirmProcType;  DefaultPost: Format.StringProc;  ScanSwitches: PROCEDURE [    s: LONG STRING, defaultSwitches: System.Switches ¬ System.defaultSwitches]    RETURNS [switches: System.Switches];  SetSwitches: PROCEDURE [new: System.Switches];  -- Cursor feedback  FreeCursorSlot: PROCEDURE [slot: Slot] RETURNS [nil: Slot];  GetCursorSlot: PROCEDURE RETURNS [slot: Slot];  SetCursor: PROCEDURE [slot: Slot, cursor: Cursor.Defined];  SetCursorState: PROCEDURE [slot: Slot, state: CursorState];  StoreCursor: PROCEDURE [slot: Slot, cursor: LONG POINTER TO UserTerminal.CursorArray];  -- Messages  -- If clearOld then delete all old messages.  -- If newLine then msg begins a new line.  AppendMessage: PROCEDURE [    msg: LONG STRING ¬ NIL, newLine, clearOld: BOOLEAN ¬ TRUE];  AppendBrokenMessage: PROCEDURE [    msg1, msg2, msg3: LONG STRING ¬ NIL, newLine, clearOld: BOOLEAN ¬ TRUE];  END.