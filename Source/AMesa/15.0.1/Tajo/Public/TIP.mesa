-- TIP.mesa.  last Edited:-- PXK    	 8-Nov-82 20:27:11-- AXD    	 8-Apr-83 18:37:08-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Atom: TYPE USING [ATOM],  Keys: TYPE USING [DownUp, KeyBits, KeyName],  System: TYPE USING [Pulses],  Window: TYPE USING [Handle, Place];TIP: DEFINITIONS =  BEGIN    DownUp: TYPE = Keys.DownUp;  KeyName: TYPE = Keys.KeyName;    NotifyProc: TYPE = PROC [window: Window.Handle, results: Results];  Results: TYPE = LONG POINTER TO ResultsList;  ResultsList: TYPE;    ResultElement: TYPE = RECORD [ -- READONLY!    SELECT type: * FROM      char => [c: CHARACTER],      coords => [place: Window.Place], -- window relative      keys => [keys: LONG POINTER TO Keys.KeyBits],      atom => [a: Atom.ATOM],      int => [i: LONG INTEGER],      string => [s: LONG STRING],      time => [time: System.Pulses],      ENDCASE];        GetPlace: PROCEDURE [window: Window.Handle] RETURNS [Window.Place];    First: PROCEDURE [results: Results] RETURNS [ResultElement];  Rest: PROCEDURE [results: Results] RETURNS [Results];    -- Advances the list one element. NIL is returned when the list is exhausted.  CreateClient: PROCEDURE [    window: Window.Handle, table: Table ¬ NIL, notify: NotifyProc ¬ NIL];    -- default notify proc associated with the window.  DestroyClient: PROCEDURE [window: Window.Handle];    GetTable: PROCEDURE [window: Window.Handle] RETURNS [Table];  GetNotifyProc: PROCEDURE [window: Window.Handle] RETURNS [NotifyProc];    SetTable: PROCEDURE [window: Window.Handle, table: Table]    RETURNS [oldTable: Table];  SetNotifyProc: PROCEDURE [window: Window.Handle, notify: NotifyProc]    RETURNS [oldNotify: NotifyProc];    -- tip table stuff  Table: TYPE = LONG POINTER TO TableObject;  TableObject: TYPE;  GlobalTable: TYPE = {    root, formSW, textSW, fileWindow, ttySW, executive, spare1, spare2};  globalTable: READONLY ARRAY GlobalTable OF Table;  mouseTIP: --READONLY-- TIP.Table;  << TIP tables are user-editable and normally live on the local disk.  Clients may instantiate new tables from disk with this routine.  An error in reading in a new table can produce the error InvalidTable with type badSyntax. If the file cannot be found the error type fileNotFound results. IF file=NIL then a default table will be returned (currently most key downs). >>  CreateTable: PROCEDURE [    file: LONG STRING ¬ NIL, opaque: BOOLEAN ¬ FALSE, z: UNCOUNTED ZONE ¬ NIL,    contents: LONG STRING ¬ NIL]    RETURNS [table: Table];  -- tables are destroyed only by destroying the zone in which they are made      TableError: TYPE = {fileNotFound, badSyntax};  InvalidTable: SIGNAL [type: TableError, message: LONG STRING];  PushGlobal: PROCEDURE [    push: Table, onto: GlobalTable, opaque: BOOLEAN ¬ FALSE];  PushLocal: PROCEDURE [push, onto: Table, opaque: BOOLEAN ¬ FALSE];      NextTable: PROCEDURE [table: Table] RETURNS [next: Table];      GetNotifyProcFromTable: PROCEDURE [table: Table] RETURNS [NotifyProc];  SetNotifyProcForTable: PROCEDURE [table: Table, notify: NotifyProc]    RETURNS [oldNotify: NotifyProc];        << PushGlobal and PushLocal layer a new TIP table to the input device interpreter stack. PushGlobal adds "push" to "onto" so that all clients sharing "onto" will now first see "push". PushLocal adds "push" to "onto" so that all clients sharing "onto" will be unaffected. This causes the table to be layered so that the stack of tables originating from table points to the Table stack associated with this window. Any clients currently sharing the pushed table will also find their table stack altered. If opaque is TRUE, then unrecognized actions will be discarded without searching the complete TIP table stack past the top entry. The NotifyProc overrides any other notify proc associated with the pushed table. That is, matches found in the pushed table will cause notify to be called. Never supply the same actual parameter to the formal paramenter "push" more than once. >>      NewManager: PROCEDURE [    window: Window.Handle, table: Table, notify: NotifyProc ¬ NIL];  FlushUserInput: PROCEDURE;  actionToWindow: PACKED ARRAY Keys.KeyName OF BOOLEAN;    clickTimeout: System.Pulses;    END.  -- of TIP  