-- File: TextSink.mesa - last edited:-- SXW   ,	10-Jul-81 17:13:18-- JGS,		19-Aug-81  7:39:52-- AXD    ,	15-Oct-82 11:18:18-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  BitBlt USING [BitBltFlags],  Environment USING [Block],  Window USING [Handle, Place];TextSink: DEFINITIONS =  BEGIN  -- Data and TYPE Definitions  Action: TYPE = {destroy, sleep, wakeup};  ActionResult: TYPE = {ok, bad};  BreakReason: TYPE = {eol, consumed, margin};  Handle: TYPE = LONG POINTER TO Procedures;  Procedures: TYPE = LONG POINTER TO ProceduresObject;  ProceduresObject: TYPE = RECORD [    actOn: ActOnProc,    display: DisplayProc,    fontInfo: FontInfoProc,    measure: MeasureProc,    measureChar: MeasureCharProc,    positions: PositionsProc,    resolve: ResolveProc];  TextBlock: TYPE = POINTER TO Environment.Block;  ErrorCode: TYPE = {isBad, invalidParameters, invalidSink, other};  Error: ERROR [code: ErrorCode];  -- Generic Sink Procedures  ActOnProc: TYPE = PROCEDURE [sink: Handle, action: Action]    RETURNS [ActionResult];  ActOn: ActOnProc = INLINE {RETURN sink.actOn[sink, action]};  DisplayProc: TYPE = PROCEDURE [    sink: Handle, block: TextBlock, lineLength, offset: INTEGER,    window: Window.Handle, place: Window.Place, flags: BitBlt.BitBltFlags]    RETURNS [newPlace: Window.Place, positions: CARDINAL, why: BreakReason];  Display: DisplayProc = INLINE {    RETURN sink.display[      sink, block, lineLength, offset, window, place, flags]};  FontInfoProc: TYPE = PROCEDURE [sink: Handle]    RETURNS [lineHeight, minWidth, maxWidth: CARDINAL];  FontInfo: FontInfoProc = INLINE {RETURN sink.fontInfo[sink]};  MeasureCharProc: TYPE = PROCEDURE [    sink: Handle, char: CHARACTER, xOffset: INTEGER]    RETURNS [width: INTEGER];  MeasureChar: MeasureCharProc = INLINE {    RETURN sink.measureChar[sink, char, xOffset]};  MeasureProc: TYPE = PROCEDURE [    sink: Handle, block: TextBlock, lineLength, offset: INTEGER,    place: Window.Place]    RETURNS [newPlace: Window.Place, positions: CARDINAL, why: BreakReason];  Measure: MeasureProc = INLINE {    RETURN sink.measure[sink, block, lineLength, offset, place]};  PositionsProc: TYPE = PROCEDURE [sink: Handle, block: TextBlock]    RETURNS [CARDINAL];  Positions: PositionsProc = INLINE {RETURN sink.positions[sink, block]};  ResolveProc: TYPE = PROCEDURE [    sink: Handle, block: TextBlock, startX, xToFind, offset: INTEGER,    halfCharResolve: BOOLEAN]    RETURNS [newX: INTEGER, positions: CARDINAL, why: BreakReason];  Resolve: ResolveProc = INLINE {    RETURN sink.resolve[sink, block, startX, xToFind, offset, halfCharResolve]};  END.  -- of TextSink 