-- AtomicProfile.mesa  edit by--  Ayers   4-Oct-83 13:11:54--  JGS     6-Jun-84 14:10:19--  Conde    6-Mar-85 10:52:34-- Copyright (C) 1984 by Xerox CorporationDIRECTORY  Atom USING [ATOM];AtomicProfile: DEFINITIONS =  BEGIN  «This allows storage and retrieval of global values. Unlike the Basic Workstation version, which this interface is based on, we add Lisp like Fetch demons to allow client specified procedures to be invoked for retrieving the values. For example, if an atom has invalid data, has a Fetch demon proc, and someone wants a value, the Fetch demon proc will be called. The value returned from the Fetch demon proc to set the cache.The Lisp Delete and Adding demons are not included since we plan to use the Supervisor for client notifications. The atom  "fullUserName" is reserved by Profile for mapping your NS alias to the fully qualified name. Example actions for SetString. A special flag is kept to indicate "no value for string"	Atom	string	Demon	Set Actiongiven	given	given	flag ¬ valid, value ¬ string, save Demon		given	NIL	given	flag ¬ novalue, save Demongiven	given	NIL	flag ¬ valid, value ¬ string,NIL	x	x	ERRORx	NIL	x       ERROR	General Get ActionIF flag = novalue AND Demon exists	=> [value, flag] ¬ Demon[], return value. (Demon set flag to novalue before, or initial state)IF flag = novalue AND Demon NIL		=> Will never happen.IF flag = valid   AND Demon exists	=> return value. (Demon left the value as is)IF flag = valid   AND Demon NIL		=> return value.»  -- For Items without values, but with demons.  ItemState: TYPE = {valid, invalid, unknown};    -- Raised when a Set<TYPE> is called with invalid data, and no fetch proc.  SetError: ERROR;  -- Raised when a  Get<TYPE> is called and the atom somehow has  -- invalid data, and no fetch proc. Should not be raised unless there is  -- an internal problem.  GetError: ERROR;  -- Called when valueInvalid = TRUE for item in atom.  FetchStringProc: TYPE = PROCEDURE [atom: Atom.ATOM]    RETURNS [LONG STRING, ItemState];  FetchIntegerProc: TYPE = PROCEDURE [atom: Atom.ATOM]    RETURNS [LONG INTEGER, ItemState];  FetchBooleanProc: TYPE = PROCEDURE [atom: Atom.ATOM]    RETURNS [BOOLEAN, ItemState];  SetString: PROCEDURE [    atom: Atom.ATOM, string: LONG STRING, immutable: BOOLEAN ¬ FALSE,    fetchDemon: FetchStringProc ¬ NIL];  GetString: PROCEDURE [atom: Atom.ATOM] RETURNS [LONG STRING];  DoneWithString: PROCEDURE [string: LONG STRING];  EnumerateString: PROCEDURE [atom: Atom.ATOM, proc: PROCEDURE [LONG STRING]];  SetLONGINTEGER: PROCEDURE [    atom: Atom.ATOM, int: LONG INTEGER, initialState: ItemState ¬ valid,    fetchDemon: FetchIntegerProc ¬ NIL];  GetLONGINTEGER: PROCEDURE [atom: Atom.ATOM] RETURNS [LONG INTEGER];  SetBOOLEAN: PROCEDURE [    atom: Atom.ATOM, boolean: BOOLEAN, initialState: ItemState ¬ valid,    fetchDemon: FetchBooleanProc ¬ NIL];  GetBOOLEAN: PROCEDURE [atom: Atom.ATOM] RETURNS [BOOLEAN];  END.    Change log:18-Feb-85 12:44:00	Conde	Added Demons. 6-Mar-85 10:52:44	Conde	Added initialState to SetLONGINTEGER & SetBOOLEAN.