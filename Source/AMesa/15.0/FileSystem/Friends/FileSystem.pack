-- [Igor]<Emerson>FileSystem>Friends>FileSystem.pack-- SEH	 	17-Mar-82 19:30:49-- LXR    	11-May-83 11:57:13-- RXJ     	 2-Nov-83 14:38:14-- KAM  	20-Jul-84 15:58:17FileSystem: SEGMENT = {  Common: CODE PACK = {    BTreeImplA[ENTRY VECTOR, Copy, CopyValue, Find, InternalFind,       StringCompare];   BTreeImplB[ENTRY VECTOR];   MDirectoryImplA[ENTRY VECTOR, EvalInDir, FreeTree, GetTree, IsFilename, IsProtected, LegalName, LookUp, SearchDirTree, SplitName, ValidateFile, CATCH CODE];    MDirectoryImplC[ENTRY VECTOR];    MFileImplA[ENTRY VECTOR, Acquire, GetFO, GetObject, IncrRefCount, Release, ReleaseObject,  CATCH CODE];    MFileImplB[ENTRY VECTOR, ForceOutLeader, GetAccess, GetCapa,  GetReleaseData, MapLeader, NoteCaller, RemoteFileName, SetReleaseData, ValidateHandle];    MFileImplC[ENTRY VECTOR, GetFullName, GetLength, GetProtectionStatus, InternalGetLength, SetTimesGivenAccess];    MFileImplD[ENTRY VECTOR];    MFileImplE[ENTRY VECTOR, AddToNotificationListInternal];    MFileImplF[ENTRY VECTOR, AddHandle, CheckHandles, CheckNewAccess, ConflictingAccess, TakeHandleOffList, TakeHandleOffListInternal];    MStreamImpl[ENTRY VECTOR, Cleanup, ConvertHandle, Create, Delete, EmptyBuffer, GetBlock, GetFile, GetIndex, InternalDelete, PutBlock, SetIndex, SetupBuffer, ValidateHandle];    MSegmentImpl[ENTRY VECTOR, FreePages, GetPages];    };  Enumerate1: CODE PACK = {   BTreeImplA[FlushGNCache, GetGNCache, GetNext, GetNextEntry, MoveLongString, Successor];   MDirectoryImplA[AppendToFullName, FreeTaskList, GetDir, GetNext, GetNextTask,       GetNextTreeEntry, IsValid, LegalPattern, Match, MatchLevel,       SetUpTaskList, VolumeRootDir];   MDirectoryImplC[InternalLookupRootDir];   MFileImplA[GetObjectForEnumerate];   MFileImplB[EnumerateDirectory, VolumeOpenForWrite];   MFileImplC[FillInFullName, GetDirectoryName];   MFileImplG[ENTRY VECTOR, NameInCache, Promote, PutNameInCache];   };  Fetch1: CODE PACK = {   BTreeImplA[Insert, InsertInNode, SwapValue];   MDirectoryImplA[FindFirstWriteable];   MDirectoryImplB[ENTRY VECTOR, Insert];   MDirectoryImplC[DirSetDeleteProtect, DirSetReadProtect, DirSetWriteProtect, ForceConsistent, GetRootFileInternal, MapRootFileInternal, MarkChanging, MarkChanged, SetProtectBit];   MStreamImpl[AdvanceBuffer, Copy];    };  LoadWindow1: CODE PACK = {   MFileImplB[ProcessUserCm, ReadOnly];   MSegmentImpl[Address, AddToSegments, Create, Kill, SetSegmentSpace];   MStreamImpl[GetByte, GetLength];    };  Compile1: CODE PACK = {   MFileImplB[CopyString, GetName, SetMinimumFileDataPages];   MFileImplC[GetTimes, InternalGetProperties, InternalSetLength, InternalSetProperties, SetLength, SetReadProtect, SetTimes];   MFileImplD[AddNotifyProc];   MFileImplF[VolumeOpen, WaitForRelease];   MSegmentImpl[CopyIn, DeleteSpace, Pages, RemoveFromSegments, WriteRemotePagesMaybe];   MStreamImpl[InternalSetLength, MakeFile, PutWord, ReadOnly, RealRelease, SendNow, StreamRelease, WriteOnly];    };  RemoteFile1: CODE PACK = {   RFileCommon[ENTRY VECTOR, DescribeAcquireArgs, DescribeDataArgs, DescribeHandle, DescribeString];   RFileUser[ENTRY VECTOR, Acquire, CallAcquire, CallGetFullName, CallReadDataPages, CallReadLeaderPage, CallUnlockLeader, CallWriteLeaderPage, FindConnection, GetFullName, ParseName, Propagate, ReadDataPages, ReadLeaderPage, UnlockLeader, WriteLeaderPage];   MFileImplE[ReleaseRemoteFile, FindRemoteFO, FreeRemoteFO];   MFileImplF[PleaseReleaseRemoteFO];    };  RemoteFileCatch: CODE PACK = {   RFileUser[CATCH CODE];   };  RemoteFileErrors: CODE PACK = {   RFileUser[CourierError, ErrorOther];   };  BTreeImplOrphans: CODE PACK = {    BTreeImplA EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    BTreeImplB EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  MDirectoryImplAOrphans: CODE PACK = {    MDirectoryImplA EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MDirectoryImplCOrphans, MainPack;    };  MDirectoryImplBOrphans: CODE PACK = {    MDirectoryImplB EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  MDirectoryImplCOrphans: CODE PACK = {    MDirectoryImplA[CopyStr];    MDirectoryImplC EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };    MFileImplAOrphans: CODE PACK = {    MFileImplA EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  MFileImplBOrphans: CODE PACK = {    MFileImplB EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  MFileImplCOrphans: CODE PACK = {    MFileImplC EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };   MFileImplDEOrphans: CODE PACK = {    MFileImplD EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MFileImplFOrphans, MainPack;    MFileImplE EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MFileImplFOrphans, MainPack;    };  MFileImplFOrphans: CODE PACK = {    MFileImplF EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    MFileImplD[MAIN];    MFileImplE[MAIN];    }; MStreamImplOrphans: CODE PACK = {    MStreamImpl EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  MSegmentImplOrphans: CODE PACK = {    MSegmentImpl EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    MLoaderImpl EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    };  RemoteOrphans: CODE PACK = {    RFileCommon EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, MainPack;    RFileUser EXCEPT Common, Enumerate1, Fetch1, LoadWindow1, Compile1, RemoteFile1, RemoteFileCatch, RemoteFileErrors, MainPack;    };      Conversion: CODE PACK = {    MFileImplH;    };  MainPack: CODE PACK = {   BTreeImplA[MAIN];   BTreeImplB[MAIN, SnapShot];   MDirectoryImplA[MAIN, RegisterWithSupervisor, StartMDirectoryImplA];   MFileImplG[MAIN, CATCH CODE];   };  }; -- of FileSystem    Scavenger: SEGMENT = {  Scavenge: CODE PACK = {    MScavengeImplA;    MScavengeImplB;    };      };  -- of Scavenger  FileSystemFrames: FRAME PACK = {      BTreeImplA; BTreeImplB; MDirectoryImplA; MDirectoryImplB; MDirectoryImplC;      MFileImplA; MFileImplB; MFileImplC; MFileImplD;      MFileImplE;  MFileImplF; MFileImplG; MFileImplH;      MStreamImpl;      MLoaderImpl;       MSegmentImpl;      RFileCommon; RFileUser;    };  ScavengeFrames: FRAME PACK = {      MScavengeImplA; MScavengeImplB;    };