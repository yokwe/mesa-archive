-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- DiskEditBadPageListSW.mesa      5-Sep-84 13:54:31 by CAJ  DIRECTORY  DiskEditInternal USING [dataPtr, dataWindowKey],  Environment USING [wordsPerPage],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, DisplayItem,    ItemHandle, LabelItem, LongNumberItem, newLine, nextPlace, NumberItem,    NumberNotifyProcType, ProcType],  PhysicalVolumeFormat USING [BadPageListArray, PageNumber],  UserTerminal USING [BlinkDisplay],  WindowSwap USING [RegisterView];DiskEditBadPageListSW: PROGRAM  IMPORTS DiskEditInternal, FormSW, UserTerminal, WindowSwap =  BEGIN  bpBadPageIndex: CARDINAL ¬ 0;  bpIndexIndex: CARDINAL ¬ 0;  badPageList: MACHINE DEPENDENT RECORD [    index(0): CARDINAL,    badPage(1): PhysicalVolumeFormat.PageNumber,    list(3): LONG POINTER TO PhysicalVolumeFormat.BadPageListArray] ¬ [    0, 0, LOOPHOLE[DiskEditInternal.dataPtr]];  BackCommand: FormSW.ProcType =    BEGIN    badPageList.list[badPageList.index] ¬ badPageList.badPage;    badPageList.index ¬      IF badPageList.index = 0 THEN      Environment.wordsPerPage/SIZE[PhysicalVolumeFormat.PageNumber] - 1      ELSE badPageList.index - 1;    badPageList.badPage ¬ badPageList.list[badPageList.index];    FormSW.DisplayItem[sw, bpBadPageIndex];    FormSW.DisplayItem[sw, bpIndexIndex];    END;  CleanupBadPageListSW: PROCEDURE =    BEGIN badPageList.list[badPageList.index] ¬ badPageList.badPage; END;  FillBadPageListSW: PROCEDURE =    BEGIN badPageList.badPage ¬ badPageList.list[badPageList.index]; END;  MakeBadPageListSW: FormSW.ClientItemsProcType =    BEGIN    i: CARDINAL ¬ 0;    nItems: CARDINAL = 6;    items ¬ FormSW.AllocateItemDescriptor[nItems];    items[0] ¬ FormSW.LabelItem[tag: NIL, invisible: TRUE, place: FormSW.newLine];    items[i ¬ i + 1] ¬ FormSW.LabelItem[      tag: "Bad page list"L, place: FormSW.newLine];    items[bpIndexIndex ¬ i ¬ i + 1] ¬ FormSW.NumberItem[      tag: "Index"L, signed: FALSE, notNegative: TRUE, radix: decimal, default: 0,      value: @badPageList.index, proc: NoticeNewIndex, place: FormSW.newLine];    items[bpBadPageIndex ¬ i ¬ i + 1] ¬ FormSW.LongNumberItem[      tag: "Bad page"L, signed: FALSE, notNegative: TRUE, radix: decimal,      default: 0, value: @badPageList.badPage, place: FormSW.nextPlace];    items[i ¬ i + 1] ¬ FormSW.CommandItem[      tag: "Next"L, proc: NextCommand, place: FormSW.nextPlace];    items[i ¬ i + 1] ¬ FormSW.CommandItem[      tag: "Back"L, proc: BackCommand, place: FormSW.nextPlace];    IF i ~= nItems - 1 THEN ERROR;  -- indicates that items is incompletely initialized    RETURN[items, TRUE]    END;  NextCommand: FormSW.ProcType =    BEGIN    badPageList.list[badPageList.index] ¬ badPageList.badPage;    badPageList.index ¬      (badPageList.index + 1) MOD        (Environment.wordsPerPage/SIZE[PhysicalVolumeFormat.PageNumber]);    badPageList.badPage ¬ badPageList.list[badPageList.index];    FormSW.DisplayItem[sw, bpBadPageIndex];    FormSW.DisplayItem[sw, bpIndexIndex];    END;  NoticeNewIndex: FormSW.NumberNotifyProcType =    BEGIN    IF badPageList.index ~IN      [0..Environment.wordsPerPage/SIZE[PhysicalVolumeFormat.PageNumber]) THEN {      UserTerminal.BlinkDisplay[]; RETURN; };    badPageList.list[oldValue] ¬ badPageList.badPage;    badPageList.badPage ¬ badPageList.list[badPageList.index];    FormSW.DisplayItem[sw, bpBadPageIndex];    END;  -- Module initialization:  -- Register this subwindow as a view for the data subwindow  WindowSwap.RegisterView[    key: DiskEditInternal.dataWindowKey,    viewName: "Bad page list"L,    makeFormSW: MakeBadPageListSW,    viewFromDataProc: FillBadPageListSW,    dataFromViewProc: CleanupBadPageListSW];  END.LOG 3-Sep-81 10:04:40   WDK       LONGified.29-Nov-83 16:44:39   EKN       Changed Bad page and index to be displayed as decimal instead of octal. 5-Sep-84 13:54:23   CAJ       Added registering window view via WindowSwap.