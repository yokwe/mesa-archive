-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- VMTestApplyToModelImpl.mesa      25-Mar-83 17:34:04 by CAJ -- Virtual memory test program.-- VMTestApplyToModel routines model the effect of the parallel Pilot operation-- on the VMTest database, after the Pilot operation has occurred.  Each is-- called from the corresponding VMTestOperations routine.DIRECTORY  BackingStore USING [Run],  Environment USING [PageNumber],  VM USING [Interval, nullInterval],  VMTestDatabase USING [Attributes, FindEnclosedSwapUnits, GetMapUnit,    GetPageAttributes, MarkClean, MarkDead, MarkReadonly,    MarkResident, MarkSwappable, MarkWritable, UnmapDatabasePages],  VMTestApplyToModel;VMTestApplyToModelImpl: PROGRAM  IMPORTS VMTestDatabase  EXPORTS VMTestApplyToModel =  BEGIN  ------------  -- GLOBAL types, constants, variables: none  ------------  -- PUBLIC procedures - individual operations:  Activate: PUBLIC PROCEDURE [interval: VM.Interval] = {};    -- There is nothing for the model to do here.  Any change to model state    -- caused by an Activate involves I/O and occurs in the Backing Store.  CopyIn: PUBLIC PROCEDURE [interval: VM.Interval, run: BackingStore.Run] =    {};    -- There is nothing for the model to do here.  Any change to model state    -- caused by a CopyIn involves I/O and occurs in the Backing Store.  CopyOut: PUBLIC PROCEDURE [interval: VM.Interval, run: BackingStore.Run] =    {};    -- There is nothing for the model to do here.  Any change to model state    -- caused by a CopyOut involves I/O and occurs in the Backing Store.  Deactivate: PUBLIC PROCEDURE [interval: VM.Interval] = {};    -- There is nothing for the model to do here.  Any change to model state    -- caused by a Deactivate involves I/O and occurs in the Backing Store.  ForceOut: PUBLIC PROCEDURE [interval: VM.Interval] = {};    -- There is nothing for the model to do here.  Any change to model state    -- caused by a ForceOut involves I/O and occurs in the Backing Store.  GetMapUnitAttributes: PUBLIC PROCEDURE [page: Environment.PageNumber] = {};    -- GetMapUnitAttributes has no effect upon the model.  GetSwapUnitAttributes: PUBLIC PROCEDURE [page: Environment.PageNumber] = {};    -- GetSwapUnitAttributes has no effect upon the model.  Kill: PUBLIC PROCEDURE [interval: VM.Interval] =    BEGIN    actualKillInterval: VM.Interval      ¬ VMTestDatabase.FindEnclosedSwapUnits[interval];    page: Environment.PageNumber;    FOR page IN [interval.page..interval.page + interval.count) DO      attr: VMTestDatabase.Attributes ¬ VMTestDatabase.GetPageAttributes[page];      IF attr.mapped THEN        BEGIN        VMTestDatabase.MarkClean[[page, 1]];	IF PageInInterval[page, actualKillInterval] THEN	  VMTestDatabase.MarkDead[[page, 1]];	END;      ENDLOOP;    END;  MakeReadOnly: PUBLIC PROCEDURE [interval: VM.Interval] =    {IF interval ~= VM.nullInterval THEN VMTestDatabase.MarkReadonly[interval]};  MakeResident: PUBLIC PROCEDURE [interval: VM.Interval] =    {IF interval ~= VM.nullInterval THEN VMTestDatabase.MarkResident[interval]};  MakeSwappable: PUBLIC PROCEDURE [interval: VM.Interval] =    {IF interval ~= VM.nullInterval THEN VMTestDatabase.MarkSwappable[interval]};  MakeWritable: PUBLIC PROCEDURE [interval: VM.Interval] =    {IF interval ~= VM.nullInterval THEN VMTestDatabase.MarkWritable[interval]};  Map: PUBLIC PROCEDURE [interval: VM.Interval] = {};    -- All modelling of Map on the database occurs before the Pilot Map.  Relocate: PUBLIC PROCEDURE [from, to: Environment.PageNumber] =    BEGIN    -- assuming Expect set up a duplicate, just destroy old mapUnit    --   (probably should check for loose ends first)    END;  Unmap: PUBLIC PROCEDURE [page: Environment.PageNumber] =    {VMTestDatabase.UnmapDatabasePages[VMTestDatabase.GetMapUnit[page]]};  ------------  -- Private procedures:  -- This should be moved to VMTestDatabase  PageInInterval: PROCEDURE [page: Environment.PageNumber, interval: VM.Interval]    RETURNS [BOOLEAN] =    {RETURN[(page >= interval.page) AND (page < interval.page + interval.count)]};  ------------  -- Main line code  -- None.  END.LOG18-Aug-82 16:28:13   CAJ    Created file.