-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- DiskEditBootDescriptorSW.mesa   29-Sep-86 18:03:20 by CAJDIRECTORY  Boot USING [BootFileDescriptorPageHandle, BootFileType, maxPageRunsPerPage],  DiskEditInternal USING [dataPtr, dataWindowKey],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, Enumerated, EnumeratedItem,    line0, LongNumberItem, nextLine, nextPlace, NumberItem, sameLine,    TagOnlyItem],  WindowSwap USING [RegisterView];DiskEditBootDescriptorSW: PROGRAM  IMPORTS DiskEditInternal, FormSW, WindowSwap =  BEGIN  FormItems: TYPE = {title, seal, version, bootFileType, pageRunsCount, nextPage,    cylinder, head, sector, thisDescriptorPages, totalDescriptorPages,    pageGroups, firstPageRun};  dataPage: Boot.BootFileDescriptorPageHandle =    LOOPHOLE[DiskEditInternal.dataPtr];  nextDaHead: CARDINAL;  nextDaSector: CARDINAL;  pageRunsCount: CARDINAL;  type: Boot.BootFileType;  version: CARDINAL;  DAStuff: TYPE = RECORD [head: CARDINAL, sector: CARDINAL];  runStuff: ARRAY [0..Boot.maxPageRunsPerPage) OF DAStuff;  CleanupBootDescriptorSW: PROCEDURE =    BEGIN    dataPage.header.version ¬ version;    dataPage.header.bootFileType ¬ type;    dataPage.header.pageRunsCount ¬ pageRunsCount;    dataPage.header.nextPage.head ¬ nextDaHead;    dataPage.header.nextPage.sector ¬ nextDaSector;    FOR i: CARDINAL IN [0..Boot.maxPageRunsPerPage) DO      dataPage.pageRuns[i].da.head ¬ runStuff[i].head;      dataPage.pageRuns[i].da.sector ¬ runStuff[i].sector;      ENDLOOP;    END;  DestroyBootDescriptorSW: PROCEDURE =    BEGIN    END;  FillBootDescriptorSW: PROCEDURE =    BEGIN    version ¬ dataPage.header.version;    type ¬ dataPage.header.bootFileType;    pageRunsCount ¬ dataPage.header.pageRunsCount;    nextDaHead ¬ dataPage.header.nextPage.head;    nextDaSector ¬ dataPage.header.nextPage.sector;    FOR i: CARDINAL IN [0..Boot.maxPageRunsPerPage) DO      runStuff[i].head ¬ dataPage.pageRuns[i].da.head;      runStuff[i].sector ¬ dataPage.pageRuns[i].da.sector;      ENDLOOP;    END;  -- FillBootDescriptorSW  MakeBootDescriptorSW: FormSW.ClientItemsProcType =    BEGIN    itemsPerRun: CARDINAL = 5;    nItems: CARDINAL = FormItems.LAST.ORD + Boot.maxPageRunsPerPage * itemsPerRun;    bootFileTypes: ARRAY [0..7) OF FormSW.Enumerated ¬ [      [string: "hardMicrocode"L, value: Boot.BootFileType[hardMicrocode]],      [string: "softMicrocode"L, value: Boot.BootFileType[softMicrocode]],      [string: "germ"L, value: Boot.BootFileType[germ]],      [string: "pilot"L, value: Boot.BootFileType[pilot]],      [string: "debugger"L, value: Boot.BootFileType[debugger]],      [string: "debuggee"L, value: Boot.BootFileType[debuggee]],      [string: "initialMicrocode"L, value: Boot.BootFileType[initialMicrocode]]];    items ¬ FormSW.AllocateItemDescriptor[nItems];    items[FormItems.title.ORD] ¬ FormSW.TagOnlyItem[      tag: "Bootfile Descriptor"L, place: [3, FormSW.line0]];    items[FormItems.seal.ORD] ¬ FormSW.LongNumberItem[      tag: "seal "L, place: [21, FormSW.nextLine], radix: octal, signed: FALSE,      notNegative: TRUE, value: @dataPage.header.seal];    items[FormItems.version.ORD] ¬ FormSW.NumberItem[      tag: "version "L, place: [155, FormSW.sameLine], signed: FALSE,      notNegative: TRUE, value: @version];    items[FormItems.bootFileType.ORD] ¬ FormSW.EnumeratedItem[      tag: "bootFileType"L, feedback: one, value: @type,      choices: DESCRIPTOR[bootFileTypes], place: [21, FormSW.nextLine]];    items[FormItems.pageRunsCount.ORD] ¬ FormSW.NumberItem[      tag: "pageRunsCount "L, place: FormSW.nextPlace, signed: FALSE,      notNegative: TRUE, value: @pageRunsCount];    items[FormItems.nextPage.ORD] ¬ FormSW.TagOnlyItem[      tag: "Next descriptor:"L, place: [21, FormSW.nextLine]];    items[FormItems.cylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: decimal, value: @dataPage.header.nextPage.cylinder];    items[FormItems.head.ORD] ¬ FormSW.NumberItem[      tag: "head "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: decimal, value: @nextDaHead];    items[FormItems.sector.ORD] ¬ FormSW.NumberItem[      tag: "sector "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: decimal, value: @nextDaSector];    items[FormItems.thisDescriptorPages.ORD] ¬ FormSW.NumberItem[      tag: "thisDescriptorPages "L, place: [21, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, value: @dataPage.header.thisDescriptorPages];    items[FormItems.totalDescriptorPages.ORD] ¬ FormSW.NumberItem[      tag: "totalDescriptorPages "L, place: FormSW.nextPlace, signed: FALSE,      notNegative: TRUE, value: @dataPage.header.totalDescriptorPages];    items[FormItems.pageGroups.ORD] ¬ FormSW.TagOnlyItem[      tag: "PageGroups"L, place: [12, FormSW.nextLine]];    FOR i: CARDINAL IN [0..Boot.maxPageRunsPerPage) DO      j: CARDINAL;      items[j ¬ FormItems.firstPageRun.ORD + i * itemsPerRun] ¬ FormSW.NumberItem[        tag: "count "L, place: [21, FormSW.nextLine], signed: FALSE,        notNegative: TRUE, value: @dataPage.pageRuns[i].count];      items[j + 1] ¬ FormSW.TagOnlyItem[        tag: "da:"L, place: FormSW.nextPlace];      items[j + 2] ¬ FormSW.NumberItem[        tag: "cyl "L, place: FormSW.nextPlace, signed: FALSE,        notNegative: TRUE, value: @dataPage.pageRuns[i].da.cylinder];      items[j + 3] ¬ FormSW.NumberItem[        tag: "head "L, place: FormSW.nextPlace, signed: FALSE,        notNegative: TRUE, value: @runStuff[i].head];      items[j + 4] ¬ FormSW.NumberItem[        tag: "sector "L, place: FormSW.nextPlace, signed: FALSE,        notNegative: TRUE, value: @runStuff[i].sector];      ENDLOOP;    RETURN[items: items, freeDesc: TRUE];    END;  -- MakeBootDescriptorSW  -- Module initialization:  -- Register this subwindow as an alternate view for the data subwindow  WindowSwap.RegisterView[    key: DiskEditInternal.dataWindowKey,    viewName: "BootDescriptor"L,    makeFormSW: MakeBootDescriptorSW,    viewFromDataProc: FillBootDescriptorSW,    dataFromViewProc: CleanupBootDescriptorSW,    destroyViewProc: DestroyBootDescriptorSW];  END...LOG29-Sep-86 17:59:16   CAJ    Created file.   