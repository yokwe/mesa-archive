-- Copyright (C) 1987  by Xerox Corporation. All rights reserved. -- FloppyEditBootRootSW.mesa	last edited by: RSV	 2-Oct-87 13:05:04-- This module implements a view, booting root page, for the data display subwindow of the floppy disk editor.DIRECTORY  Boot USING [DiskFileID],  FloppyEditInternal USING [data, heap, swapWindowKey],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, FilterProcType, line0,    LongNumberItem, nextLine,nextPlace, NumberItem, TagOnlyItem,    StringItem],  PilotDisk USING [FileID, nullFileID],  String USING [    AppendChar, AppendOctal, AppendString, AppendSubString, InvalidNumber,    Replace, StringToOctal, SubString, SubStringDescriptor],  WindowSwap USING [RegisterView];FloppyEditBootRootSW: PROGRAM  IMPORTS    FloppyEditInternal, FormSW, String, WindowSwap =  BEGIN  --//////////////////  -- Local TYPEs, constants, and variables  FormItems: TYPE = {bootingRoot,    hardMicrocode, hardMicrocodeID, hardMicrocodeFirstPage, hardMicrocodeDA,    hardMicrocodeDACylinder, hardMicrocodeDAHead, hardMicrocodeDASector,    softMicrocode, softMicrocodeID, softMicrocodeFirstPage, softMicrocodeDA,    softMicrocodeDACylinder, softMicrocodeDAHead, softMicrocodeDASector,    germ, germID, germFirstPage, germDA, germDACylinder, germDAHead, germDASector,    pilot, pilotID, pilotFirstPage, pilotDA, pilotDACylinder, pilotDAHead,    pilotDASector,    alternateMicrocode, alternateMicrocodeID, alternateMicrocodeFirstPage,    alternateMicrocodeDA, alternateMicrocodeDACylinder, alternateMicrocodeDAHead,    alternateMicrocodeDASector};  FloppyBootFileType: TYPE = MACHINE DEPENDENT    {hardMicrocode, softMicrocode, germ, pilot, alternateMicrocode};  FloppyPVBootFiles: TYPE = ARRAY FloppyBootFileType OF Boot.DiskFileID;  -- This is the actual contents of the booting root page  rootData: LONG POINTER TO FloppyPVBootFiles ¬ NIL;  -- This is data needed to display sector nine, including word-alignment  -- Use Data type when WindowSwap allows giving back storage at unload/shutdown  rootDisplayData: LONG POINTER TO RootDisplayData;  RootDisplayData: TYPE = RECORD [    hardMicrocodeIDString: LONG STRING ¬ NIL,    softMicrocodeIDString: LONG STRING ¬ NIL,    germIDString: LONG STRING ¬ NIL,    pilotIDString: LONG STRING ¬ NIL,    alternateMicrocodeIDString: LONG STRING ¬ NIL,    hardMicrocodeHead: CARDINAL ¬ 0,    hardMicrocodeSector: CARDINAL ¬ 0,    softMicrocodeHead: CARDINAL ¬ 0,    softMicrocodeSector: CARDINAL ¬ 0,    germHead: CARDINAL ¬ 0,    germSector: CARDINAL ¬ 0,    pilotHead: CARDINAL ¬ 0,    pilotSector: CARDINAL ¬ 0,    alternateMicrocodeHead: CARDINAL ¬ 0,    alternateMicrocodeSector: CARDINAL ¬ 0];  --//////////////////  -- Procedures  CleanupBootRootSW: PROCEDURE =    -- Make data buffer match display.    {};  DestroyBootRootSW: PROCEDURE =    -- Give back resources when view is going away for good.    BEGIN    String.Replace[      @rootDisplayData.hardMicrocodeIDString, NIL, FloppyEditInternal.heap];    String.Replace[      @rootDisplayData.softMicrocodeIDString, NIL, FloppyEditInternal.heap];    String.Replace[      @rootDisplayData.germIDString, NIL, FloppyEditInternal.heap];    String.Replace[      @rootDisplayData.pilotIDString, NIL, FloppyEditInternal.heap];    String.Replace[      @rootDisplayData.alternateMicrocodeIDString, NIL,      FloppyEditInternal.heap];    rootData[hardMicrocode].da.head ¬ rootDisplayData.hardMicrocodeHead;    rootData[hardMicrocode].da.sector ¬ rootDisplayData.hardMicrocodeSector;    rootData[softMicrocode].da.head ¬ rootDisplayData.softMicrocodeHead;    rootData[softMicrocode].da.sector ¬ rootDisplayData.softMicrocodeSector;    rootData[germ].da.head ¬ rootDisplayData.germHead;    rootData[germ].da.sector ¬ rootDisplayData.germSector;    rootData[pilot].da.head ¬ rootDisplayData.pilotHead;    rootData[pilot].da.sector ¬ rootDisplayData.pilotSector;    rootData[alternateMicrocode].da.head ¬ rootDisplayData.alternateMicrocodeHead;    rootData[alternateMicrocode].da.sector ¬      rootDisplayData.alternateMicrocodeSector;    FloppyEditInternal.heap.FREE[@rootDisplayData];    rootDisplayData ¬ NIL;    END;  FillBootRootSW: PROCEDURE =    -- Make display match data buffer.    BEGIN    -- Only things which do not occupy integral word(s) are copied to local    -- variables.  Everything else just accesses the actual root page.    ReplaceFileIDString[      @rootDisplayData.hardMicrocodeIDString, rootData[hardMicrocode].fID];    ReplaceFileIDString[      @rootDisplayData.softMicrocodeIDString, rootData[softMicrocode].fID];    ReplaceFileIDString[      @rootDisplayData.germIDString, rootData[germ].fID];    ReplaceFileIDString[      @rootDisplayData.pilotIDString, rootData[pilot].fID];    ReplaceFileIDString[      @rootDisplayData.alternateMicrocodeIDString,      rootData[alternateMicrocode].fID];    rootDisplayData.hardMicrocodeHead ¬ rootData[hardMicrocode].da.head;    rootDisplayData.hardMicrocodeSector ¬ rootData[hardMicrocode].da.sector;    rootDisplayData.softMicrocodeHead ¬ rootData[softMicrocode].da.head;    rootDisplayData.softMicrocodeSector ¬ rootData[softMicrocode].da.sector;    rootDisplayData.germHead ¬ rootData[germ].da.head;    rootDisplayData.germSector ¬ rootData[germ].da.sector;    rootDisplayData.pilotHead ¬ rootData[pilot].da.head;    rootDisplayData.pilotSector ¬ rootData[pilot].da.sector;    rootDisplayData.alternateMicrocodeHead ¬ rootData[alternateMicrocode].da.head;    rootDisplayData.alternateMicrocodeSector ¬      rootData[alternateMicrocode].da.sector;    END;  -- FillBootRootSW  MakeBootRootSW: PUBLIC FormSW.ClientItemsProcType =    BEGIN    nItems: CARDINAL = FormItems.LAST.ORD + 1;    rootData ¬ LOOPHOLE[FloppyEditInternal.data.sectorBuffer];    rootDisplayData ¬ FloppyEditInternal.heap.NEW[RootDisplayData];    items ¬ FormSW.AllocateItemDescriptor[nItems];    items[FormItems.bootingRoot.ORD] ¬ FormSW.TagOnlyItem[      tag: "Booting root page"L, place: [3, FormSW.line0]];    -- This is the quick and dirty method.  Consider parameterized loop.    items[FormItems.hardMicrocode.ORD] ¬ FormSW.TagOnlyItem[      tag: "hard microcode:"L, place: [8, FormSW.nextLine]];    items[FormItems.hardMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "FileID "L, inHeap: FALSE, place: FormSW.nextPlace,      string: @rootDisplayData.hardMicrocodeIDString, readOnly: TRUE];    items[FormItems.hardMicrocodeFirstPage.ORD] ¬ FormSW.LongNumberItem[      tag: "first page "L, place: [12, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, radix: octal, default: 177777B,      value: @rootData[hardMicrocode].firstPage];    items[FormItems.hardMicrocodeDA.ORD] ¬ FormSW.TagOnlyItem[      tag: "DA:"L, place: [12, FormSW.nextLine]];    items[FormItems.hardMicrocodeDACylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootData[hardMicrocode].da.cylinder];    items[FormItems.hardMicrocodeDAHead.ORD] ¬ FormSW.NumberItem[      tag: "head: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.hardMicrocodeHead];    items[FormItems.hardMicrocodeDASector.ORD] ¬ FormSW.NumberItem[      tag: "sector: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.hardMicrocodeSector];    items[FormItems.softMicrocode.ORD] ¬ FormSW.TagOnlyItem[      tag: "soft microcode:"L, place: [8, FormSW.nextLine]];    items[FormItems.softMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "FileID "L, inHeap: FALSE, place: FormSW.nextPlace,      string: @rootDisplayData.softMicrocodeIDString, readOnly: TRUE];    items[FormItems.softMicrocodeFirstPage.ORD] ¬ FormSW.LongNumberItem[      tag: "first page "L, place: [12, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, radix: octal, default: 177777B,      value: @rootData[softMicrocode].firstPage];    items[FormItems.softMicrocodeDA.ORD] ¬ FormSW.TagOnlyItem[      tag: "DA:"L, place: [12, FormSW.nextLine]];    items[FormItems.softMicrocodeDACylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootData[softMicrocode].da.cylinder];    items[FormItems.softMicrocodeDAHead.ORD] ¬ FormSW.NumberItem[      tag: "head: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.softMicrocodeHead];    items[FormItems.softMicrocodeDASector.ORD] ¬ FormSW.NumberItem[      tag: "sector: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.softMicrocodeSector];    items[FormItems.germ.ORD] ¬ FormSW.TagOnlyItem[      tag: "germ:"L, place: [8, FormSW.nextLine]];    items[FormItems.germID.ORD] ¬ FormSW.StringItem[      tag: "FileID "L, inHeap: FALSE, place: FormSW.nextPlace,      string: @rootDisplayData.germIDString, readOnly: TRUE];    items[FormItems.germFirstPage.ORD] ¬ FormSW.LongNumberItem[      tag: "first page "L, place: [12, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, radix: octal, default: 177777B,      value: @rootData[germ].firstPage];    items[FormItems.germDA.ORD] ¬ FormSW.TagOnlyItem[      tag: "DA:"L, place: [12, FormSW.nextLine]];    items[FormItems.germDACylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootData[germ].da.cylinder];    items[FormItems.germDAHead.ORD] ¬ FormSW.NumberItem[      tag: "head: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B, value: @rootDisplayData.germHead];    items[FormItems.germDASector.ORD] ¬ FormSW.NumberItem[      tag: "sector: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B, value: @rootDisplayData.germSector];    items[FormItems.pilot.ORD] ¬ FormSW.TagOnlyItem[      tag: "pilot:"L, place: [8, FormSW.nextLine]];    items[FormItems.pilotID.ORD] ¬ FormSW.StringItem[      tag: "FileID "L, inHeap: FALSE, place: FormSW.nextPlace,      string: @rootDisplayData.pilotIDString, readOnly: TRUE];    items[FormItems.pilotFirstPage.ORD] ¬ FormSW.LongNumberItem[      tag: "first page "L, place: [12, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, radix: octal, default: 177777B,      value: @rootData[pilot].firstPage];    items[FormItems.pilotDA.ORD] ¬ FormSW.TagOnlyItem[      tag: "DA:"L, place: [12, FormSW.nextLine]];    items[FormItems.pilotDACylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootData[pilot].da.cylinder];    items[FormItems.pilotDAHead.ORD] ¬ FormSW.NumberItem[      tag: "head: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B, value: @rootDisplayData.pilotHead];    items[FormItems.pilotDASector.ORD] ¬ FormSW.NumberItem[      tag: "sector: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B, value: @rootDisplayData.pilotSector];    items[FormItems.alternateMicrocode.ORD] ¬ FormSW.TagOnlyItem[      tag: "alternate microcode:"L, place: [8, FormSW.nextLine]];    items[FormItems.alternateMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "FileID "L, inHeap: FALSE, place: FormSW.nextPlace,      string: @rootDisplayData.alternateMicrocodeIDString, readOnly: TRUE];    items[FormItems.alternateMicrocodeFirstPage.ORD] ¬ FormSW.LongNumberItem[      tag: "first page "L, place: [12, FormSW.nextLine], signed: FALSE,      notNegative: TRUE, radix: octal, default: 177777B,      value: @rootData[alternateMicrocode].firstPage];    items[FormItems.alternateMicrocodeDA.ORD] ¬ FormSW.TagOnlyItem[      tag: "DA:"L, place: [12, FormSW.nextLine]];    items[FormItems.alternateMicrocodeDACylinder.ORD] ¬ FormSW.NumberItem[      tag: "cyl: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootData[alternateMicrocode].da.cylinder];    items[FormItems.alternateMicrocodeDAHead.ORD] ¬ FormSW.NumberItem[      tag: "head: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.alternateMicrocodeHead];    items[FormItems.alternateMicrocodeDASector.ORD] ¬ FormSW.NumberItem[      tag: "sector: "L, place: FormSW.nextPlace, signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B,      value: @rootDisplayData.alternateMicrocodeSector];    RETURN[items, TRUE]    END;  -- MakeBootRootSW<<  ReplaceFileID: PUBLIC PROCEDURE [    pString: LONG POINTER TO LONG STRING, pID: LONG POINTER TO PilotDisk.FileID] =    BEGIN    -- Make PilotDisk.FileID of pString and store back to pID.  If it is not a    -- valid id, restore pString to string form of pID.    valid: BOOLEAN;    id: PilotDisk.FileID;    MsgSW.Clear[FloppyEditInternal.data.msgSW];    [valid, id] ¬ ValidateFileID[pString^];    IF valid THEN pID^ ¬ id    ELSE      BEGIN      FloppyEditInternal.Msg["Invalid ID"L, TRUE];      ReplaceFileIDString[pString, pID^];      END;    END;  -- ReplaceFileID>>  ReplaceFileIDString: PUBLIC PROCEDURE [    heapString: LONG POINTER TO LONG STRING, id: PilotDisk.FileID] =    BEGIN    -- Replaces string pointed to by heapString by a string it makes of id.    s: STRING ¬ [50];    p: POINTER TO ARRAY [0..SIZE[PilotDisk.FileID]) OF UNSPECIFIED =      LOOPHOLE[@id];    String.AppendChar[s, '[];    FOR i: [0..SIZE[PilotDisk.FileID]) IN [0..SIZE[PilotDisk.FileID] - 1) DO      String.AppendOctal[s, p[i]];      String.AppendString[to: s, from: ", "L];      ENDLOOP;    String.AppendOctal[s, p[SIZE[PilotDisk.FileID] - 1]];    String.AppendChar[s, ']];    --assumes strings taken from system heap    String.Replace[heapString, s, FloppyEditInternal.heap];    END;  ValidateFileID: PUBLIC PROCEDURE [s: LONG STRING]    RETURNS [valid: BOOLEAN, id: PilotDisk.FileID] =    BEGIN    -- Makes and validates legal form of PilotDisk.FileID from the string supplied.    currentNumber: STRING ¬ [64];    startPos: CARDINAL;    curPos: CARDINAL;    len: CARDINAL;    subStringDesc: String.SubStringDescriptor;    subString: String.SubString ¬ @subStringDesc;    p: POINTER TO ARRAY [0..SIZE[PilotDisk.FileID]) OF UNSPECIFIED = LOOPHOLE[@id];    id ¬ PilotDisk.nullFileID;    valid ¬ TRUE;    -- Skip over any leading characters that are not octal digits    FOR startPos IN [0..s.length) DO      IF s[startPos] IN ['0..'7] THEN EXIT;      REPEAT FINISHED => GO TO nullReturn;  -- a bogus ID was given      ENDLOOP;    -- Now process each word of the ID    FOR word: [0..SIZE[PilotDisk.FileID]) IN [0..SIZE[PilotDisk.FileID]) DO      -- parse each word      curPos ¬ startPos;      WHILE s[curPos] IN ['0..'7] DO        curPos ¬ curPos + 1;        IF curPos >= s.length THEN RETURN;  -- Truncate the UID        ENDLOOP;      IF s[curPos] = 'B OR s[curPos] = 'b THEN len ¬ curPos - startPos + 1      ELSE len ¬ curPos - startPos;      currentNumber.length ¬ 0;      subString^ ¬ [s, startPos, len];      String.AppendSubString[to: currentNumber, from: subString];      p[word] ¬ String.StringToOctal[        currentNumber ! String.InvalidNumber => GO TO nullReturn];      startPos ¬ startPos + len;      UNTIL s[startPos] IN ['0..'7] DO        startPos ¬ startPos + 1;        IF startPos >= s.length THEN RETURN;  -- Truncate the UID        ENDLOOP;      ENDLOOP;    EXITS nullReturn => RETURN[FALSE, PilotDisk.nullFileID];    END;  -- ValidateFileID  -- Module initialization:  -- Register this subwindow as an alternate view for the data subwindow  WindowSwap.RegisterView[    key: FloppyEditInternal.swapWindowKey, viewName: "BootingRootPage"L,    makeFormSW: MakeBootRootSW, viewFromDataProc: FillBootRootSW,    dataFromViewProc: CleanupBootRootSW, destroyViewProc: DestroyBootRootSW];  END.LOG 4-Feb-87  9:24:28   CAJ	Created file. 2-Oct-87 13:05:04   RSV        Get rid of LineN (never used).