-- Copyright (C) 1984, 1986  by Xerox Corporation. All rights reserved. -- VMTomP.mesa    (last edited by RSV        17-Dec-86 14:22:38)DIRECTORY  ResMemPerf USING [swapOutPagesReclaimed],  System USING [PulsesToMicroseconds],  TomP,  VMPerf USING [    batches, forceOuts, mapPulses, maps, operations, pageFaultInputs,    pageFaultPagesInput, pageFaultPulses, pageFaults, queuedOperations,    queuedOperationsDelayed, swapBufferEmergencyAllocations,    swapBufferMaxBackupsUsed, swapBufferTotalAllocations,    swapBufferWaits, swapOutJobPulses, swapOutJobs, swapOutOutputs,    swapOutPagesActuallyOutput, unmaps];  VMTomP:   PROGRAM  IMPORTS ResMemPerf, System, TomP, VMPerf =  BEGIN    operations, maps, mapMicrosecs, ltAvgMapMicrosecs, stAvgMapMicrosecs, unmaps,    forceOuts, batches, prevMaps, prevMapMicrosecs,  pageFaults, pageFaultMicrosecs, ltAvgPageFaultMicrosecs,    stAvgPageFaultMicrosecs, pageFaultInputs, pageFaultPagesInput,    prevPageFaults, prevPageFaultMicrosecs,  swapOutJobs, swapOutJobMicrosecs, ltAvgSwapOutJobMicrosecs,    stAvgSwapOutJobMicrosecs, swapOutPagesReclaimed, swapOutPagesActuallyOutput,    swapOutOutputs, prevSwapOutJobs, prevSwapOutJobMicrosecs,  queuedOperations, queuedOperationsDelayed,  swapBufferTotalAllocations, swapBufferEmergencyAllocations,    swapBufferMaxBackupsUsed, swapBufferWaits: LONG CARDINAL ¬ 0;    UpdateVariables: TomP.UpdateVariablesProcType =    BEGIN        -- VMOps    operations ¬ VMPerf.operations;    maps ¬ VMPerf.maps;    mapMicrosecs ¬ System.PulsesToMicroseconds[VMPerf.mapPulses];    ltAvgMapMicrosecs ¬       (IF maps = 0 THEN 0 ELSE mapMicrosecs/maps);    stAvgMapMicrosecs ¬       (IF maps=prevMaps THEN 0       ELSE (mapMicrosecs-prevMapMicrosecs)/(maps-prevMaps));    unmaps ¬ VMPerf.unmaps;    forceOuts ¬ VMPerf.forceOuts;    batches ¬ VMPerf.batches;    prevMaps ¬ maps;    prevMapMicrosecs ¬ mapMicrosecs;        -- PageFaults    pageFaults ¬ VMPerf.pageFaults;    pageFaultMicrosecs ¬ System.PulsesToMicroseconds[VMPerf.pageFaultPulses];    ltAvgPageFaultMicrosecs ¬       (IF pageFaults = 0 THEN 0 ELSE pageFaultMicrosecs/pageFaults);    stAvgPageFaultMicrosecs ¬       (IF pageFaults=prevPageFaults        THEN 0        ELSE         (pageFaultMicrosecs-prevPageFaultMicrosecs)/(pageFaults-prevPageFaults));    pageFaultInputs ¬ VMPerf.pageFaultInputs;    pageFaultPagesInput ¬ VMPerf.pageFaultPagesInput;    prevPageFaultMicrosecs ¬ pageFaultMicrosecs;    prevPageFaults ¬ pageFaults;        -- SwapOutData    swapOutJobs ¬ VMPerf.swapOutJobs;    swapOutJobMicrosecs ¬         System.PulsesToMicroseconds[VMPerf.swapOutJobPulses];    ltAvgSwapOutJobMicrosecs ¬       (IF swapOutJobs = 0 THEN 0 ELSE swapOutJobMicrosecs/swapOutJobs);    stAvgSwapOutJobMicrosecs ¬       (IF swapOutJobs=prevSwapOutJobs       THEN 0        ELSE (swapOutJobMicrosecs-prevSwapOutJobMicrosecs) /              (swapOutJobs-prevSwapOutJobs));    swapOutPagesReclaimed ¬ ResMemPerf.swapOutPagesReclaimed;    swapOutPagesActuallyOutput ¬ VMPerf.swapOutPagesActuallyOutput;    swapOutOutputs ¬ VMPerf.swapOutOutputs;    prevSwapOutJobMicrosecs ¬ swapOutJobMicrosecs;    prevSwapOutJobs ¬ swapOutJobs;        -- QueuedVMOps    queuedOperations ¬ VMPerf.queuedOperations;    queuedOperationsDelayed ¬ VMPerf.queuedOperationsDelayed;        -- SwapBufferData    swapBufferTotalAllocations ¬ VMPerf.swapBufferTotalAllocations;    swapBufferEmergencyAllocations ¬ VMPerf.swapBufferEmergencyAllocations;    swapBufferMaxBackupsUsed ¬ VMPerf.swapBufferMaxBackupsUsed;    swapBufferWaits ¬ VMPerf.swapBufferWaits;        END;      GetVMOpsVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["operations", @operations]];      1 => RETURN [["maps", @maps]];      2 => RETURN [["mapTime", @mapMicrosecs]];      3 => RETURN [["ltAverageMapTime", @ltAvgMapMicrosecs, FALSE]];      4 => RETURN [["stAverageMapTime", @stAvgMapMicrosecs, FALSE]];      5 => RETURN [["unmaps", @unmaps]];      6 => RETURN [["forceOuts", @forceOuts]];      7 => RETURN [["batches", @batches]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetPageFaultsVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["faults", @pageFaults]];      1 => RETURN [["time", @pageFaultMicrosecs]];      2 => RETURN [["ltAverageTime", @ltAvgPageFaultMicrosecs, FALSE]];      3 => RETURN [["stAverageTime", @stAvgPageFaultMicrosecs, FALSE]];      4 => RETURN [["inputs", @pageFaultInputs]];      5 => RETURN [["pagesInput", @pageFaultPagesInput]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetSwapOutDataVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["jobs", @swapOutJobs]];      1 => RETURN [["jobTime", @swapOutJobMicrosecs]];      2 => RETURN [["ltAverageJobTime", @ltAvgSwapOutJobMicrosecs, FALSE]];      3 => RETURN [["stAverageJobTime", @stAvgSwapOutJobMicrosecs, FALSE]];      4 => RETURN [["pagesReclaimed", @swapOutPagesReclaimed]];      5 => RETURN [["pagesActuallyOutput", @swapOutPagesActuallyOutput]];      6 => RETURN [["outputs", @swapOutOutputs]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetQueuedVMOpsVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["ops", @queuedOperations]];      1 => RETURN [["delayedOps", @queuedOperationsDelayed]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetSwapBufferDataVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["allocs", @swapBufferTotalAllocations]];      1 => RETURN [["emergencyAllocs", @swapBufferEmergencyAllocations]];      2 => RETURN [["maxBackupsUsed", @swapBufferMaxBackupsUsed]];      3 => RETURN [["waits", @swapBufferWaits]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      [] ¬ TomP.Register[name:"VMOps", nVariables:8,  		getVariableProc:GetVMOpsVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"PageFaults", nVariables:6,  		getVariableProc: GetPageFaultsVariable, 		updateVariablesProc: UpdateVariables];		  [] ¬ TomP.Register[name:"SwapOutData", nVariables:7,  		getVariableProc:GetSwapOutDataVariable, 		updateVariablesProc:UpdateVariables];		      [] ¬ TomP.Register[name:"QueuedVMOps", nVariables:2,  		getVariableProc:GetQueuedVMOpsVariable, 		updateVariablesProc:UpdateVariables];		      [] ¬ TomP.Register[name:"SwapBufferData", nVariables:4,  		getVariableProc:GetSwapBufferDataVariable, 		updateVariablesProc:UpdateVariables];		      END.  LOG29-Apr-83 11:36:51	JXG      temporarily use 0 instead of swapOutPagesReclaimed 3-May-83 13:31:32	JXG       compute average times for maps, pagefaults, swapout jobs30-Jan-84 11:00:55	AWL         swapOutPagesReclaimed is now exported by Pilot so use it. 2-Feb-84  9:55:42	AWL         compute both short term and long term averages.17-Dec-86 14:22:38      RSV   Fix AR 9584 that ltAvg* could divide by zero.