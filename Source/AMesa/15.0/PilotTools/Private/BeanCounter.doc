Subject: [Dewey:]<newP> ¬ BeanCounter.bcd!3To: SDD-Pilot, Neely, PurvesReply-to: KrauterMotto: "Slow to mature but quality that will last!"This is a LABELLESS-re-re-issue of the same tool I stored yesterday and the day before -- I added ~another~ little something: now you have to specify the logical volume you want it to tabulate (and it need not be the volume you are running the hack on)...It's called BeanCounter, and what it really tabulates is runs (page groups) on your disk.  You type "BeanCounter.bcd" into the exec and it registers the command "CountBeans.~".  Type "CountBeans.~ <volume>" into the exec and you get to watch it puruse etable of the logical volume specified in the command line.  It prints out a little dot for file etable entry it's purused, and it takes about 2 seconds to do a 35000 page volume.  Then it'll spew out a bunch of numbers, telling you mainly about the logical volume's fragmentation (see the end of the msg).  It's kinda simple, so I invite interested parties to improve on it (like Charlie did do adapt it to a tty interface).Files stored are:	[Dewey:]<newP>BeanCounter.df	[Dewey:]<newP>BeanCounter.doc (just this message)	[Dewey:]<newP>BeanCounter.bcd	[Dewey:]<newP>BeanCounter.mesaRestrictions and comments:        <>In this labelless version, free page accounting is broken for now.	    I need to find a new way to count free page runs, since	    info isn't contained in a free-page-file anymore.  poop.	<>The current code can only handle up to 5000 files on an LV	    -- but this is easily increased (or decreased), and the	    number of free pages required to run it adjust accordingly.	<>I think the Help and Unload procs for this ("CountBeans")	    work okay.	<>I think the code is documented well enough to be able to	    change it.	<>There must be about 60 free pages on your LV.  When you	    run it, you'll see your free page count drop by about	    this much (and the printed statistics will reflect the	    decreased number).  Upon completion, the pages are	    recovered of course!	<>The printed statistics are perturbed by the taking of the	    statistics in the following ways:	    Total temporary files is inc'ed by one.	    Total free pages is dec'ed by about 60.	    Total allocated pages is inc'ed by about 60.	    Total number of runs is inc'ed by about 1.	    The Run size distribution count for runs between	      50 and 200 pages is bumped by about 1.	    Here is a sample of the information it spews out when it's finished:>CountBeans.~ CoPilot.........!.........!.........!.........!..... [...]*	Total PAGES, ALLOCATED, FREE on this LV: 34276 , 24156 , 10330**,***	Total FILES, OVERFLOW, TEMPORARY, ANONYMOUS on this LV: 475 , 6 , 6 , 4****	Total number of runs on this LV: 923*****	Biggest ALLOCATED, FREE run size on this LV: 2209 , 0******	Ave and Max number of runs in a file on this LV: 1 and 54		(file ID of most fragmented file is 101715B , 0B)	VMBACKINGFILE, VAM, ETABLEFILE, ETABLEFILE COPY run count: 3 , 0 , 28 , 28	Run distribution across entire LV			alloc	free  runs-in-file*******		size	count	count	count		1	75	0	377		2	110	0	49		3	37	0	20		4	39	0	7		5	56	0	4		6	47	0	2		7	40	0	0		8	37	0	1		9	35	0	0	 = 10 & < 20	224	0	9	 = 20 & < 50	148	0	5	 = 50 & <200	66	0	1	 =200 & < 1K	5	0	0		>=1K	4	0	0	**Total pages     [The total pages number is lifted from the lv root page.  The free page number is also lifted from there.  The alloc'ed pages number is derived from adding up all the pages used up by files as accounted for in the etable.  The discrepancy is between what the lv root page thinks is true and what I count with this hack in a nonfrozen world, I think.]**Total files     [This number should be equal to the sum of the temporaryFiles, anonymousFiles, filesVisibleToYou (** with the file tool, eg), plus three.]***Total overflow     [This is the portion of the total file list that are stored in the overflow section of the etable.  These are a tad more difficult to access.]****Total number of runs    [this means allocated runs.  I didn't total up the free runs...]*****Biggest allocated run   [probably my bootfile... The free run number is bogus because free page accounting is broken for now.]******Ave and Max number of runs  [These two numbers are a summary statement about how fragmented the files as a whole are on this volume.  The first number is just the total number of files divided by the total number of (allocated) runs on this volume -- usually just one page.  The second number is the number of runs found in the most fragmented file -- typically a mail file (use FileStat/s to find out).]*******Run distribution [The first column is a count.  The second column is the \number/ of allocated runs that have that many pages in them.  The summation of the second column should add up to the figure shown for "Total number of runs".  The third column is the number of free runs that have that many pages in them (bogus because free page accounting is broken).  The fourth column is the different one: this is the number of files that are fragmented into that number of page groups.]/karey-------------------------------------------------------------------------