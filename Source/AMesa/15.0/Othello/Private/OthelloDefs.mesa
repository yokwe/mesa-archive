-- File: OthelloDefs.mesa - last edit:-- Riggle.PA           12-Jan-87 16:06:45-- OthelloDefs.mesa (last edited by: RXJ      19-Apr-83 10:54:58)-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Device         USING [Type],  Environment    USING [bytesPerWord, wordsPerPage],  PhysicalVolume USING [Handle, ID],  System         USING [GreenwichMeanTime],  Volume         USING [ID, Type];OthelloDefs: DEFINITIONS =  BEGIN  CommandProcessor: TYPE = RECORD [    proc: PROC [index: CARDINAL], next: LONG POINTER TO CommandProcessor _ NULL];  MyNameIs:        SIGNAL [myNameIs: LONG STRING, myHelpIs: LONG STRING];    -- resuming executes command  AbortingCommand: ERROR [reason: LONG STRING, reasonOne: LONG STRING _ NIL];  IndexTooLarge:   ERROR;  Question:        SIGNAL;    RegisterCommandProc: PROC [commandProc: LONG POINTER TO CommandProcessor];    ConfirmType: TYPE = {once, twice, thrice};  EchoNoEcho:  TYPE = {echo, stars};  -- Utility Io   Confirm:               PROC [how: ConfirmType _ once];  DebugAsk:              PROC;  GetName:               PROC [    prompt: LONG STRING, dest: LONG POINTER TO LONG STRING,    how: EchoNoEcho _ echo, signalQuestion: BOOLEAN _ FALSE];  ReadNumber:            PROC [    prompt: LONG STRING, min, max: LONG CARDINAL,    default: LONG CARDINAL _ LAST[LONG CARDINAL]]    RETURNS [ans: LONG CARDINAL];  ReadShortNumber:       PROC [    prompt: LONG STRING, min, max, default: LONG CARDINAL]    RETURNS [CARDINAL];  WriteFixedWidthNumber: PROC [    x: LONG CARDINAL, count: CARDINAL, base: CARDINAL _ 10];  WriteLongNumber:       PROC [num: LONG CARDINAL];  WriteOctal:            PROC [CARDINAL];  Yes:                   PROC [LONG STRING] RETURNS [BOOLEAN];  -- Basic IO  Cursor:            TYPE = {pointer, ftp};  SetCursor:         PROC [Cursor];  FlipCursor:        PROC;  SetCommandString:  PROC [LONG STRING];  -- string will be freed to Storage.  BlinkDisplay:      PROC;  CheckUserAbort:    PROC;  -- clients should prepare UNWIND in case of abort.  NewLine:           PROC;  ReadChar:          PROC RETURNS [CHARACTER];  WriteChar:         PROC [CHARACTER];  WriteLine:         PROC [LONG STRING];  WriteString:       PROC [LONG STRING];  PackedTimeFromString: PROC [s: LONG STRING, justDate: BOOLEAN]    RETURNS [System.GreenwichMeanTime];    --  string format must be:     --    IF justDate=FALSE THEN bDD-MMM-YYbbHH:MM:SSbbZZTb    --    IF justDate=TRUE  THEN bDD-MMM-YYb    --  return System.gmtEpoch for bogus time   -- Exported by VolumeInitImplA  GetLvIDFromUser: PROC [    prompt: LONG STRING _ NIL, calledFromSetDebuggerPtrs: BOOLEAN _ FALSE]    RETURNS [      pvID: PhysicalVolume.ID, lvID: Volume.ID,      drive: PhysicalVolume.Handle];  GetLvTypeFromUser: PROC [prompt: LONG STRING, defaultType: Volume.Type]    RETURNS [t: Volume.Type];  GetDriveFromUser:  PROC RETURNS [h: PhysicalVolume.Handle];  GetDriveNumber:    PROC [h: PhysicalVolume.Handle] RETURNS [CARDINAL];  GetDriveType:      PROC [h: PhysicalVolume.Handle] RETURNS [Device.Type];    -- Get bits interface for Initial ucode fetch  FetchInitialMicrocode: PROC [    InstallProc: PROC [getPage: PROC RETURNS [LONG POINTER]]];  -- Clean up any outstanding ftp/stp/?? like connections  CloseFetch: PROC;    -- leader pages on boot files  leaderPages: CARDINAL = 1;    lpVersion: CARDINAL = 04193;    lpNoteOffset: PRIVATE CARDINAL = 2;    lpNoteLength: CARDINAL =    (Environment.wordsPerPage-lpNoteOffset)*Environment.bytesPerWord;    LeaderPage: TYPE = MACHINE DEPENDENT RECORD [    version(0): CARDINAL _ lpVersion,    length(1): CARDINAL, -- count of characters in note    note(lpNoteOffset): PACKED ARRAY [0..lpNoteLength) OF CHARACTER];    -- test for special commands enabled  Wizard: PROC RETURNS [BOOLEAN];    -- Crock to make >@[foo]baz work  AlternateGetCMFile: PROC [LONG STRING];    -- aids for othello varients implementing canned scripts (prometheus)  GetCannedScript: PROC;  SuppressOutput:  PROC RETURNS [BOOLEAN];  ThereIsAnError:  PROC;    END....