-- Copyright (C) 1980, 1981  by Xerox Corporation. All rights reserved. -- Queue.mesa; edited by RXJ     ; 18-Nov-80  8:28:47DIRECTORY  Stream USING [Handle];Queue: DEFINITIONS =  BEGIN  -- Queues are double ended queues of bytes (usually CHARACTERS).  Bytes may be added or  -- removed at either the front or the rear of the queue.  Storage for the QHead is the  -- responsibility of the client.  Storage for the data is allocated from Heap.systemZone.  ShortQ: TYPE = POINTER TO QHead;  Q: TYPE = LONG POINTER TO QHead;  QHead: TYPE [2*SIZE[LONG POINTER]];  EmptyQ: SIGNAL [q: Q];  -- a Get applied to an empty Q raises this  -- signal.  Resuming causes the get to return zero.  Init: PROCEDURE RETURNS [QHead];  -- Initial value for QHeads  IsEmpty: PROCEDURE [q: Q] RETURNS [BOOLEAN];  Empty: PROCEDURE [q: Q];  -- Make it empty  GetF: PROCEDURE [q: Q] RETURNS [i: UNSPECIFIED [0..255]];  -- Get Front  GetR: PROCEDURE [q: Q] RETURNS [i: UNSPECIFIED [0..255]];  -- Get Rear  PutF: PROCEDURE [q: Q, i: UNSPECIFIED [0..255]];  -- Put Front  PutR: PROCEDURE [q: Q, i: UNSPECIFIED [0..255]];  -- Put Rear  Count: PROCEDURE [q: Q] RETURNS [elements: CARDINAL];  -- number of bytes in Q  Concatenate: PROCEDURE [q1, q2: Q] RETURNS [result: QHead];  -- q1 and q2 are emptied into result  Copy: PROCEDURE [from, to: Q];  -- contents of from appended to rear of to; from unchanged  QFToString: PROCEDURE [q: Q, s: LONG STRING];  -- empties q into s  QFToStream: PROCEDURE [q: Q, s: Stream.Handle];  -- empties q into s  StringToQR: PROCEDURE [s: LONG STRING, q: Q];  -- appends bytes in s to rear of q; s unchanged  StreamToQR: PROCEDURE [s: Stream.Handle, q: Q];  -- reads bytes from s appending to rear of q until Stream.EndOfStream  END...