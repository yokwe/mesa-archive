-- BuiltInTools.pack - last edited by:-- RXR   ,	 1-Mar-83 15:29:19 -- LXR    ,	13-Jan-84 15:29:12 -- MEW		 3-May-85 15:22:55BuiltInTools: SEGMENT = {  DictionaryImpl: CODE PACK = {    DictionaryImpl;    };  DictionaryTool: CODE PACK = {    DictionaryTool;    };  FileInterface: CODE PACK = {    FileInterface;    };  FileSupport: CODE PACK = {    FileSupport;    };  HeraldWindowsA: CODE PACK = {    HeraldWindowsA;    };  Time: CODE PACK = {    HeraldWindowsB[ENTRY VECTOR, PaintTime, PainterInternal, PaintPages];    };  TIP: CODE PACK = {   HeraldWindowsB[HeraldSWTIP, HeraldTIP, NotInVolumeBox];   };  TinyTime: CODE PACK = {   HeraldWindowsB[GetFree, Tick, TickOn];   };  Cursor: CODE PACK = {   HeraldWindowsB[     FreeCursorSlot, GetCursorSlot, SetCursor, StoreCursor,      SetCursorState, InvertCursor, PaintCursor];    };  ColdTime: CODE PACK = {   HeraldWindowsB[     AppendVersion, AppendWeekday, AppendMonth, Bold, PaintVolumeInfo];    };  Orphans: CODE PACK = {   HeraldWindowsB EXCEPT Time, TinyTime, Cursor, TIP, ColdTime;    };  ProfileTool: CODE PACK = {    ProfileTool;    };  Protect: CODE PACK = {    Protect EXCEPT BuiltInToolsHelp;    };  SearchPathCold: CODE PACK = {    SearchPathControl[ENTRY VECTOR, MAIN, Initialize, CATCH CODE];    SearchPathImpl[      ENTRY VECTOR, MAIN, Initialize, CATCH CODE];    };  SearchPathHot: CODE PACK = {    SearchPathControl[      FileSystemEvent, AddOneToDirNames, MakeDirMenu, MakeSpMenu,      RemoveOneFromDirNames, RemoveVolumeFromDirNames, SetCurrentCopy,      UpdateDirMenu, GetNextVolumeName, KillSpMenu, KillDirMenu, Write,      Writeln, WriteMFileError, PushFromMenu, PushProc, PopProc];    SearchPathImpl[      Push, FullName, WriteCurrentSearchPath, PushWD, Pop, PopWD,       GetCurrent, FreeSearchPath];    };      SearchPathWarm: CODE PACK = {    SearchPathControl[      MakeForm, CWDProc, SetProc, CreateProc, DestroyProc,      MakeSWs, Cleanup, ThrowOutFromMenu];    SearchPathImpl[      CreateDir, ConvertStringToSearchPath, StringToSearchPath, CWD,      CmdLineToSearchPath, Cwd, CreateWD, WriteMFileError];    };  BuiltInToolsHelp: CODE PACK = {    Protect[Help];    SearchPathImpl[CreateDirHelp, ShowSearchPathHelp, CWDHelp, PopHelp, PushHelp,       SetSearchPathHelp];    }; };  -- end of BuiltInTools  Executive: SEGMENT = {  ExecHotPack: CODE PACK = {    ExecsE[ENTRY VECTOR, LookupCommand];    Queues[ENTRY VECTOR, Empty, Init, GetF, IsEmpty];    ExecsA[      ENTRY VECTOR, ExecuteFromHandle, CallCheckForAbort,      FeedbackProc, FlushPendingInput, MustRunBcd, RemoveUpArrows];    ExecImpl[ENTRY VECTOR, CreateExec];    };      ExecImpl: CODE PACK = {    ExecImpl EXCEPT ExecHotPack, ExecColdPack, ExecHelp;        };  ExecsA: CODE PACK = {    ExecsA EXCEPT ExecHotPack, ExecAutoLoadPack, ExecColdPack, UtilsPack, ExecHelp;    };  ExecsB: CODE PACK = {    ExecsB EXCEPT ExecColdPack, RunPack, ExecHelp;    };  ExecsC: CODE PACK = {    ExecsC EXCEPT ExecColdPack, FileStat, FilesPack, UtilsPack, ExecHelp;    };  ExecsD: CODE PACK = {    ExecsD EXCEPT ExecColdPack, UtilsPack;    };  ExecsE: CODE PACK = {    ExecsE EXCEPT ExecHotPack, ExecColdPack, ExecHelp;    };      ExecsF: CODE PACK = {    ExecsF EXCEPT ExecColdPack;    };  Queues: CODE PACK = {    Queues EXCEPT ExecHotPack, ExecAutoLoadPack, ExecColdPack;    };      SimpleExec: CODE PACK = {    SimpleExec EXCEPT ExecColdPack;    };      ExpandImpl: CODE PACK = {    ExpandImpl EXCEPT ExecColdPack;    };  ExecAutoLoadPack: CODE PACK = {    ExecsA[GetSubsysName, GetPreExpandedCommand, XferQWhile];    Queues[Count, PutR, Concatenate, QFToString, StringToQR];    };      ExecColdPack: CODE PACK = {    ExecImpl[MAIN, Init, PrintGreeting];    ExecsA[MAIN, Init];    ExecsB[MAIN, Init];    ExecsC[MAIN, Init];    ExecsD[MAIN];    ExecsE[MAIN, InitExec];    ExecsF[MAIN, Init];    ExpandImpl[MAIN];    Queues[MAIN, StreamToQR, FullElement];    SimpleExec[MAIN,InitExec];    };  RunPack: CODE PACK = {    ExecsB[      RunCommand, RunInternal, LoadInternal, ProcessSwitches,      SetDefaultState, Start, StartCommand, LoadCommand, AddExtension, Load];    };      FileStat: CODE PACK = {    ExecsC[FileStat];  };    UtilsPack: CODE PACK = {    ExecsC[      GetTokenDiscardSwitches, Inswitches, OpenVolume, InternalOpenVolume,      CloseVolume, InternalCloseVolume];    ExecsA[FreeTokenString];    ExecsD[MapClientVolumeNameToID];  };    FilesPack: CODE PACK = {    ExecsC[      Copy, Delete, Rename, SnarfFiles];  };    ExecHelp: CODE PACK = {    ExecImpl[HelpSetPriority];    ExecsA[HelpErrorLevel];    ExecsB[RunHelp, LoadHelp, StartHelp];    ExecsC[CopyHelp, CloseVolumeHelp, DeleteHelp, FilestatHelp,           OpenVolumeHelp, ProcessInBackgroundHelp, ProcessInNormalPriorityHelp,	   RenameHelp, SetClientVolumeHelp, SnarfHelp, TypeHelp, ZapHelp];    ExecsE[CallUserUnloadHelp, AliasHelp, RenameCommandHelp, HelpHelp, CallHelp,           HelpUnload];    };     }; -- end of ExecutiveHeraldAndMiscFrames: FRAME PACK = {  FileInterface; FileSupport; HeraldWindowsA; HeraldWindowsB;  ProfileTool};  MiscFrames: FRAME PACK = {  SearchPathControl; SearchPathImpl; DictionaryImpl; DictionaryTool; Protect};  ExecFrames: FRAME PACK = {  ExecImpl; ExecsA; ExecsB; ExecsC; ExecsD; ExecsE; ExecsF; ExpandImpl;  Queues; SimpleExec};