-- File: FormSW.mesa - last edited:-- SXW   	10-Jul-81  9:43:58-- JGS		12-Nov-81 14:50:47-- Mark		Jul 2, 1980 4:39 PM-- LXR    	14-Sep-82 14:14:59-- PXK    	 8-Nov-82 17:47:23-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  TextData USING [MarkingAction, SelectionMode],  TextSource USING [Handle],  ToolWindow USING [AdjustProcType, State],  Window USING [Handle, Place];FormSW: DEFINITIONS =  BEGIN  -- PROCEDURE TYPEs  ClientItemsProcType: TYPE = PROCEDURE [sw: Window.Handle]    RETURNS [items: ItemDescriptor, freeDesc: BOOLEAN];  EnumeratedNotifyProcType: TYPE = PROCEDURE [    sw: Window.Handle ¬ NIL, item: ItemHandle ¬ NIL, index: CARDINAL ¬ nullIndex,    oldValue: UNSPECIFIED ¬ nullEnumeratedValue];  LongNumberNotifyProcType: TYPE = PROCEDURE [    sw: Window.Handle ¬ NIL, item: ItemHandle ¬ NIL, index: CARDINAL ¬ nullIndex,    oldValue: LONG UNSPECIFIED ¬ LAST[LONG INTEGER]];  NumberNotifyProcType: TYPE = PROCEDURE [    sw: Window.Handle ¬ NIL, item: ItemHandle ¬ NIL, index: CARDINAL ¬ nullIndex,    oldValue: UNSPECIFIED ¬ LAST[INTEGER]];  NotifyProcType: TYPE = ProcType;  ProcType: TYPE = PROCEDURE [    sw: Window.Handle ¬ NIL, item: ItemHandle ¬ NIL, index: CARDINAL ¬ nullIndex];  ReadOnlyProcType: TYPE = ProcType;  Hints: TYPE = LONG DESCRIPTOR FOR ARRAY OF LONG STRING;  FreeHintsProcType: TYPE = PROCEDURE [hints: Hints];  MenuProcType: TYPE = PROCEDURE [sw: Window.Handle, index: CARDINAL]    RETURNS [hints: Hints, freeHintsProc: FreeHintsProcType, replace: BOOLEAN];  FilterProcType: TYPE = PROCEDURE [    sw: Window.Handle, item: ItemHandle, insert: CARDINAL, string: LONG STRING];  -- Data TYPEs  Type: TYPE = {fixed, relative};  Options: TYPE = RECORD [    type: Type ¬ fixed,    boldTags: BOOLEAN ¬ TRUE,    autoScroll: BOOLEAN ¬ TRUE,    scrollVertical: BOOLEAN ¬ TRUE];  EnumeratedDescriptor: TYPE = LONG DESCRIPTOR FOR ARRAY OF Enumerated;  Enumerated: TYPE = RECORD [string: LONG STRING, value: UNSPECIFIED];  EnumeratedFeedback: TYPE = {all, one};  Radix: TYPE = {decimal, octal};  StringFeedback: TYPE = {normal, password};  ItemType: TYPE = {    boolean, command, enumerated, longNumber, number, source, string, tagOnly};  BooleanHandle: TYPE = LONG POINTER TO boolean ItemObject;  CommandHandle: TYPE = LONG POINTER TO command ItemObject;  EnumeratedHandle: TYPE = LONG POINTER TO enumerated ItemObject;  LabelHandle: TYPE = TagOnlyHandle;  LongNumberHandle: TYPE = LONG POINTER TO longNumber ItemObject;  NumberHandle: TYPE = LONG POINTER TO number ItemObject;  SourceHandle: TYPE = LONG POINTER TO source ItemObject;  StringHandle: TYPE = LONG POINTER TO string ItemObject;  TagOnlyHandle: TYPE = LONG POINTER TO tagOnly ItemObject;  Flag: TYPE = {    clientOwnsItem, drawBox, hasContext, invisible, readOnly, modified};  ItemFlags: TYPE = RECORD [    readOnly: BOOLEAN ¬ FALSE,    invisible: BOOLEAN ¬ FALSE,    drawBox: BOOLEAN ¬ FALSE,    hasContext: BOOLEAN ¬ FALSE,    clientOwnsItem: BOOLEAN ¬ FALSE,    modified: BOOLEAN ¬ FALSE];  ItemHandle: TYPE = LONG POINTER TO ItemObject;  ItemDescriptor: TYPE = LONG DESCRIPTOR FOR ARRAY OF ItemHandle;  ItemObject: TYPE = RECORD [    tag: LONG STRING,    place: Window.Place,    flags: ItemFlags,    body: SELECT type: ItemType FROM      -- short fields are first so that they pack with the type tag      boolean => [switch: LONG POINTER TO BOOLEAN, proc: NotifyProcType],      command => [proc: ProcType],      enumerated => [        feedback: EnumeratedFeedback,        copyChoices: BOOLEAN,        value: LONG POINTER TO UNSPECIFIED,        proc: EnumeratedNotifyProcType,        choices: EnumeratedDescriptor],      longNumber => [        signed, notNegative: BOOLEAN,        radix: Radix,        boxWidth: CARDINAL [0..256),        proc: LongNumberNotifyProcType,        default: LONG UNSPECIFIED,        value: LONG POINTER TO LONG UNSPECIFIED,        string: LONG STRING,	bias: INTEGER],      number => [        signed, notNegative: BOOLEAN,        radix: Radix,        boxWidth: CARDINAL [0..128),        proc: NumberNotifyProcType,        default: UNSPECIFIED,        value: LONG POINTER TO UNSPECIFIED,        string: LONG STRING,	bias: INTEGER],      source => [        source: TextSource.Handle,        boxWidth: CARDINAL,        filterProc: FilterProcType,        menuProc: MenuProcType],      string => [        feedback: StringFeedback,        inHeap: BOOLEAN,        string: LONG POINTER TO LONG STRING,        boxWidth: CARDINAL,        filterProc: FilterProcType,        menuProc: MenuProcType],      tagOnly => [sw: Window.Handle, otherItem: CARDINAL],      ENDCASE];  WordBoolean: TYPE = RECORD [    SELECT OVERLAID * FROM f1 => [b: BOOLEAN], f2 => [w: WORD], ENDCASE];  -- Constants  lineDiff: PRIVATE INTEGER = -1;  sameLine: INTEGER = -1;  nextLine: INTEGER = -2;  line0: INTEGER = -3;  line1: INTEGER = line0 + lineDiff;  line2: INTEGER = line1 + lineDiff;  line3: INTEGER = line2 + lineDiff;  line4: INTEGER = line3 + lineDiff;  line5: INTEGER = line4 + lineDiff;  line6: INTEGER = line5 + lineDiff;  line7: INTEGER = line6 + lineDiff;  line8: INTEGER = line7 + lineDiff;  line9: INTEGER = line8 + lineDiff;  nextPlace: Window.Place = [-10, sameLine];  newLine: Window.Place = [0, nextLine];  defaultBoxWidth: CARDINAL = 0;  nullItems: ItemDescriptor = DESCRIPTOR[LONG[NIL], 0];  nullIndex: CARDINAL = LAST[CARDINAL];  nullEnumeratedValue: UNSPECIFIED = LAST[CARDINAL];  -- Operations affecting the entire subwindow  Adjust: ToolWindow.AdjustProcType;  Create: PROCEDURE [    sw: Window.Handle, clientItemsProc: ClientItemsProcType,    readOnlyNotifyProc: ReadOnlyProcType ¬ IgnoreReadOnlyProc,    options: Options ¬ [], initialState: ToolWindow.State ¬ active,    zone: UNCOUNTED ZONE ¬ NIL];  Destroy: PROCEDURE [Window.Handle];  Display: PROCEDURE [sw: Window.Handle, yOffset: CARDINAL ¬ 0];  SetOptions: PROCEDURE [sw: Window.Handle, options: Options];  Sleep: PROCEDURE [Window.Handle];  Wakeup: PROCEDURE [Window.Handle];  -- (De)Allocation  BooleanItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, proc: NotifyProcType ¬ NopNotifyProc,    switch: LONG POINTER TO BOOLEAN, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [BooleanHandle];  CommandItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, proc: ProcType, z: UNCOUNTED ZONE ¬ NIL] RETURNS [CommandHandle];  EnumeratedItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, feedback: EnumeratedFeedback ¬ one,    proc: EnumeratedNotifyProcType ¬ NopEnumeratedNotifyProc,    copyChoices: BOOLEAN ¬ TRUE, choices: EnumeratedDescriptor,    value: LONG POINTER TO UNSPECIFIED, z: UNCOUNTED ZONE ¬ NIL] RETURNS [EnumeratedHandle];  LabelItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, z: UNCOUNTED ZONE ¬ NIL] RETURNS [LabelHandle];  LongNumberItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, signed: BOOLEAN ¬ TRUE,    notNegative: BOOLEAN ¬ FALSE, radix: Radix ¬ decimal,    boxWidth: CARDINAL [0..256) ¬ 64,    proc: LongNumberNotifyProcType ¬ NopLongNumberNotifyProc,    default: LONG UNSPECIFIED ¬ LAST[LONG INTEGER],    value: LONG POINTER TO LONG UNSPECIFIED, bias: INTEGER ¬ 0,    z: UNCOUNTED ZONE ¬ NIL]    RETURNS [LongNumberHandle];  NumberItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, signed: BOOLEAN ¬ TRUE,    notNegative: BOOLEAN ¬ FALSE, radix: Radix ¬ decimal,    boxWidth: CARDINAL [0..128) ¬ 64,    proc: NumberNotifyProcType ¬ NopNumberNotifyProc,    default: UNSPECIFIED ¬ LAST[INTEGER], value: LONG POINTER TO UNSPECIFIED,    bias: INTEGER ¬ 0, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [NumberHandle];  SourceItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext, inHeap: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, boxWidth: CARDINAL ¬ defaultBoxWidth,    filterProc: FilterProcType ¬ SourceEditProc,    menuProc: MenuProcType ¬ VanillaMenuProc, source: TextSource.Handle, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [SourceHandle];  StringItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext, inHeap: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, feedback: StringFeedback ¬ normal,    boxWidth: CARDINAL ¬ defaultBoxWidth,    filterProc: FilterProcType ¬ StringEditProc,    menuProc: MenuProcType ¬ VanillaMenuProc, string: LONG POINTER TO LONG STRING, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [StringHandle];  TagOnlyItem: PROCEDURE [    tag: LONG STRING ¬ NIL,    readOnly, invisible, drawBox, hasContext: BOOLEAN ¬ FALSE,    place: Window.Place ¬ nextPlace, otherItem: CARDINAL ¬ nullIndex, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [TagOnlyHandle];  AllocateItemDescriptor: PROCEDURE [    nItems: CARDINAL, z: UNCOUNTED ZONE ¬ NIL] RETURNS [ItemDescriptor];  FreeItem: PROCEDURE [item: ItemHandle, z: UNCOUNTED ZONE ¬ NIL]    RETURNS [ItemHandle];  FreeAllItems: PROCEDURE [sw: Window.Handle];  -- Operations affecting an item (or two)  DisplayItem: PROCEDURE [sw: Window.Handle, index: CARDINAL];  GetSelection: PROCEDURE [Window.Handle]    RETURNS [index: CARDINAL, first, last: CARDINAL];  GetTypeIn: PROCEDURE [Window.Handle]    RETURNS [index: CARDINAL, position: CARDINAL];  SetCurrent: PROCEDURE [sw: Window.Handle, index: CARDINAL];  SetSelection: PROCEDURE [    sw: Window.Handle, index: CARDINAL, first, last: CARDINAL];  SetTypeIn: PROCEDURE [sw: Window.Handle, index: CARDINAL, position: CARDINAL];  SkipToNext: PROCEDURE [sw: Window.Handle];  RedisplayItem: PROCEDURE [    sw: Window.Handle, index: CARDINAL, sameSize: BOOLEAN];  ToggleFlag: PROCEDURE [sw: Window.Handle, index: CARDINAL, flag: Flag];  ToggleVisibility: PROCEDURE [sw: Window.Handle, index: CARDINAL];  -- Item marking and modification  IsItemInverted: PROCEDURE [sw: Window.Handle, index: CARDINAL]    RETURNS [yes: BOOLEAN];  MarkItem: PROCEDURE [    sw: Window.Handle, index: CARDINAL, action: TextData.MarkingAction,    mode: TextData.SelectionMode];  ModifyBoolean: PROCEDURE [    sw: Window.Handle, index: CARDINAL, mark: BOOLEAN, notify: BOOLEAN];  ModifyCommand: PROCEDURE [    sw: Window.Handle, index: CARDINAL, mark: BOOLEAN, notify: BOOLEAN];  ModifyEnumerated: PROCEDURE [    sw: Window.Handle, index: CARDINAL, mark: BOOLEAN, notify: BOOLEAN,    newValue: UNSPECIFIED];  ModifyEditable: PROCEDURE [    sw: Window.Handle, index: CARDINAL, position, length: CARDINAL,    new: LONG STRING ¬ NIL, keepTrash: BOOLEAN ¬ FALSE];  -- Utilities  BooleanChoices: PROCEDURE RETURNS [EnumeratedDescriptor];  ContextFromItem: PROCEDURE [ItemHandle] RETURNS [LONG POINTER];  FindItem: PROCEDURE [sw: Window.Handle, index: CARDINAL] RETURNS [ItemHandle];  FindIndex: PROCEDURE [sw: Window.Handle, item: ItemHandle] RETURNS [CARDINAL];  IndexFromEnumeratedValue: PROCEDURE [EnumeratedHandle] RETURNS [CARDINAL];  IsIt: PROCEDURE [sw: Window.Handle] RETURNS [yes: BOOLEAN];  LineHeight: PROCEDURE [sw: Window.Handle ¬ NIL] RETURNS [CARDINAL];  LineN: PROCEDURE [n: CARDINAL] RETURNS [INTEGER] = INLINE    BEGIN RETURN[line0 + n*lineDiff] END;  MinHeight: PROCEDURE [items: ItemDescriptor, type: Type] RETURNS [CARDINAL];  NeededHeight: PROCEDURE [Window.Handle] RETURNS [min, current: CARDINAL];  SetModifyNotificationProc: PROCEDURE [sw: Window.Handle, proc: ProcType ¬ NIL];  SetTagPlaces: PROCEDURE [    items: ItemDescriptor, tabStops: LONG DESCRIPTOR FOR ARRAY OF CARDINAL,    bitTabs: BOOLEAN];  -- Standard instances of *ProcTypes  SourceEditProc: FilterProcType;  StringEditProc: FilterProcType;  VanillaMenuProc: MenuProcType;  InHeapFreeHintsProc: FreeHintsProcType;  NopFreeHintsProc: FreeHintsProcType;  NopEnumeratedNotifyProc: EnumeratedNotifyProcType;  NopLongNumberNotifyProc: LongNumberNotifyProcType;  NopNotifyProc: NotifyProcType;  NopNumberNotifyProc: NumberNotifyProcType;  IgnoreReadOnlyProc: ReadOnlyProcType;  NopReadOnlyProc: ReadOnlyProcType;  -- SIGNALS and ERRORs  Error: SIGNAL [code: ErrorCode];  ErrorCode: TYPE = {alreadyAFormSW, notAFormSW, other};  ItemError: SIGNAL [code: ItemErrorCode, index: CARDINAL];  ItemErrorCode: TYPE = {    illegalCoordinate, notStringOtherItem, nilBackingStore, other};  END.  -- of FormSW.mesa    