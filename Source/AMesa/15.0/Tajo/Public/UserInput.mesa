-- File: [Igor]<Emerson>Tajo>Public>UserInput.mesa Last modified by:-- SXW   ,	 9-Jul-81 23:24:48-- PXK    ,	 8-Nov-82 18:10:19-- Mark,	July 2, 1980  3:35 PM-- JGS,		16-Aug-81 14:47:32-- BXM  ,	19-Nov-81 10:11:25-- SEH,  	10-Dec-81 13:50:53-- LXR    ,  	15-Oct-82 11:57:22-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Process USING [Ticks],  Window USING [Handle, Place];UserInput: DEFINITIONS =  BEGIN  AttentionProcType: TYPE = PROCEDURE [window: Window.Handle];  SetAttention: PROCEDURE [window: Window.Handle, attention: AttentionProcType];    -- periodic notifier stuff  PeriodicProcType: TYPE = PROCEDURE [window: Window.Handle, place: Window.Place];    PeriodicNotifyHandle: TYPE [1];  nullPeriodicNotify: PeriodicNotifyHandle = LOOPHOLE[LAST[CARDINAL]];  CreatePeriodicNotify: PROCEDURE [    proc: PeriodicProcType, window: Window.Handle, rate: Process.Ticks]    RETURNS [PeriodicNotifyHandle];  CancelPeriodicNotify: PROCEDURE [PeriodicNotifyHandle]    RETURNS [nil: PeriodicNotifyHandle];    --  abort stuff  UserAbort: PROCEDURE [Window.Handle] RETURNS [BOOLEAN];  SetUserAbort: PROCEDURE [Window.Handle];  ResetUserAbort: PROCEDURE [Window.Handle];  --  caret stuff  StartStop: TYPE = {start, stop};  caretRate: Process.Ticks;  CaretProcType: TYPE = PROCEDURE [window: Window.Handle, startStop: StartStop];  NopCaretProc: CaretProcType;  --  string in out and TypeIn  StringProcType: TYPE = PROCEDURE [window: Window.Handle, string: LONG STRING];  NopStringProc: StringProcType;  noSuchCharacter: CHARACTER = 377C;    CreateStringInOut: PROCEDURE [    window: Window.Handle, in, out: StringProcType,    caretProc: CaretProcType ¬ NopCaretProc];  DestroyStringInOut: PROCEDURE [Window.Handle];    CreateIndirectStringInOut: PROCEDURE [from, to: Window.Handle];  DestroyIndirectStringInOut: PROCEDURE [Window.Handle];  CreateIndirectStringOut: PROCEDURE [from, to: Window.Handle];  DestroyIndirectStringOut: PROCEDURE [Window.Handle];  CreateIndirectStringIn: PROCEDURE [from, to: Window.Handle];  DestroyIndirectStringIn: PROCEDURE [Window.Handle];  SetStringIn: PROCEDURE [    window: Window.Handle, proc: StringProcType]    RETURNS [old: StringProcType];  SetStringOut: PROCEDURE [window: Window.Handle, proc: StringProcType]    RETURNS [old: StringProcType];  StringOut: PROCEDURE [window: Window.Handle, string: LONG STRING];  StuffCharacter: PROCEDURE [window: Window.Handle, char: CHARACTER]    RETURNS [BOOLEAN];  StuffString: PROCEDURE [window: Window.Handle, string: LONG STRING]    RETURNS [BOOLEAN];  StuffCurrentSelection: PROCEDURE [window: Window.Handle] RETURNS [BOOLEAN];  StuffTrashBin: PROCEDURE [window: Window.Handle] RETURNS [BOOLEAN];  -- Confirmation stuff  WaitForConfirmation: PROCEDURE RETURNS [place: Window.Place, okay: BOOLEAN];  WaitNoButtons: PROCEDURE;  -- input focus stuff  FocusTakesInput: PROCEDURE RETURNS [BOOLEAN];  GetInputFocus: PROCEDURE RETURNS [Window.Handle];  ClearInputFocusOnMatch: PROCEDURE [w: Window.Handle];    -- called when you need to make sure you don't have InputFocus. i.e., Destroy[sw]   SetInputFocus: PROCEDURE [    w: Window.Handle, notify: PROCEDURE [Window.Handle, LONG POINTER],    takesInput: BOOLEAN, data: LONG POINTER ¬ NIL];  -- called when you want to be the input focus.  -- notify will be called when you lose it.    --  misc stuff  GetDefaultWindow: PROCEDURE RETURNS [Window.Handle];  -- errors  ErrorCode: TYPE = {    windowAlreadyHasStringInOut, noStringInOutForWindow, noSuchPeriodicNotifier,    other};  Error: ERROR [code: ErrorCode];  ReturnToNotifier: ERROR [string: LONG STRING];  END. -- of UserInput 