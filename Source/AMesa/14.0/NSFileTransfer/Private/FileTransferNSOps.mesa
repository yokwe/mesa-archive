-- File: FileTransferNSOps.mesa - last edit:-- bjd                 10-May-85 10:43:54-- Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved. DIRECTORY  FileName USING [VFN],  FileTransfer USING [Connection, FileInfo, FileType, ListProc],  FileTransferOps USING [    CatchErrorsProc, Connection, DeleteFileProc, FTHandle, GetStreamInfoProc,    ListFileProc, Operation, RenameFileProc, RetrieveFileProc, StoreFileProc,    RetrieveStreamProc, RetrieveNextStreamProc,    StoreStreamProc, CloseProc, DeleteKeepVersionsProc, Which],  NSFile USING [    Attributes, Type, Handle, Lock, nullHandle, nullSession,    Session, String],  String USING [SubString];FileTransferNSOps: DEFINITIONS =  BEGIN OPEN FileTransfer, FileTransferOps;    --   --   --   --   --   --   --   --  -- TYPES :  --   --   --   --   --   --   --   --    NSDataHandle: TYPE = LONG POINTER TO NSDataObject;  NSDataObject: TYPE = RECORD [    session: NSFile.Session ¬ NSFile.nullSession,    openHint: BOOLEAN ¬ FALSE,    pathname: LONG STRING ¬ NIL,    directory: LONG STRING ¬ NIL,    dirLength: CARDINAL ¬ 0,    body: LONG STRING ¬ NIL,    author: LONG STRING ¬ NIL,    version: LONG STRING ¬ NIL,    directoryCache: DirectoryCache ¬ NIL];  DirectoryCache: TYPE = LONG POINTER TO DirectoryCacheObject;  DirectoryCacheObject: TYPE = RECORD [    index: NATURAL ¬ 0,    rootHandle, fileHandle: NSFile.Handle ¬ NSFile.nullHandle,    elements: SEQUENCE ct: NATURAL OF DirectoryObject];    DirectoryObject: TYPE = RECORD [    handle: NSFile.Handle ¬ NSFile.nullHandle,    pathname: NSFile.String];      MyAttributesProc: TYPE = PROCEDURE [    attributes: NSFile.Attributes, clientData: LONG POINTER,    pathname: LONG STRING] RETURNS [continue: BOOLEAN ¬ TRUE];  --   --   --   --   --   --   --   --  -- CONSTANTS :  --   --   --   --   --   --   --   --  cacheSize: CARDINAL = 10;  -- NS Primitives    NSCatchErrors: CatchErrorsProc;  NSDeleteFile: DeleteFileProc;  NSListFile: ListFileProc;  NSRenameFile: RenameFileProc;  NSRetrieveFile: RetrieveFileProc;  NSStoreFile: StoreFileProc;    NSRetrieveStream: RetrieveStreamProc;  NSRetrieveNextStream: RetrieveNextStreamProc;  NSStoreStream: StoreStreamProc;    NSClose: CloseProc;  NSGetStreamInfo: GetStreamInfoProc;    DeleteKeepVersions: DeleteKeepVersionsProc;  DelVer: PROC [    conn: FileTransfer.Connection, files: FileName.VFN,    keep: CARDINAL,  proc: ListProc ¬ NIL];  -- Utilities    EnumerationClass: TYPE = MACHINE DEPENDENT {    lowest(0), highest, all, allBackward, null(7)};    -- FileTransfersNSA  NSData: PROC [c: Connection] RETURNS[NSDataHandle] = INLINE {    RETURN[ LOOPHOLE[c.nsData, NSDataHandle] ]};  MesaFileType: PROC [tNS: NSFile.Type] RETURNS [FileTransfer.FileType];  NSFileType: PROC [tM: FileTransfer.FileType] RETURNS [NSFile.Type];      -- FileTransfersNSB  GetRemoteInfo: PROC [    conn: FileTransferOps.Connection, which: FileTransferOps.Which,    attributes: NSFile.Attributes];  ConvertNSInfo: PROC [    c: FileTransferOps.Connection,    attributes: NSFile.Attributes, info: FileTransfer.FileInfo];  OpenCatalogAndEnumerate: PROC [    c: FileTransferOps.Connection, procedure: MyAttributesProc,    vfn: FileName.VFN, cmdType: FileTransferOps.Operation];    -- FileTransfersNSC  ListRemoteInfo: PROC [c: Connection, packed: LONG STRING];  OpenRoot: PROC[c: Connection] RETURNS [rootDirectory: NSFile.Handle];  OpenExisting: PROC [    c: Connection, dhPtr: POINTER TO NSFile.Handle,    fileName: String.SubString, root: LONG STRING, lock: NSFile.Lock ¬ none]    RETURNS [fh: NSFile.Handle, exists: BOOLEAN ¬ TRUE];    END.