-- File LongAlloc.mesa - Last modified by--   BXM  	20-Aug-81 11:14:25--   RES  	19-Aug-81 12:14:14--   EXS          	2-Oct-81 11:22:26--   BTL  	 9-May-83 17:49:14DIRECTORY  Environment USING [lastPageCount, wordsPerPage];LongAlloc: DEFINITIONS =   BEGIN  Selector: TYPE = CARDINAL;  Base: TYPE = LONG ORDERED BASE POINTER;  Limit: LONG CARDINAL = (     Environment.lastPageCount*LONG[Environment.wordsPerPage] - 1);   Index: TYPE = Base RELATIVE LONG POINTER --[0..Limit)--;  OrderedIndex: TYPE = Base RELATIVE LONG ORDERED POINTER --[0..Limit)--;  Handle: TYPE = LONG POINTER TO InstanceData;  InstanceData: TYPE;   -- allocation from the tables as stacks  Words: PROC [h: Handle, table: Selector, size: CARDINAL] RETURNS [OrderedIndex];  Trim: PROC [h: Handle, table: Selector, size: LONG CARDINAL]; -- allocation from free list   defaultChunkType: Selector = FIRST[Selector];    GetChunk: PROC [    h: Handle, size: CARDINAL, table: Selector _ defaultChunkType] RETURNS [Index];  FreeChunk: PROC [    h: Handle, index: Index, size: CARDINAL, table: Selector _ defaultChunkType]; -- inquiries    Bounds: PROC [    h: Handle, table: Selector] RETURNS [base: Base, size: LONG CARDINAL];  Top: PROC [h: Handle, table: Selector] RETURNS [OrderedIndex]; -- inquiries and notification of moving subtables    Notifier: TYPE = PROC [base: LONG DESCRIPTOR FOR ARRAY Selector OF Base];  AddNotify: PROC [h: Handle, proc: Notifier];  DropNotify: PROC [h: Handle, proc: Notifier]; -- initialization and termination    defaultTileSize: CARDINAL = 8;    TableInfo: TYPE = RECORD [initialPages, initialVMemPages: CARDINAL];    Create: PROC [      weights: DESCRIPTOR FOR ARRAY OF TableInfo,      tileSize: CARDINAL _ defaultTileSize]     RETURNS [Handle];  Destroy: PROC [Handle];  Reset: PROC [Handle];    Chunkify: PROC [    h: Handle, table: Selector _ defaultChunkType,     firstSmall: CARDINAL _ 3, nSmall: CARDINAL _ 4];  UnChunkify: PROC [h: Handle, table: Selector];  ResetChunk: PROC [h: Handle, table: Selector];  ResetTable: PROC [h: Handle, table: Selector, tableInfo: TableInfo];  Failure: ERROR [h: Handle, table: Selector];  Overflow: SIGNAL [h: Handle, table: Selector] RETURNS [extra: CARDINAL];  END.