-- ICLists.mesa  -- Last edited by BTL   on  6-Dec-83 18:01:48DIRECTORY  BcdDefs USING [NullVersion, VersionStamp],  LongAlloc USING [Base, Selector],  String USING [SubString],  Time USING [Packed];ICLists: DEFINITIONS =  BEGIN    Base: TYPE = LongAlloc.Base;  VersionStamp: TYPE = BcdDefs.VersionStamp;  NullVersion: VersionStamp = BcdDefs.NullVersion;  NullTime: Time.Packed = [0];    NTables: CARDINAL = 9;  fileType:    LongAlloc.Selector = 0;  -- file records  includeType: LongAlloc.Selector = 1;  -- included files  incDescType: LongAlloc.Selector = 2;  -- descriptions of included files  containType: LongAlloc.Selector = 3;  -- containing files  hostType:    LongAlloc.Selector = 4;  -- hosts  dirType:     LongAlloc.Selector = 5;  -- directories  depthType:   LongAlloc.Selector = 6;  -- file depth chain heads  markedType:  LongAlloc.Selector = 7;  -- marked files: 2 places or versions  nameType:    LongAlloc.Selector = 8;  -- file names -- File records (Bcd and source information)  firstFile: File;  File: TYPE = Base RELATIVE LONG ORDERED POINTER TO FileObject;  FNil: File = LOOPHOLE[123456701B];  FileObject: TYPE = RECORD [    name:           Name,    link:           File,          -- next File in list by ascending name    next:           File,          -- next File with same hash     bcdLoc:         Loc,    sourceLoc:      Loc,    version:        VersionStamp,  -- Bcd version stamp    bcdSourceDate:  Time.Packed,   -- from Bcd, creation date of source    sourceDate:     Time.Packed,   -- if found, creation date of source    includes:       IncludedFile,  -- files included by this one    containedBy:    ContainingFile,-- files that contain this one    nextInDepth:    File,          -- next File with same depth    includeCount:   CARDINAL,      -- used to find depth: count of found includes    bcd:            BOOLEAN,       -- Bcd was found    source:         BOOLEAN,       -- matching source was found    imported:       BOOLEAN,       -- Imported or ReadOnly in DF file    sameBcdInDFfile:    BOOLEAN,    sameSourceInDFfile: BOOLEAN,    config:         BOOLEAN,       -- config rather than module    defModule:      BOOLEAN,    packaged:       BOOLEAN,       -- a packaged Bcd (source is ".pack")    tableCompiled:  BOOLEAN,    boundsCheck:    BOOLEAN,       -- switches used in compiling Bcd    nilCheck:       BOOLEAN,    crossJumped:    BOOLEAN,    codeBound:      BOOLEAN,       -- if config, and bound /c    symbolsBound:   BOOLEAN,       -- if config, and bound /s    tag:            BOOLEAN,       -- used by list traversers    busy:           BOOLEAN,       -- on list traversal, already seen         bad:            BOOLEAN,       -- "bad" File: must be recompiled/rebound    obsolete:       BOOLEAN,       -- bad: incompatible version    readProtected:  BOOLEAN,       -- bad: Compiler/Binder smashed    wrongSource:    BOOLEAN,       -- bad: no source, but another vers. of s. found    sourceButNoBcd: BOOLEAN,       -- bad: source but no Bcd (and /-N switch)    wrongIncludes:  BOOLEAN,       -- bad: includes not found, but another v. was    dependsOnBad:   BOOLEAN,       -- bad: depends (directly or indir.) on bad file    badDependee:    Name];         -- name of bad file that file depends upon      Loc: TYPE = RECORD [host: HostName, dir: DirName];  NullLoc: Loc = [host: HNNil, dir: DNNil];   -- Included file records  IncludedFile: TYPE = Base RELATIVE LONG POINTER TO IncludedFileObject;   IFNil: IncludedFile = LOOPHOLE[123456701B];  IncludedFileObject: TYPE = RECORD [    link:   IncludedFile, -- ordered by name    desc:   IncFileDesc];           -- Descriptions of included files --  (This indirection deals with includes that are never found, and have no FE's)    IncFileDesc: TYPE = Base RELATIVE LONG POINTER TO IncFileDescObject;  IFDNil: IncFileDesc = LOOPHOLE[123456701B];    IncFileDescObject: TYPE = RECORD [    next: IncFileDesc,        -- next IncFileDesc with same hash    name: Name,     version: VersionStamp,    file: File,  -- if found, matching file; otherwise, any other version of file    lookedUp: BOOLEAN,        -- used to read closure of files     found: BOOLEAN,           -- TRUE iff match actually found     wrongVersion: BOOLEAN,    -- not found, but another version WAS found    unknownVersion: BOOLEAN]; -- if includer is only source, actual v. is unknown     -- Containing file records --  (Only files that are found have includers recorded)   ContainingFile: TYPE = Base RELATIVE LONG POINTER TO ContainingFileObject;  CFNil: ContainingFile = LOOPHOLE[123456701B];  ContainingFileObject: TYPE = RECORD [    link: ContainingFile,    file: File]; -- Hosts  HostName: TYPE = Base RELATIVE LONG POINTER TO HostNameObject;  HNNil: HostName = LOOPHOLE[123456701B];  HostNameObject: TYPE = RECORD [    link: HostName,  -- next name (unhashed)    name: Name];     -- Directories  DirName: TYPE = Base RELATIVE LONG POINTER TO DirNameObject;  DNNil: DirName = LOOPHOLE[123456701B];  DirNameObject: TYPE = RECORD [    next: DirName,  -- next name with same hash value    name: Name];     -- Depth lists: heads of chains of files at an inclusion depth  --  (Depth = length of longest path of found includes;  --   only found files are in depth lists)   DepthIndex: TYPE = Base RELATIVE LONG POINTER TO DepthObject;  DINil: DepthIndex = LOOPHOLE[123456701B];  DepthObject: TYPE = RECORD [first: File];         -- Marked files (those found in more than one version or location)   MarkedFile:        TYPE = Base RELATIVE LONG POINTER TO MFObject;    MultLocSource:     TYPE = Base RELATIVE LONG POINTER TO source multLoc MFObject;  MultLocBcd:        TYPE = Base RELATIVE LONG POINTER TO bcd multLoc MFObject;  MultVersionSource: TYPE = Base RELATIVE LONG POINTER TO source multVersion MFObject;  MultVersionBcd:    TYPE = Base RELATIVE LONG POINTER TO bcd multVersion MFObject;    MFNil:  MarkedFile        = LOOPHOLE[123456701B];  MLSNil: MultLocSource     = LOOPHOLE[MFNil];  MLBNil: MultLocBcd        = LOOPHOLE[MFNil];  MVSNil: MultVersionSource = LOOPHOLE[MFNil];  MVBNil: MultVersionBcd    = LOOPHOLE[MFNil];    MFObject: TYPE = RECORD [    link: MarkedFile,  -- ordered by ascending name    name: Name,    loc1, loc2: Loc,    body: SELECT problem: * FROM      multLoc => [  -- each copy has the same version/creation        SELECT type: * FROM	  source => [create: Time.Packed],	  bcd    => [version: VersionStamp],	  ENDCASE],      multVersion => [        SELECT type: * FROM	  source => [create1, create2: Time.Packed],	  bcd    => [version1, version2: VersionStamp],	  ENDCASE],      ENDCASE];         -- Names   Name: TYPE = Base RELATIVE LONG POINTER TO NameObject;  NameNil: Name = LOOPHOLE[123456701B];    NameObject: TYPE = RECORD [    next: Name,  -- next name with same hash    hash: Hash,    lowercase: BOOLEAN,    string: StringBody];      Hash: TYPE = [0..HVSize);  HVSize: CARDINAL = 109;     -- File table header   VersionID: CARDINAL = 020382;    Header: TYPE = LONG POINTER TO HeaderObject;  HeaderObject: TYPE = RECORD [    versionIdent: CARDINAL,    creator:      Time.Packed,    nPages:       CARDINAL,    consistent:   BOOLEAN,    circularity:  BOOLEAN,    containedBy:  BOOLEAN,  -- if contained by relation computed    depths:       BOOLEAN,  -- if inclusion depths computed    readSources:  BOOLEAN,  -- if switches['s]: read sources as well as Bcds    allFiles:     BOOLEAN,  -- if switches['a]: read files not on command line    nLocalBcds, nRemoteBcds, nLocalSources, nRemoteSources, nIncludes: CARDINAL,    feOffset: LONG CARDINAL,  -- file records    feLimit:  File,    ifOffset: LONG CARDINAL,  -- included files    ifLimit:  IncludedFile,    idOffset: LONG CARDINAL,  -- descriptions of included files    idLimit:  IncFileDesc,    cfOffset: LONG CARDINAL,  -- containing files    cfLimit:  ContainingFile,    hOffset:  LONG CARDINAL,  -- hosts    hLimit:   HostName,    dOffset:  LONG CARDINAL,  -- directories    dLimit:   DirName,    diOffset: LONG CARDINAL,  -- file depth chain heads    diLimit:  DepthIndex,    mOffset:  LONG CARDINAL,  -- marked files    mLimit:   MarkedFile,    nOffset:  LONG CARDINAL,  -- names    nLimit:   Name];    -- ############# Procedures #############  -- Found Bcds and sources   EnterSource: PROC [      host, dir, file: LONG STRING,      config, packaged: BOOLEAN, sourceDate: Time.Packed]     RETURNS [File];      EnterBcd: PROC [      host, dir, file: LONG STRING,       config, packaged: BOOLEAN, version: VersionStamp, sourceDate: Time.Packed]     RETURNS [File];      EnumerateFiles: PROC [proc: PROC [File] RETURNS [stop: BOOLEAN]];    EnumerateFilesWithName: PROC [    name: Name,     proc: PROC [File] RETURNS [stop: BOOLEAN]];      SourceFound: PROC [File] RETURNS [BOOLEAN];  BcdFound: PROC [File] RETURNS [BOOLEAN];  TableCompiled: PROC [File] RETURNS [BOOLEAN];    SortFiles: PROC;      EnumerateDepths: PROC [  -- lowest depths first; lowest depth <=> no includes    proc: PROC [DepthIndex] RETURNS [stop: BOOLEAN]];      EnumerateFilesOfDepth: PROC [    depth: DepthIndex,    proc: PROC [File] RETURNS [stop: BOOLEAN]];      ClearTags, ClearBusyMarks: PROC;      EnumerateMultLocBcds: PROC [    proc: PROC [MultLocBcd] RETURNS [stop: BOOLEAN]];      EnumerateMultLocSources: PROC [    proc: PROC [MultLocSource] RETURNS [stop: BOOLEAN]];      EnumerateMultVersionBcds: PROC [    proc: PROC [MultVersionBcd] RETURNS [stop: BOOLEAN]];    EnumerateMultVersionSources: PROC [    proc: PROC [MultVersionSource] RETURNS [stop: BOOLEAN]];      AnyMultVersionFiles: PROC RETURNS [BOOLEAN];         -- Included files      AddToIncludedList: PROC [    container: File,    included: String.SubString, version: VersionStamp];      MatchIncludedFiles: PROC;  MatchOneIncludedFile: PROC [i: IncFileDesc];    EnumerateFilesIncludedBy: PROC [    container: File,    proc: PROC [IncludedFile] RETURNS [stop: BOOLEAN]];    EnumerateIncludedFiles: PROC [    proc: PROC [IncFileDesc] RETURNS [stop: BOOLEAN]];      EnumerateIncludedFilesWithName: PROC [    name: Name,    proc: PROC [IncFileDesc] RETURNS [stop: BOOLEAN]];         -- Contained files  AddToContainedByList: PROC [included, containedBy: File];    NewContainer: PROC RETURNS [new: ContainingFile];      EnumerateFilesThatContain: PROC [    included: File,    proc: PROC [ContainingFile] RETURNS [stop: BOOLEAN]];      EnumerateContainingFiles: PROC [    proc: PROC [ContainingFile] RETURNS [stop: BOOLEAN]];         -- File names  NameForString: PROC [LONG STRING] RETURNS [Name];  StringForName: PROC [Name] RETURNS [LONG STRING];  NameCompare: PROC [n1, n2: Name] RETURNS [r: INTEGER];     -- Locations   LocalHost: PROC [HostName] RETURNS [BOOLEAN];          -- Version   SameSourceCreation: PROC [f, g: File] RETURNS [BOOLEAN];  SameBcdVersion: PROC [f, g: File] RETURNS [BOOLEAN];     -- Administration   Initialize, Finalize: PROC;    END.