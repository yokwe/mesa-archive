-- Copyright (C) 1981  by Xerox Corporation. All rights reserved. -- BcdToolWindowsImpl.mesa - Last edited by   -- Lewis on 18-Mar-81 16:16:45  -- Bruce on 21-Sep-81 11:06:30  -- Sweet on 22-Nov-81 14:55:15    DIRECTORY  Ascii USING [SP],  BcdToolCommands USING [    atomIndex, bcdFileName, configIndex, exportIndex, expVarIndex, fileIndex,    framePkIndex, importIndex, linkFgIndex, moduleIndex, nameIndex, nmEntryIndex,    ParamIndex, ParamNotify, Params, printLinks, readLoc, readMode,    ReadMode, readWords, segmentIndex, spaceIndex, typeIndex, typeMpIndex],  BcdToolSourceBcd USING [Unload],  BcdToolWindows,  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem,     defaultBoxWidth, Enumerated, EnumeratedItem, LineHeight, line0, line1, line2,    line3, line4, line5, line6, line7, line8, line9, LineN, nextPlace,    NumberItem, StringItem],  Runtime USING [GetBcdTime],  String USING [AppendString],  Time USING [Append, Unpack],  Tool USING [    Create, MakeFileSW, MakeFormSW, MakeMsgSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [TransitionProcType],  Window USING [Box, Handle, Place],  WindowFont USING [CharWidth],  Version USING [Append];      BcdToolWindowsImpl: PROGRAM     IMPORTS       BcdToolCommands, BcdToolSourceBcd, FormSW, Runtime, String,      Time, Tool, Version, WindowFont    EXPORTS BcdToolWindows =  BEGIN  main: PUBLIC Window.Handle ¬ NIL;  msgSW: PUBLIC Window.Handle ¬ NIL;  formSW: PUBLIC Window.Handle ¬ NIL;  fileSW: PUBLIC Window.Handle ¬ NIL;  params: PUBLIC BcdToolCommands.Params;      bcdToolWindowBox: Window.Box = [    place: [x: 0, y: 400],     dims: [w: 608, h: 400]];      Create: PUBLIC PROC =    BEGIN    herald: STRING ¬ [60];    String.AppendString[to: herald, from: "Bcd Tool "L];    Version.Append[herald]; String.AppendString[to: herald, from: " of "L];    Time.Append[herald, Time.Unpack[Runtime.GetBcdTime[]]];    herald.length ¬ herald.length - 3;    -- initialize parameter items    BEGIN OPEN BcdToolCommands;      bcdFileName ¬ NIL;      configIndex ¬ moduleIndex ¬ importIndex ¬ exportIndex ¬ fileIndex ¬         segmentIndex ¬ nameIndex ¬ spaceIndex ¬ framePkIndex ¬         nmEntryIndex ¬ expVarIndex ¬ typeIndex ¬ typeMpIndex ¬ atomIndex ¬ 0;      readLoc ¬ readWords ¬ 0;      readMode ¬ octal;      printLinks ¬ FALSE;    END;    -- create windows    main ¬ Tool.Create[      name: herald,      makeSWsProc: CreateSWs,      clientTransition: StateChanged,      cmSection: "BcdTool"L,      initialBox: bcdToolWindowBox];    END;  StateChanged: ToolWindow.TransitionProcType =    BEGIN    SELECT TRUE FROM      (new = inactive) =>        BEGIN        BcdToolSourceBcd.Unload[];        END;      ENDCASE;    END;  CreateSWs: Tool.MakeSWsProc =    BEGIN    logName: STRING ¬ [40];    msgSW ¬ Tool.MakeMsgSW[window: window];    formSW ¬ Tool.MakeFormSW[      window: window, formProc: DefineForms, h: 8*FormSW.LineHeight[]];    Tool.UnusedLogName[unused: logName, root: "BcdTool.log"L];    fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    END;  SPWidth: CARDINAL = WindowFont.CharWidth[Ascii.SP];  FileBoxWidth: CARDINAL = 15;  FileCol:   CARDINAL = 0*SPWidth;  LoadCol:   CARDINAL = FileCol    + (FileBoxWidth + 13)*SPWidth;  BoundsCol: CARDINAL = LoadCol    + 10 * SPWidth;  RepCol:    CARDINAL = BoundsCol  + 18 * SPWidth;  bcdFilePlace: Window.Place = [x: FileCol,   y: FormSW.line0];  loadPlace:    Window.Place = [x: LoadCol,   y: FormSW.line0];  boundsPlace:  Window.Place = [x: BoundsCol, y: FormSW.line0];  repPlace:     Window.Place = [x: RepCol,    y: FormSW.line0];  LocCol:     CARDINAL = 0 * SPWidth;  WordsCol:   CARDINAL = LocCol     + 11 * SPWidth;  AsCol:      CARDINAL = WordsCol   + 12 * SPWidth;  ReadCol:    CARDINAL = AsCol      + 15 * SPWidth;  ReadSelCol: CARDINAL = ReadCol    + 15 * SPWidth;  FindGfiCol: CARDINAL = ReadSelCol + 15 * SPWidth;  locPlace:     Window.Place = [x: LocCol,     y: FormSW.line1];  wordsPlace:   Window.Place = [x: WordsCol,   y: FormSW.line1];  asPlace:      Window.Place = [x: AsCol,      y: FormSW.line1];  readPlace:    Window.Place = [x: ReadCol,    y: FormSW.line1];  readSelPlace: Window.Place = [x: ReadSelCol, y: FormSW.line1];  findGfiPlace: Window.Place = [x: FindGfiCol, y: FormSW.line1];  MaxIndexWidth: CARDINAL = 6;  IndexCol:     CARDINAL = 0 * SPWidth;  PrintCol:     CARDINAL = IndexCol     + (MaxIndexWidth + 12)*SPWidth;  PrintSelCol:  CARDINAL = PrintCol     + 10 * SPWidth;  Print1stCol:  CARDINAL = PrintSelCol  + 15 * SPWidth;  PrintNextCol: CARDINAL = Print1stCol  + 17 * SPWidth;  ExtLinksCol:  CARDINAL = PrintNextCol + 17 * SPWidth;  configPlace:        Window.Place = [x: IndexCol,     y: FormSW.line2];  putConfigPlace:     Window.Place = [x: PrintCol,     y: FormSW.line2];  putSelConfigPlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line2];  put1stConfigPlace:  Window.Place = [x: Print1stCol,  y: FormSW.line2];  putNextConfigPlace: Window.Place = [x: PrintNextCol, y: FormSW.line2];  modulePlace:        Window.Place = [x: IndexCol,     y: FormSW.line3];  putModulePlace:     Window.Place = [x: PrintCol,     y: FormSW.line3];  putSelModulePlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line3];  put1stModulePlace:  Window.Place = [x: Print1stCol,  y: FormSW.line3];  putNextModulePlace: Window.Place = [x: PrintNextCol, y: FormSW.line3];  linkFgPlace:        Window.Place = [x: IndexCol,     y: FormSW.line4];  putLinkFgPlace:     Window.Place = [x: PrintCol,     y: FormSW.line4];  putSelLinkFgPlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line4];  put1stLinkFgPlace:  Window.Place = [x: Print1stCol,  y: FormSW.line4];  putNextLinkFgPlace: Window.Place = [x: PrintNextCol, y: FormSW.line4];  importPlace:        Window.Place = [x: IndexCol,     y: FormSW.line5];  putImportPlace:     Window.Place = [x: PrintCol,     y: FormSW.line5];  putSelImportPlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line5];  put1stImportPlace:  Window.Place = [x: Print1stCol,  y: FormSW.line5];  putNextImportPlace: Window.Place = [x: PrintNextCol, y: FormSW.line5];  exportPlace:        Window.Place = [x: IndexCol,     y: FormSW.line6];  putExportPlace:     Window.Place = [x: PrintCol,     y: FormSW.line6];  putSelExportPlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line6];  put1stExportPlace:  Window.Place = [x: Print1stCol,  y: FormSW.line6];  putNextExportPlace: Window.Place = [x: PrintNextCol, y: FormSW.line6];  filePlace:        Window.Place = [x: IndexCol,     y: FormSW.line7];  putFilePlace:     Window.Place = [x: PrintCol,     y: FormSW.line7];  putSelFilePlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line7];  put1stFilePlace:  Window.Place = [x: Print1stCol,  y: FormSW.line7];  putNextFilePlace: Window.Place = [x: PrintNextCol, y: FormSW.line7];  segPlace:        Window.Place = [x: IndexCol,     y: FormSW.line8];  putSegPlace:     Window.Place = [x: PrintCol,     y: FormSW.line8];  putSelSegPlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line8];  put1stSegPlace:  Window.Place = [x: Print1stCol,  y: FormSW.line8];  putNextSegPlace: Window.Place = [x: PrintNextCol, y: FormSW.line8];  namePlace:        Window.Place = [x: IndexCol,     y: FormSW.line9];  putNamePlace:     Window.Place = [x: PrintCol,     y: FormSW.line9];  putSelNamePlace:  Window.Place = [x: PrintSelCol,  y: FormSW.line9];  put1stNamePlace:  Window.Place = [x: Print1stCol,  y: FormSW.line9];  putNextNamePlace: Window.Place = [x: PrintNextCol, y: FormSW.line9];  spacePlace:        Window.Place = [x: IndexCol,     y: line10];  putSpacePlace:     Window.Place = [x: PrintCol,     y: line10];  putSelSpacePlace:  Window.Place = [x: PrintSelCol,  y: line10];  put1stSpacePlace:  Window.Place = [x: Print1stCol,  y: line10];  putNextSpacePlace: Window.Place = [x: PrintNextCol, y: line10];  line10: INTEGER = FormSW.LineN[n: 10];  line11: INTEGER = FormSW.LineN[n: 11];  line12: INTEGER = FormSW.LineN[n: 12];  line13: INTEGER = FormSW.LineN[n: 13];  line14: INTEGER = FormSW.LineN[n: 14];  line15: INTEGER = FormSW.LineN[n: 15];  line16: INTEGER = FormSW.LineN[n: 16];  framePkPlace:        Window.Place = [x: IndexCol,     y: line11];  putFramePkPlace:     Window.Place = [x: PrintCol,     y: line11];  putSelFramePkPlace:  Window.Place = [x: PrintSelCol,  y: line11];  put1stFramePkPlace:  Window.Place = [x: Print1stCol,  y: line11];  putNextFramePkPlace: Window.Place = [x: PrintNextCol, y: line11];  nmEntryPlace:        Window.Place = [x: IndexCol,     y: line12];  putNmEntryPlace:     Window.Place = [x: PrintCol,     y: line12];  putSelNmEntryPlace:  Window.Place = [x: PrintSelCol,  y: line12];  put1stNmEntryPlace:  Window.Place = [x: Print1stCol,  y: line12];  putNextNmEntryPlace: Window.Place = [x: PrintNextCol, y: line12];  expVarPlace:        Window.Place = [x: IndexCol,     y: line13];  putExpVarPlace:     Window.Place = [x: PrintCol,     y: line13];  putSelExpVarPlace:  Window.Place = [x: PrintSelCol,  y: line13];  put1stExpVarPlace:  Window.Place = [x: Print1stCol,  y: line13];  putNextExpVarPlace: Window.Place = [x: PrintNextCol, y: line13];  typePlace:        Window.Place = [x: IndexCol,     y: line14];  putTypePlace:     Window.Place = [x: PrintCol,     y: line14];  putSelTypePlace:  Window.Place = [x: PrintSelCol,  y: line14];  put1stTypePlace:  Window.Place = [x: Print1stCol,  y: line14];  putNextTypePlace: Window.Place = [x: PrintNextCol, y: line14];  typeMpPlace:        Window.Place = [x: IndexCol,     y: line15];  putTypeMpPlace:     Window.Place = [x: PrintCol,     y: line15];  putSelTypeMpPlace:  Window.Place = [x: PrintSelCol,  y: line15];  put1stTypeMpPlace:  Window.Place = [x: Print1stCol,  y: line15];  putNextTypeMpPlace: Window.Place = [x: PrintNextCol, y: line15];  atomPlace:          Window.Place = [x: IndexCol,     y: line16];  putAtomPlace:       Window.Place = [x: PrintCol,     y: line16];  putSelAtomPlace:    Window.Place = [x: PrintSelCol,  y: line16];  put1stAtomPlace:    Window.Place = [x: Print1stCol,  y: line16];  putNextAtomPlace:   Window.Place = [x: PrintNextCol, y: line16];  DefineForms: FormSW.ClientItemsProcType =    BEGIN     nParams: CARDINAL =      --BcdToolCommands.ParamIndex.LAST.ORD + 1;      BcdToolCommands.ParamIndex.PutNextTypeMp.ORD + 1;    readModeChoices: ARRAY BcdToolCommands.ReadMode OF FormSW.Enumerated ¬ [      [string: "decimal"L, value: BcdToolCommands.ReadMode[decimal]],      [string: "octal"L, value: BcdToolCommands.ReadMode[octal]],      [string: "ascii"L, value: BcdToolCommands.ReadMode[ascii]]];    lp: LONG POINTER TO ARRAY OF FormSW.Enumerated ¬       LOOPHOLE[LONG[@readModeChoices]];    params ¬ LOOPHOLE[FormSW.AllocateItemDescriptor[nParams]];    params[BcdFile] ¬ FormSW.StringItem[      tag: "Bcd File"L, drawBox: TRUE, inHeap: TRUE, place: bcdFilePlace,       boxWidth: FileBoxWidth*SPWidth, string: @BcdToolCommands.bcdFileName];    params[LoadBcd] ¬ FormSW.CommandItem[      tag: "load"L, place: loadPlace, proc: BcdToolCommands.ParamNotify];    params[PutTableBds] ¬ FormSW.CommandItem[      tag: "table bounds"L, place: boundsPlace,       proc: BcdToolCommands.ParamNotify];    params[PutRep] ¬ FormSW.CommandItem[      tag: "rep?"L, place: repPlace,       proc: BcdToolCommands.ParamNotify];    params[ReadLoc] ¬ FormSW.NumberItem[      tag: "Loc"L, place: locPlace, signed: FALSE, notNegative: TRUE,      radix: decimal, boxWidth: FormSW.defaultBoxWidth,       value: @BcdToolCommands.readLoc];    params[ReadWords] ¬ FormSW.NumberItem[      tag: "words"L, place: wordsPlace, signed: FALSE, notNegative: TRUE,      radix: decimal, boxWidth: FormSW.defaultBoxWidth,       value: @BcdToolCommands.readWords];    params[ReadAs] ¬ FormSW.EnumeratedItem[      tag: "as"L, place: asPlace, feedback: one,       choices: DESCRIPTOR[lp, LENGTH[readModeChoices]],       value: @BcdToolCommands.readMode];    params[Read] ¬ FormSW.CommandItem[      tag: "read"L, place: readPlace, proc: BcdToolCommands.ParamNotify];    params[ReadSel] ¬ FormSW.CommandItem[      tag: "read sel"L, place: readSelPlace,       proc: BcdToolCommands.ParamNotify];    params[FindGfi] ¬ FormSW.CommandItem[      tag: "find gfi"L, place: findGfiPlace,       proc: BcdToolCommands.ParamNotify];    params[Config] ¬ FormSW.NumberItem[      tag: "Config "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: configPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.configIndex];    params[PutConfig] ¬ FormSW.CommandItem[      tag: "print"L, place: putConfigPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelConfig] ¬ FormSW.CommandItem[      tag: "sel config"L, place: putSelConfigPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stConfig] ¬ FormSW.CommandItem[      tag: "first config"L, place: put1stConfigPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextConfig] ¬ FormSW.CommandItem[      tag: "next config"L, place: putNextConfigPlace,       proc: BcdToolCommands.ParamNotify];    params[Module] ¬ FormSW.NumberItem[      tag: "Module "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: modulePlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.moduleIndex];    params[PutModule] ¬ FormSW.CommandItem[      tag: "print"L, place: putModulePlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelModule] ¬ FormSW.CommandItem[      tag: "sel module"L, place: putSelModulePlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stModule] ¬ FormSW.CommandItem[      tag: "first module"L, place: put1stModulePlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextModule] ¬ FormSW.CommandItem[      tag: "next module"L, place: putNextModulePlace,       proc: BcdToolCommands.ParamNotify];    params[LinkFg] ¬ FormSW.NumberItem[      tag: "LinkFg "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: linkFgPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.linkFgIndex];    params[PutLinkFg] ¬ FormSW.CommandItem[      tag: "print"L, place: putLinkFgPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelLinkFg] ¬ FormSW.CommandItem[      tag: "sel lnk frg"L, place: putSelLinkFgPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stLinkFg] ¬ FormSW.CommandItem[      tag: "first lnk frg"L, place: put1stLinkFgPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextLinkFg] ¬ FormSW.CommandItem[      tag: "next lnk frg"L, place: putNextLinkFgPlace,       proc: BcdToolCommands.ParamNotify];    params[Import] ¬ FormSW.NumberItem[      tag: "Import "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: importPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.importIndex];    params[PutImport] ¬ FormSW.CommandItem[      tag: "print"L, place: putImportPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelImport] ¬ FormSW.CommandItem[      tag: "sel import"L, place: putSelImportPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stImport] ¬ FormSW.CommandItem[      tag: "first import"L, place: put1stImportPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextImport] ¬ FormSW.CommandItem[      tag: "next import"L, place: putNextImportPlace,       proc: BcdToolCommands.ParamNotify];    params[Export] ¬ FormSW.NumberItem[      tag: "Export "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: exportPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.exportIndex];    params[PutExport] ¬ FormSW.CommandItem[      tag: "print"L, place: putExportPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelExport] ¬ FormSW.CommandItem[      tag: "sel export"L, place: putSelExportPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stExport] ¬ FormSW.CommandItem[      tag: "first export"L, place: put1stExportPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextExport] ¬ FormSW.CommandItem[      tag: "next export"L, place: putNextExportPlace,       proc: BcdToolCommands.ParamNotify];    params[File] ¬ FormSW.NumberItem[      tag: "File "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: filePlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.fileIndex];    params[PutFile] ¬ FormSW.CommandItem[      tag: "print"L, place: putFilePlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelFile] ¬ FormSW.CommandItem[      tag: "sel file"L, place: putSelFilePlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stFile] ¬ FormSW.CommandItem[      tag: "first file"L, place: put1stFilePlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextFile] ¬ FormSW.CommandItem[      tag: "next file"L, place: putNextFilePlace,       proc: BcdToolCommands.ParamNotify];    params[Segment] ¬ FormSW.NumberItem[      tag: "Segment "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: segPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.segmentIndex];    params[PutSegment] ¬ FormSW.CommandItem[      tag: "print"L, place: putSegPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelSegment] ¬ FormSW.CommandItem[      tag: "sel segmnt"L, place: putSelSegPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stSegment] ¬ FormSW.CommandItem[      tag: "first segmnt"L, place: put1stSegPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextSegment] ¬ FormSW.CommandItem[      tag: "next segmnt"L, place: putNextSegPlace,       proc: BcdToolCommands.ParamNotify];    params[Name] ¬ FormSW.NumberItem[      tag: "Name "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: namePlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.nameIndex];    params[PutName] ¬ FormSW.CommandItem[      tag: "print"L, place: putNamePlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelName] ¬ FormSW.CommandItem[      tag: "sel name"L, place: putSelNamePlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stName] ¬ FormSW.CommandItem[      tag: "first name"L, place: put1stNamePlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextName] ¬ FormSW.CommandItem[      tag: "next name"L, place: putNextNamePlace,       proc: BcdToolCommands.ParamNotify];    params[Space] ¬ FormSW.NumberItem[      tag: "Space "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: spacePlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.spaceIndex];    params[PutSpace] ¬ FormSW.CommandItem[      tag: "print"L, place: putSpacePlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelSpace] ¬ FormSW.CommandItem[      tag: "sel space"L, place: putSelSpacePlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stSpace] ¬ FormSW.CommandItem[      tag: "first space"L, place: put1stSpacePlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextSpace] ¬ FormSW.CommandItem[      tag: "next space"L, place: putNextSpacePlace,       proc: BcdToolCommands.ParamNotify];    params[FramePk] ¬ FormSW.NumberItem[      tag: "Frame pack "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: framePkPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.framePkIndex];    params[PutFramePk] ¬ FormSW.CommandItem[      tag: "print"L, place: putFramePkPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelFramePk] ¬ FormSW.CommandItem[      tag: "sel frmpk"L, place: putSelFramePkPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stFramePk] ¬ FormSW.CommandItem[      tag: "first frmpk"L, place: put1stFramePkPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextFramePk] ¬ FormSW.CommandItem[      tag: "next frmpk"L, place: putNextFramePkPlace,       proc: BcdToolCommands.ParamNotify];    params[NmEntry] ¬ FormSW.NumberItem[      tag: "Name entry "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: nmEntryPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.nmEntryIndex];    params[PutNmEntry] ¬ FormSW.CommandItem[      tag: "print"L, place: putNmEntryPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelNmEntry] ¬ FormSW.CommandItem[      tag: "sel nm ent"L, place: putSelNmEntryPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stNmEntry] ¬ FormSW.CommandItem[      tag: "first nm ent"L, place: put1stNmEntryPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextNmEntry] ¬ FormSW.CommandItem[      tag: "next nm ent"L, place: putNextNmEntryPlace,       proc: BcdToolCommands.ParamNotify];    params[ExpVar] ¬ FormSW.NumberItem[      tag: "Exp var "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: expVarPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.expVarIndex];    params[PutExpVar] ¬ FormSW.CommandItem[      tag: "print"L, place: putExpVarPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelExpVar] ¬ FormSW.CommandItem[      tag: "sel expvar"L, place: putSelExpVarPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stExpVar] ¬ FormSW.CommandItem[      tag: "first expvar"L, place: put1stExpVarPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextExpVar] ¬ FormSW.CommandItem[      tag: "next expvar"L, place: putNextExpVarPlace,       proc: BcdToolCommands.ParamNotify];    params[Type] ¬ FormSW.NumberItem[      tag: "Type "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: typePlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.typeIndex];    params[PutType] ¬ FormSW.CommandItem[      tag: "print"L, place: putTypePlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelType] ¬ FormSW.CommandItem[      tag: "sel type"L, place: putSelTypePlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stType] ¬ FormSW.CommandItem[      tag: "first type"L, place: put1stTypePlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextType] ¬ FormSW.CommandItem[      tag: "next type"L, place: putNextTypePlace,       proc: BcdToolCommands.ParamNotify];    params[TypeMp] ¬ FormSW.NumberItem[      tag: "Type map "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: typeMpPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.typeMpIndex];    params[PutTypeMp] ¬ FormSW.CommandItem[      tag: "print"L, place: putTypeMpPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelTypeMp] ¬ FormSW.CommandItem[      tag: "sel typmap"L, place: putSelTypeMpPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stTypeMp] ¬ FormSW.CommandItem[      tag: "first typmap"L, place: put1stTypeMpPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextTypeMp] ¬ FormSW.CommandItem[      tag: "next typmap"L, place: putNextTypeMpPlace,       proc: BcdToolCommands.ParamNotify];«    params[Atom] ¬ FormSW.NumberItem[      tag: "Atom "L, drawBox: FALSE, signed: FALSE, notNegative: TRUE,      place: atomPlace, radix: decimal, boxWidth: MaxIndexWidth*SPWidth,       value: @BcdToolCommands.atomIndex];    params[PutAtom] ¬ FormSW.CommandItem[      tag: "print"L, place: putAtomPlace,       proc: BcdToolCommands.ParamNotify];    params[PutSelAtom] ¬ FormSW.CommandItem[      tag: "sel atom"L, place: putSelAtomPlace,       proc: BcdToolCommands.ParamNotify];    params[Put1stAtom] ¬ FormSW.CommandItem[      tag: "first atom"L, place: put1stAtomPlace,       proc: BcdToolCommands.ParamNotify];    params[PutNextAtom] ¬ FormSW.CommandItem[      tag: "next atom"L, place: putNextAtomPlace,       proc: BcdToolCommands.ParamNotify];»    RETURN[items: LOOPHOLE[params], freeDesc: TRUE];    END;END.