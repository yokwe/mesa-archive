-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- CGenDebugInterface.mesa Edited by Sweet, 18-Feb-83 21:43:34    DIRECTORY  CGenDebugCommandDefs USING [ParamIndex, Params],  CGenDebugDefs USING [ccInfo, handle, NotifyEvent, ParamNotify],  CodeDefs USING [CCInfoType],  Event,  EventTypes,  FormSW USING [    AllocateItemDescriptor, BooleanItem, ClientItemsProcType, CommandItem,     Enumerated, EnumeratedItem, ItemHandle, line0, line1, line2, line3, nextPlace,     StringItem],  Runtime USING [GetBcdTime],  RESOut USING [WindowsObject],  STDebugDefs USING [depthString, showLinks, STDebugMisc, STDebugSymbols, STDebugTrees],  String USING [AppendString],  Supervisor,  Time USING [Append, Unpack],  Tool USING [Create, MakeFileSW, MakeFormSW, MakeMsgSW, MakeSWsProc],  ToolWindow USING [TransitionProcType],  Version,  Window USING [Place],  WindowFont USING [CharWidth];      CGenDebugInterface: PROGRAM   IMPORTS     CGenDebugDefs, Event, FormSW, Runtime, STDebugDefs, String,     Supervisor, Time, Tool, Version, WindowFont  EXPORTS CGenDebugDefs =  BEGIN  OPEN FormSW, CGenDebugDefs;      Init: PRIVATE PROCEDURE =    BEGIN    title: STRING = "CGen Debug"L;    herald: STRING ¬ [60];    String.AppendString[to: herald, from: title];    Version.Append[herald];    String.AppendString[to: herald, from: " of "L];    Time.Append[herald, Time.Unpack[Runtime.GetBcdTime[]]];    herald.length ¬ herald.length - 3;    windows.main ¬ Tool.Create[      makeSWsProc: MakeMySWs,      clientTransition: StateChanged,      cmSection: "CGenDebug"L,      name: herald];    CGenDebugDefs.handle ¬ @windows;    END;  agent: Supervisor.SubsystemHandle = Supervisor.CreateSubsystem[NotifyEvent];  StateChanged: ToolWindow.TransitionProcType =    BEGIN    IF old = inactive THEN      BEGIN      Supervisor.AddDependency[client: agent, implementor: Event.swapping];      END;    IF new = inactive THEN      BEGIN      windows.msgSW ¬ windows.formSW ¬ windows.fileSW ¬ NIL;      Supervisor.RemoveDependency[client: agent, implementor: Event.swapping];      END;    END;  windows: RESOut.WindowsObject ¬ [NIL, NIL, NIL, NIL];  MakeMySWs: Tool.MakeSWsProc =    BEGIN    windows.msgSW ¬ Tool.MakeMsgSW[window: window];    windows.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeParameterArray];    windows.fileSW ¬ Tool.MakeFileSW[window: window, name: "CGenDebug.log"L];    END;  cw: CARDINAL = WindowFont.CharWidth['w];    TreeCol: CARDINAL = 0*cw;  FirstCol: CARDINAL = TreeCol + 14*cw;  TempCol: CARDINAL = FirstCol + 13*cw;  MTCol: CARDINAL = TempCol + 12*cw;  FopCol: CARDINAL = MTCol + 9*cw;  BodyCol: CARDINAL = FopCol + 6*cw;  SourceCol: CARDINAL = BodyCol + 7*cw;  treePlace: Window.Place = [x: TreeCol+0*cw, y: line0];  asCCPlace: Window.Place = [x: TreeCol+9*cw, y: line0];  varPlace: Window.Place = [x: TreeCol+0*cw, y: line1];  vcompPlace: Window.Place = [x: TreeCol+6*cw, y: line1];  linksPlace: Window.Place = [x: TreeCol+0*cw, y: line2];  depthPlace: Window.Place = [x: TreeCol+6*cw, y: line2];  mdiPlace: Window.Place = [x: MTCol+0*cw, y: line0];  htiPlace: Window.Place = [x: MTCol+4*cw, y: line0];  ctiPlace: Window.Place = [x: MTCol+0*cw, y: line1];  btiPlace: Window.Place = [x: MTCol+4*cw, y: line1];  seiPlace: Window.Place = [x: MTCol+0*cw, y: line2];  nextsePlace: Window.Place = [x: MTCol+4*cw, y: line2];  firstPlace: Window.Place = [x: FirstCol+0*cw, y: line0];  curPlace: Window.Place = [x: FirstCol+7*cw, y: line0];  rcntPlace: Window.Place = [x: FirstCol+0*cw, y: line1];  fwdPlace: Window.Place = [x: FirstCol+7*cw, y: line1];  prevPlace: Window.Place = [x: FirstCol+0*cw, y: line2];  nextPlace: Window.Place = [x: FirstCol+6*cw, y: line2];  infoPlace: Window.Place = [x: FirstCol+0*cw, y: line3];  tempPlace: Window.Place = [x: TempCol+0*cw, y: line0];  allStackPlace: Window.Place = [x: TempCol+6*cw, y: line0];  stackPlace: Window.Place = [x: TempCol+0*cw, y: line1];  tosPlace: Window.Place = [x: TempCol+6*cw, y: line1];  downPlace: Window.Place = [x: TempCol+0*cw, y: line2];  upPlace: Window.Place = [x: TempCol+7*cw, y: line2];  lblPlace: Window.Place = [x: TempCol+0*cw, y: line3];  liiPlace: Window.Place = [x: TempCol+6*cw, y: line3];  fopPlace: Window.Place = [x: FopCol+0*cw, y: line0];  mopPlace: Window.Place = [x: FopCol+0*cw, y: line1];  repPlace: Window.Place = [x: FopCol+0*cw, y: line2];  bodyPlace: Window.Place = [x: BodyCol+0*cw, y: line0];  stmtPlace: Window.Place = [x: BodyCol+0*cw, y: line1];  exprPlace: Window.Place = [x: BodyCol+0*cw, y: line2];  gFramesPlace: Window.Place = [x: BodyCol+0*cw, y: line3];  sourcePlace: Window.Place = [x: SourceCol + 0*cw, y: line0];  MakeParameterArray: FormSW.ClientItemsProcType =    BEGIN OPEN FormSW;     infoEnumRec: ARRAY CodeDefs.CCInfoType OF Enumerated ¬ [      [string: "gen"L, value: CodeDefs.CCInfoType[generating]],      [string: "bind"L, value: CodeDefs.CCInfoType[binding]],      [string: "code"L, value: CodeDefs.CCInfoType[coding]]];    nParams: CARDINAL =      LOOPHOLE[LAST[CGenDebugCommandDefs.ParamIndex], CARDINAL] + 1;    params: CGenDebugCommandDefs.Params ¬ LOOPHOLE[      AllocateItemDescriptor[nParams]];    pa: LONG POINTER TO ARRAY CGenDebugCommandDefs.ParamIndex OF ItemHandle ¬      LOOPHOLE[BASE[params]];    pa­ ¬ [    tree: CommandItem[      tag: "Tree"L, place: treePlace, proc: ParamNotify],    asCC: CommandItem[      tag: "CC"L, place: asCCPlace, proc: ParamNotify],    var: CommandItem[      tag: "Var"L, place: varPlace, proc: ParamNotify],    vcomp: CommandItem[      tag: "VComp"L, place: vcompPlace, proc: ParamNotify],    links: BooleanItem[      tag: "lnks"L, place: linksPlace, switch: @STDebugDefs.showLinks],    depth: StringItem[      tag: "d"L, place: depthPlace, string: @STDebugDefs.depthString,      inHeap: TRUE],    first: CommandItem[      tag: "first"L, place: firstPlace, proc: ParamNotify],    cur: CommandItem[      tag: "cur"L, place: curPlace, proc: ParamNotify],    rcnt: CommandItem[      tag: "rcnt"L, place: rcntPlace, proc: ParamNotify],    fwd: CommandItem[      tag: "fwd"L, place: fwdPlace, proc: ParamNotify],    prev: CommandItem[      tag: "prev"L, place: prevPlace, proc: ParamNotify],    next: CommandItem[      tag: "next"L, place: nextPlace, proc: ParamNotify],    info: EnumeratedItem[      tag: "info"L, place: infoPlace, feedback: one,      choices: LOOPHOLE[LONG[DESCRIPTOR[infoEnumRec]]], value: @ccInfo],    temp: CommandItem[      tag: "temp"L, place: tempPlace, proc: ParamNotify],    allStack: CommandItem[      tag: "Stk"L, place: allStackPlace, proc: ParamNotify],    stack: CommandItem[      tag: "sti"L, place: stackPlace, proc: ParamNotify],    tos: CommandItem[      tag: "TOS"L, place: tosPlace, proc: ParamNotify],    down: CommandItem[      tag: "down"L, place: downPlace, proc: ParamNotify],    up: CommandItem[      tag: "up"L, place: upPlace, proc: ParamNotify],    lbl: CommandItem[      tag: "lbl"L, place: lblPlace, proc: ParamNotify],    lii: CommandItem[      tag: "lii"L, place: liiPlace, proc: ParamNotify],    mdi: CommandItem[      tag: "mt"L, place: mdiPlace, proc: ParamNotify],    hti: CommandItem[      tag: "ht"L, place: htiPlace, proc: ParamNotify],    cti: CommandItem[      tag: "ct"L, place: ctiPlace, proc: ParamNotify],    bti: CommandItem[      tag: "bt"L, place: btiPlace, proc: ParamNotify],    sei: CommandItem[      tag: "se"L, place: seiPlace, proc: ParamNotify],    nextse: CommandItem[      tag: "nx"L, place: nextsePlace, proc: ParamNotify],    fop: CommandItem[      tag: "fop"L, place: fopPlace, proc: ParamNotify],    mop: CommandItem[      tag: "mop"L, place: mopPlace, proc: ParamNotify],    rep: CommandItem[      tag: "rep"L, place: repPlace, proc: ParamNotify],    body: CommandItem[      tag: "Body"L, place: bodyPlace, proc: ParamNotify],    stmt: CommandItem[      tag: "Stmt"L, place: stmtPlace, proc: ParamNotify],    expr: CommandItem[      tag: "Expr"L, place: exprPlace, proc: ParamNotify],    gFrames: CommandItem[      tag: "GFrames"L, place: gFramesPlace, proc: ParamNotify],    source: CommandItem[      tag: "Source"L, place: sourcePlace, proc: ParamNotify]];    RETURN[items: LOOPHOLE[params], freeDesc: TRUE];    END; -- Mainline code   START STDebugDefs.STDebugMisc;  START STDebugDefs.STDebugTrees;  START STDebugDefs.STDebugSymbols;  Init[];  END.