SymTool.docSymTool is a window for browsing around in Mesa symbol tables. It reads a single compiler output BCD file and allows you to display the contents of the various sub-tables of the symbol table (to a FileWindow on SymTool.log). It has a command subwindow that looks like this:    load!       file:                                    lnks    header!     ctx!       hti!     bti!      opi!       mwconst!    offsets!    firstse!   mdi!     sonBti!   nxOpi!     lco!    tree!       nextse!    lti!     btLink!   ipi!       lio!    d:          sei!       type!    fgi!      nxIpi!     jib/w!    idToHash!   idInCtx!   sLit!    nxFgi!    fgtHdr!    rep!    Most of the commands treat the current selection as a relative pointer value into some subtable and print out the corresponding record at that location.  Some of the commands print the next item in a list (e.g. nextse prints the next sei in a given context).  For small tables or headers, there is a single command to print out the entire contents. Unless otherwise stated, all types below are defined in the file Symbols.mesa.The various commands are described below:file:		The name of the object file to be examined (.bcd supplied		automatically)load!		Read the symbol table into memory. The tool will relinquish 		the file if requested by another tool and tell you that it 		unloaded the file. You can unload the current file by clearing		the file: item and executing the load! command. Deactivating 		the tool will also clear the file.header!		Print the information of the symbol table header (except for 		the offsets and sizes of the various subtables),offsets!	Print the offsets and sizes of the various subtables,lnks		If on, give more detailed information such as link values of	        linked SERecords.rep!		Print the current selection in various radicies, etc.ctx!		Print the current selection as a CTXIndex, remember value for	        firstse! and idInCtx! commands.firstse!	Print the first ISERecord in the list of the current context 		(last one printed by ctx!).nextse!		Print the successor to the last ISERecord printed out (by		firstse!, sei!, or idInCtx!)sei!		Print the current selection as a SEIndex.type!		Print the se entry for the type of the last ISERecord printed		out (if typeTYPE, follow the UnderType chain instead).idInCtx!	Take the current selection as a STRING, look up the identifier			        in the current context, and print the corresponding ISERecord.idToHash!	Take the current selection as a STRING and print its hash 		table entry.tree!		Print the current selection as a Tree.Link.d:		A number that controls the depth of tree printing (it's a 		string item because the tool it is stolen from predates 		number items in FormSWs).hti!		Print the current selection as a HTIndex.mdi!		Print the current selection as an MDIndex.lti!		Print the current selection as a Literals.LitRecord.sLti!		Print the current selection as a Literals.STIndex (the compiler		does not currently write anything into this table when it 		writes the symbol table).bti!		Print the current selection as a BTIndex.sonBti!		Print the firstSon of the most recent BTRecord.btLink!		Print the link bti of the most recent BTRecord (sib or parent).fgtHdr!		Print the header of the fine grain table.fgi!		Print the current selection as the index of a	        SymbolSegment.FGTEntry.nxFgi!		Print the next FGTEntry.opi!		Print the current selection as a PackageSymbols.OPIndex;nxOpi!		Print the next OuterPackRecord.ipi!		Print the current selection as a PackageSymbols.IPIndex;nxIpi!		Print the next InnerPackRecord.mwconst!	Print the offsets and sizes of multiword constants in the 		code segment.lco!		Print the addresses of instructions where code segment 		relative word offsets are being loaded (actually the address 		of the second byte of the LIW instruction).lio!		Print the addresses of instructions where code segment 		relative byte offsets are being referenced (actually the 		address of the second byte of the LIW or LFC instruction).jib/w!		Print the word offset and size in words of the dispatch 		vectors used for indirect jumps (JIB or JIW).