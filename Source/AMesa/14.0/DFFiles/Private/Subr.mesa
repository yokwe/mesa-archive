-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- Subr.mesa - Last edited by--   Schmidt	 2-Feb-82 18:03:50--   BTL  	29-Aug-83 11:15:54DIRECTORY  Exec USING [Handle],  MFile USING [Handle],  MSegment USING [ErrorCode, Handle],  MStream USING [ErrorCode, Handle],  Window USING [Handle];Subr: DEFINITIONS =  BEGIN  NameType: TYPE = {login, connect};  -- for GetNameandPassword    InitPages: CARDINAL = 24;  IncrementPages: CARDINAL = 8;  FileErrorType: TYPE = {notFound, wrongVersion, accessConflict};  FileError: ERROR [error: FileErrorType];    errorflg, debugflg, alwaysConfirm: BOOLEAN;   -- initialized from User.cm [DFTool] section -- set by SetWorkingDFLoc, SetPreReleaseLoc, SetLocalDFDir, SetCheckLibrarian   workingDFHost, workingDFDir: READONLY LONG STRING;     -- from WorkingDFLoc:  integrationHost, integrationDir: READONLY LONG STRING; -- from IntegrationLoc:  localDFDir: READONLY LONG STRING;		         -- from LocalDFDir:  checkLibrarian: READONLY BOOLEAN;		         -- from CheckLibrarian:    dfLibjectsOnly: READONLY BOOLEAN;		         -- from DfLibjectsOnly:   -- Long zone (a standard Heap zone)  SubrInit: PROC [    exec: Exec.Handle, zone: UNCOUNTED ZONE ¬ NIL,    initPages: CARDINAL ¬ InitPages, increment: CARDINAL ¬ IncrementPages];  SubrStop: PROC [deleteZone: BOOLEAN ¬ TRUE];  LongZone: PROC RETURNS [UNCOUNTED ZONE]; -- Huge zone (an arbitrary-sized zone where FREE's are no-ops)  HugeZone: PROC [             -- creates the (single) huge zone     nPages: CARDINAL ¬ 1000, zonePrefix: STRING ¬ NIL] RETURNS [UNCOUNTED ZONE];  WordsFromHugeZone: PROC [nwords: LONG CARDINAL] RETURNS [LONG POINTER];  PagesUsedInHugeZone: PROC RETURNS [npages: CARDINAL];  ResetHugeZoneToEmpty: PROC;  -- NB: mustn't be outstanding pointers into zone  ForceHugeZoneToDisk: PROC;  HugeZoneFromDisk: PROC [     -- returns HugeZone stored to disk previously    zonePrefix: STRING] RETURNS [originalBeginning: LONG POINTER];  DeleteHugeZone: PROC; -- String manipulation  AllocateString: PROC [    nchars: CARDINAL, zone: UNCOUNTED ZONE ¬ NIL] RETURNS [LONG STRING];  FreeString: PROC [str: LONG STRING, zone: UNCOUNTED ZONE ¬ NIL];  AllocateWords: PROC [nwords: CARDINAL] RETURNS [LONG POINTER];  FreeWords: PROC [LONG POINTER];  CopyString: PROC [  -- allocates copy; if zone is NIL uses Subr.LongZone[]    old: LONG STRING, zone: UNCOUNTED ZONE ¬ NIL] RETURNS [new: LONG STRING];  StrCopy: PROC [to, from: LONG STRING];  -- copies to existing string  -- can also be used if sto and sfrom point to the same StringBody  SubStrCopy: PROC [sto, sfrom: LONG STRING, sfinx: CARDINAL];  StripLeadingBlanks: PROC [str: LONG STRING];  -- remove leading SPs and TABs -- Predicates  Any: PROC [str: LONG STRING, ch: CHARACTER] RETURNS [BOOLEAN];  EndsIn: PROC [str, suf: LONG STRING] RETURNS [BOOLEAN];  Prefix: PROC [str, pref: LONG STRING] RETURNS [BOOLEAN];   ControlChars: PROC [str: LONG STRING] RETURNS [BOOLEAN]; -- File parsing  GetLine: PROC [sh: MStream.Handle, line: LONG STRING] RETURNS [notEof: BOOLEAN];  GetChar: PROC [sh: MStream.Handle] RETURNS [CHARACTER];  GetString: PROC [line, sub: LONG STRING, inx: CARDINAL] RETURNS [CARDINAL];   -- Misc.  PrintGreeting: PROC [str: LONG STRING];  SetUpCWFWriteProcedure: PROC;  GetNameandPassword: PROC [  -- if window is NIL, uses Exec window    nt: NameType, name2, password2: LONG STRING, window: Window.Handle ¬ NIL];  Confirm: PROC [  -- if window is NIL then uses Exec window      defaultChar: CHARACTER, window: Window.Handle ¬ NIL,      allowAlways: BOOLEAN ¬ TRUE]  -- allow previous "a" (always) to confirm    RETURNS [CHARACTER];  GetRemoteLoc: PROC [    loc: LONG STRING, dfZone: UNCOUNTED ZONE] RETURNS [host, dir: LONG STRING];  GetLocalDir: PROC [    name: LONG STRING, dfZone: UNCOUNTED ZONE] RETURNS [dir: LONG STRING];     -- File operations  CopyFile: PROC [from, to: LONG STRING];  AppendMStreamErrorMessage: PROC [    msg: LONG STRING, code: MStream.ErrorCode, stream: MStream.Handle];  AppendMSegmentErrorMessage: PROC [    msg: LONG STRING, code: MSegment.ErrorCode, segment: MSegment.Handle];     -- Global parameter management   SetWorkingDFLoc: PROC [workingDFLoc: LONG STRING];  SetIntegrationLoc: PROC [integrationLoc: LONG STRING];  SetLocalDFDir: PROC [localDFDirectory: LONG STRING];  SetCheckLibrarian: PROC [checkWithLibrarian: BOOLEAN];     -- Management of containing-DF-file property in MFile leader pages  ContainingDFNameError: ERROR;  -- dfName too short or long         SetContainingDFName: PROC [file: MFile.Handle, dfName: LONG STRING];  GetContainingDFName: PROC [file: MFile.Handle, dfName: LONG STRING];  END.