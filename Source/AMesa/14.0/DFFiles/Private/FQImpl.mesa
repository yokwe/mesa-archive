-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- FQImpl.mesa - Last edited by --   Schmidt	September 29, 1982 12:50 pm--   BTL  	24-Jan-83 15:23:53DIRECTORY  CWF USING [SWF2, SWF3, SWF4],  FileTransfer USING [FileInfo, ListProc],  FQ USING [Result],  String USING [Empty, InvalidNumber, StringToDecimal],  Subr USING [StrCopy],  Time USING [Packed],  Transfer USING [EnumerateForProperties];FQImpl: PROGRAM    IMPORTS CWF, String, Subr, Transfer    EXPORTS FQ =  BEGIN  -- if createtime # 0 then  --	looks for a file with that create time  --	uses version number as a hint  --	result is: foundCorrectVersion if the file is found  --		   foundWrongVersion if a file is found but not that one  --		   notFound if the file or server does not exist at all  -- if createtime = 0 and wantExplicitVersion THEN  --	looks for a file with that version number  --	result is: foundCorrectVersion if the file is found  --		   notFound if the file or server does not exist at all  -- if createtime = 0 and NOT wantExplicitVersion THEN  --	looks for any file of that name (!H)  --	result is: foundCorrectVersion if the file is found  --		   notFound if the file or server does not exist at all  -- foundCorrectVersion returns correct version and time  --	targetFileName has a full filename including version number  -- foundWrongVersion returns highest version and time  --	targetFileName has a full filename without version number  -- notFound returns no version and no time  --	targetFileName has a full filename without version number  --	  unless wantExplicitVersion = TRUE, in which case it will have one  FileQuery: PUBLIC PROC [      host, directory, shortname: LONG STRING,      version: CARDINAL, createtime: Time.Packed, wantExplicitVersion: BOOLEAN,      targetFileName: LONG STRING]    RETURNS [      fres: FQ.Result, remoteVersion: CARDINAL,      remoteCreateTime: Time.Packed, remoteByteLength: LONG CARDINAL] = {    prefix: STRING ¬ [150];    sfn: STRING ¬ [150];    found, foundOneVersion: BOOLEAN ¬ FALSE;    highdate: Time.Packed ¬ [0];    highversion: CARDINAL ¬ 0;    foundFileName: STRING ¬ [150];    -- only called once unless createtime # 0    EnumProcessFile: FileTransfer.ListProc = {      remoteInfo: FileTransfer.FileInfo ¬ info[conn].source;      vers: CARDINAL ¬ 0;      date: Time.Packed;      foundOneVersion ¬ TRUE;      IF ~String.Empty[remoteInfo.version] THEN        vers ¬ String.StringToDecimal[remoteInfo.version	  ! String.InvalidNumber => CONTINUE];      date ¬ remoteInfo.create;      IF vers > highversion THEN {highversion ¬ vers;  highdate ¬ date};      IF found THEN RETURN[do];      -- if the date in the df file agrees with date on remote server      IF createtime > 0 AND createtime = date THEN {         found ¬ TRUE;        remoteVersion ¬ vers;  remoteCreateTime ¬ date;	remoteByteLength ¬ remoteInfo.size;        fres ¬ foundCorrectVersion;        Subr.StrCopy[foundFileName, file]}      ELSE IF createtime = 0 THEN {  -- no date in the df file        found ¬ TRUE;        remoteVersion ¬ vers;  remoteCreateTime ¬ date;        remoteByteLength ¬ remoteInfo.size;        Subr.StrCopy[foundFileName, file]};      RETURN[do]};  -- we were given a date but it did not agree, keep looking    remoteCreateTime ¬ Time.Packed[0];      remoteByteLength ¬ 0;  remoteVersion ¬ 0;    IF version > 0 AND createtime = Time.Packed[0] AND wantExplicitVersion THEN      CWF.SWF4[sfn, "[%s]<%s>%s!%u"L, host, directory, shortname, @version]    ELSE IF createtime = 0 THEN  -- take highest version      CWF.SWF3[sfn, "[%s]<%s>%s!H"L, host, directory, shortname]    ELSE  -- search for all      CWF.SWF3[sfn, "[%s]<%s>%s!*"L, host, directory, shortname];    Transfer.EnumerateForProperties[fileName: sfn, enumProc: EnumProcessFile];    IF ~foundOneVersion THEN {  -- no such file      CWF.SWF3[prefix, "[%s]<%s>%s"L, host, directory, shortname];      FillInErrorTargetFile[targetFileName, prefix, wantExplicitVersion, version];      RETURN[notFound, 0, Time.Packed[0], 0]}    ELSE IF ~found THEN {      CWF.SWF3[prefix, "[%s]<%s>%s"L, host, directory, shortname];      FillInErrorTargetFile[targetFileName, prefix, wantExplicitVersion, version];      RETURN[foundWrongVersion, highversion, highdate, 0]}    ELSE {      CWF.SWF2[targetFileName, "[%s]%s"L, host, foundFileName];      RETURN[        foundCorrectVersion, remoteVersion, remoteCreateTime, remoteByteLength]}};  FillInErrorTargetFile: PROC [      targetFileName, prefix: LONG STRING,      wantExplicitVersion: BOOLEAN, version: CARDINAL] = {    IF wantExplicitVersion THEN      CWF.SWF2[targetFileName, "%s!%u"L, prefix, @version]    ELSE Subr.StrCopy[targetFileName, prefix]};  -- just check the highest version  --   if createtime > 0 then looks for !h in that version  --	  result is: foundCorrectVersion if found  --		     foundWrongVersion if not found in that date  --		     notFound if not there at all  --   if createtime = 0 then look for any !h  --	  result is: foundCorrectVersion if found  --		     notFound if not there at all  --   foundCorrectVersion returns correct version and time  --   foundWrongVersion returns highest version and time  --   notFound returns no version and no time  FileQueryBangH: PUBLIC PROC [      host, directory, shortname: LONG STRING, createtime: Time.Packed]    RETURNS [      fres: FQ.Result, remoteVersion: CARDINAL,      remoteCreateTime: Time.Packed, remoteByteLength: LONG CARDINAL] = {    sfn: STRING ¬ [150];    foundOneVersion: BOOLEAN ¬ FALSE;    -- only called once    EnumProcessFile: FileTransfer.ListProc = {      remoteInfo: FileTransfer.FileInfo ¬ info[conn].source;      vers: CARDINAL ¬ 0;      date: Time.Packed;      foundOneVersion ¬ TRUE;      IF ~String.Empty[remoteInfo.version] THEN        vers ¬ String.StringToDecimal[remoteInfo.version	  ! String.InvalidNumber => CONTINUE];      date ¬ remoteInfo.create;      remoteCreateTime ¬ date;  remoteVersion ¬ vers;      remoteByteLength ¬ remoteInfo.size;      IF createtime > 0 AND createtime = date THEN        fres ¬ foundCorrectVersion  -- df file date agrees with remote server date      ELSE IF createtime = 0 THEN        fres ¬ foundCorrectVersion  -- no date in the df file      ELSE         fres ¬ foundWrongVersion;   -- we were given a date but it did not agree      RETURN[do]};    fres ¬ notFound;    remoteCreateTime ¬ Time.Packed[0];    remoteByteLength ¬ 0;  remoteVersion ¬ 0;    CWF.SWF3[sfn, "[%s]<%s>%s!H"L, host, directory, shortname];    Transfer.EnumerateForProperties[fileName: sfn, enumProc: EnumProcessFile];    IF ~foundOneVersion THEN   -- no such file      RETURN[notFound, 0, Time.Packed[0], 0]    ELSE      RETURN[fres, remoteVersion, remoteCreateTime, remoteByteLength]};  END.