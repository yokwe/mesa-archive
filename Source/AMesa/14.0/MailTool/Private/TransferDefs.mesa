-- TransferDefs.mesaDIRECTORY  Auth,  Environment,  Inbasket,  MailAttributes,  MailTransfer,  MailTransport,  NSDataStream,  NSName,  NSString,  Stream,  System;TransferDefs: DEFINITIONS IMPORTS NSString  =  BEGIN  -- PUBLIC SYMBOLS FOR   -- NSMailTransfers   AddProc: TYPE = MailTransfer.AddProc;  AttachmentID: TYPE = MailTransfer.AttachmentID;  AttachmentIDRecord: TYPE = MailTransfer.AttachmentIDRecord;  Buffer: TYPE = LONG POINTER TO BufferBody;  BufferBody: TYPE = PACKED ARRAY [0..bufferBytes) OF Environment.Byte;  DeleteSeq: TYPE = RECORD [PACKED SEQUENCE length: CARDINAL OF BOOLEAN];  DeleteSeqPtr: TYPE = LONG POINTER TO DeleteSeq;  Envelope: TYPE = MailAttributes.Envelope;  EnvelopeRecord: TYPE = MailAttributes.EnvelopeRecord;  MBXState: TYPE = {    empty, notEmpty, down, badName, badPwd, authProblem, noCH, noMailboxes,    accessProblem, unknown};  MessageOutcome: TYPE = {    none, failed, skipped, stored, userAborted, insufficientSpace};  Handle: TYPE = LONG POINTER TO Object;  Object: PUBLIC TYPE = RECORD [    LOCK: MONITORLOCK,    clientData: LONG POINTER,    stateProc: PROCEDURE [LONG POINTER, MailTransfer.MailboxState, STRING],    servers: ARRAY ServerType OF Server,    state: MBXState ¬ unknown,    name: NSName.Name ¬ NIL,    identity: Auth.IdentityHandle ¬ NIL,    settingCredentials: BOOLEAN ¬ TRUE,    setThemAgain: BOOLEAN ¬ FALSE,    waitForWork: CONDITION,    watcherProcess: PROCESS ¬ NIL,    validated: BOOLEAN ¬ FALSE,    stopping: BOOLEAN ¬ FALSE];  PostProc: TYPE = MailTransfer.PostProc;  Server: TYPE = RECORD [    name: LONG STRING ¬ NIL,    location: MailTransport.Location ¬ NIL,    lastIndex, lastRead: Inbasket.Index ¬ nullInbasketIndex,    nLeft: CARDINAL ¬ 0, -- how many attachments out there    state, lastReportedState: MBXState ¬ unknown,    lastRecordedFailure: System.GreenwichMeanTime ¬ [0]];  ServerType: TYPE = MailTransport.MailboxType;  -- primary OR secondary  bufferPages: CARDINAL = 64;  bufferBytes: CARDINAL = bufferPages * Environment.bytesPerPage;  mailPollInterval: CARDINAL = 300;  -- (In seconds).  maxAttachmentIDStringLength: CARDINAL = MailTransfer.maxAttachmentIDStringLength;  maxDigitsPerWord: CARDINAL = MailTransfer.maxDigitsPerWord;  maxMailNoteLength: CARDINAL = 8000;  -- (In bytes).  maxMessageIDStringLength: CARDINAL = MailTransfer.maxMessageIDStringLength;  nullEnvelopeRecord: EnvelopeRecord = MailAttributes.nullEnvelopeRecord;  nullInbasketIndex: Inbasket.Index = 0;  nullSession: Inbasket.Session = Inbasket.nullSession;  oneHour: LONG CARDINAL = 1 * 60 * 60;  -- (In seconds).  separatorCharacter: CHARACTER = '-;  sessionErrorString: LONG STRING;  -- Initialized in PROC Init.  SkippingAttachment: SIGNAL;  userLoggedOff: BOOLEAN;  getAllAttachments: BOOLEAN;  zone: UNCOUNTED ZONE;  lastType: ServerType;  firstMsg: Inbasket.Index = 1;  AttachmentIDFromString: PROCEDURE [zone: UNCOUNTED ZONE, string: NSString.String]    RETURNS [attachmentID: AttachmentID ¬ NIL];  ChangeServer: PROCEDURE [h: Handle,    session: Inbasket.Session, pleaseDelete: DeleteSeqPtr,    noteOthersWereReceived: BOOLEAN, firstMsg: Inbasket.Index ¬ 1]    RETURNS [nDeleted: CARDINAL];  CheckReader: PROCEDURE [h: Handle];  CreateMSSession: PROCEDURE [h: Handle, i: ServerType]    RETURNS [session: Inbasket.Session];  CreateRead: PROCEDURE [    clientData: LONG POINTER,    stateProc: PROCEDURE [LONG POINTER, MailTransfer.MailboxState, STRING]]    RETURNS [h: Handle];  DestroyRead: PROCEDURE [h: Handle];  FindAttachmentIDsOnServer: PROCEDURE [    h: Handle, session: Inbasket.Session, i: ServerType,    attachmentIDs: LONG DESCRIPTOR FOR ARRAY OF AttachmentID]    RETURNS [pleaseDelete: DeleteSeqPtr ¬ NIL];  FormatHeader: PROCEDURE [    sH: Stream.Handle, attributes: MailAttributes.Attributes,    envelope: MailAttributes.Envelope, h: Handle, flushRemote: BOOLEAN]    RETURNS [attachment: BOOLEAN ¬ FALSE];  FreeAttachmentID: PROCEDURE [zone: UNCOUNTED ZONE, attachmentID: AttachmentID];  GetMailboxInfo: PROC [h: Handle, i: ServerType];  InternalStore: PROCEDURE [    h: Handle, envelope: Envelope, attributes: MailAttributes.Attributes,    buffer: Buffer, add: AddProc, post: PostProc, flushRemote: BOOLEAN,    serialStream: MailAttributes.SerialStream ¬ NIL]    RETURNS [bodyType: LONG CARDINAL, messageOutcome: MessageOutcome ¬ stored];  KillSession: PROC [session: Inbasket.Session];  MaybeZapMbxLocation: PROC [h: Handle, i: ServerType];  NewSession: PROC [h: Handle, i: ServerType]    RETURNS [session: Inbasket.Session ¬ nullSession];  NewUser: PROCEDURE [h: Handle];  ReportState: PROC [h: Handle];  ResetUserInfo: PROCEDURE [h: Handle];  StringFromAttachmentID: PROCEDURE [    zone: UNCOUNTED ZONE, attachmentID: AttachmentID]    RETURNS [string: NSString.String ¬ NSString.nullString];  StoreInMailFile: PROCEDURE [    h: Handle, sourceStream: NSDataStream.SourceStream, envelope: Envelope,    buffer: Buffer, add: AddProc, post: PostProc, flushRemote: BOOLEAN]    RETURNS [bodyType: LONG CARDINAL, messageOutcome: MessageOutcome ¬ stored];  STR: PROC [s: LONG STRING] RETURNS [NSString.String] = INLINE {    RETURN[NSString.StringFromMesaString[s]]};  END.