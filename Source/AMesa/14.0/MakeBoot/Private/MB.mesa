-- Copyright (C) 1981, 1982, 1983  by Xerox Corporation. All rights reserved. -- MB.mesa  --   JGS	14-Dec-82  9:14:42 --   BTL  	30-Nov-81 17:23:50 --   BJD    	20-Jul-83 10:42:42 --   AMD    	23-Jun-83 15:42:48 --   RKJ     	20-Sep-83 21:07:07 --   BGY     	12-Aug-86 14:51:32 DIRECTORY  BcdDefs USING [FTIndex, MTIndex],  BcdOps USING [BcdBase, CTHandle, FPHandle, MTHandle, SPHandle],  BootFile USING [Header],  MBVM USING [Base, CodeSeg, DataSeg, FileSeg, Links, Pages],  LoadStateFormat USING [Index],  PrincOpsExtras2 USING [    ControlLink, GFTIndex, GFTItem, GFTHandle, GlobalFrameBase,     LongGlobalFrameHandle, GlobalWord],  MFile USING [Handle],  StartList USING [Header, Base, StateVectorCounts],  Stream USING [Handle],  Time USING [Packed],  MBTTY USING [Handle],  System USING [Switches];MB: DEFINITIONS =  BEGIN    -- Types and Related Declarations  Handle: TYPE = LONG POINTER TO Object;  Object: TYPE = RECORD [    z: UNCOUNTED ZONE,    input, output: LONG STRING,    buildTime: Time.Packed,    ttyHandle: MBTTY.Handle,    debug, germ, hexLoadmap, utilityPilot, codeLinks: BOOLEAN,    inputBCDs: LONG POINTER TO InputBCDs,    lsseg: MBVM.DataSeg,  -- loadstate's MBVM segment    header: LONG POINTER TO StartList.Header,    bootHeader: LONG POINTER TO BootFile.Header,    bootStream: Stream.Handle,    nProcesses: CARDINAL,    framePages, pdaPages: LONG CARDINAL,    svSize: CARDINAL,    lsModules, lsBcds: CARDINAL,  -- size of initial LoadState    mdsBase, codeBase, lastVMPage, gftBase: MBVM.Base,    nBootPages, lastBootLoadedFilePage: LONG CARDINAL,    nModules, nGFIs, nGFTs: CARDINAL,    nFilePages, nResidentPages: LONG CARDINAL,    stateVectorCounts: StartList.StateVectorCounts,    scriptBase: StartList.Base,    switches: System.Switches,    lastgfti: PrincOpsExtras2.GFTIndex,    gft: GFTSequenceHandle,    localFramePages: LONG CARDINAL];   BIndex: TYPE = LoadStateFormat.Index;  BCount: TYPE = [FIRST[BIndex]..LAST[BIndex]-1+1];  InputBCDs: TYPE = RECORD[    nBcds: BCount ¬ 0,    bcds: SEQUENCE length: BCount OF BHandle ¬ NULL];  BHandle: TYPE = LONG POINTER TO BObject;  BObject: TYPE = RECORD [    name: LONG STRING,    bcd: BcdOps.BcdBase,    bcdSeg: MBVM.FileSeg,    mt: MT,    gfiOffset: CARDINAL,    files: FileItem];      FileItem: TYPE = LONG POINTER TO FileObject;  FileObject: TYPE = RECORD [    link: FileItem,    fti: BcdDefs.FTIndex,    handle: MFile.Handle,    create: Time.Packed,    ext: BOOLEAN];  -- TRUE => file's name has extension    GFTSequenceHandle: TYPE = LONG POINTER TO GFTSequence;  GFTSequence: TYPE = RECORD[    SEQUENCE length: CARDINAL OF PrincOpsExtras2.GFTItem];  MT: TYPE = LONG POINTER TO ModuleSeq;  ModuleSeq: TYPE = RECORD [    SEQUENCE length: CARDINAL OF ModuleInfo];  ModuleInfo: TYPE = RECORD [    mth: BcdOps.MTHandle,    frame: PrincOpsExtras2.LongGlobalFrameHandle,    gfth: PrincOpsExtras2.GFTHandle,    code: MBVM.CodeSeg,    codeLinks: MBVM.Links];  -- accelerator for information in code pieces  FirstFrameWord: TYPE = PrincOpsExtras2.GlobalWord;      -- From MBDebug  InitDebug: PROC [h: Handle];  FinishDebug: PROC;  DumpSegs, DumpFrames: PROC;  DumpInputBcds, DumpBootHeader, DumpStartList: PROC;  -- From MBDriver    Copy: PROC [from, to: LONG POINTER, n: CARDINAL];  Zero: PROC [p: LONG POINTER, n: CARDINAL];  MakeBootVersion: PROC [s: LONG STRING];  -- From MBLoader and friends  InitLoader: PROC [h: Handle];  FinishLoader: PROC;  Load: PROC;  ReleaseModuleTable: PROC [loadee: BHandle];  Alloc: PROC [fsi: CARDINAL] RETURNS [p: POINTER];  AllocFault: ERROR;  ProcessFramePacks: PROC [    bcd: BcdOps.BcdBase, userProc: PROC [BcdOps.FPHandle] RETURNS [BOOLEAN]]     RETURNS [fph: BcdOps.FPHandle];  -- From MBLoadmap  InitLoadmap: PROC [h: Handle];  FinishLoadmap: PROC;  -- From MBMain  InitMain: PROC [h: Handle];  FinishMain: PROC;  Abort: SIGNAL;  Error: PROC [msg: STRING];      InitMemory: PROC;  TurnOffStartTrap: PROC;  StartControlLink: PROC RETURNS [PrincOpsExtras2.ControlLink];  GetFrameWeight: PROC [index: CARDINAL] RETURNS [weight: CARDINAL];  SetFrameWeight: PROC [index, weight: CARDINAL];  SetFrameListEnd: PROC [index, end: CARDINAL];  GetFrameListEnd: PROC [index: CARDINAL] RETURNS [end: CARDINAL];    GetStateVectorCount: PROC [index: CARDINAL] RETURNS [count: CARDINAL];  SetStateVectorCount: PROC [index, count: CARDINAL];    AllocateFrames: PROC [size: CARDINAL, single, resident: BOOLEAN]    RETURNS [frames: POINTER, inFrameHeap: BOOLEAN];    ReportFrameAllocation: PROC;  -- From MBOutput  InitOutput: PROC [h: Handle];  FinishOutput: PROC;  WriteBootFile, WriteGermFile: PROC;  -- From MBParse  ListType: TYPE = {resident, resDesc, in};  InitParse: PROC [h: Handle];  FinishParse: PROC;  ProcessInput: PROC [file: LONG STRING];  EchoInput: PROC;  WartMTH: PROC RETURNS [BHandle, BcdOps.MTHandle];  EnumerateCode: PROC [    state: ListType,    proc: PROC [bh: BHandle, mth: BcdOps.MTHandle] RETURNS [BOOLEAN]];  EnumerateFramePacks: PROC [    state: ListType,    proc: PROC [bh: BHandle, fph: BcdOps.FPHandle] RETURNS [BOOLEAN]];  EnumerateSpaces: PROC [    state: ListType,     proc: PROC [bh: BHandle, sph: BcdOps.SPHandle, index: CARDINAL] RETURNS [BOOLEAN]];  EnumerateGlobalFrames: PROC [    state: ListType,    proc: PROC [bh: BHandle, mth: BcdOps.MTHandle] RETURNS [BOOLEAN]];  EnumerateBCDs: PROC [    state: ListType,    proc: PROC [bh: BHandle] RETURNS [BOOLEAN]];  EnumerateNoTrapModules: PROC [    proc: PROC [bh: BHandle, mth: BcdOps.MTHandle] RETURNS [BOOLEAN]];   EnumerateReservedMemory: PROC [    proc: PROC [base: MBVM.Base, pages: MBVM.Pages] RETURNS [BOOLEAN]];   -- From MBScript     InitScript: PROC [h: Handle];  FinishScript: PROC;   MakeScript: PROC;   -- From MBUtilities  InitializeUtilities: PROC [Handle];  FindGFI: PROC [bh: MB.BHandle, mth: BcdOps.MTHandle] RETURNS [gfi: CARDINAL];  FindGFIFromIndex: PROC [mti: BcdDefs.MTIndex] RETURNS [gfi: CARDINAL];  MtiFromGfi: PROC [gfi: CARDINAL] RETURNS [mti: BcdDefs.MTIndex];  NameToG: PROC [name: LONG STRING]     RETURNS [PrincOpsExtras2.LongGlobalFrameHandle];  NameToMTHandle: PROC [name: LONG STRING]    RETURNS [bh: BHandle, mth: BcdOps.MTHandle];  NameToFPHandle: PROC [name: LONG STRING]    RETURNS [bh: BHandle, fph: BcdOps.FPHandle];  NameToSPHandle: PROC [name: LONG STRING]    RETURNS [bh: BHandle, sph: BcdOps.SPHandle, index: CARDINAL];  NameToCTHandle: PROC [name: LONG STRING]    RETURNS [bh: MB.BHandle, cth: BcdOps.CTHandle];      InstanceToMTHandle: PROC [module, instance: LONG STRING]    RETURNS [bh: BHandle, mth: BcdOps.MTHandle];      DoAllModules: PROC [PROC [BHandle, BcdOps.MTHandle] RETURNS [BOOLEAN]]    RETURNS [BOOLEAN];  DoAllSpaces: PROC [PROC [BHandle, BcdOps.SPHandle, CARDINAL] RETURNS [BOOLEAN]]    RETURNS [BOOLEAN];  DoAllFramePacks: PROC [PROC [BHandle, BcdOps.FPHandle] RETURNS [BOOLEAN]]    RETURNS [BOOLEAN];  DoAllBCDs: PROC [PROC [BHandle] RETURNS [BOOLEAN]]    RETURNS [BOOLEAN];      SetConfig: PROC [name: LONG STRING];  ResetConfig: PROC;    VirtualGlobalFrame: PROC [    PrincOpsExtras2.LongGlobalFrameHandle]     RETURNS [PrincOpsExtras2.GlobalFrameBase];        -- From MBVMemory and MBCache  InitCache: PROC [h: Handle];  FinishCache: PROC;  InitVM: PROC [h: Handle];  FinishVM: PROC;  AltoSegmentStart: CARDINAL = 1;    -- From MBLoadedMemImpl    InitLoadedMem: PROC[h: MB.Handle];  FinishLoadedMem: PROC[];  EnterLinks: PROC[mth: BcdOps.MTHandle, links: MBVM.Links];  FetchLinks: PROC[mth: BcdOps.MTHandle] RETURNS [links: MBVM.Links];  GetData: PROC RETURNS [h: Handle];      END.  