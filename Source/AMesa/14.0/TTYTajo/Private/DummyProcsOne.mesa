-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- DummyProcsOne.mesa; edited by -- RXR,	19-Feb-82 14:06:44-- LGR,	 6-Oct-82 11:36:18-- RKJ,	26-Nov-82 17:29:23-- DWR,	29-Apr-85 15:36:25DIRECTORY  Cursor USING [Defined, Handle, Info, Type],  MFile USING [Handle],  Process USING [MsecToTicks, Pause, SecondsToTicks, Ticks],   Put USING [],   SpecialWindow USING [],  TajoOps USING [],  TajoMisc USING [],  TIP USING [GlobalTable, NotifyProc, Table],  ToolFont USING [],  UserInput USING [PeriodicNotifyHandle, PeriodicProcType],  Window USING [Box, Handle, nullBox, Place],  WindowFont USING [Handle];    DummyProcsOne: MONITOR IMPORTS Process  EXPORTS Cursor, Put, SpecialWindow, TajoOps, TajoMisc, TIP, ToolFont, UserInput,    Window =  BEGIN  -- etc  UserAbort: PUBLIC PROCEDURE [window: Window.Handle]     RETURNS [BOOLEAN] =           BEGIN    RETURN [FALSE]    END;  Char: PUBLIC PROCEDURE [h: Window.Handle, char: CHARACTER] = {};    TakeIndirectTypeIn: PUBLIC PROCEDURE [w: Window.Handle, takeIt: BOOLEAN] = {};-- Window  rootWindow: PUBLIC Window.Handle ¬ NIL;   InitializeWindow: PUBLIC PROC [    window: Window.Handle, display: PROC[Window.Handle], box: Window.Box,     parent, sibling, child: Window.Handle,     clearingRequired: BOOLEAN, under, cookieCutter: BOOLEAN] = {};    GetBox: PUBLIC PROC [Window.Handle] RETURNS [Window.Box] =     {RETURN[Window.nullBox]};-- SpecialWindow  DefineRoot: PUBLIC PROC [    window: Window.Handle, gray: ARRAY [0..4) OF CARDINAL, bitmapExists: BOOLEAN] = {};    -- UserInput, etc  WaitForConfirmation: PUBLIC PROCEDURE    RETURNS [place: Window.Place ¬ [0,0], okay: BOOLEAN ¬ FALSE] = {};      WaitNoButtons: PUBLIC PROCEDURE = {};    GetDefaultWindow: PUBLIC PROCEDURE RETURNS [w: Window.Handle ¬ NIL] = {    RETURN [NIL]};        StartStimulusLevel: PUBLIC ENTRY PROCEDURE = {};    ProcessUserActions: PUBLIC PROCEDURE = {};    Fetch, Store: PUBLIC PROCEDURE [cursor: Cursor.Handle] = {};    GetInfo: PUBLIC PROCEDURE RETURNS [Cursor.Info] = {RETURN[[blank, 0, 0]]};    Set: PUBLIC PROCEDURE [Cursor.Defined] = {};    UniqueType: PUBLIC PROCEDURE RETURNS [Cursor.Type]  = {    RETURN [blank]};    Invert: PUBLIC PROCEDURE RETURNS [BOOLEAN] = {    RETURN [TRUE]};    LongString, Text: PUBLIC PROC [h: Window.Handle, s: LONG STRING] = {};    swapCtrlAndCommand: PUBLIC BOOLEAN ¬ FALSE;  SetSwapCtrlAndCommand: PUBLIC PROCEDURE [b: BOOLEAN] = {swapCtrlAndCommand ¬ b};    CreatePeriodicNotify: PUBLIC ENTRY PROCEDURE [    proc: UserInput.PeriodicProcType, window: Window.Handle, rate: Process.Ticks]    RETURNS [p: UserInput.PeriodicNotifyHandle] = {};      Create: PUBLIC PROCEDURE [MFile.Handle]     RETURNS [WindowFont.Handle] = {    RETURN [NIL]};     -- TajoMisc   WaitMilliSecs: PUBLIC PROCEDURE [msec: CARDINAL] = {    Process.Pause[Process.MsecToTicks[msec]]};      WaitSecs: PUBLIC PROCEDURE [secs: CARDINAL] = {    Process.Pause[Process.SecondsToTicks[secs]]}; -- TIP   globalTable: PUBLIC ARRAY TIP.GlobalTable OF TIP.Table ¬ ALL[NIL];  CreateClient: PUBLIC PROCEDURE [    window: Window.Handle, table: TIP.Table, notify: TIP.NotifyProc] = {};      SetTable: PUBLIC PROCEDURE [window: Window.Handle, table: TIP.Table]    RETURNS [oldTable: TIP.Table] = {RETURN[NIL]};  END.