-- Copyright (C) 1981, 1982, 1983  by Xerox Corporation. All rights reserved. -- file PGSConDefs.mesa--   EXS          	March 16, 1981  1:53 PM--   BTL  		29-Oct-81 17:05:24--   JGS		 4-Nov-82 11:23:15--   RES  		 6-Dec-82 16:21:10--   RXJ     		 6-Jul-83 19:14:07DIRECTORY  Ascii: TYPE USING [ControlZ, CR, TAB],  Environment: TYPE USING [bitsPerWord, charsPerWord, wordsPerPage],  PGSTypes: TYPE USING [    Aliases, LongDes, LongPointer, Options, ProdInfo, RhsChar, SymTab, SymInfo, TokenInfo,    alternatelim, maxprod, maxrhssymbols, maxrule, psslim, rhslim, symtabsize, tokensize,    GetBit, SetBit],  Stream: TYPE USING [Handle],  TimeStamp: TYPE USING [Stamp];PGSConDefs: DEFINITIONS IMPORTS PGSTypes = { -- machine parameters  cpw: CARDINAL = Environment.charsPerWord;  pagesize: CARDINAL = Environment.wordsPerPage;  wordlength: CARDINAL = Environment.bitsPerWord;  maxcharcode: CARDINAL = LAST[CHARACTER]-FIRST[CHARACTER]; -- common compile time constants  outbuflim: CARDINAL = 90;  TextPages: CARDINAL = 6;  TextWords: CARDINAL = TextPages*pagesize;  TextChars: CARDINAL = TextWords*cpw; --PGSScan compile time constants  alternatelim: CARDINAL = PGSTypes.alternatelim;  maxprod: CARDINAL = PGSTypes.maxprod;  maxrhssymbols: CARDINAL = PGSTypes.maxrhssymbols;  maxrule: CARDINAL = PGSTypes.maxrule;  psslim: CARDINAL = PGSTypes.psslim;  rhslim: CARDINAL = PGSTypes.rhslim;  symtabsize: CARDINAL = PGSTypes.symtabsize;  tokensize: CARDINAL = PGSTypes.tokensize;  wordsfortoken: CARDINAL = (tokensize+cpw-1)/cpw;  CR: CHARACTER  = Ascii.CR;  TAB: CHARACTER = Ascii.TAB; -- used by PGSformat  ControlZ: CHARACTER = Ascii.ControlZ;  --Bravo escape character  query: CHARACTER = '?; -- marker character in PGSformat --PGSLALR constants  maxstatenum: CARDINAL = 400;  stateext: CARDINAL = 100;  maxtabentries: CARDINAL = 7000;  tabext: CARDINAL = 1000;  maxcontexts: CARDINAL = 960; --PGSTab constants  defaultmarker: CARDINAL = 0; -- structures built and exported by PGSControl, used by PGSFormat and PGSBcd  pgsVersion: TimeStamp.Stamp;  sourceVersion: TimeStamp.Stamp;  sourceName: LONG STRING;  objectVersion: TimeStamp.Stamp; -- structures built by PGSScan, exported by PGSControl, used by PGSLALR and PGSTab  warningsLogged: BOOLEAN;  eofile: CARDINAL;  -- last terminal  totalTokens: CARDINAL;  -- size of grammar vocabulary  numrules: CARDINAL;  -- number of rules  numprod: CARDINAL;  -- number of productions  nextAlias: CARDINAL;  -- number of aliased terminal symbols  flags: ARRAY PGSTypes.Options OF BOOLEAN;  symtab: PGSTypes.SymTab;  syminfo: PGSTypes.SymInfo;  aliases: PGSTypes.Aliases;  tokeninfo: PGSTypes.TokenInfo;  prodinfo: PGSTypes.ProdInfo;  rhschar: PGSTypes.RhsChar; -- structures built by PGSLALR, exported by PGSControl, used by PGSTab  slim, tentries, ntentries: CARDINAL; -- structures built by PGSLALR, exported by PGSControl, used by PGSControl and PGSLALR  bitstrsize: CARDINAL;-- procedures  LongPointer: TYPE = PGSTypes.LongPointer;  LongDes: TYPE = PGSTypes.LongDes; -- storage management, exported by PGSControl  AllocateHeapNode: PROC [nwords: CARDINAL] RETURNS [LONG POINTER];  AllocateSegment: PROC [nwords: CARDINAL] RETURNS [LONG POINTER];  expand: PROC [des: LongDes, width, ext: CARDINAL] RETURNS [LongDes];  FreeHeapNode: PROC [base: LONG POINTER];  FreeSegment: PROC [LONG POINTER];  makearray: PROC [length, width: CARDINAL] RETURNS [LongDes];  FreeArray: PROC [des: LongDes]; -- stream input/output, exported by PGSControl  nextbuffer: PROC RETURNS [	p: LONG POINTER TO PACKED ARRAY OF CHARACTER, c: CARDINAL, last: BOOLEAN];  outeol: PROC [n: CARDINAL];  outchar: PROC [c: CHARACTER, n: INTEGER];  outstring: PROC [string: LONG STRING];  outtime: PROC;  outtab: PROC;  outword: PROC [n: CARDINAL];  inword: PROC RETURNS [CARDINAL];  outblock: PROC [address: LONG POINTER, words: CARDINAL];  outnum: PROC [val: INTEGER, cols: CARDINAL, signChar: CHARACTER¬'-];  seterrstream: PROC;  setoutstream: PROC [dotstring: LONG STRING];  resetoutstream: PROC;  cleanupstreams: PROC;  closeoutstream: PROC;  openwordstream: PROC [scratch: BOOLEAN ¬ TRUE];  closewordstream: PROC; -- bit manipulation, exported by PGSControl  findbit: PROC [num: CARDINAL, source: LongPointer] RETURNS [BOOLEAN] =    INLINE {RETURN [PGSTypes.GetBit[source+num/wordlength, num MOD wordlength] # 0]};  insertbit: PROC [num: CARDINAL, sink: LongPointer] =    INLINE {PGSTypes.SetBit[1, sink + num/wordlength, num MOD wordlength]};  orcount: CARDINAL;  orbits: PROC [source, sink: LongPointer]; -- errors, exported by PGSControl  PGSfail: ERROR; -- implemented by PGSScan  OutToken: PROC [symbol: CARDINAL] RETURNS [CARDINAL];  CheckOut: PROC; -- implemented by PGSLALR  LALRGen: PROC RETURNS [BOOLEAN]; -- implemented by PGSTab  TabGen: PROC [prefix, suffix: PROC] RETURNS [BOOLEAN];  OutModule: PROC [typename, modfname: LONG STRING, long: BOOLEAN ¬ FALSE]; -- implemented by PGSFormat  Format: PROC [table, type, export: LONG STRING];  PrintGrammar: PROC; -- implemented by PGSBcd  WriteBcdHeader: PROC [      outStream: Stream.Handle,      tableId, binaryId: LONG STRING,	-- file being written      sourceId: LONG STRING,   -- name of input file      interfaceId, fileId: LONG STRING];	-- interface being exported  FixupBcdHeader: PROC; -- implemented by PGSSymbols  WriteSymbols: PROC [s: Stream.Handle, moduleId: LONG STRING]; -- implemented by PGSInterface  AcquireTable: PROC RETURNS [LONG POINTER];  ReleaseTable: PROC;  }.