-- SpecialDisplay.mesa - last edited by -- BXM  	15-Oct-82 17:29:38-- AXD    	19-Oct-82 18:15:45-- PXK    	30-Sep-82 10:57:31  -- Copyright (C) Versatec, A Xerox Company 1982. All rights reserved.DIRECTORY  BitBlt USING [BitAddress, BitBltFlags],  Display USING [BreakReason, Brick],  Inline: TYPE USING [DBITSHIFT, BITAND, LongMult, LongNumber],  Environment USING [Block],  Window USING [Box, BoxHandle, Handle, Place],  WindowFont USING [Handle];  SpecialDisplay: DEFINITIONS IMPORTS Inline =   BEGIN  Handle: TYPE = Window.Handle;    -- filled areas  FillHandle: TYPE = LONG POINTER TO FillObject;  FillObject: TYPE;    FillAllocator: TYPE = PROC [window: Handle, start, length: CARDINAL]     RETURNS [FillHandle];  FillDeallocator: TYPE = PROC [Handle];  -- special context  Special: TYPE = LONG POINTER TO SpecialContext;  SpecialContext: TYPE = RECORD [    bmAddress: LONG ORDERED POINTER,    wpl: CARDINAL,    bpl: CARDINAL,    alloc: FillAllocator,    free: FillDeallocator];    -- dashed and thick lines and curves  DashCnt: CARDINAL = 6;  LineStyle: TYPE = LONG POINTER TO LineStyleObject;  LineStyleObject: TYPE = RECORD [    widths: ARRAY [0..DashCnt) OF CARDINAL,     thickness: CARDINAL];  defaultContext: READONLY Special;  solid: READONLY LineStyle;    -- arcs  SpArc: PROC [    window: Handle, place: Window.Place, radius: INTEGER,     startSector, stopSector: CARDINAL, start, stop: Window.Place,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,    context: Special ¬ defaultContext];        -- bitmaps  SpBitmap: PROC [    window: Handle, box: Window.Box, address: BitBlt.BitAddress,     bitmapBitWidth: CARDINAL, flags: BitBlt.BitBltFlags,    context: Special ¬ defaultContext];    -- Address calculation utility    BitAddressFromPlace: PROC [    base: BitBlt.BitAddress, x, y: NATURAL, raster: CARDINAL]    RETURNS [BitBlt.BitAddress] = INLINE {    OPEN Inline;    LocalBitAddress: PRIVATE TYPE = RECORD [word: LONG POINTER, bit: CARDINAL];    bitOffset: LongNumber = [lc[LongMult[y, raster] +       LOOPHOLE[base, LocalBitAddress].bit + x]];    RETURN[LOOPHOLE[      LocalBitAddress[        word: base.word + DBITSHIFT[bitOffset.lu, -4],        bit: BITAND[bitOffset.lowbits, 15]]]]};    -- boxes  SpWhite: PROCEDURE [    window: Handle, box: Window.Box, context: Special ¬ defaultContext];  SpBlack: PROCEDURE [    window: Handle, box: Window.Box, context: Special ¬ defaultContext];  SpInvert: PROCEDURE [    window: Handle, box: Window.Box, context: Special ¬ defaultContext];      -- circles  SpCircle: PROC [    window: Handle, place: Window.Place, radius: INTEGER,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,    context: Special ¬ defaultContext];    -- conics  SpConic: PROC [    window: Handle, a, b, c, d, e, errorTerm: LONG INTEGER,     start, stop, errorRef: Window.Place, sharpCornered: BOOLEAN,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    -- ellipses  SpEllipse: PROC [    window: Handle, center: Window.Place, xRadius, yRadius: INTEGER,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    -- grays  SpGray: PROC [    window: Handle, box: Window.Box, gray: Display.Brick,     flags: BitBlt.BitBltFlags, context: Special ¬ defaultContext];      -- lines  SpecialLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle,    dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    OrthogonalLine: PROC [window: Handle, line: Window.Box];  SpOrthoLine: PROC [    window: Handle, line: Window.Box, dashes: LineStyle,     flags: BitBlt.BitBltFlags, context: Special ¬ defaultContext];    Positive45Line: PROC [    window: Handle, place: Window.Place, stopX: INTEGER,     bounds: Window.BoxHandle];  SpPositive45Line: PROC [    window: Handle, place: Window.Place, stopX: INTEGER,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    Negative45Line: PROC [    window: Handle, place: Window.Place, stopX: INTEGER,     bounds: Window.BoxHandle];  SpNegative45Line: PROC [    window: Handle, place: Window.Place, stopX: INTEGER,     bounds: Window.BoxHandle, dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];      PositiveShallowLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle];  SpPositiveShallowLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle,    dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    NegativeShallowLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle];  SpNegativeShallowLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle,    dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    PositiveSteepLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle];  SpPositiveSteepLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle,    dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    NegativeSteepLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle];  SpNegativeSteepLine: PROC [    window: Handle, start, stop: Window.Place, bounds: Window.BoxHandle,    dashes: LineStyle, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];    -- points  SpPoint: PROC [    window: Handle, point: Window.Place, flags: BitBlt.BitBltFlags,     context: Special ¬ defaultContext];        -- text  SpBlock: PROC [    window: Handle, block: Environment.Block, lineLength: INTEGER,     place: Window.Place, font: WindowFont.Handle, flags: BitBlt.BitBltFlags,     bounds: Window.BoxHandle, context: Special ¬ defaultContext]    RETURNS [      newPlace: Window.Place, positions: CARDINAL, why: Display.BreakReason];      SpCharacter: PROC [    window: Handle, char: CHARACTER, place: Window.Place,     font: WindowFont.Handle, flags: BitBlt.BitBltFlags,     bounds: Window.BoxHandle, context: Special ¬ defaultContext]    RETURNS [Window.Place];    END.