-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- File: TextSWOpsExtra.mesa - last edit:-- DWR    	21-Nov-84 12:57:16DIRECTORY  TextSource USING [Handle, nullPosition, Position];TextSWOpsExtra: DEFINITIONS =  BEGIN    « Probably should be in TextSource.mesa instead of TextSWsOps.mesa, but then BlankCount[] is in TextSWsOps! »  -- Extended versions of BlankCount[]  « Finds the start of a line before pos using TextSources.ScanText[] and returns the number of virtual spaces on that line. »    NewBlankCount: PUBLIC PROC [source: TextSource.Handle, insert, pos: TextSource.Position] RETURNS [count: CARDINAL];      « appends the white space found at the source position firstCharOnLine onto the string whiteSpace.  Spaces are converted to TABs if possible.  The string whiteSpace better be big enough. If no white space (Ascii.SPs or Ascii.TABs) begins the line, then whiteSpace.length will be unchanged. »  SnarfWhiteSpace: PROC [source: TextSource.Handle, whiteSpace: LONG STRING, firstCharOnLine: TextSource.Position, insert: TextSource.Position ¬ TextSource.nullPosition];  « Counts the number of spaces that begin the line.  TABs are considered to be (8 - column MOD 8) spaces, where column is the character position that the TAB occurs at.  If you want to count blanks for autoIndent, and If you happen to be hitting a carriage return in the middle of a line of blanks, then you will want to stop counting virtual spaces at the insertion position.  If you want this feature, specify an insert position when you call the procedure.  »     VirtualSpaces: PROC [source: TextSource.Handle, firstCharOnLine: TextSource.Position, insert: TextSource.Position ¬ TextSource.nullPosition] RETURNS [count: CARDINAL ¬ 0];     END. -- of TextSWOpsExtra