-- Copyright (C) 1981, 1982, 1984  by Xerox Corporation. All rights reserved. -- FileTransferOps.mesa - last edited by:-- BJD    	14-Jun-84 11:37:31-- SXS   	20-May-81 14:20:34-- BXM  	 9-Feb-82 14:27:28DIRECTORY  Auth USING [IdentityHandle],  FileName USING [VFN],  FileTransfer USING [    CheckAbortProc, ClientProc, Confirmation, DesiredProperties,    FileInfo, FileType, ListProc, MessageProc, ServerType, StreamType, VetoProc],  MSegment USING [Handle],  Stream USING [Handle, Object],  Time USING [Packed];FileTransferOps: DEFINITIONS =  BEGIN OPEN FileTransfer;  z: UNCOUNTED ZONE;    maxDir: CARDINAL = 100;  maxFileName: CARDINAL = 100;  maxName: CARDINAL = 100;  maxPassword: CARDINAL = 25;  Credentials: TYPE = LONG POINTER TO CredentialsObject;  CredentialsObject: TYPE = RECORD [directory, password: LONG STRING];  NullCredentials: CredentialsObject = [NIL, NIL];  CredentialLevel: TYPE = {secondary, emptyConnectPassword, primary};  Which: TYPE = {source, target};  ConnectionPassword: CARDINAL = 112233B;  StreamSeal: INTEGER = 10981;    NSDataHandle: TYPE = LONG POINTER TO NSDataObject;  NSDataObject: TYPE;    StpHandle: TYPE = LONG POINTER;  Connection: TYPE = LONG POINTER TO ConnectionObject;  ConnectionObject: TYPE = RECORD [    password: CARDINAL ¬ ConnectionPassword,    stp: StpHandle ¬ NIL,    nsData: NSDataHandle ¬ NIL,    stream: Stream.Handle ¬ NIL,    clientData: LONG POINTER ¬ NIL,    host: LONG STRING ¬ NIL,    lastHost: LONG STRING ¬ NIL,    primary, secondary: CredentialsObject ¬ NullCredentials,    id: Auth.IdentityHandle ¬ NIL,    newCredentials: BOOLEAN ¬ TRUE,    post: MessageProc ¬ NIL,    progress: ClientProc ¬ NIL,    abort: CheckAbortProc ¬ NIL,    login: ClientProc ¬ NIL,    buffer: MSegment.Handle ¬ NIL,    info: ARRAY Which OF FileInfo ¬ ALL[NIL],    good: ARRAY Which OF BOOLEAN ¬ ALL[FALSE],    desiredProps: DesiredProperties ¬ ALL[TRUE],    level: CredentialLevel ¬ secondary,    serverType: ServerType ¬ local,    preferredType: ServerType ¬ local,    currentPrimitives: PrimitivesHandle ¬ NIL,    localPrimitives: PrimitivesHandle ¬ NIL,    pupPrimitives: PrimitivesHandle ¬ NIL,    nsPrimitives: PrimitivesHandle ¬ NIL];      FTHandle: TYPE = LONG POINTER TO FTObject;  FTObject: TYPE = RECORD [    object: Stream.Object,    seal: INTEGER ¬ StreamSeal,    conn: Connection,    stream: Stream.Handle,    veto: VetoProc,    file: LONG STRING,    dates: BOOLEAN,    op: Operation,    retrieveFile: BOOLEAN,    data: LONG POINTER,    free: PROC [FTHandle, LONG POINTER]];        Operation: TYPE = {    null, close, enumerate, rename, delete, localToLocal, localToRemote,    remoteToLocal, remoteToRemote, storeStream, retrieveStream, get, readNext,    delver};      Command: TYPE = LONG POINTER TO CommandObject;  ListCommand: TYPE = LONG POINTER TO enumerate CommandObject;  RenameCommand: TYPE = LONG POINTER TO rename CommandObject;  DeleteCommand: TYPE = LONG POINTER TO delete CommandObject;  CopyCommand: TYPE = LONG POINTER TO localToLocal CommandObject;  StoreCommand: TYPE = LONG POINTER TO localToRemote CommandObject;  RetrieveCommand: TYPE = LONG POINTER TO remoteToLocal CommandObject;  TransferCommand: TYPE = LONG POINTER TO remoteToRemote CommandObject;  RetrieveStreamCommand: TYPE = LONG POINTER TO retrieveStream CommandObject;  StoreStreamCommand: TYPE = LONG POINTER TO storeStream CommandObject;    DelVerCommand: TYPE = LONG POINTER TO delver CommandObject;    CommandObject: TYPE = RECORD [    SELECT op: Operation FROM      close => NULL,      enumerate => [files: FileName.VFN, proc: ListProc],      rename => [old, new: FileName.VFN],      delete => [file: FileName.VFN, veto: VetoProc ¬ NIL],      localToLocal => [source, dest: FileName.VFN, veto: VetoProc, dates: BOOLEAN],      localToRemote => [source, dest: FileName.VFN, veto: VetoProc, dates: BOOLEAN],      remoteToLocal => [source, dest: FileName.VFN, veto: VetoProc, dates: BOOLEAN,      			 type: StreamType],      remoteToRemote => [      destConn: Connection, source, dest: FileName.VFN, veto: VetoProc, dates: BOOLEAN],      retrieveStream => [remote: FileName.VFN, veto: VetoProc, dates: BOOLEAN],      storeStream => [        remote: FileName.VFN, veto: VetoProc, dates: BOOLEAN, stream: Stream.Handle,        creation: Time.Packed, bytes: LONG CARDINAL, fileType: FileType,	default: LONG STRING],      delver => [files: FileName.VFN, keep: CARDINAL, proc: ListProc ¬ NIL]      ENDCASE];    PupPrimitives, NSPrimitives, LocalPrimitives: PrimitivesHandle;     PrimitivesHandle: TYPE = LONG POINTER TO PrimitivesObject;  PrimitivesObject: TYPE = RECORD [    catchErrors: CatchErrorsProc ¬ NIL,    streamCatchErrors: CatchErrorsProc ¬ NIL,    deleteFile: DeleteFileProc ¬ NIL,    listFile: ListFileProc ¬ NIL,    renameFile: RenameFileProc ¬ NIL,    retrieveFile: RetrieveFileProc ¬ NIL,    retrieveNextFile: RetrieveNextFileProc ¬ NIL,    storeFile: StoreFileProc ¬ NIL,        retrieveStream: RetrieveStreamProc ¬ NIL,    retrieveNextStream: RetrieveNextStreamProc ¬ NIL,    storeStream: StoreStreamProc ¬ NIL,        close: CloseProc ¬ NIL,    getStreamInfo: GetStreamInfoProc ¬ NIL,    delver: DeleteKeepVersionsProc ¬ NIL ];      CatchErrorsProc: TYPE = PROC [    c: Connection, op: Operation, primitive: PROC[Connection],    fileName: LONG STRING ¬ NIL, vfn: FileName.VFN ¬ NIL];  DeleteFileProc: TYPE = PROC [c: Connection, p: DeleteCommand];  ListFileProc: TYPE = PROC [c: Connection, p: ListCommand];  RenameFileProc: TYPE = PROC [c: Connection, p: RenameCommand];  RetrieveFileProc: TYPE = PROC [c: Connection, p: RetrieveCommand];  RetrieveNextFileProc: TYPE = PROC [c: Connection, ft: FTHandle ¬ NIL]    RETURNS [Confirmation];  StoreFileProc: TYPE = PROC [c: Connection, p: StoreCommand];    RetrieveStreamProc: TYPE = PROC [c: Connection, p: RetrieveStreamCommand];  RetrieveNextStreamProc: TYPE = PROC [c: Connection, ft: FTHandle ¬ NIL]    RETURNS [Confirmation];  StoreStreamProc: TYPE = PROC [c: Connection, p: StoreStreamCommand];    CloseProc: TYPE = PROC [c: Connection, printErrs, freeObject: BOOLEAN ¬ FALSE];  GetStreamInfoProc: TYPE = PROC [ft: FTHandle];  DeleteKeepVersionsProc: TYPE = PROC [c: Connection, p: DelVerCommand];    StartPup: PROC;  StartNS: PROC;    END.