-- Copyright (C) 1980, 1981, 1982  by Xerox Corporation. All rights reserved. -- SimpleExec.mesa; edited by RXJ     , 15-Dec-80 13:31:29-- edited by SXW   , 12-Jul-81 15:21:02-- edited by LXR    ,  23-Sep-82 18:15:33-- edited by RES  , 3-Apr-81 10:01:01-- edited by BXM  ,  4-Sep-81 15:22:34-- edited by SXS   ,  1-Mar-82 17:15:22-- RXR   , 	30-Sep-82 15:29:34DIRECTORY  Exec USING [CheckAbortProc],  ExecInternal USING [CreateExec],  ExecUtilities USING [execWindow],  MStream USING [Handle, PleaseReleaseProc, SetLogReadLength, SetReleaseData],  Process USING [Abort],  Profile USING [initialToolStateDefault],  Runtime USING [GetBcdTime],  String USING [AppendString],  Time USING [Append, Unpack],  Tool USING [Create, MakeTTYSW, UnusedLogName],  ToolDriver USING [Address, NoteSWs, RemoveSWs],  ToolWindow USING [TransitionProcType],  TTY USING [Handle],  TTYSW USING [BackingStream, GetTTYHandle],  UserInput USING [ResetUserAbort, SetUserAbort],  Version USING [Append],  Window USING [Dims, GetBox, Handle, rootWindow];SimpleExec: MONITOR  IMPORTS    ExecInternal, ExecUtilities, MStream, Process, Profile,    Runtime, String, Time, Tool, ToolDriver,     TTYSW, UserInput, Version, Window   EXPORTS ExecInternal =  BEGIN  lastLineEnd: LONG INTEGER ¬ 0;  destroy: BOOLEAN ¬ FALSE;  p: PROCESS;  logSW, window: Window.Handle;  tty: TTY.Handle;  stream: MStream.Handle;  IsDeactivated: ENTRY Exec.CheckAbortProc = {RETURN[destroy]};  StopProcess: ENTRY PROCEDURE = {destroy ¬ TRUE};  MakeMySWs: PROC [window: Window.Handle] =    BEGIN    log: STRING ¬ [40];    address: ARRAY [0..1) OF ToolDriver.Address;    Tool.UnusedLogName[unused: log, root: "SimpleExec.Log"L];    logSW ¬ Tool.MakeTTYSW[window, log];    tty ¬ TTYSW.GetTTYHandle[logSW];    stream ¬ TTYSW.BackingStream[logSW];    MStream.SetReleaseData[stream, [MyRelease, NIL]];    address ¬ [["ExecTTY"L, logSW]];    ToolDriver.NoteSWs["SimpleExec"L, DESCRIPTOR[address]];    destroy ¬ FALSE;    p ¬ FORK ExecInternal.CreateExec[tty: tty, CheckIfDeactivated: IsDeactivated, NoteNewLine: NoteNewLine];    END;  Transit: ToolWindow.TransitionProcType =    BEGIN    IF new = inactive THEN {      StopProcess[];      UserInput.SetUserAbort[window];      Process.Abort[p];      JOIN p;      ToolDriver.RemoveSWs[tool: "SimpleExec"L]}    ELSE IF old = inactive THEN UserInput.ResetUserAbort[window];    END;  MyRelease: MStream.PleaseReleaseProc =    BEGIN MStream.SetLogReadLength[stream, lastLineEnd]; RETURN[no]; END;  NoteNewLine: PROCEDURE =    BEGIN lastLineEnd ¬ stream.getPosition[stream]; END;  InitExec: PROCEDURE =    BEGIN    s: STRING ¬ [50];    rDims: Window.Dims = Window.GetBox[Window.rootWindow].dims;    dims: Window.Dims = [500, 300];    String.AppendString[s, "Executive "L];    Version.Append[s];    String.AppendString[s, " of "L];    Time.Append[s, Time.Unpack[Runtime.GetBcdTime[]]];    window ¬ Tool.Create[      name: s, makeSWsProc: MakeMySWs, clientTransition: Transit,      cmSection: "Executive"L,      initialState:      IF Profile.initialToolStateDefault = active THEN active ELSE tiny];    IF ExecUtilities.execWindow = NIL THEN      ExecUtilities.execWindow ¬ window;    END;  InitExec[]  END...