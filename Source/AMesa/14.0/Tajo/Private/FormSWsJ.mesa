-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- [igor]<emerson>Tajo>Private>FormSWsJ.mesa-- Edited by:-- BGY     	25-Jan-83 15:50:18-- PXK    	20-Oct-82 13:43:13-- AXD    	17-Dec-82 16:24:07DIRECTORY  Atom USING [ATOM, MakeAtom],  Dictionary USING [InvokeTool],  FormSWOps USING [AdjustUp, Again, BackSpaceFNR, BackWordFNR, DeleteFNR,     DoSelect, Expand, ExtendSel, JFirstFNR, JLastFNR, lastTime,    MenuDown, MoveInsertion,     NextDeleteFNR, NextFNR, PointUp, ReplaceFNR, TrackCursor, Undo],  Heap USING [systemZone],  Profile USING [debugging],  Put USING [CR, Line, Text],  Selection USING [Clear],  System USING [Pulses],  TIP USING [First, NotifyProc, Rest, Results],  UserInput USING [StuffCharacter, StuffCurrentSelection, StuffString,     StuffTrashBin],  UserTerminal USING [BlinkDisplay],  Window USING [Place];FormSWsJ: PROGRAM  IMPORTS TIP, Atom, Dictionary, FormSWOps, Heap, Profile, Put, Selection,     UserInput, UserTerminal   EXPORTS FormSWOps =    BEGIN    FSWAtom: TYPE = {    Again, BackSpace, BackWord, CopyDown, CopyUp, Define, Delete, Enter,    Expand, Exit, Find, JFirst, JInsert, JLast, JSelect, MoveDown, MoveUp,    MoveInsertion, Next, NextDelete, Paste, Replace, Stuff, DoPrimary,    ExtendPrimary, Noop, TrackCursor, PointUp, InsertToSel, AdjustUp,    MenuDown, PointMotion, AdjustMotion, DoMoveCopy, Undo};    Atoms: TYPE = ARRAY FSWAtom OF Atom.ATOM;  atoms: LONG POINTER TO Atoms ¬ NIL;    moveCopy: PUBLIC BOOLEAN ¬ FALSE;    InterpInput: PUBLIC TIP.NotifyProc = {    coords: Window.Place;    time: System.Pulses;    temp: System.Pulses ¬ FormSWOps.lastTime;    BEGIN    ENABLE ABORTED => GOTO aborted;    FormSWOps.lastTime ¬ [0];    FOR input: TIP.Results ¬ results, input.Rest UNTIL input = NIL DO      WITH z: input.First SELECT FROM        char => IF  ~UserInput.StuffCharacter[window, z.c] THEN	  UserTerminal.BlinkDisplay[];        coords => coords ¬ z.place;        string => IF ~UserInput.StuffString[window, z.s] THEN 	  UserTerminal.BlinkDisplay[];        int => NULL;        time => time ¬ z.time;        atom => 	  SELECT z.a FROM	    atoms[AdjustMotion]	=> FormSWOps.TrackCursor[window, coords];	    atoms[AdjustUp]	=> {FormSWOps.lastTime ¬ temp;	    			    FormSWOps.AdjustUp[window, coords, time]};	    atoms[Again]	=> FormSWOps.Again[window];	    atoms[BackSpace]	=> FormSWOps.BackSpaceFNR[window];	    atoms[BackWord]	=> FormSWOps.BackWordFNR[window];	    atoms[CopyDown]	=> Selection.Clear[];	    atoms[CopyUp]	=> {[] ¬ UserInput.StuffCurrentSelection[window];				   moveCopy ¬ FALSE};	    atoms[Define]	=> Dictionary.InvokeTool[];	    atoms[Delete]	=> FormSWOps.DeleteFNR[window];	    atoms[DoPrimary]	=> {FormSWOps.lastTime ¬ temp;	    			    FormSWOps.DoSelect[window, coords, time]};	    atoms[DoMoveCopy]	=> moveCopy ¬ TRUE;	    atoms[Enter]	=> NULL;	    atoms[Exit]		=> NULL;	    atoms[Expand]	=> FormSWOps.Expand[window];	    atoms[ExtendPrimary]=> {FormSWOps.lastTime ¬ temp;	    			    FormSWOps.ExtendSel[window, coords]};	--  atoms[Find]		=> FormSWOps.FindFNR[window];	    atoms[InsertToSel]	=> moveCopy ¬ FALSE;	    atoms[JFirst]	=> FormSWOps.JFirstFNR[window];	--  atoms[JInsert]	=> FormSWOps.JInsertFNR[window];	    atoms[JLast]	=> FormSWOps.JLastFNR[window];	--  atoms[JSelect ]	=> FormSWOps.JSelectFNR[window];	    atoms[MenuDown]	=> FormSWOps.MenuDown[window, coords];	    atoms[MoveInsertion] => FormSWOps.MoveInsertion[window, coords];	    atoms[MoveDown]	=> Selection.Clear[];	    atoms[MoveUp]	=> {FormSWOps.DeleteFNR[window];	    			   [] ¬ UserInput.StuffTrashBin[window];				   moveCopy ¬ FALSE};	    atoms[Next]		=> FormSWOps.NextFNR[window];	    atoms[NextDelete]	=> FormSWOps.NextDeleteFNR[window];	    atoms[Noop]		=> NULL;	    atoms[Paste]	=> [] ¬ UserInput.StuffTrashBin[window];	    atoms[PointMotion]	=> FormSWOps.TrackCursor[window, coords];	    atoms[PointUp]	=> {FormSWOps.lastTime ¬ temp;	    			    FormSWOps.PointUp[window, coords, time]};	    atoms[Replace ]	=> FormSWOps.ReplaceFNR[window];	    atoms[Stuff ]	=> [] ¬ UserInput.StuffCurrentSelection[window];	    atoms[TrackCursor]	=> {FormSWOps.lastTime ¬ temp;	    			    FormSWOps.TrackCursor[window, coords]};	    atoms[Undo]	 	=> FormSWOps.Undo[window];	  ENDCASE => IF Profile.debugging THEN	    {Put.CR[NIL]; Put.Text[NIL, "FormSW:"L]; Put.Line[NIL, z.a]};        ENDCASE;      ENDLOOP;      EXITS aborted => NULL;      END};  Init: PROC = {    atoms ¬ Heap.systemZone.NEW[Atoms ¬ [      AdjustMotion:	Atom.MakeAtom["AdjustMotion"L],      AdjustUp:		Atom.MakeAtom["AdjustUp"L],      Again:		Atom.MakeAtom["Again"L],      BackSpace:	Atom.MakeAtom["BackSpace"L],      BackWord:		Atom.MakeAtom["BackWord"L],      CopyDown:		Atom.MakeAtom["CopyDown"L],      CopyUp:		Atom.MakeAtom["CopyUp"L],      Define:		Atom.MakeAtom["DefineAbbreviation"L],      Delete:		Atom.MakeAtom["Delete"L],      DoPrimary:	Atom.MakeAtom["DoPrimary"L],      DoMoveCopy:	Atom.MakeAtom["DoMoveCopy"L],      Enter:		Atom.MakeAtom["Enter"L],      Exit:		Atom.MakeAtom["Exit"L],      Expand:		Atom.MakeAtom["ExpandAbbreviation"L],      ExtendPrimary:	Atom.MakeAtom["ExtendPrimary"L],      Find:		Atom.MakeAtom["Find"L],      InsertToSel:	Atom.MakeAtom["InsertToSel"L],      JFirst:		Atom.MakeAtom["JFirst"L],      JInsert:		Atom.MakeAtom["JInsert"L],      JLast:		Atom.MakeAtom["JLast"L],      JSelect:		Atom.MakeAtom["JSelect"L],      MenuDown:		Atom.MakeAtom["Menu"L],      MoveDown:		Atom.MakeAtom["MoveDown"L],      MoveInsertion:	Atom.MakeAtom["MoveInsertion"L],      MoveUp:		Atom.MakeAtom["MoveUp"L],      Next:		Atom.MakeAtom["FindNextField"L],      NextDelete:	Atom.MakeAtom["ReplaceNextField"L],      Noop:		Atom.MakeAtom["Noop"L],      Paste:		Atom.MakeAtom["Paste"L],      PointMotion:	Atom.MakeAtom["PointMotion"L],      PointUp:		Atom.MakeAtom["PointUp"L],      Replace:		Atom.MakeAtom["Replace"L],      Stuff:		Atom.MakeAtom["Stuff"L],      TrackCursor:	Atom.MakeAtom["TrackCursor"L],      Undo:		Atom.MakeAtom["Undo"L]]];    };  Init[];  END...-- Atom still to handle:AngleBracketsAutoIndentLineBreakBackSpaceTabBigCommentBracketsBraceBracketsCommentBracketsCOMPLETEprocDoubleQBracketsEditorDefineEditorExpandExtendMakeControlCharacterMenuProcParenBracketsSayWhatSelectSingleQBracketsSquareBracketsToLowerCaseToUpperCase