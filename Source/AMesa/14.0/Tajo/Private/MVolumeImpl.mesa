-- Copyright (C) 1982, 1983, 1984  by Xerox Corporation. All rights reserved. -- MVolumeImpl.mesa Last edited by:-- RXR   ,	18-Nov-82 15:42:45-- CXH   ,	13-Dec-82 15:45:05-- DWE    ,	20-Apr-83 14:34:40-- LXR    ,	13-Dec-83 16:21:37-- KAM  ,	20-Sep-84 14:30:58DIRECTORY  Event USING [fileSystem],  EventTypes USING [volumeClosed, volumeOpened, aboutToOpenVolume, aboutToCloseVolume],  MDirectory USING [NeedsMScavenging],  MVolume USING [],  MVolumeExtras USING [],  SpecialVolume USING [Access, OpenVolume],  Supervisor USING [EnumerationAborted, Event, NotifyDirectSubsystems],  Volume USING [Close, ID, Open];MVolumeImpl: PROGRAM  IMPORTS    Event, MDirectory, realSpecialVolume: SpecialVolume, Supervisor,    realVolume: Volume  EXPORTS MVolume, MVolumeExtras, SpecialVolume, Volume =  PUBLIC BEGIN  CloseAborted: PUBLIC ERROR = CODE;  Close: PROCEDURE [volume: Volume.ID] =    BEGIN    Supervisor.NotifyDirectSubsystems[      event: EventTypes.aboutToCloseVolume, eventData: @volume, which: clients,      subsystem: Event.fileSystem !         Supervisor.EnumerationAborted => ERROR CloseAborted];    realVolume.Close[volume];    Supervisor.NotifyDirectSubsystems[      event: EventTypes.volumeClosed, eventData: @volume, which: clients,      subsystem: Event.fileSystem];    END;    Open: PROCEDURE [volume: Volume.ID] =    BEGIN    Supervisor.NotifyDirectSubsystems[      event: EventTypes.aboutToOpenVolume, eventData: @volume, which: clients,      subsystem: Event.fileSystem ! Supervisor.EnumerationAborted => GOTO exit];    realVolume.Open[volume];    IF MDirectory.NeedsMScavenging[volume] THEN NULL << {      realVolume.Close[volume]; ERROR realVolume.NeedsScavenging[volume]} >>;    Supervisor.NotifyDirectSubsystems[      event: EventTypes.volumeOpened, eventData: @volume, which: clients,       subsystem: Event.fileSystem];    EXITS      exit => {};    END;    OpenVolume: PROCEDURE [volume: Volume.ID, access: SpecialVolume.Access] =    BEGIN    Supervisor.NotifyDirectSubsystems[      event: EventTypes.aboutToOpenVolume, eventData: @volume, which: clients,      subsystem: Event.fileSystem ! Supervisor.EnumerationAborted => GOTO exit];    realSpecialVolume.OpenVolume[volume, access];    IF MDirectory.NeedsMScavenging[volume] THEN NULL << {      realVolume.Close[volume]; ERROR realVolume.NeedsScavenging[volume]} >>;    Supervisor.NotifyDirectSubsystems[      event: EventTypes.volumeOpened, eventData: @volume, which: clients,      subsystem: Event.fileSystem];    EXITS      exit => {};    END;    PilotOpen: PROCEDURE [volume: Volume.ID] =    BEGIN    Supervisor.NotifyDirectSubsystems[      event: EventTypes.aboutToOpenVolume, eventData: @volume, which: clients,      subsystem: Event.fileSystem ! Supervisor.EnumerationAborted => GOTO exit];    realVolume.Open[volume];    Supervisor.NotifyDirectSubsystems[      event: EventTypes.volumeOpened, eventData: @volume, which: clients,       subsystem: Event.fileSystem];    EXITS      exit => {};    END;    PilotOpenVolume: PROCEDURE [volume: Volume.ID, access: SpecialVolume.Access] =    BEGIN    Supervisor.NotifyDirectSubsystems[      event: EventTypes.aboutToOpenVolume, eventData: @volume, which: clients,      subsystem: Event.fileSystem ! Supervisor.EnumerationAborted => GOTO exit];    realSpecialVolume.OpenVolume[volume, access];    Supervisor.NotifyDirectSubsystems[      event: EventTypes.volumeOpened, eventData: @volume, which: clients,      subsystem: Event.fileSystem];    EXITS      exit => {};    END;      END.     