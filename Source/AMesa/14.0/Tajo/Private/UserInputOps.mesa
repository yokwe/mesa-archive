-- Copyright (C) 1981, 1982  by Xerox Corporation. All rights reserved. -- File: UserInputOps.mesa - last edit:-- PXK    ,	 8-Nov-82 19:05:59-- SXW   ,	 6-Jul-81  8:41:50-- Mark,	Oct 8, 1980 2:09 PMDIRECTORY  Context USING [Type],  Keys USING [KeyName, KeyBits],  Process USING [Ticks],  SpecialUserInput USING [KeySNRType, MouseSNRType],  UserInput USING [CaretProcType,  PeriodicProcType, StringProcType],  Window USING [Handle, Place];UserInputOps: DEFINITIONS =  BEGIN  -- TYPEs and constants for Processing Hardware Keys  KeyName: TYPE = Keys.KeyName;  noKey: KeyName = A10;    KeyBits: TYPE = Keys.KeyBits;    KeysRecord: TYPE = RECORD [    type: SELECT OVERLAID * FROM      bits => [bit: KeyBits],      words => [word: ARRAY [0..keysWords) OF WORD],      ENDCASE];  keysWords: CARDINAL = SIZE[KeyBits];  KeysHandle: TYPE = POINTER TO KeyBits;  -- Types & Variables shared by UserInputA and UserInputC  z: UNCOUNTED ZONE;  SNRRecord: TYPE = RECORD [    mouse: SpecialUserInput.MouseSNRType,    key: SpecialUserInput.KeySNRType];  snrs: SNRRecord;  newState, oldState: KeysRecord;  -- Misc Procedures  InternalEnqueueAction: SpecialUserInput.KeySNRType;  InternalMouseSNR: SpecialUserInput.MouseSNRType;  DoNextPeriodicCall: PROCEDURE [cursor: Window.Place];  DoKamikazeNotifies: PROCEDURE [cursor: Window.Place];  MoreKeysToProcess: PROCEDURE [cursor: Window.Place] RETURNS [KeyName];  CharForKey: PROCEDURE [key: Keys.KeyName, keys: LONG POINTER TO Keys.KeyBits]    RETURNS [char: CHARACTER];   -- TypeIn context  typein: Context.Type;  indirectTypeInChain: IndirectTypeIn;  TypeInObject: TYPE = RECORD [    SELECT tag: * FROM    direct => [      freePlease: BOOLEAN ¬ FALSE,      useCount: [0..777B] ¬ 0,      in, out: UserInput.StringProcType,      caret: UserInput.CaretProcType,      string: LONG STRING ¬ NIL],    indirect => [      link: IndirectTypeIn,      inTo: TypeInHandle ¬ NIL,      inWindow: Window.Handle ¬ NIL,      outTo: TypeInHandle ¬ NIL,      outWindow: Window.Handle ¬ NIL],    ENDCASE];  TypeInHandle: TYPE = LONG POINTER TO TypeInObject;  DirectTypeIn: TYPE = LONG POINTER TO direct TypeInObject;  IndirectTypeIn: TYPE = LONG POINTER TO indirect TypeInObject;  FindDirectTypeIn: PROCEDURE [window: Window.Handle]    RETURNS [Window.Handle, DirectTypeIn];  -- Periodic Notification data  PeriodicNotifyHandle: TYPE = CARDINAL;  PeriodicNotifyEntry: TYPE = RECORD [    link: PeriodicNotifyHandle,    wait: Process.Ticks,    proc: UserInput.PeriodicProcType,    window: Window.Handle,    rate: Process.Ticks];  END. -- of UserInputOps  