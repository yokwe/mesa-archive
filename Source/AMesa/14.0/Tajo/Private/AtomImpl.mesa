-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- AtomImpl.mesa; Defining string atoms-- Last Edited by-- SXS   ,	11-Oct-82 14:42:48-- CXH   ,	10-Nov-82  3:08:02-- PXK    ,	10-Nov-82 13:32:21DIRECTORY  Atom USING [ATOM],  Heap USING [Create],  Inline USING [LongNumber],  String USING [Compare, CopyToNewString, Empty];AtomImpl: PROGRAM IMPORTS Heap, String EXPORTS Atom =  BEGIN    ATOM: TYPE = Atom.ATOM;  ANodeHandle: TYPE = LONG POINTER TO ANode;  ANode: TYPE = RECORD [    key: Key,    left, right: ANodeHandle ¬ NIL,    val: ATOM];  Key: TYPE = LONG CARDINAL;  nullKey: Key = GetKey[""L];  zone: UNCOUNTED ZONE = Heap.Create[initial: 7];  root: ANodeHandle ¬ NIL;  ctAtoms: CARDINAL ¬ 0; -- for instrumentation  GetKey: PROCEDURE [s: LONG STRING] RETURNS [Key] = {    -- ASSERT s # NIL;    temp: CARDINAL;    dummy: Inline.LongNumber;    dummy.lc ¬ 0;    FOR i: CARDINAL IN [0..s.length) DO      temp ¬ LOOPHOLE[s[i]];      dummy.lowbits ¬ dummy.lowbits*31 + temp;      dummy.highbits ¬ dummy.highbits + temp;      ENDLOOP;    RETURN[dummy.lc]};      FindAtom: PROCEDURE [ref: LONG STRING]    RETURNS [ahp: LONG POINTER TO ANodeHandle ¬ @root, key: Key] = {    IF String.Empty[ref] THEN RETURN[NIL, nullKey];    key ¬ GetKey[ref];    WHILE ahp­ # NIL DO      SELECT key FROM        < ahp.key => ahp ¬ @ahp.left;	> ahp.key => ahp ¬ @ahp.right;	ENDCASE => SELECT String.Compare[ref, ahp.val, FALSE] FROM	  < 0 => ahp ¬ @ahp.left;	  > 0 => ahp ¬ @ahp.right;	  ENDCASE => RETURN[ahp, key];      ENDLOOP};      MakeAtom: PUBLIC PROCEDURE [ref: LONG STRING] RETURNS [ATOM] = {    key: LONG CARDINAL;    ahp: LONG POINTER TO ANodeHandle;    a: ATOM;    IF String.Empty[ref] THEN RETURN[NIL];    [ahp, key] ¬ FindAtom[ref];    IF ahp­ # NIL THEN RETURN[ahp.val];    a ¬ String.CopyToNewString[ref, zone];    ahp­ ¬ zone.NEW[ANode ¬ [key: key, val: a]];    ctAtoms ¬ ctAtoms + 1;    RETURN[a]};      GetPName: PUBLIC PROCEDURE [atom: ATOM] RETURNS [LONG STRING] = {    ahp: LONG POINTER TO ANodeHandle;    [ahp,] ¬ FindAtom[atom];    RETURN[IF ahp­ # NIL AND ahp.val = atom THEN atom ELSE NIL]};        END.