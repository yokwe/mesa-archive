-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- File: FormSWsE.mesa - last edited -- SXW    on: May 9, 1980 1:30 PM-- Mark on: Jul 9, 1980 10:22 AM-- SXE   on: Jul 9, 1980 11:45 AM-- SXS    on: 19-Jul-82 14:54:17-- BGY      on:  1-Dec-82 10:54:44DIRECTORY  Caret USING [Action, MarkProcType, ResetOnMatch, Set],  Context,  FormSW USING [nullIndex],  FormSWOps USING [FindContext, LockContextProcType, PContext],  TextDisplay USING [MarkingAction, MarkInsertion],  UserInput USING [CaretProcType, StartStop];FormSWsE: MONITOR LOCKS myContext.lock USING myContext: FormSWOps.PContext  IMPORTS Caret, Context, FormSWOps, TextDisplay EXPORTS FormSWOps =  BEGIN  -- PNR and TypeIn Routines  ActOnCaret: PUBLIC Caret.MarkProcType =    BEGIN    LockedAOC: ENTRY FormSWOps.LockContextProcType =       BEGIN ENABLE UNWIND => NULL; RealActOnCaret[myContext, action]; END;    LockedAOC[data];    END;  ActivateCaret: PUBLIC UserInput.CaretProcType =    BEGIN    myContext: FormSWOps.PContext = FormSWOps.FindContext[window];    IF myContext # NIL THEN SetupCaret[myContext, startStop];    END;  RealActOnCaret: PUBLIC PROCEDURE [    myContext: FormSWOps.PContext, action: Caret.Action] =    BEGIN OPEN mi: myContext.insertion;    IF mi.index # FormSW.nullIndex AND action # start      AND myContext.dijects#NIL THEN      BEGIN      markAction: TextDisplay.MarkingAction =        SELECT action FROM          reset, stop, clear => clear,          mark => mark,          invert => invert,          ENDCASE => clear;      TextDisplay.MarkInsertion[        LOOPHOLE[@myContext.dijects[mi.index]], @mi.textInsert, markAction];      --IF action = reset THEN mi.textInsert.place ¬ TextDisplay.noPlace;      END;    END;  SetupCaret: PROCEDURE [    myContext: FormSWOps.PContext, startStop: UserInput.StartStop] =    -- Even if insertion is currently empty, this code must run (because    --   of skip next and to stop current caret owner when entered).    BEGIN    IF startStop = start THEN Caret.Set[myContext, ActOnCaret]    ELSE Caret.ResetOnMatch[myContext];    END;  END. -- of FormSWsE