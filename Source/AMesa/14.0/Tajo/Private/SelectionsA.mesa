-- Copyright (C) 1981, 1982  by Xerox Corporation. All rights reserved. -- SelectionsA.mesa  Last edit-- SXW      9-Jul-81 18:22:50-- PXK     May 8, 1980 8:07 PM-- SXS    22-Sep-82 18:18:15DIRECTORY  Heap USING [systemZone],  Selection USING [Action, ActOnProcType, ConvertProcType, Target],  String USING [InvalidNumber, StringToLongNumber, StringToNumber];SelectionsA: MONITOR IMPORTS Heap, String EXPORTS Selection =  BEGIN OPEN Selection;  -- Global Data  selection: LONG POINTER ¬ NIL;  nextAction: Action ¬ firstFree;  nextTarget: Target ¬ firstFree;  convert: ConvertProcType ¬ NIL;  acton: ActOnProcType ¬ NIL;  -- Procedures  ActOn: PUBLIC ENTRY PROCEDURE [a: Action] =    BEGIN    ENABLE UNWIND => NULL;    IF a = clear THEN ClearAll[] ELSE IF acton # NIL THEN acton[selection, a];    RETURN    END;  ClearAll: INTERNAL PROCEDURE =    BEGIN    IF acton # NIL THEN acton[selection, clear];    selection ¬ NIL;    convert ¬ NIL;    acton ¬ NIL;    RETURN    END;  ClearOnMatch: PUBLIC ENTRY PROCEDURE [pointer: LONG POINTER] =    BEGIN ENABLE UNWIND => NULL; IF pointer = selection THEN ClearAll[] END;  Convert: PUBLIC ENTRY PROCEDURE [t: Target] RETURNS [LONG POINTER] =    BEGIN    ENABLE UNWIND => NULL;    RETURN[IF convert = NIL THEN NIL ELSE convert[selection, t]]    END;  Number: PUBLIC PROCEDURE [radix: CARDINAL] RETURNS [num: CARDINAL] =    BEGIN    s: LONG STRING ¬ IF convert = NIL THEN NIL ELSE convert[selection, string];    IF s = NIL THEN ERROR String.InvalidNumber;    num ¬ String.StringToNumber[      s, radix ! String.InvalidNumber => Heap.systemZone.FREE[@s]];    Heap.systemZone.FREE[@s];    END;  LongNumber: PUBLIC PROCEDURE [radix: CARDINAL] RETURNS [num: LONG CARDINAL] =    BEGIN    s: LONG STRING ¬ IF convert = NIL THEN NIL ELSE convert[selection, string];    IF s = NIL THEN ERROR String.InvalidNumber;    num ¬ String.StringToLongNumber[      s, radix ! String.InvalidNumber => Heap.systemZone.FREE[@s]];    Heap.systemZone.FREE[@s];    END;  Set: PUBLIC ENTRY PROCEDURE [    pointer: LONG POINTER, conversion: ConvertProcType, actOn: ActOnProcType] =    BEGIN    ENABLE UNWIND => NULL;    ClearAll[];    selection ¬ pointer;    convert ¬ conversion;    acton ¬ actOn;    RETURN    END;  UniqueTarget: PUBLIC ENTRY PROCEDURE RETURNS [Target] = {    RETURN[nextTarget ¬ SUCC[nextTarget]]};  UniqueAction: PUBLIC ENTRY PROCEDURE RETURNS [Action] = {    RETURN[nextAction ¬ SUCC[nextAction]]};  END.