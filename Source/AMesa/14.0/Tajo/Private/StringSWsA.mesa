-- Copyright (C) 1981, 1982, 1983  by Xerox Corporation. All rights reserved. -- File: StringSWsA.mesa - last edited: -- Mark		27-Jan-81 19:43:30-- SXW   	 9-Jul-81 21:27:07-- JGS		 2-Sep-81 18:55:09-- SEH		10-Dec-81 17:50:50-- BGY     	 2-Jan-83 13:47:46-- AXD    	27-Oct-82 11:53:10DIRECTORY  Context USING [Type, Create, Destroy, Find, UniqueType],  Heap USING [systemZone],  StringSource USING [Create],  StringSW,  TextSW USING [Create, Destroy, Options],  TextSource USING [Handle],  UserTerminal USING [BlinkDisplay],  Window USING [Handle];StringSWsA: PROGRAM  IMPORTS Context, Heap, TextSW, StringSource, UserTerminal  EXPORTS StringSW  SHARES Window =  BEGIN OPEN StringSW, TextSource;  -- GLOBAL Data and Stuff  stringSWContext: Context.Type ¬ Context.UniqueType[];  SSWContext: TYPE = LONG POINTER TO SSWContextObject;  SSWContextObject: TYPE = RECORD [    string: LONG STRING,    ps: LONG POINTER TO LONG STRING,    expandable: BOOLEAN,    options: Options,    source: TextSource.Handle];  z: UNCOUNTED ZONE = Heap.systemZone;    DoesNotExist: PUBLIC SIGNAL = CODE;  LocalFind: PROCEDURE [sw: Window.Handle] RETURNS [context: SSWContext] =    BEGIN    IF (context ¬ Context.Find[stringSWContext, sw]) = NIL THEN      UserTerminal.BlinkDisplay[];    END;  -- Create/Destroy/Load Procedures   Create: PUBLIC PROCEDURE [    sw: Window.Handle, s: LONG POINTER TO LONG STRING ¬ NIL,    options: TextSW.Options ¬ defaultOptions, expandable: BOOLEAN ¬ TRUE] =    BEGIN    context: SSWContext ¬ z.NEW[SSWContextObject];    IF s = NIL THEN {expandable ¬ TRUE; s ¬ @context.string};    context­ ¬ SSWContextObject[      string: NIL, ps: s, options: options, expandable: expandable, source:];    context.source ¬ StringSource.Create[s, expandable];    Context.Create[stringSWContext, context, DestroyContext, sw];    TextSW.Create[sw, context.source, NIL, options];    END;  Destroy: PUBLIC PROCEDURE [sw: Window.Handle] = {    Context.Destroy[type: stringSWContext, window: sw]};  DestroyContext: PUBLIC PROCEDURE [context: SSWContext, sw: Window.Handle] =    BEGIN    source: TextSource.Handle = context.source;    TextSW.Destroy[sw];  -- make sure TextSW goes away before source    IF source # NIL THEN [] ¬ source.actOn[source, destroy];    IF context # NIL THEN z.FREE[@context];    -- source destruction will free buffer string (context.string) iff we manufactured it    END;  Info: PUBLIC PROCEDURE [sw: Window.Handle]    RETURNS [      s: LONG POINTER TO LONG STRING, options: Options, expandable: BOOLEAN] =    BEGIN    context: SSWContext ¬ LocalFind[sw];    IF context # NIL THEN RETURN[context.ps, context.options, context.expandable]    ELSE RETURN[NIL, defaultOptions, FALSE];    END;  IsIt: PUBLIC PROCEDURE [sw: Window.Handle] RETURNS [yes: BOOLEAN] =    BEGIN RETURN[Context.Find[stringSWContext, sw] # NIL]; END;  END. -- of StringSWsA