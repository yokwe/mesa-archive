-- Copyright (C) 1981, 1982, 1983  by Xerox Corporation. All rights reserved. -- File: CursorImpl.mesa - last edited:-- SXW   ,	May 28, 1980 10:08 AM -- Mark,	Apr 24, 1980 11:22 PM -- PXK    ,	 8-Nov-82 19:50:12 -- BXM  ,	16-Jul-81 16:17:36 -- JGS on	27-Jan-83  9:39:20 -- RES  ,	19-Jan-82 15:37:18 -- AXD    ,	 9-Dec-82 13:48:42 -- DWR    	27-Jun-86  9:58:22 DIRECTORY  Inline USING [BITNOT],  Cursor USING [Defined, Handle, Info, Object, Type],  SpecialUserInput USING [GetMouseAndCursorPosition, SetMouseAndCursorPosition],  UserTerminal USING [CursorArray, GetCursorPattern, SetCursorPattern],  Window USING [BitmapPlace, Handle, Place];CursorImpl: PROGRAM  IMPORTS Inline, SpecialUserInput, UserTerminal, Window EXPORTS Cursor =  BEGIN OPEN Cursor;  -- global variables and types  globalInfo: Info ¬ [last, 0, 0];  cursorPositive: BOOLEAN ¬ TRUE;  lastUsed: Type ¬ Defined.LAST.SUCC;  -- signals  InvalidType: PUBLIC ERROR = CODE;  -- procedures  Fetch: PUBLIC PROC [cursor: Handle] = {    cursor.info ¬ globalInfo;    cursor.array ¬ UserTerminal.GetCursorPattern[]};  UniqueType: PUBLIC PROC RETURNS [Type] = {    RETURN[lastUsed ¬ SUCC[lastUsed]]};  Swap: PUBLIC PROC [old: Handle, new: Handle] = {    temp: Object; Fetch[@temp]; Store[new]; old­ ¬ temp; RETURN};  FixUpPosition: PROC [info: Info] = {    place: Window.Place = SpecialUserInput.GetMouseAndCursorPosition[];    SpecialUserInput.SetMouseAndCursorPosition[place, info.hotX, info.hotY];    globalInfo ¬ info};  GetInfo: PUBLIC PROC RETURNS [Info] = {RETURN[globalInfo]};  Invert: PUBLIC PROC RETURNS [BOOLEAN] = {    i: CARDINAL;    bits: UserTerminal.CursorArray ¬ UserTerminal.GetCursorPattern[];    FOR i IN [0..16) DO bits[i] ¬ Inline.BITNOT[bits[i]]; ENDLOOP;    UserTerminal.SetCursorPattern[bits];    cursorPositive ¬ ~cursorPositive;    RETURN[cursorPositive]};  MakeNegative: PUBLIC PROC = {    IF ~cursorPositive THEN RETURN; [] ¬ Invert[]};  MakePositive: PUBLIC PROC = {    IF cursorPositive THEN RETURN; [] ¬ Invert[]};  MoveIntoWindow: PUBLIC PROC [window: Window.Handle, place: Window.Place] = {    screen: Window.Place = Window.BitmapPlace[window];    SpecialUserInput.SetMouseAndCursorPosition[      [x: screen.x + place.x, y: screen.y + place.y], globalInfo.hotX,      globalInfo.hotY]};  Store: PUBLIC PROC [cursor: Handle] = {    UserTerminal.SetCursorPattern[cursor.array];    FixUpPosition[cursor.info];    cursorPositive ¬ TRUE};  Set: PUBLIC PROC [ct: Defined] = {    cursor: Object;    IF ~(ct IN Defined) OR ct = globalInfo.type THEN RETURN;    FetchFromType[@cursor, ct];    UserTerminal.SetCursorPattern[cursor.array];    FixUpPosition[cursor.info];    cursorPositive ¬ TRUE};  definedCursors: ARRAY Defined OF UserTerminal.CursorArray = [    ----activate:    [103736B, 100421B, 100421B, 100436B, 100421B, 100421B, 173736B, 000000B,    000000B, 060637B, 111104B, 111004B, 171004B, 111004B, 111104B, 110604B],    ----blank:    [000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B,    000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B],    ----bullseye:    [003700B, 017760B, 034070B, 070034B, 060014B, 140006B, 141606B, 141606B,    141606B, 140006B, 060014B, 070034B, 034070B, 017760B, 003700B, 000000B],    ----confirm:    [037770B, 020010B, 027250B, 027250B, 027250B, 027250B, 027250B, 020010B,    025010B, 025010B, 025230B, 027250B, 020310B, 020250B, 020230B, 037770B],    ----crossHairsCircle:    [003740B, 017770B, 034634B, 070616B, 060606B, 140603B, 141703B, 177177B,    177177B, 141703B, 140603B, 060606B, 070616B, 034634B, 017770B, 003740B],    ----ftp:    [000177B, 076077B, 040037B, 040017B, 070007B, 043703B, 040401B, 040400B,    000400B, 100436B, 140421B, 160421B, 170036B, 174020B, 176020B, 177020B],    ----ftpBoxes:    « plaid flippers »    «[177400B, 125252B, 177400B, 125252B, 177400B, 125252B, 177400B, 125252B,    052525B, 000377B, 052525B, 000377B, 052525B, 000377B, 052525B, 000377B],»    « the old flippers »    [177400B, 177400B, 177400B, 177400B, 177400B, 177400B, 177400B, 177400B,    000377B, 000377B, 000377B, 000377B, 000377B, 000377B, 000377B, 000377B],     ----hourGlass:    « martini glass! »   «[000001B, 000002B, 000004B, 077776B, 040022B, 020044B, 010310B, 004760B,    002740B, 001300B, 000600B, 000600B, 000600B, 000600B, 003740B, 017770B], »    « a real hour glass »    [077777B, 040001B, 020002B, 010004B, 007770B, 003760B, 001740B, 000700B,    000700B, 001240B, 002220B, 004210B, 010204B, 021742B, 047771B, 077777B],        ----lib:    [100177B, 100077B, 100037B, 100017B, 101607B, 100403B, 170401B, 000400B,    000400B, 100434B, 141622B, 160022B, 170036B, 174021B, 176021B, 177036B],    ----menu:    [000000B, 000000B, 000000B, 001000B, 003001B, 007003B, 036007B, 177776B,    177776B, 036007B, 007003B, 003001B, 001000B, 000000B, 000000B, 000000B],    ----mouseRed:    [177740B, 100040B, 135240B, 135240B, 135240B, 135240B, 135240B, 100040B,    100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B],    ----mouseYellow:    [177740B, 100040B, 127240B, 127240B, 127240B, 127240B, 127240B, 100040B,    100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B],    ----mouseBlue:    [177740B, 100040B, 125640B, 125640B, 125640B, 125640B, 125640B, 100040B,    100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B],    ----mtp:    [000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B,    000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B],    ----pointDown:    [001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B,    001700B, 001700B, 037774B, 017770B, 007760B, 003740B, 001700B, 000600B],    ----pointLeft:    [000000B, 000000B, 002000B, 006000B, 016000B, 036000B, 077777B, 177777B,     177777B, 077777B, 036000B, 016000B, 006000B, 002000B, 000000B, 000000B],    ----pointRight:    [000000B, 000000B, 000040B, 000060B, 000070B, 000074B, 177776B, 177777B,    177777B, 177776B, 000074B, 000070B, 000060B, 000040B, 000000B, 000000B],    ----pointUp:    [000600B, 001700B, 003740B, 007760B, 017770B, 037774B, 001700B, 001700B,    001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B],    ----questionMark:    [017000B, 037600B, 060600B, 140300B, 140300B, 060300B, 000600B, 001400B,    003000B, 006000B, 006000B, 006000B, 000000B, 000000B, 006000B, 006000B],    ----retry:    [036370B, 021200B, 021200B, 036347B, 024200B, 022200B, 021370B, 000000B,    000000B, 175721B, 021052B, 021044B, 021704B, 021204B, 021104B, 021044B],    ----scrollDown:    [007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B,    007760B, 077776B, 037774B, 017770B, 007760B, 003740B, 001700B, 000600B],    ----scrollLeft:    [000000B, 001000B, 003000B, 007000B, 017777B, 037777B, 077777B, 177777B,    177777B, 077777B, 037777B, 017777B, 007000B, 003000B, 001000B, 000000B],    ----scrollLeftRight:    [000000B, 000000B, 000000B, 004020B, 014030B, 034034B, 077776B, 177777B,    177777B, 077776B, 034034B, 014030B, 004020B, 000000B, 000000B, 000000B],    ----scrollRight:    [000000B, 000100B, 000140B, 000160B, 177770B, 177774B, 177776B, 177777B,    177777B, 177776B, 177774B, 177770B, 000160B, 000140B, 000100B, 000000B],    ----scrollUp:    [000600B, 001700B, 003740B, 007760B, 017770B, 037774B, 077776B, 007760B,    007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B],    ----scrollUpDown:    [000400B, 001600B, 003700B, 007740B, 017760B, 001600B, 001600B, 001600B,    001600B, 001600B, 001600B, 017760B, 007740B, 003700B, 001600B, 000400B],    ----textPointer:    [100000B, 140000B, 160000B, 170000B, 174000B, 176000B, 177000B, 170000B,    154000B, 114000B, 006000B, 006000B, 003000B, 003000B, 001400B, 001400B],    ----typeKey:    [002000B, 074000B, 140000B, 012767B, 012525B, 053566B, 111113B, 163100B,    000000B, 000000B, 154000B, 053520B, 062520B, 053360B, 155440B, 000140B],    ----groundedText:    [100000B, 140000B, 160000B, 170000B, 174000B, 176000B, 177000B, 170000B,    154000B, 114000B, 006000B, 006600B, 003600B, 017000B, 015400B, 001400B]  ];  FetchFromType: PUBLIC PROC [cursor: Handle, type: Defined] = {    IF  type NOT IN Defined THEN ERROR InvalidType;    cursor.info ¬ definedInfo[type];    cursor.array ¬ definedCursors[type]};«  FetchFromType: PUBLIC PROC [cursor: Handle, type: Defined] = {    cursor.info ¬ definedInfo[type];    SELECT type FROM      activate =>        cursor.array ¬ [          103736B, 100421B, 100421B, 100436B, 100421B, 100421B, 173736B, 000000B,          000000B, 060637B, 111104B, 111004B, 171004B, 111004B, 111104B, 110604B];      blank =>        cursor.array ¬ [          000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B,          000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B];      bullseye =>        cursor.array ¬ [          003700B, 007740B, 014060B, 030030B, 060014B, 140006B, 141606B, 141606B,          141606B, 140006B, 060014B, 030030B, 014060B, 007740B, 003700B, 000000B];       ftp =>        cursor.array ¬ [          000177B, 076077B, 040037B, 040017B, 070007B, 043703B, 040401B, 040400B,          000400B, 100436B, 140421B, 160421B, 170036B, 174020B, 176020B, 177020B];      ftpBoxes =>        cursor.array ¬ [          177400B, 177400B, 177400B, 177400B, 177400B, 177400B, 177400B, 177400B,          000377B, 000377B, 000377B, 000377B, 000377B, 000377B, 000377B, 000377B];       groundedText =>        cursor.array ¬ [          100000B, 140000B, 160000B, 170000B, 174000B, 176000B, 177000B, 170000B,          154000B, 114000B, 006000B, 006600B, 003600B, 017000B, 015400B, 001400B];      hourGlass =>        cursor.array ¬ [          177777B, 100001B, 040002B, 034034B, 017170B, 007560B, 003740B, 001700B,          001100B, 002440B, 004220B, 010610B, 021704B, 047762B, 177777B, 177777B];       lib =>        cursor.array ¬ [          100177B, 100077B, 100037B, 100017B, 101607B, 100403B, 170401B, 000400B,          000400B, 100434B, 141622B, 160022B, 170036B, 174021B, 176021B, 177036B];      menu =>        cursor.array ¬ [          000000B, 000000B, 000000B, 001000B, 003001B, 007003B, 036007B, 177776B,          177776B, 036007B, 007003B, 003001B, 001000B, 000000B, 000000B, 000000B];      mouseRed =>        cursor.array ¬ [          177740B, 100040B, 135240B, 135240B, 135240B, 135240B, 135240B, 100040B,          100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B];      pointLeft =>        cursor.array ¬ [          000000B, 000000B, 002000B, 006000B, 016000B, 036000B, 077777B, 177777B,           177777B, 077777B, 036000B, 016000B, 006000B, 002000B, 000000B, 000000B];      questionMark =>        cursor.array ¬ [          017000B, 037600B, 060600B, 140300B, 140300B, 060300B, 000600B, 001400B,          003000B, 006000B, 006000B, 006000B, 000000B, 000000B, 006000B, 006000B];      retry =>        cursor.array ¬ [          036370B, 021200B, 021200B, 036347B, 024200B, 022200B, 021370B, 000000B,          000000B, 175721B, 021052B, 021044B, 021704B, 021204B, 021104B, 021044B];      scrollDown =>        cursor.array ¬ [          007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B,          007760B, 077776B, 037774B, 017770B, 007760B, 003740B, 001700B, 000600B];      scrollUp =>        cursor.array ¬ [          000600B, 001700B, 003740B, 007760B, 017770B, 037774B, 077776B, 007760B,          007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B, 007760B];      scrollUpDown =>        cursor.array ¬ [          000400B, 001600B, 003700B, 007740B, 017760B, 001600B, 001600B, 001600B,          001600B, 001600B, 001600B, 017760B, 007740B, 003700B, 001600B, 000400B];      textPointer =>        cursor.array ¬ [          100000B, 140000B, 160000B, 170000B, 174000B, 176000B, 177000B, 170000B,          154000B, 114000B, 006000B, 006000B, 003000B, 003000B, 001400B, 001400B];      ENDCASE => GetUncommonCursor[cursor, type]}; »      «  GetUncommonCursor: PROC [cursor: Handle, type: Defined] = {    SELECT type FROM      confirm =>        cursor.array ¬ [          037770B, 020010B, 027250B, 027250B, 027250B, 027250B, 027250B, 020010B,          025010B, 025010B, 025230B, 027250B, 020310B, 020250B, 020230B, 037770B];      crossHairsCircle =>        cursor.array ¬ [          001700B, 007760B, 014630B, 030614B, 060606B, 040602B, 140603B, 177177B,          177177B, 140603B, 040602B, 060606B, 030614B, 014630B, 007760B, 001700B];       mouseYellow =>        cursor.array ¬ [          177740B, 100040B, 127240B, 127240B, 127240B, 127240B, 127240B, 100040B,          100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B];      mouseBlue =>        cursor.array ¬ [          177740B, 100040B, 125640B, 125640B, 125640B, 125640B, 125640B, 100040B,          100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 100040B, 177740B];      mtp =>        cursor.array ¬ [          000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B,          000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B, 000000B];      pointDown =>        cursor.array ¬ [          001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B,          001700B, 001700B, 037774B, 017770B, 007760B, 003740B, 001700B, 000600B];      pointUp =>        cursor.array ¬ [          000600B, 001700B, 003740B, 007760B, 017770B, 037774B, 001700B, 001700B,          001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B, 001700B];      pointRight =>        cursor.array ¬ [          000000B, 000000B, 000040B, 000060B, 000070B, 000074B, 177776B, 177777B,          177777B, 177776B, 000074B, 000070B, 000060B, 000040B, 000000B, 000000B];      scrollLeft =>        cursor.array ¬ [          000000B, 001000B, 003000B, 007000B, 017777B, 037777B, 077777B, 177777B,          177777B, 077777B, 037777B, 017777B, 007000B, 003000B, 001000B, 000000B];      scrollLeftRight =>        cursor.array ¬ [          000000B, 000000B, 000000B, 004020B, 014030B, 034034B, 077776B, 177777B,          177777B, 077776B, 034034B, 014030B, 004020B, 000000B, 000000B, 000000B];      scrollRight =>        cursor.array ¬ [          000000B, 000100B, 000140B, 000160B, 177770B, 177774B, 177776B, 177777B,          177777B, 177776B, 177774B, 177770B, 000160B, 000140B, 000100B, 000000B];      typeKey =>        cursor.array ¬ [          002000B, 074000B, 140000B, 012767B, 012525B, 053566B, 111113B, 163100B,          000000B, 000000B, 154000B, 053520B, 062520B, 053360B, 155440B, 000140B];      ENDCASE => ERROR InvalidType}; »         definedInfo: ARRAY Defined OF Info = [     activate: [activate, 0, 0], blank: [blank, 0, 0],     bullseye: [bullseye, 7, 7], confirm: [confirm, 2, 0],     crossHairsCircle: [crossHairsCircle, 7, 7], ftp: [ftp, 7, 7],     ftpBoxes: [ftpBoxes, 7, 7], groundedText: [groundedText, 0, 0],     hourGlass: [hourGlass, 7, 7], lib: [lib, 7, 7], menu: [menu, 0, 7],     mouseRed: [mouseRed, 0, 0], mouseYellow: [mouseYellow, 0, 0],     mouseBlue: [mouseBlue, 0, 0], mtp: [mtp, 0, 0],     pointDown: [pointDown, 7, 15], pointLeft: [pointLeft, 0, 7],     pointRight: [pointRight, 15, 7], pointUp: [pointUp, 7, 0],     questionMark: [questionMark, 7, 7], retry: [retry, 7, 7],     scrollDown: [scrollDown, 7, 15], scrollLeft: [scrollLeft, 0, 7],     scrollLeftRight: [scrollLeftRight, 7, 7], scrollRight: [scrollRight, 15, 7],     scrollUp: [scrollUp, 7, 0], scrollUpDown: [scrollUpDown, 7, 7],     textPointer: [textPointer, 0, 0], typeKey: [typeKey, 0, 0]];       END.  -- of CursorsALOGDWR    	31-Jan-85 15:43:36 Reorganized cursorsDWR    	28-Feb-85 14:45:54 Whoops!  I had left out ScrollUp!  Ho, ho!DWR    	27-Jun-86  9:56:16 ScrollLeftRight was messed up too.  Yeah, I made the global frame thousands of words bigger.  Big deal.