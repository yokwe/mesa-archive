-- File: [Igor]<Emerson>Tajo>Public>TextSource.mesa - last edited:-- SXW   	 9-Jul-81 17:41:35-- Mark		Jul 9, 1980 10:56 AM-- PXK    	29-Sep-82 16:06:58-- JGS		17-Aug-81 10:26:02-- LXR    	14-Sep-82 15:18:40-- AXD    ,	29-Sep-82 15:07:16-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Environment USING [Block],  String USING [SubString];TextSource: DEFINITIONS =  BEGIN  -- Data and TYPE Definitions  Access: TYPE = {read, append, edit};  Action: TYPE = {destroy, mark, sleep, truncate, wakeup};  Class: TYPE = {none, eol, alpha, space, other};  Direction: TYPE = {left, right};  EditAction: TYPE = {none, backSpace, backWord, backLine};  Handle: TYPE = LONG POINTER TO Procedures;  Position: TYPE = LONG CARDINAL;  ScanType: TYPE = {    alpha, invisible, line, nonAlpha, word, leftMark, rightMark, spare};  State: TYPE = {asleep, awake, bad};  cannotExpand: CARDINAL = LAST[CARDINAL];  nullPosition: Position = LAST[LONG CARDINAL];  ErrorCode: TYPE = {fileNameError, accessError, isBad, invalidParameters, other};  Error: SIGNAL [code: ErrorCode];  SearchFailed: ERROR;  -- Generic Source Procedures  ActOnProc: TYPE = PROCEDURE [source: Handle, action: Action];  ActOn: ActOnProc = INLINE {source.actOn[source, action]};    DoEditActionProc: TYPE = PROCEDURE [    source: Handle, action: EditAction, editPos: Position]    RETURNS [delta: LONG INTEGER];  DoEditAction: DoEditActionProc = INLINE {    RETURN source.doEditAction[source, action, editPos]};    GetLengthProc: TYPE = PROCEDURE [source: Handle] RETURNS [Position];  GetLength: GetLengthProc = INLINE {RETURN source.getLength[source]};  ReadTextProc: TYPE = PROCEDURE [    source: Handle, position: Position, maxLength: CARDINAL, class: Class]    RETURNS [block: Environment.Block, next: Position];  ReadText: ReadTextProc = INLINE {    RETURN source.readText[source, position, maxLength, class]};  ReplaceTextProc: TYPE = PROCEDURE [    source: Handle, block: Environment.Block, from, to: Position,    deleteToTrashbin: BOOLEAN ¬ TRUE]    RETURNS [new: Position, delta: LONG INTEGER];  ReplaceText: ReplaceTextProc = INLINE {RETURN source.replaceText[    source, block, from, to, deleteToTrashbin]};  ScanTextProc: TYPE = PROCEDURE [    source: Handle, start: Position, type: ScanType, direction: Direction]    RETURNS [position: Position];  ScanText: ScanTextProc = INLINE {    RETURN source.scanText[source, start, type, direction]};  SetLengthProc: TYPE = PROCEDURE [source: Handle, position: Position]    RETURNS [Position];  SetLength: SetLengthProc = INLINE {RETURN source.setLength [source, position]};  Procedures: TYPE = LONG POINTER TO ProceduresObject;  ProceduresObject: TYPE = RECORD [    actOn: ActOnProc,    doEditAction: DoEditActionProc,    getLength: GetLengthProc,    readText: ReadTextProc,    replaceText: ReplaceTextProc,    scanText: ScanTextProc,    setLength: SetLengthProc];  -- Ascii TextSource useful stuff  AsciiAppend: PROCEDURE [    source: Handle, string: LONG STRING, start: Position, n: CARDINAL];  AsciiDoEditAction: DoEditActionProc;  AsciiInsertBlock: PROCEDURE [    string: LONG POINTER TO LONG STRING, position: CARDINAL,    toAdd: Environment.Block, extra: CARDINAL];  AsciiScanText: ScanTextProc;  AsciiTextSearch: PROCEDURE [    source: Handle, string: LONG STRING, start: Position ¬ 0,    stop: Position ¬ LAST[LONG CARDINAL], ignoreCase: BOOLEAN ¬ FALSE]     RETURNS [lineStart, left: Position];  AsciiTestClass: PROCEDURE [char: CHARACTER, class: Class]    RETURNS [equal: BOOLEAN];  AsciiDeleteSubString: PROCEDURE [    ss: String.SubString, keepTrash: BOOLEAN] RETURNS [trash: LONG STRING];  END.  -- of TextSource 