-- Exec.mesa - last edited by:-- RXJ     ,	 2-Dec-80  8:04:03-- LXR    ,	15-Oct-82 10:32:25-- JGS,		18-Aug-81  8:30:23-- BXM  ,	15-Oct-81 21:17:56-- RXR   ,	29-Sep-82 15:46:48-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Format USING [StringProc],  MLoader USING [Handle],  Token USING [Handle],  TTY USING [Handle];Exec: DEFINITIONS =  BEGIN  -- Types  Handle: TYPE = LONG POINTER TO Object;  Object: TYPE;  Outcome: TYPE = MACHINE DEPENDENT{    normal(0), warning, error, abort, spare1, spare2, spare3, last(LAST[    CARDINAL])};  CheckAbortProc: TYPE = PROCEDURE [h: Handle] RETURNS [abort: BOOLEAN];  ExecProc: TYPE = PROCEDURE [h: Handle, clientData: LONG POINTER ¬ NIL]    RETURNS [outcome: Outcome ¬ normal];  GetCharProc: TYPE = PROCEDURE [h: Handle] RETURNS [char: CHARACTER];  RemovedStatus: TYPE = {ok, noCommand, noProgram};  --Procedures  Abort: PROCEDURE RETURNS [error: ERROR];  -- returns error to be raised to abort subsystem  -- I/O per Exec instance  CheckForAbort: CheckAbortProc;  Confirm: PROCEDURE [h: Handle] RETURNS [yes: BOOLEAN];  EndOfCommandLine: PROCEDURE [h: Handle] RETURNS [BOOLEAN];  FeedbackProc: PROCEDURE [h: Handle] RETURNS [proc: Format.StringProc];  GetChar: GetCharProc;  -- gets characters from commandline  GetNameandPassword: PROCEDURE [    h: Handle, name, password: LONG STRING, prompt: LONG STRING ¬ NIL];  -- prompts user for name and password if necessary  GetToken: PROCEDURE [h: Handle] RETURNS [token, switches: LONG STRING];  -- client must deallocate strings returned by GetToken using FreeTokenString  GetTTY: PROCEDURE [h: Handle] RETURNS [tty: TTY.Handle];  Login: PROCEDURE [h: Handle, name, password: LONG STRING] = INLINE {    GetNameandPassword[h, name, password]};  OutputProc: PROCEDURE [h: Handle] RETURNS [proc: Format.StringProc];  PutChar: PROCEDURE [h: Handle, c: CHARACTER];  ReleaseTTY: PROCEDURE [tty: TTY.Handle];  -- Manipulating the command line  AppendCommands: PROCEDURE [h: Handle, command: LONG STRING];  -- Add text to end of remaining commands  PrependCommands: PROCEDURE [h: Handle, command: LONG STRING];  -- Add text to beginning of remaining commands  -- Misc  FreeTokenString: PROCEDURE [s: LONG STRING] RETURNS [nil: LONG STRING];  -- used to free strings returned by GetToken    MatchPattern: PROCEDURE [string, pattern: LONG STRING]    RETURNS [matched: BOOLEAN];  ProcessCommandLine: PROCEDURE [    cmd: LONG STRING, write: Format.StringProc, checkAbort: CheckAbortProc]    RETURNS [outcome: Outcome];  -- Loading of bcd files on the disk  Load: PROCEDURE [    write: Format.StringProc, name: LONG STRING, codeLinks: BOOLEAN ¬ FALSE]    RETURNS [handle: MLoader.Handle];  Run: PROCEDURE [    h: Token.Handle, write: Format.StringProc,     checkAbort: PROCEDURE RETURNS[abort: BOOLEAN],    codeLinks: BOOLEAN ¬ FALSE];  Start: PROCEDURE [handle: MLoader.Handle];  Unload: PROCEDURE [handle: MLoader.Handle];  -- Manipulating commands  AddCommand: PROCEDURE [    name: LONG STRING, proc: ExecProc, help: ExecProc ¬ NIL,    unload: ExecProc ¬ DefaultUnloadProc, clientData: LONG POINTER ¬ NIL];  -- add subsystem   EnumerateCommands: PROCEDURE [    userProc: PROCEDURE [      name: LONG STRING, proc, help, unload: Exec.ExecProc,      clientData: LONG POINTER] RETURNS [stop: BOOLEAN]];  LookupCommand: PROCEDURE [command: LONG STRING]    RETURNS [      name: LONG STRING, proc, help, unload: ExecProc, didExpand: BOOLEAN,      clientData: LONG POINTER ¬ NIL];  RemoveCommand: PROCEDURE [h: Exec.Handle, name: LONG STRING];  DefaultUnloadProc: ExecProc;  UnloadCommand: PROCEDURE [h: Exec.Handle, name: LONG STRING]    RETURNS [RemovedStatus];  AliasCommand: PROCEDURE [old, new: LONG STRING] RETURNS [ok: BOOLEAN];  RenameCommand: PROCEDURE [old, new: LONG STRING] RETURNS [ok: BOOLEAN];  END...