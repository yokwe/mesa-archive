-- File: [Igor]<Emerson>Tajo>Public>TextSW.mesa - last edited by: -- SXW   ,	 9-Jul-81 16:10:28-- Mark,	July 2, 1980  7:12 PM-- SXS   ,	30-Aug-82 12:15:20-- JGS,		20-Aug-81 16:55:42-- BXM  ,	 8-Oct-81 11:57:54-- PXK    ,	 8-Nov-82 18:26:16-- LXR    ,	15-Oct-82 11:14:20-- AXD    ,	29-Sep-82 13:53:37-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Environment USING [Block],  Keys USING [KeyName],  Menu USING [MCRType],  String USING [SubString],  TextData USING [Selection, SelectionMode],  TextSink USING [Handle],  TextSource USING [Access, EditAction, Handle, nullPosition, Position],  ToolWindow USING [AdjustProcType],  Window USING [Handle, Place];TextSW: DEFINITIONS =  BEGIN  -- Types and stuff  Access: TYPE = TextSource.Access;  Position: TYPE = TextSource.Position;    OnOff: TYPE = {on, off};  Options: TYPE = RECORD [    access: Access,    menu: BOOLEAN,    split: BOOLEAN,    wrap: BOOLEAN,    scrollbar: BOOLEAN,    flushTop: BOOLEAN,    flushBottom: BOOLEAN];  InvalidRegions: TYPE = LONG POINTER TO InvalidList;  InvalidList: TYPE = RECORD [    length: CARDINAL,    seq: SEQUENCE maxlength:CARDINAL OF Bounds];  Bounds: TYPE = RECORD[from, to: Position, delta: LONG INTEGER];  defaultOptions: Options = [read, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE];  DoesNotExist: SIGNAL;  -- Basic Procedures  Create: PROCEDURE [    sw: Window.Handle, source: TextSource.Handle, sink: TextSink.Handle ¬ NIL,    options: Options ¬ defaultOptions, position: Position ¬ 0,    allowTypeIn: BOOLEAN ¬ TRUE, resetLengthOnNewSession: BOOLEAN ¬ FALSE];  Destroy: PROCEDURE [sw: Window.Handle];  IsIt: PROCEDURE [sw: Window.Handle] RETURNS [yes: BOOLEAN];  -- Editing Procedures  DoEditAction: PROCEDURE [sw: Window.Handle, action: TextSource.EditAction]    RETURNS [delta: LONG INTEGER];  DeleteText: PROCEDURE [    sw: Window.Handle, pos: Position, count: LONG CARDINAL,    keepTrash: BOOLEAN ¬ TRUE];  InsertBlock: PROCEDURE [    sw: Window.Handle, block: Environment.Block,    pos: Position ¬ TextSource.nullPosition];  InsertChar: PROCEDURE [    sw: Window.Handle, char: CHARACTER, pos: Position ¬ TextSource.nullPosition];  InsertString: PROCEDURE [    sw: Window.Handle, s: LONG STRING, pos: Position ¬ TextSource.nullPosition];  InsertSubString: PROCEDURE [    sw: Window.Handle, ss: String.SubString,    pos: Position ¬ TextSource.nullPosition];  ModifySource: PROCEDURE [    sw: Window.Handle,     proc: PROCEDURE [Window.Handle, TextSource.Handle, LONG POINTER]      RETURNS [invalidRegions: InvalidRegions],     data: LONG POINTER];  ReplaceText: PROCEDURE [    sw: Window.Handle, pos: Position, count: LONG CARDINAL,    block: Environment.Block, keepTrash: BOOLEAN ¬ TRUE];  Update: PROCEDURE [    sw: Window.Handle, from, to: Position, charsDeleted: BOOLEAN ¬ TRUE];  UpdateRange: PROCEDURE [    sw: Window.Handle, from, to: Position, delta: LONG INTEGER,    charsDeleted: BOOLEAN ¬ TRUE];  UpdateToEnd: PROCEDURE [    sw: Window.Handle, from: Position, charsDeleted: BOOLEAN ¬ TRUE];  -- Positioning and Selection Procedures  GetEOF: PROCEDURE [sw: Window.Handle] RETURNS [Position];  GetInsertion: PROCEDURE [sw: Window.Handle] RETURNS [Position];  GetPosition: PROCEDURE [sw: Window.Handle, line: CARDINAL] RETURNS [Position];  GetSelection: PROCEDURE [sw: Window.Handle] RETURNS [left, right: Position];  PositionFromPlace: PROCEDURE [sw: Window.Handle, place: Window.Place]    RETURNS [position: Position];  PositionIsVisible: PROCEDURE [sw: Window.Handle, position: Position]    RETURNS [BOOLEAN];  PositionToLine: PROCEDURE [sw: Window.Handle, position: Position];  SetEOF: PROCEDURE [sw: Window.Handle, eof: Position];  SetInsertion: PROCEDURE [sw: Window.Handle, position: Position];  SetPosition: PROCEDURE [sw: Window.Handle, position: Position];  SetSelection: PROCEDURE [sw: Window.Handle, left, right: Position];  -- Information/Alteration routines  SplitInfoProcType: TYPE = PROCEDURE [first, last: Position, nLines: CARDINAL]    RETURNS [done: BOOLEAN ¬ FALSE];  Adjust: ToolWindow.AdjustProcType;  BlinkingCaret: PROCEDURE [sw: Window.Handle, state: OnOff];  EnumerateSplits: PROCEDURE [sw: Window.Handle, proc: SplitInfoProcType];  ForceOutput: PROCEDURE [sw: Window.Handle];  GetOptions: PROCEDURE [sw: Window.Handle] RETURNS [options: Options];  GetSink: PROCEDURE [sw: Window.Handle] RETURNS [sink: TextSink.Handle];  GetSource: PROCEDURE [sw: Window.Handle] RETURNS [source: TextSource.Handle];  SetOptions: PROCEDURE [sw: Window.Handle, options: Options];  SetSink: PROCEDURE [sw: Window.Handle, sink: TextSink.Handle];  SetSource: PROCEDURE [    sw: Window.Handle, source: TextSource.Handle, position: Position ¬ 0,    reset: BOOLEAN ¬ TRUE];  SplitView: PROCEDURE [sw: Window.Handle, key: Keys.KeyName, y: INTEGER];  -- commonly used FileSubwindow MCR's  FindMCR: Menu.MCRType;  JumpInsertionMCR: Menu.MCRType;  JumpSelectionMCR: Menu.MCRType;  PositionMCR: Menu.MCRType;  SplitMCR: Menu.MCRType;  WrapMCR: Menu.MCRType;  JumpTopMCR: Menu.MCRType;  JumpEndMCR: Menu.MCRType;  -- Activate/Deactivate Procedures  Sleep: PROCEDURE [sw: Window.Handle];  Wakeup: PROCEDURE [sw: Window.Handle];  -- Secondary selections and position change notification  RemoveAllSecondarySelections: PROCEDURE [sw: Window.Handle];  RemoveSecondarySelection: PROCEDURE [sw: Window.Handle, s: TextData.Selection];  SecondarySelectionFromPosition: PROCEDURE [    sw: Window.Handle, position: Position]    RETURNS [s: TextData.Selection];  SetSecondarySelection: PROCEDURE [    sw: Window.Handle, left, right: Position,    mode: TextData.SelectionMode] RETURNS [s: TextData.Selection];      EnumerateSecondarySelections: PROCEDURE [    sw: Window.Handle, proc: PROCEDURE [TextData.Selection] RETURNS [BOOLEAN]];  END. -- of TextSW