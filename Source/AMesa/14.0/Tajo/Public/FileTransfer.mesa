-- File: FileTransfer.mesa - Last edit by-- BJD    ,	18-Jun-84 13:35:34-- BXM  ,	12-Nov-81 16:23:22-- PXK    ,	 8-Dec-81 17:54:42-- LXR    ,	17-Sep-82 14:35:12-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Auth USING [IdentityHandle],  FileName USING [VFN],  Stream USING [Handle],  System USING [gmtEpoch],  Time USING [Packed];FileTransfer: DEFINITIONS =  BEGIN  -- Types  Connection: TYPE = LONG POINTER TO ConnectionObject;  ConnectionObject: TYPE;  FileInfo: TYPE = LONG POINTER TO FileInfoObject;  FileInfoObject: TYPE = MACHINE DEPENDENT RECORD [    host, directory, body, version, author: LONG STRING ¬ NIL,    create, read, write: Time.Packed ¬ System.gmtEpoch,    size: LONG CARDINAL ¬ 0,    type: FileType ¬ unknown,    oldFile: BOOLEAN ¬ TRUE,    readProtect: BOOLEAN ¬ FALSE,    pad: [0..64) ¬ 0];  ValidProperties: TYPE = {    host, directory, body, version, author, create, read, write,    size, type, oldFile, readProtect};  DesiredProperties: TYPE = PACKED ARRAY ValidProperties OF BOOLEAN ¬ ALL[FALSE];  Confirmation: TYPE = MACHINE DEPENDENT {    do(0), skip, abort, firstPrivate(8), null(255)};  FileType: TYPE = MACHINE DEPENDENT {unknown(0), text, binary, directory, null(255)};  ServerType: TYPE = MACHINE DEPENDENT {    unknown(0), local, ifs, ns, null(7)};  Severity: TYPE = {verbose, terse, warning, fatal};  StreamType: TYPE = {remote, local, temporary};  ErrorCode: TYPE = MACHINE DEPENDENT {    illegalParameters(0), invalidObject, notAStream,	-- client bugs    illegalLogin(4), illegalConnect, skipFile,		-- to be caught by client    skipOperation, cantModify, retry, directoryFull,    notFound, accessDenied, spare3, spare4,	     unknown(31)};					-- unknown problem  -- Procedure Types  CheckAbortProc: TYPE = PROC [clientData: LONG POINTER] RETURNS [abort: BOOLEAN];  ClientProc: TYPE = PROC [clientData: LONG POINTER];  InfoProc: TYPE = PROC [Connection] RETURNS [source, target: FileInfo];  ListProc: TYPE = PROC [    conn: Connection, clientData: LONG POINTER, file: LONG STRING,     post: MessageProc, info: InfoProc]     RETURNS [Confirmation];  MessageProc: TYPE = PROC [    clientData: LONG POINTER, level: Severity, s1, s2, s3, s4: LONG STRING ¬ NIL];  VetoProc: TYPE = PROC [    conn: Connection, clientData: LONG POINTER, post: MessageProc,     info: InfoProc, showingDates: BOOLEAN]    RETURNS [confirm: Confirmation, showDates: BOOLEAN];  -- File operations  -- HighestVersion and StoreStream update remote.version  Close: PROC [conn: Connection];  Copy: PROC [    sourceFile, destFile: FileName.VFN, sourceConn, destConn: Connection ¬ NIL,    veto: VetoProc ¬ NIL, showDates: BOOLEAN ¬ FALSE];  Delete: PROC [conn: Connection, file: FileName.VFN, veto: VetoProc ¬ NIL];  Enumerate: PROC [conn: Connection, files: FileName.VFN, proc: ListProc];  HighestVersion: PROC [conn: Connection, remote: FileName.VFN] RETURNS [exists: BOOLEAN];  LocalVFN: PROC [conn: Connection, vfn: FileName.VFN] RETURNS [BOOLEAN];  LookUp: PROC [conn: Connection, file: FileName.VFN] RETURNS [fileInfo: FileInfo];  Rename: PROC [conn: Connection, old, new: FileName.VFN];      -- Stream operations  ReadStream: PROC [    conn: Connection, files: FileName.VFN, veto: VetoProc ¬ NIL,    showDates: BOOLEAN ¬ FALSE, type: StreamType ¬ remote]    RETURNS [Stream.Handle];      ReadNextStream: PROC [Stream.Handle] RETURNS [Stream.Handle];  GetStreamInfo: PROC [remoteStream: Stream.Handle] RETURNS [FileInfo];  GetStreamName: PROC [remoteStream: Stream.Handle] RETURNS [file: LONG STRING];  StoreStream: PROC [    conn: Connection, remote: FileName.VFN, veto: VetoProc ¬ NIL,    showDates: BOOLEAN ¬ FALSE, stream: Stream.Handle, creation: Time.Packed,    bytes: LONG CARDINAL, fileType: FileType];  WriteStream: PROC [    conn: Connection, file: FileName.VFN, veto: VetoProc ¬ NIL,    showDates: BOOLEAN ¬ FALSE, creation: Time.Packed,    type: StreamType ¬ remote]    RETURNS [Stream.Handle];      -- Connection operations  Create: PROC RETURNS [Connection];  Destroy: PROC [Connection];  GetDesiredProperties: PROCEDURE [conn: Connection]    RETURNS [props: DesiredProperties];  SetDesiredProperties: PROCEDURE [conn: Connection, props: DesiredProperties];  GetProcs: PROC [conn: Connection]    RETURNS [      clientData: LONG POINTER, messages: MessageProc,      login, noteProgress: ClientProc, checkAbort: CheckAbortProc];  SetProcs: PROC [    conn: Connection, clientData: LONG POINTER, messages: MessageProc ¬ NIL,    login: ClientProc ¬ NIL, noteProgress: ClientProc ¬ NIL,    checkAbort: CheckAbortProc ¬ NIL];  GetServerType: PROC [conn: Connection, host: LONG STRING] RETURNS [ServerType];  SetDefaultServerType: PROC [conn: Connection, type: ServerType];  SetPrimaryCredentials: PROC [    conn: Connection, user, password: LONG STRING ¬ NIL,    id: Auth.IdentityHandle ¬ NIL];  SetSecondaryCredentials: PROC [    conn: Connection, connectName, connectPassword: LONG STRING];  CodeToString: PROC [ErrorCode, LONG STRING];  Error: SIGNAL [conn: Connection, code: ErrorCode];  END.