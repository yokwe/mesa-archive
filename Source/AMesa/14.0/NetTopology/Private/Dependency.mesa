-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- Dependency.mesa - Last edited by--   Lewis	19-Jan-84 15:00:31DIRECTORY  Window USING [Handle];Dependency: DEFINITIONS =  BEGIN    Error: SIGNAL [code: ErrorCode];  ErrorCode: TYPE = {    initNotCalled, tooManyDependencies, implementationError, notADepSW,    depSWNotReset};      Handle: TYPE = LONG POINTER TO InstanceObject;  InstanceObject: TYPE;  Node: TYPE = LONG POINTER TO NodeObject;  NodeObject: TYPE;      NodeProc: TYPE = PROC [n: Node];  CliqueProc: TYPE = PROC [superNode, dominatedNode: Node];  IncludeNodeProc: TYPE = PROC [n: Node] RETURNS [yes: BOOLEAN];    zone: UNCOUNTED ZONE; -- Procedures  Initialize, Finalize: PROC;    Create: PROC [maxNodeCount: CARDINAL] RETURNS [h: Handle];  Destroy: PROC [h: Handle] RETURNS [nil: Handle];  RecordDependency: PROC [h: Handle, n1, n2: LONG STRING];  ReduceGraph: PROC [  -- remove cliques and redundant arcs    h: Handle,    loopNodesProc: NodeProc ¬ NIL, cliqueProc: CliqueProc ¬ NIL];  SortTopologically: PROC [h: Handle, proc: NodeProc];    NodeCount: PROC [h: Handle] RETURNS [CARDINAL];  -- actual number recorded  NodeName: PROC [n: Node] RETURNS [LONG STRING];  IsSuperNode: PROC [n: Node] RETURNS [BOOLEAN];    EnumNodes, EnumRoots: PROC [h: Handle, proc: NodeProc];  EnumParents, EnumAllParents: PROC [h: Handle, n: Node, proc: NodeProc];  EnumSons, EnumAllSons: PROC [h: Handle, n: Node, proc: NodeProc];  EnumNodesInClique: PROC [h: Handle, superNode: Node, proc: NodeProc]; -- Lay out subgraph in plane  PlaceNodes: PROC [    h: Handle, includeNode: IncludeNodeProc,    desiredWidth, desiredHeight: CARDINAL,  -- fit graph here if possible    minXGap, minYGap: CARDINAL];  PlacedXMax, PlacedYMax: PROC [h: Handle] RETURNS [CARDINAL];  EnumPlacedSons, EnumPlacedParents: PROC [h: Handle, n: Node, proc: NodeProc];    LevelCount: PROC [h: Handle] RETURNS [CARDINAL];  NodeCountInLevel: PROC [h: Handle, level: CARDINAL] RETURNS [CARDINAL];  EnumOneLevel: PROC [h: Handle, level: CARDINAL, proc: NodeProc];    X, Y, Height, Width: PROC [n: Node] RETURNS [CARDINAL];  Bottom, Top, Left, Right: PROC [n: Node] RETURNS [CARDINAL];   -- Graph display  MakeDepSW: PROC [window: Window.Handle] RETURNS [sw: Window.Handle];  DisplayGraph: PROC [h: Handle, sw: Window.Handle];  ResetDepSW: PROC [sw: Window.Handle];   -- Graph editing  UpdateX: PROC [n: Node, x: CARDINAL];  UpdateY: PROC [n: Node, y: CARDINAL];   END.