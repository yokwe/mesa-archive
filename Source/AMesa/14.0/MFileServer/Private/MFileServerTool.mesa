-- File: MFileServerTool.mesa - last edit:-- AOF                  1-Jul-87 20:42:52-- Nannette            21-Oct-86 10:36:51-- JCS                 18-May-86 15:49:23-- JCS  	       10-Dec-85 10:44:24-- Create by FormSWLayoutTool on  2-Aug-84 11:47-- Copyright (C) 1984, 1985, 1986, 1987 by Xerox Corporation. All rights reserved. DIRECTORY  Auth USING [IdentityHandle],  Format USING [StringProc],  FormSW USING [AllocateItemDescriptor, BooleanItem, ClientItemsProcType, line0],  Heap USING [systemZone],  MFileServerOps USING [deleteAllowed, logActivity, overWriteAllowed, running, storeAllowed],  NSName,  Profile USING [GetID],  Put USING [Text],  Runtime USING [IsBound],  Tool USING [Create, Destroy, MakeFileSW, MakeFormSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [GetState, TransitionProcType],  Window USING [GetChild, GetParent, Handle, rootWindow, Stack, ValidateTree];MFileServerTool: PROGRAM  IMPORTS     FormSW, Heap, MFileServerOps, Profile, Put, Runtime, Tool, ToolWindow, Window   EXPORTS MFileServerOps = {  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    formSW(0): Window.Handle ¬ NIL,    fileSW(2): Window.Handle ¬ NIL];  data: DataHandle ¬ NIL;  wh: Window.Handle ¬ NIL;  zone: UNCOUNTED ZONE ¬ Heap.systemZone;  FormItems: TYPE = {running, logActivity, storeAllowed, overWriteAllowed, deleteAllowed};    formsw: PUBLIC Window.Handle ¬ NIL;  fileSW: Window.Handle ¬ NIL;    Write: PUBLIC Format.StringProc = {    Put.Text[IF data = NIL THEN NIL ELSE data.fileSW, s]};    ClientTransition: ToolWindow.TransitionProcType = {    SELECT TRUE FROM      old = inactive => {        IF data = NIL THEN data ¬ zone.NEW[Data ¬ []]};	      new = inactive => {        MFileServerOps.running ¬ FALSE;        IF data # NIL THEN {	  zone.FREE[@data];	  data ¬ NIL;	  fileSW ¬ NIL;	  }};      ENDCASE;    };  DestroyTool: PUBLIC PROC = {IF wh # NIL THEN Tool.Destroy[wh]};    ActivateTool: PUBLIC PROC = {    IF wh = NIL THEN RETURN;    SELECT ToolWindow.GetState[wh] FROM      inactive => {}; --ToolWindow.Activate[wh];      tiny => {}; --ToolWindow.MakeSize[wh, normal];       ENDCASE => IF wh.GetParent[].GetChild[] # wh THEN {        wh.Stack[wh.GetParent[].GetChild[]];	Window.rootWindow.ValidateTree[]};    };    Init: PROCEDURE = {    myId: Auth.IdentityHandle ¬ NIL;    Get: PROC[id: Auth.IdentityHandle] = {myId ¬ id};    Profile.GetID[strong, Get];    IF ~Runtime.IsBound[LOOPHOLE[Tool.Create]] THEN RETURN;    wh ¬ Tool.Create[      makeSWsProc: MakeSWs, initialState: default,      clientTransition: ClientTransition, name: "MFileServer"L,      tinyName1: "MFile"L, tinyName2: "Server"L,      cmSection: "MFileServer"L];    };  MakeSWs: Tool.MakeSWsProc = {    logName: LONG STRING ¬ [40];    Tool.UnusedLogName[unused: logName, root: "MFileServer.log"L];    data.formSW ¬ formsw ¬ Tool.MakeFormSW[      window: window, formProc: MakeForm];    data.fileSW ¬ fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    };      MakeForm: FormSW.ClientItemsProcType = {    OPEN FormSW;    nItems: CARDINAL = FormItems.LAST.ORD + 1;    items ¬ AllocateItemDescriptor[nItems];    items[FormItems.running.ORD] ¬ BooleanItem[      tag: "Running"L, place: [0, line0], switch: @MFileServerOps.running];    items[FormItems.logActivity.ORD] ¬ BooleanItem[      tag: "LogActivity"L, switch: @MFileServerOps.logActivity];     items[FormItems.storeAllowed.ORD] ¬ BooleanItem[      tag: "StoreAllowed"L, switch: @MFileServerOps.storeAllowed];    items[FormItems.overWriteAllowed.ORD] ¬ BooleanItem[      tag: "OverWriteAllowed"L, switch: @MFileServerOps.overWriteAllowed];    items[FormItems.deleteAllowed.ORD] ¬ BooleanItem[      tag: "DeleteAllowed"L, switch: @MFileServerOps.deleteAllowed];    RETURN[items: items, freeDesc: TRUE];    };          Init[];  }...   LOG:-- Nannette	21-Oct-86 10:36:51	Changed tool name to XFileServer-- AOF		 1-Jul-87 20:40:55	..and back again  