-- grammar extracted from Pass1F.mesa by PGS,  9-Jan-87 16:53||CHAIN ||LISTS||TABLE1  1  id  2  num  3  lnum  4  flnum  5  string  6  lstring  7  char  8  atom  9  , 10  ; 11  : 12  .. 13  => 14  _ 15  = 16  # 17  < 18  > 19  <= 20  >= 21  ~ 22  + 23  - 24  * 25  / 26  ^ 27  . 28  @ 29  ! 30  '| 31  RECORD 32  POINTER 33  VAR 34  ARRAY 35  SEQUENCE 36  DESCRIPTOR 37  PROCEDURE 38  PROC 39  PORT 40  SIGNAL 41  ERROR 42  PROCESS 43  PROGRAM 44  MONITOR 45  DEFINITIONS 46  ZONE 47  RELATIVE 48  LONG 49  TYPE 50  FRAME 51  TO 52  ORDERED 53  UNCOUNTED 54  BASE 55  OF 56  PACKED 57  RETURNS 58  RESIDENT 59  MONITORED 60  OVERLAID 61  COMPUTED 62  MACHINE 63  DEPENDENT 64  DIRECTORY 65  IMPORTS 66  EXPORTS 67  SHARES 68  LOCKS 69  USING 70  PUBLIC 71  PRIVATE 72  ENTRY 73  INTERNAL 74  INLINE 75  READONLY 76  CODE 77  ABS 78  ALL 79  AND 80  APPLY 81  MAX 82  MIN 83  MOD 84  NOT 85  OR 86  ORD 87  PRED 88  LENGTH 89  NEW 90  START 91  SUCC 92  VAL 93  FORK 94  JOIN 95  LOOPHOLE 96  NARROW 97  ISTYPE 98  SIZE 99  FIRST100  LAST101  NIL102  TRASH103  NULL104  IF105  THEN106  ELSE107  WITH108  FROM109  FOR110  DECREASING111  IN112  THROUGH113  UNTIL114  WHILE115  REPEAT116  FINISHED117  RETURN118  EXIT119  LOOP120  GOTO121  GO122  FREE123  WAIT124  RESTART125  NOTIFY126  BROADCAST127  STOP128  RESUME129  REJECT130  CONTINUE131  RETRY132  TRANSFER133  STATE134  OPEN135  ENABLE136  ANY137  EXITS138  )139  ]140  }141  END142  ENDLOOP143  ENDCASE144  (145  [146  {147  BEGIN148  DO149  SELECT150  eof||TABLE2151  goal152  unit153  dire154  module155  typecons156  interval157  typeid158  typeid'159  typeappl160  element161  exp162  typelist163  pointertype164  pointerprefix165  statement166  block167  binditem168  casetest169  optrelation170  catchlist171  catchhead172  includelist173  includeitem174  modulelist175  moduleitem176  pairlist177  pairitem178  elementlist179  variantlist180  variantitem181  bindlist182  statementlist'183  declist184  declaration185  casestmtlist'186  casestmtitem187  exitlist'188  exititem189  orderlist190  optexp191  keylist192  keyitem193  caseexplist'194  caseexpitem195  idlist196  idlist'197  explist198  typeexp199  defaultopt200  tagtype201  indextype202  arglist203  fieldlist204  initvalue205  statementlist206  casestmtlist207  caseexplist208  exitlist209  disjunct210  conjunct211  negation212  relation213  sum214  range215  product216  factor217  primary218  lhs219  desclist220  directory221  semicolon222  idcolon223  using224  moduleidlist225  classhead226  defhead227  defbody228  identlist229  resident230  arguments231  interface232  public233  locks234  definitions235  imports236  shares237  begin238  open239  brace240  declfront241  initialization242  readonly243  entry244  default245  optargs246  procaccess247  identlist'248  position249  optbits250  bounds251  length252  dependent253  ident254  monitored255  reclist256  ordered257  base258  packed259  transfermode260  variantpart261  variantpair262  vcasehead263  inline264  codelist265  if266  then267  elsepart268  casehead269  endcase270  otherpart271  dofront272  scope273  doexit274  forclause275  dotest276  transfer277  free278  optcatch279  exit280  enables281  exits282  repeat283  caselabel284  chooses285  catchcase286  lhslist287  controlid288  direction289  finished290  exitfront291  enable292  catchany293  transferop294  not295  relationtail296  addop297  multop298  relop299  prefixop300  typeop301  new302  opttype303  qualifier304  bang305  exports306  assign307  equal308  returnlist309  else310  any||TABLE3id            tokenIDnum           tokenNUMlnum          tokenLNUMflnum         tokenFLNUMstring        tokenSTRlstring       tokenLSTRchar          tokenCHARatom          tokenATOM-             tokenMINUS.             tokenDOT..            tokenDOTS=             tokenEQUAL=>            tokenARROW<             tokenLESS<=            tokenLE>             tokenGREATER>=            tokenGE#             tokenNE.             InitialSymbol||TABLE4  1     0  goal           ::= . unit .   2     0                   | . unit ..   3     1  unit           ::= dire module   4     2  typecons       ::= interval   5     2                   | typeappl   6    42                   | id interval   7    42                   | typeid interval   8    45                   | VAR typeexp   9    46                   | dependent { elementlist }  10    48                   | dependent monitored RECORD reclist  11    49                   | ordered base pointertype  12    50                   | packed ARRAY indextype OF typeexp  13    51                   | DESCRIPTOR FOR readonly typeexp  14    52                   | transfermode arguments  15    53                   | id RELATIVE typeexp  16    53                   | typeid RELATIVE typeexp  17    54                   | UNCOUNTED ZONE  18    55                   | LONG typeexp  19    56                   | FRAME [ id ]  20     2  typeid         ::= typeid'  21    41                   | id id  22    42                   | id typeid  23     2  element        ::= id ( exp )  24     2                   | ( exp )  25   165                   | id  26     2  exp            ::= disjunct  27   138                   | transferop lhs  28   139                   | IF exp THEN exp ELSE exp  29   140                   | casehead caseexplist ENDCASE => exp  30   141                   | lhs _ exp  31   142                   | [ explist ] _ exp  32   143                   | ERROR  33     2  typelist       ::= typecons  34     2                   | typeid  35    73                   | id  36    75                   | id _ defaultopt  37    76                   | typecons , typelist  38    76                   | typeid , typelist  39    76                   | id , typelist  40    77                   | id _ defaultopt , typelist  41     2  pointertype    ::= pointerprefix  42    78                   | pointerprefix TO readonly typeexp  43     2  statement      ::= block  44    86                   | lhs  45    87                   | lhs _ exp  46    88                   | [ explist ] _ exp  47    89                   | if exp then statement elsepart  48    92                   | casehead casestmtlist endcase otherpart  49    94                   | dofront scope doexit ENDLOOP  50    96                   | EXIT  51    96                   | LOOP  52    97                   | GOTO id  53    98                   | GO TO id  54    99                   | RETURN optargs  55   100                   | transfer lhs  56   101                   | free [ exp optcatch ]  57   102                   | WAIT lhs  58   103                   | ERROR  59   103                   | STOP  60   103                   | NULL  61   103                   | REJECT  62   103                   | CONTINUE  63   103                   | RETRY  64   104                   | RESUME optargs  65   105                   | lhs _ STATE  66   106                   | STATE _ lhs  67     2  binditem       ::= exp  68   110                   | id : exp  69     2  casetest       ::= optrelation  70     2                   | exp  71     2  catchlist      ::= catchhead  72   133                   | catchhead catchcase  73   214                   | catchhead catchany  74   215                   | catchhead catchany semicolon  75     2  includelist    ::= includeitem  76   183                   | includelist , includeitem  77     2  modulelist     ::= moduleitem  78   184                   | modulelist , moduleitem  79     2  pairlist       ::= pairitem  80   184                   | pairlist , pairitem  81     2  elementlist    ::= element  82   184                   | elementlist , element  83     2  variantlist    ::= variantitem  84   184                   | variantlist , variantitem  85     2  bindlist       ::= binditem  86   184                   | bindlist , binditem  87     2  statementlist' ::= statement  88   185                   | statementlist' semicolon statement  89     2  declist        ::= declaration  90   185                   | declist semicolon declaration  91     2  casestmtlist'  ::= casestmtitem  92   185                   | casestmtlist' semicolon casestmtitem  93     2  exitlist'      ::= exititem  94   185                   | exitlist' semicolon exititem  95     2  orderlist      ::= optexp  96   184                   | orderlist , optexp  97     2  optexp         ::= exp  98    66                   | NULL  99    66                   | TRASH 100   218                   | 101     2  keylist        ::= keyitem 102   184                   | keylist , keyitem 103     2  caseexplist'   ::= caseexpitem 104   184                   | caseexplist' , caseexpitem 105     2  idlist         ::= idlist' 106     2  explist        ::= orderlist 107     2                   | keylist 108     2  typeexp        ::= typeid 109     2                   | typecons 110    39                   | id 111     2  defaultopt     ::= exp 112    65                   | 113    66                   | NULL 114    66                   | TRASH 115    67                   | exp '| NULL 116    67                   | exp '| TRASH 117     2  tagtype        ::= typeexp 118    73                   | * 119     2  indextype      ::= typeexp 120   218                   | 121     2  arglist        ::= fieldlist 122   218                   | 123     2  initvalue      ::= exp 124    66                   | NULL 125    66                   | TRASH 126    66                   | CODE 127    82                   | procaccess inline block 128    83                   | MACHINE CODE begin codelist END 129    83                   | MACHINE CODE brace codelist } 130     2  statementlist  ::= statementlist' 131   181                   | 132   210                   | statementlist' semicolon 133     2  casestmtlist   ::= casestmtlist' 134   181                   | 135   210                   | casestmtlist' semicolon 136     2  caseexplist    ::= caseexplist' 137   181                   | 138   210                   | caseexplist' , 139     2  exitlist       ::= exitlist' 140   181                   | 141   210                   | exitlist' semicolon 142 C   2  disjunct       ::= conjunct 143   144                   | disjunct OR conjunct 144 C   2  conjunct       ::= negation 145   145                   | conjunct AND negation 146 C   2  negation       ::= relation 147   146                   | not relation 148 C   2  relation       ::= sum 149   146                   | sum optrelation 150 C   2  sum            ::= product 151   149                   | sum addop product 152     2  range          ::= interval 153     2                   | typeid 154    39                   | id 155    42                   | id interval 156    42                   | typeid interval 157 C   2  product        ::= factor 158   149                   | product multop factor 159 C   2  factor         ::= primary 160   155                   | addop primary 161 C   2  primary        ::= lhs 162   156                   | num 163   156                   | lnum 164   156                   | flnum 165   156                   | string 166   156                   | atom 167   156                   | lstring 168   158                   | NIL 169   159                   | [ explist ] 170   160                   | prefixop [ orderlist ] 171   160                   | typeop [ typeexp ] 172   161                   | new [ typeexp initialization optcatch ] 173   162                   | SIZE [ typeexp ] 174   162                   | DESCRIPTOR [ desclist ] 175   162                   | VAL [ orderlist ] 176   162                   | ALL [ orderlist ] 177   163                   | SIZE [ typeexp , exp ] 178   163                   | ISTYPE [ exp , typeexp ] 179   164                   | @ lhs 180     2  desclist       ::= exp 181   177                   | exp , exp opttype 182     3  dire           ::= directory includelist semicolon 183   178                   | DIRECTORY semicolon 184   218                   | 185     4  directory      ::= DIRECTORY 186     5  includeitem    ::= idcolon FROM string using 187     5                   | idcolon TYPE id using 188     7                   | idcolon TYPE using 189     8                   | id using 190     6  idcolon        ::= id : 191     9  using          ::= USING [ ] 192   197                   | USING [ idlist ] 193   218                   | 194    10  module         ::= moduleidlist classhead block 195    10                   | moduleidlist defhead defbody 196    11  moduleidlist   ::= identlist 197    12  classhead      ::= resident PROGRAM arguments interface = public 198    13                   | resident MONITOR arguments locks interface = public 199    14  resident       ::= RESIDENT 200    15                   | 201    16  defhead        ::= definitions locks imports shares = public 202    17  definitions    ::= DEFINITIONS 203    18  defbody        ::= begin open declist END 204    18                   | brace open declist } 205    19                   | begin open declist semicolon END 206    19                   | brace open declist semicolon } 207    20  begin          ::= BEGIN 208    20  brace          ::= { 209    21  locks          ::= LOCKS primary 210    22                   | LOCKS primary USING id : typeexp 211   218                   | 212    23  moduleitem     ::= id 213    24                   | idcolon id 214    25  declaration    ::= declfront initialization 215    27                   | identlist public TYPE = public typeexp default 216    28                   | identlist public TYPE optargs 217    26  declfront      ::= identlist public readonly entry typeexp 218    29  public         ::= PUBLIC 219    29                   | PRIVATE 220    30                   | 221    29  entry          ::= ENTRY 222    29                   | INTERNAL 223    30                   | 224    30  procaccess     ::= 225    31  idlist'        ::= id 226    34                   | id , idlist' 227    32  identlist'     ::= id : 228    33                   | id position : 229    34                   | id , identlist' 230    35                   | id position , identlist' 231    36  position       ::= ( exp optbits ) 232    37  optbits        ::= : bounds 233   218                   | 234    38  interval       ::= [ bounds ] 235    38                   | [ bounds ) 236    38                   | ( bounds ] 237    38                   | ( bounds ) 238    40  typeid'        ::= id . id 239    40                   | typeid' . id 240    43  typeappl       ::= id length 241    43                   | typeid length 242    43                   | typeappl length 243    44                   | typeappl . id 244    47  ident          ::= id position : 245   166                   | id : 246    57  monitored      ::= MONITORED 247   196                   | 248    58  dependent      ::= MACHINE DEPENDENT 249    59                   | 250    60  reclist        ::= [ ] 251    61                   | NULL 252    62                   | [ pairlist ] 253    62                   | [ typelist ] 254    62                   | [ variantpart ] 255    62                   | [ variantpair ] 256    63                   | [ pairlist , variantpair ] 257    64  pairitem       ::= identlist public typeexp default 258    64  variantpair    ::= identlist public variantpart default 259    68  variantpart    ::= SELECT vcasehead FROM variantlist ENDCASE 260    69                   | SELECT vcasehead FROM variantlist , ENDCASE 261    70                   | packed SEQUENCE vcasehead OF typeexp 262    71  vcasehead      ::= ident public tagtype 263    72                   | COMPUTED tagtype 264    72                   | OVERLAID tagtype 265    74  variantitem    ::= idlist => reclist 266    79  transfermode   ::= PROCEDURE 267    79                   | PROC 268    79                   | SIGNAL 269    79                   | ERROR 270    79                   | PORT 271    79                   | PROGRAM 272    80                   | PROCESS 273    81  initialization ::= 274   191                   | assign initvalue 275   191                   | equal initvalue 276    84  codelist       ::= orderlist 277    85                   | codelist semicolon orderlist 278    90  if             ::= IF 279    91  then           ::= THEN 280    93  endcase        ::= ENDCASE 281    95  dofront        ::= forclause dotest DO 282   107  block          ::= begin scope exit END 283   107                   | brace scope exit } 284   108  scope          ::= open enables declist semicolon statementlist 285   109                   | open enables statementlist 286   111  exit           ::= exits exitlist 287   196                   | 288   112  exits          ::= EXITS 289   112  repeat         ::= REPEAT 290   113  casestmtitem   ::= caselabel chooses statement 291   113  catchcase      ::= lhslist chooses statement 292   114  caseexpitem    ::= caselabel chooses exp 293   115  forclause      ::= FOR controlid _ exp , exp 294   116                   | FOR controlid direction IN range 295   118                   | THROUGH range 296   218                   | 297   117  controlid      ::= ident typeexp 298   165                   | id 299   119  direction      ::= DECREASING 300   120                   | 301   121  dotest         ::= UNTIL exp 302   201                   | WHILE exp 303   218                   | 304   122  doexit         ::= 305   123                   | repeat exitlist 306   124                   | repeat exitlist finished chooses statement 307   125                   | repeat exitlist finished chooses statement semicolon 308   126  finished       ::= FINISHED 309   127  chooses        ::= => 310   128  exititem       ::= exitfront chooses statement 311   129  exitfront      ::= idlist 312   130  enables        ::= enable catchcase semicolon 313   130                   | enable catchany semicolon 314   131                   | enable begin catchlist END semicolon 315   131                   | enable brace catchlist } semicolon 316   196                   | 317   132  enable         ::= ENABLE 318   134  transfer       ::= SIGNAL 319   134                   | ERROR 320   134                   | START 321   134                   | RESTART 322   134                   | JOIN 323   134                   | NOTIFY 324   134                   | BROADCAST 325   135                   | RETURN WITH ERROR 326   136                   | TRANSFER WITH 327   136                   | RETURN WITH 328   137  keyitem        ::= id : optexp 329   147  optrelation    ::= not relationtail 330   148                   | relationtail 331   150  relationtail   ::= IN range 332   214                   | relop sum 333   151  relop          ::= = 334   151                   | # 335   151                   | < 336   151                   | <= 337   151                   | > 338   151                   | >= 339   152  addop          ::= + 340   152                   | - 341   153  multop         ::= * 342   153                   | / 343   154                   | MOD 344   157  lhs            ::= char 345   165                   | id 346   167                   | LOOPHOLE [ exp opttype ] 347   168                   | NARROW [ exp opttype optcatch ] 348   213                   | ( exp ) 349   214                   | lhs qualifier 350   221                   | APPLY [ exp , exp optcatch ] 351   169  qualifier      ::= [ explist optcatch ] 352   170                   | . id 353   170                   | . prefixop 354   170                   | . typeop 355   171                   | . SIZE 356   172                   | ^ 357   173  optcatch       ::= bang catchlist 358   196                   | 359   174  bang           ::= ! 360   175  transferop     ::= SIGNAL 361   175                   | ERROR 362   175                   | START 363   175                   | JOIN 364   175                   | NEW 365   175                   | FORK 366   176  pointerprefix  ::= POINTER 367   201                   | POINTER interval 368   176  prefixop       ::= LONG 369   176                   | ABS 370   176                   | PRED 371   176                   | SUCC 372   176                   | ORD 373   176                   | MIN 374   176                   | MAX 375   176                   | BASE 376   176                   | LENGTH 377   176  typeop         ::= FIRST 378   176                   | LAST 379   176                   | NIL 380   179  fieldlist      ::= [ ] 381   190                   | [ pairlist ] 382   190                   | [ typelist ] 383   180  imports        ::= IMPORTS 384   188                   | IMPORTS modulelist 385   218                   | 386   180  exports        ::= EXPORTS 387   188                   | EXPORTS modulelist 388   218                   | 389   181  catchhead      ::= 390   186                   | catchhead catchcase semicolon 391   182  caselabel      ::= casetest 392   182                   | ident typeexp 393   184                   | caselabel , casetest 394   182  lhslist        ::= lhs 395   184                   | lhslist , lhs 396   187  identlist      ::= identlist' 397   189  open           ::= OPEN bindlist semicolon 398   218                   | 399   191  default        ::= assign defaultopt 400   218                   | 401   192  assign         ::= _ 402   192  equal          ::= = 403   193  readonly       ::= READONLY 404   196                   | 405   193  ordered        ::= ORDERED 406   196                   | 407   193  base           ::= BASE 408   196                   | 409   193  packed         ::= PACKED 410   196                   | 411   193  inline         ::= INLINE 412   196                   | 413   194  casehead       ::= SELECT exp FROM 414   195                   | WITH binditem SELECT optexp FROM 415   198  interface      ::= imports exports shares 416   199  shares         ::= SHARES idlist 417   218                   | 418   200  length         ::= [ exp ] 419   202  arguments      ::= arglist returnlist 420   203  returnlist     ::= RETURNS fieldlist 421   218                   | 422   204  elsepart       ::= else statement 423   218                   | 424   205  else           ::= ELSE 425   206  otherpart      ::= chooses statement 426   218                   | 427   207  catchany       ::= any chooses statement 428   208  any            ::= ANY 429   209  not            ::= ~ 430   209                   | NOT 431   211  optargs        ::= [ explist ] 432   218                   | 433   220                   | lhs 434   212  bounds         ::= exp .. exp 435   216  free           ::= lhs . FREE 436   216  new            ::= lhs . NEW 437   217  opttype        ::= , typeexp 438   218                   | 439   219  semicolon      ::= ; 