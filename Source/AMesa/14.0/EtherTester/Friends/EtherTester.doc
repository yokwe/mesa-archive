EtherTester.doc, HGM, 18-Feb-82 23:24:24Last Edit: JMaloney, October 22, 1981-- Introduction --EtherTester is the program that I use to chase problems in D0 and DLion Ethernet controllers, microcode, and whatever.  It comes in 3 versions: EtherTesterDLion.bcd for use on a DLion, EtherTesterD0.bcd for use on D0, and EtherTester.bcd that runs on either.  The D0 and DLion versions contain bug fixes to the Ethernet head.  There is no documentation other than this file and the sources.  (If you are running on a DLion, you want EtherTesterDLion.bcd.)  At this time, everything lives on [Idun]<Int>EtherTester>.EtherTester runs under Tajo.  You need to boot Tajo with the > switch.  If you are running on a DLion, that means you can't use the FileTool.Once you get it started, you will see a blizzard of menu items.  Many things interact in complicated ways.  If something confuses you, let me know and I will update this file.-- Commands --Stop! terminates the currently active processes.  Leaning on the Space bar also works.Send! starts a process to send packets.Recv! starts a process to receive packets.SendAndRecv! starts a pair of processes to send and receive packets.  On a D0, this can be used to send packets to yourself.EchoServer! starts an Echo Server process.EchoUser! starts an Echo User process.-- Parameters --DoChecksum activates software checksums.  Things go slightly faster if it is off, but software checksums are a very fast way to verify that the hardware has not mangled a packet.Flipem controls the software flippers.  (You will see what I'm talking about once you try it.)  Turn this off to make things go faster.SmashTheCursor puts some of the counters into the cursor so you can see that things are still happening even if the display is off.  (That assumes that your display shows the cursor when it is off.)BlankDisplay turns off the display while a test is running.  This conservs CPU cycles.  On a D0, it may prevent overruns.DoStats controls the printing of a bunch of info when any command stops.ShowRunts prints out short packets.  In this case, short is less that 7 data (9 if you include the CRC) rather than the larget number in the spec.  This is so I can see what the distribution of runts looks like.  Note that the D0 and DLion microcode and/or hardware have already filtered out the really short packets.ShowGarbage prints out bad packets.ShowStrangeStatus will printout any packet with a strange status.  This is probably caused by a bug in the head.DallyIfBehind will cause the Echo User process or Send process to let background run if the send sequence number is getting ahead of the receiving sequence number.  This gives the other Echo Server process and our the local receiving process a chance to catch up.ShowWrongLength will printout packets if they came from Dest and have the wrong length and a good status.  Sometimes this is a hardware problem.ShowWrongData will printout packets if they came from Dest and have the wrong data and a good status.  If ShowWrongData is no on, they are simply counted.  (This is only relevant if CheckInput is on.)ShowOnlyBadAlign will print out things if a packet with only bad alignment arrives.  Normally bad packets should have a bad CRC too.  Dribbling transcievers may cause this funny case, but it is probably a controller bug if your transcievers are healthy.CheckInput will format output packets and do a word by word check of packets with good status that arrive from Dest.  This takes a lot fo CPU cycles.  Note that this must be on in the sending machine too.BumpPacketNumber will increment the sequence number in each packet as it is sent and expect arriving packets to have sequence numbers that are incrementing.Pattern is the data pattern that will be used if CheckInput is on.Board is the number of the Ethernet board to use, if your D0 happens to have several. The first board is 1.MyHostNumber is the 48 bit Ethernet host number that came from Pilot.  It is used my the microcode to packets on the wire.Promiscuous should be set to cause the recv process to read EVERY packet.  (On a DLion, you won't see the packets you send.)Source is the host number that EtherTester will use in the source fields of the packets that it sends.  The Clearinghouse won't work unless your machine also has a 3mb interface.  Thus Lassen (a DLion in our lab) is 25200000006.NumberOfRecvBuffers is the number of buffers that will be allocated for receiving.InputBufferLength is the length of the input buffers in words.  If you are an EchoServer, it should be big enough to hold the packets that will be sent to you.  Remember to round up a bit to leave room for the CRC and such.TicksBeforeSend is the number of 50ms ticks to wait before sending each packet.  This is handy to slow things down so that you don't swamp other machines.  Set it to 0 if you want to send fast.DallyBeforeOutput is a flag that will give the recv process a chance to run before sending each packet.  (It also gives the background process a chance to update the flippers.)Broadcasting will override Dest if it is on.  You will get the same result if you set Dest to 7777777777777777.Dest is the address of the machine that packets will be sent to or echoed to.  See Source for a description of the format.NumberOfSendBuffers is the number of buffers that will be allocated for sending.OutputBufferLength is the length of the output buffers in words.  If you are an EchoServer, it should be big enough to hold copies of the arriving packets.  If you are sending or echoing to another machine, this is the size of the packets that will be sent.-- Hints --The DLion needs a hardware fix to be able to catch all the packets if the wire is busy.To send lots of packets, turn off Flipem and DallyBeforeOutput, and set TicksBeforeSend to 0.  Adjust OutputBufferLength to get what you want.  If you are sending short packets set NumberOfSendBuffers to 8.  If you are sending long packets, 3 or 4 is enough to keep things busy.If you sync your scope on SendMode in the controller, things will be rock solid on the wire and/or the front end of receivers.  (I have a pair or wires sticking out the end of my D0 board for this purpose.)If you turn off BumpPacketNumber, each packet will be identical.  If it is on, you can find sections (the sequence number and the CRC) where the data will varry from packet to packet.To send packets to another machine, set Dest and adjust TicksBeforeSend and such to get the speed you want.If you want to make a reasonable number of collisions, you will need at least 3 machines.  With only 2, they defer to each other.  With 3, there is a reasonable probability that 2 will try to start while the 3rd is sending.  If so, they  will collide at the end of the current packet.  To clutter up the wire (and hence make more collisions) simply send long packets to yourself.An active Echo Server needs lots of buffering.  I normally use 10 recv buffers and 10 send buffers.If you want to make a reasonably nasty test of a pair of DLions, set one up as an Echo Server and another as an Echo User.  Exchange 2000 word packets, give the Echo User 6 input buffers and 3 output buffers, turn on DallyIfBehind, turn off Flipem, and set TicksBeforeSend to 0.  Unless the hardware has been fixed, this test will miss many packets.  If you look at the wire, you will see a nice stable pattern that involves clumps of 6 packets.  If you don't have the hardware fix, you can avoid most of the lost packets by using only 1 send buffer.EtherTester uses official NS format echo packets.  It doesn't have any smarts about network numbers.  The Echo Server may actually work through INRs since it sends the packet back to the machine in the source field of the encapsulation.  You can echo to product servers (and any other machine running Pilot) as long as the packets are shorter than 276 words.  You may miss a lot of packets if the machine is busy.If you are sending or receiving packets rapidly you will probably run out of CPU cycles.  That's why things also stop if you poke the STOP key when the cursor is in EtherTester's window.  This is more of a problem on a D0 than a DLion.