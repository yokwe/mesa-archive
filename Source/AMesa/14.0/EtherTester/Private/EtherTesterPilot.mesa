-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. -- File: EtherTesterPilot.mesa, AOF, 26-Sep-83 16:45:40DIRECTORY  NewEthernetFace USING [controlBlockSize],  Environment USING [PageCount, PageNumber, wordsPerPage],  Inline USING [LowHalf],  ResidentHeap USING [MakeNode, FreeNode, first64K],  Space USING [    Allocate, Deallocate, GetMapUnitAttributes, Interval, PageFromLongPointer],  SpaceUsage USING [CommunicationUsage],  VM USING [Map, nullBackingStoreRuns, Unmap],  Zone USING [Base, Status],  EtherTesterDefs;EtherTesterPilot: PROGRAM  IMPORTS NewEthernetFace, Inline, ResidentHeap, Space, VM  EXPORTS EtherTesterDefs =  BEGIN  AllocateOneBuffer: PUBLIC PROCEDURE [size: CARDINAL] RETURNS [b: LONG POINTER] =    BEGIN    pages: Environment.PageCount =      (size + Environment.wordsPerPage - 1)/Environment.wordsPerPage;    interval: Space.Interval = Space.Allocate[pages];    page: Environment.PageNumber = Space.PageFromLongPointer[interval.pointer];    VM.Map[      interval: [page, pages], transferProc: NIL,      backingStoreRuns: VM.nullBackingStoreRuns, swappability: resident,      class: data, usage: FIRST[SpaceUsage.CommunicationUsage]];    BEGIN    p: LONG POINTER ¬ b ¬ interval.pointer;    THROUGH [0..size) DO p­ ¬ 0; p ¬ p + 1; ENDLOOP;    END;    END;  FreeOneBuffer: PUBLIC PROCEDURE [b: LONG POINTER] =    BEGIN    interval: Space.Interval ¬ Space.GetMapUnitAttributes[b].interval;    VM.Unmap[Space.PageFromLongPointer[b]];    Space.Deallocate[interval];    END;  AllocateOneIOCB: PUBLIC PROCEDURE RETURNS [iocb: LONG POINTER] =    BEGIN    ResidentZoneTrouble: ERROR = CODE;    status: Zone.Status;    p: Zone.Base RELATIVE POINTER;    [p, status] ¬ ResidentHeap.MakeNode[NewEthernetFace.controlBlockSize, a16];    IF status # okay THEN ERROR ResidentZoneTrouble;    iocb ¬ @ResidentHeap.first64K[p];    END;  FreeOneIOCB: PUBLIC PROCEDURE [iocb: LONG POINTER] =    BEGIN    p: Zone.Base RELATIVE POINTER ¬ Inline.LowHalf[      iocb - LOOPHOLE[ResidentHeap.first64K, LONG POINTER]];    [] ¬ ResidentHeap.FreeNode[p];    END;  END.