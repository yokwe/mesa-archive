-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- File: [Igor]<Emerson>FileSystem>Private>NotifyOps.mesa - Last edit by-- LXR    ,	18-Apr-83  9:37:45DIRECTORY  File USING [File],  MDirectory USING [EnumerateState],  MFile USING [Access, EnumerateState, Filter, ReleaseData],  MFileOps USING [FHandle, Handle, LeaderPage];NotifyOps: DEFINITIONS =  BEGIN  GetObjectForReading: PROCEDURE [    filter, name: LONG STRING, lastState: MFile.EnumerateState,    stopNow: BOOLEAN]    RETURNS [status: AccessStatus, fo: MFileOps.FHandle, state: MFile.EnumerateState];     RemoteFileName: PROCEDURE [name: LONG STRING] RETURNS [BOOLEAN];      -- NotifyLock stuff   notifyList: MFileOps.FHandle;    Notification: TYPE = RECORD [    var: SELECT tag: * FROM      writeable => [p: WHandle], normal => [fo: MFileOps.FHandle], ENDCASE];  WHandle: TYPE = LONG POINTER TO WNotification;  WNotification: TYPE = RECORD [name: LONG STRING, next: WHandle];  GetNextNotification: PROCEDURE RETURNS [f: Notification];   AddToWriteableList: PROCEDURE [name: LONG STRING];    AddToNotificationList: PROCEDURE [fo: MFileOps.FHandle, access: MFile.Access];    AddToNotificationListInternal: PROCEDURE [fo: MFileOps.FHandle, access: MFile.Access];    -- Chain locked Procedures  AccessStatus: TYPE = {good, protected, conflicting, retry};  Compatibility: TYPE = {ok, pokeOnce, nope};  ConflictingAccess: PROCEDURE [somebodyHas, thisGuyWants: MFile.Access]    RETURNS [Compatibility];      Conflicts: PROCEDURE [    fo: MFileOps.FHandle, filter: MFile.Filter, ignore: MFileOps.Handle]    RETURNS [BOOLEAN];  AddHandle: PROCEDURE [    fo: MFileOps.FHandle, access: MFile.Access, release: MFile.ReleaseData,    protectedSP: BOOLEAN ¬ FALSE, checkAccess: BOOLEAN ¬ TRUE,     ignoreConflict: MFileOps.Handle ¬ NIL]    RETURNS [status: AccessStatus ¬ good, file: MFileOps.Handle ¬ NIL];      LockedSetAccess: PROCEDURE [fo: MFileOps.FHandle, file: MFileOps.Handle, access: MFile.Access];    TakeHandleOffList: PROCEDURE [    fo: MFileOps.FHandle, file: MFileOps.Handle, doNotification: BOOLEAN];   -- leaderpage locked     GetProtectionStatus: PROCEDURE [fo: MFileOps.FHandle, access: MFile.Access] RETURNS [AccessStatus];  SetTimesGivenAccess: PROCEDURE [fo: MFileOps.FHandle, lp: MFileOps.LeaderPage, access: MFile.Access];    -- dirNameCache locked   NameOverflow: ERROR;  NameInCache: PROCEDURE [id: File.File, name: LONG STRING]    RETURNS [foundIt: BOOLEAN];      PutNameInCache: PROCEDURE [id: File.File, name: LONG STRING];      -- fHandle locked  but depends on MDirectory  GetObjectForEnumerate: PROCEDURE [    id: File.File, state: MDirectory.EnumerateState]     RETURNS [fo: MFileOps.FHandle];  -- releaseData locked  LockedGetReleaseData: PROCEDURE [file: MFileOps.Handle] RETURNS [release: MFile.ReleaseData];  END.