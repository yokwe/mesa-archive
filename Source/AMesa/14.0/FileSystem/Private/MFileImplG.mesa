-- File: MFileImplG.mesa - last edit:-- Riggle.PA           11-Aug-86 10:29:14-- Copyright (C) 1983 , 1986 by Xerox Corporation. All rights reserved. -- File: MFileImplG.mesa - last edited by-- LXR    ,	18-Apr-83  9:47:13DIRECTORY  ByteBlt USING [ByteBlt],  Environment USING [bytesPerWord],  File USING [File, nullFile],  MFileOps USING [CopyString, FreeString],  NotifyOps USING [];MFileImplG: MONITOR -- dirNameCache  IMPORTS ByteBlt, MFileOps  EXPORTS NotifyOps =  BEGIN  NameOverflow: PUBLIC ERROR = CODE;    dirNameCacheSize: CARDINAL = 10;  dirNameCache: ARRAY [0..dirNameCacheSize) OF DirNameCacheEntry ¬ ALL[[]];  DirNameCacheEntry: TYPE = RECORD [    id: File.File ¬ File.nullFile, name: LONG STRING ¬ NIL];  Promote: PROCEDURE [i: CARDINAL] = {    temp: DirNameCacheEntry = dirNameCache[i];    bytesToMove: CARDINAL = i*SIZE[DirNameCacheEntry]*Environment.bytesPerWord;    [] ¬ ByteBlt.ByteBlt[      to: [LOOPHOLE[@dirNameCache[1]], 0, bytesToMove],      from: [LOOPHOLE[@dirNameCache[0]], 0, bytesToMove], overLap: move];    dirNameCache[0] ¬ temp};        NameInCache: PUBLIC ENTRY PROCEDURE [id: File.File, name: LONG STRING]    RETURNS [foundIt: BOOLEAN] = {    ENABLE UNWIND => NULL;    FOR i: CARDINAL IN [0..dirNameCacheSize) DO      chars: CARDINAL;      IF dirNameCache[i].name = NIL THEN RETURN[FALSE];      IF dirNameCache[i].id = id THEN {        t: LONG STRING = dirNameCache[i].name;        chars ¬ ByteBlt.ByteBlt[          from: [LOOPHOLE[@t.text], 0, t.length],          to: [LOOPHOLE[@name.text], name.length, name.maxlength]];        name.length ¬ name.length + chars;        IF chars # t.length THEN ERROR NameOverflow;        IF i > 0 THEN Promote[i];        RETURN[TRUE]};      ENDLOOP;    RETURN[FALSE]};	    PutNameInCache: PUBLIC ENTRY PROCEDURE [id: File.File, name: LONG STRING] = {    ENABLE UNWIND => NULL;    IF dirNameCache[dirNameCacheSize - 1].name # NIL THEN {      MFileOps.FreeString[dirNameCache[dirNameCacheSize - 1].name];      dirNameCache[dirNameCacheSize - 1].name ¬ NIL;      dirNameCache[dirNameCacheSize - 1].id ¬ File.nullFile};    FOR i: CARDINAL IN [0..dirNameCacheSize) DO      IF dirNameCache[i].id = id THEN RETURN;      IF dirNameCache[i].name = NIL THEN {        dirNameCache[i] ¬ [id: id, name: MFileOps.CopyString[name]];        IF i > 0 THEN Promote[i];        EXIT};      ENDLOOP};              END.