-- MStream.mesa  Last edited by--   PXK    ,	 8-Dec-81 16:56:43--   LXR    ,	 9-Sep-82 10:19:20--   DWE    ,	  7-Apr-83 12:20:36--   RXJ     ,	  1-Jul-83 16:13:14-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  File USING [PageNumber],  MFile USING [Access, ByteCount, Handle, ReleaseChoice, Type],  Environment USING [Block],  Stream USING [defaultInputOptions, InputOptions, Handle];MStream: DEFINITIONS =  BEGIN  -- Types:    Handle: TYPE = Stream.Handle;  PleaseReleaseProc: TYPE = PROCEDURE [stream: Handle, instanceData: LONG POINTER]    RETURNS [MFile.ReleaseChoice];  ReleaseData: TYPE = RECORD [    proc: PleaseReleaseProc ¬ NIL,    clientInstanceData: LONG POINTER ¬ NIL];    -- Operations:  Create: PROCEDURE [    file: MFile.Handle, release: ReleaseData,    options: Stream.InputOptions ¬ Stream.defaultInputOptions,    streamBase: File.PageNumber ¬ 0]    RETURNS [stream: Handle];  Copy: PROCEDURE [from, to: Handle, bytes: MFile.ByteCount]    RETURNS [bytesCopied: MFile.ByteCount];    Log: PROCEDURE [name: LONG STRING, release: ReleaseData] RETURNS [Handle];  ReadOnly: PROCEDURE [name: LONG STRING, release: ReleaseData] RETURNS [Handle];  ReadWrite: PROCEDURE [    name: LONG STRING, release: ReleaseData, type: MFile.Type]    RETURNS [Handle];  WriteOnly: PROCEDURE [    name: LONG STRING, release: ReleaseData, type: MFile.Type]    RETURNS [Handle];    BackupLog: PROCEDURE [stream: Handle, count: MFile.ByteCount]     RETURNS [backedUp: MFile.ByteCount];  EndOf: PROCEDURE [stream: Handle] RETURNS [BOOLEAN];  IsIt: PROCEDURE [stream: Handle] RETURNS [BOOLEAN];  ShareBlock: PROCEDURE [stream: Handle, start: MFile.ByteCount, length: CARDINAL]    RETURNS [block: Environment.Block];  GetFile: PROCEDURE [stream: Handle] RETURNS [file: MFile.Handle];  GetLength: PROCEDURE [stream: Handle] RETURNS [fileLength: MFile.ByteCount];  GetReleaseData: PROCEDURE [stream: Handle] RETURNS [release: ReleaseData];  SetAccess: PROCEDURE [stream: Handle, access: MFile.Access];  SetLength: PROCEDURE [stream: Handle, fileLength: MFile.ByteCount];  SetLogReadLength: PROCEDURE [stream: Handle, position: MFile.ByteCount];  SetReleaseData: PROCEDURE [stream: Handle, release: ReleaseData];  -- Errors:  ErrorCode: TYPE = MACHINE DEPENDENT {    invalidHandle(0), indexOutOfRange, invalidOperation, fileTooLong,    fileNotAvailable, invalidFile, other(LAST[CARDINAL])};    Error: ERROR [stream: Handle, code: ErrorCode];    END. 