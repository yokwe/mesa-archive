-- MSegment.mesa  Edited by--   PXK    ,	 8-Nov-82 17:54:43--   LXR    ,	15-Oct-82 10:42:22--   DWE    ,	 7-Apr-83 11:57:24--   RXJ     ,	 1-Jul-83 16:33:21-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Environment USING [PageCount, PageNumber, wordsPerPage],  File USING [PageCount, PageNumber],  MFile USING [Handle, ReleaseChoice],  Space USING [    defaultSwapUnitSize, defaultSwapUnitOption, SwapUnitSize,    SwapUnitType, SwapUnitOption, unknownUsage, Usage],  SpaceUsage USING [MesaUsage];MSegment: DEFINITIONS =  BEGIN  -- no provision for having a space that is not mapped    PleaseReleaseProc: TYPE =    PROCEDURE [segment: Handle, instanceData: LONG POINTER]    RETURNS [MFile.ReleaseChoice];  ReleaseData: TYPE = RECORD [    proc: PleaseReleaseProc ¬ NIL,    clientInstanceData: LONG POINTER ¬ NIL];      defaultPages: Environment.PageCount = LAST[Environment.PageCount];  dontChangePages: Environment.PageCount = LAST[Environment.PageCount] - 1;  dontChangeFileBase: File.PageNumber = LAST[File.PageNumber];  dontChangeReleaseData: ReleaseData = [LOOPHOLE[LONG[1]],NIL];  dontChangeFile: MFile.Handle = LOOPHOLE[LONG[1]];  dontChangeUsage: Space.Usage = LAST[SpaceUsage.MesaUsage];    SwapUnitSize: TYPE = Space.SwapUnitSize;  SwapUnitType: TYPE = Space.SwapUnitType;  SwapUnitOption: TYPE = Space.SwapUnitOption;  defaultSwapUnitSize: SwapUnitSize = Space.defaultSwapUnitSize;  defaultSwapUnitOption: SwapUnitOption = Space.defaultSwapUnitOption;  wpp: CARDINAL = Environment.wordsPerPage;  Handle: TYPE = LONG POINTER TO Object;  Object: TYPE;  ErrorCode: TYPE = MACHINE DEPENDENT {    zeroLength(0), insufficientVM, noSuchSegment, sharedSegment, baseOutOfRange,    conflictingAccess, illegalAccess, invalidFile,     dataSegmentNeedsPages, noRoomOnVolume, volumeReadOnly,    other(LAST[CARDINAL])};  Error: ERROR [segment: Handle, code: ErrorCode];  Activate: PROCEDURE [segment: Handle];  Address: PROCEDURE [segment: Handle] RETURNS [LONG POINTER];  AddresstoSegment: PROCEDURE [pointer: LONG POINTER] RETURNS [Handle];  Base: PROCEDURE [segment: Handle] RETURNS [Environment.PageNumber];  BasetoSegment: PROCEDURE [page: Environment.PageNumber] RETURNS [Handle];  CopyIn: PROCEDURE [    segment: Handle, file: MFile.Handle,     fileBase: File.PageNumber, count: Environment.PageCount];  CopyOut: PROCEDURE [    segment: Handle, file: MFile.Handle, fileBase: File.PageNumber,     count: Environment.PageCount];  CopySegment: PROCEDURE [segment: Handle] RETURNS [newSegment: Handle];  Create: PROCEDURE [    file: MFile.Handle ¬ NIL, release: ReleaseData,    fileBase: File.PageNumber ¬ 0,    pages: Environment.PageCount ¬ defaultPages,     swapInfo: SwapUnitOption ¬ defaultSwapUnitOption,    usage: Space.Usage ¬ Space.unknownUsage]    RETURNS [segment: Handle];  Deactivate: PROCEDURE [segment: Handle];  Delete: PROCEDURE [segment: Handle];  EquivalentSegments: PROCEDURE [seg1, seg2: Handle] RETURNS [BOOLEAN];  ForceOut: PROCEDURE [segment: Handle];  GetFile: PROCEDURE [segment: Handle] RETURNS [MFile.Handle];  GetFileBase: PROCEDURE [segment: Handle] RETURNS [File.PageNumber];  GetFilePages: PROCEDURE [segment: Handle] RETURNS [File.PageCount];  GetReleaseData: PROCEDURE [segment: Handle] RETURNS [ReleaseData];  Kill: PROCEDURE [segment: Handle];  MakeReadOnly: PROCEDURE [segment: Handle];  MakeWritable: PROCEDURE [segment: Handle];  Pages: PROCEDURE [segment: Handle] RETURNS [Environment.PageCount];  Reset: PROCEDURE [    segment: Handle, file: MFile.Handle ¬ dontChangeFile,     release: ReleaseData ¬ dontChangeReleaseData,     fileBase: File.PageNumber ¬ dontChangeFileBase,     pages: Environment.PageCount ¬ dontChangePages,     swapInfo: SwapUnitOption ¬ defaultSwapUnitOption,    usage: Space.Usage ¬ dontChangeUsage];  SetReleaseData: PROCEDURE [segment: Handle, release: ReleaseData];  GetPages: PROCEDURE [npages: CARDINAL] RETURNS [base: LONG POINTER];  GetWords: PROCEDURE [nwords: CARDINAL] RETURNS [base: LONG POINTER];  FreePages, FreeWords: PROCEDURE [base: LONG POINTER];  PagesForWords: PROCEDURE [nWords: CARDINAL] RETURNS [CARDINAL] = INLINE    BEGIN RETURN[(nWords+(wpp-1))/wpp] END;  END.  