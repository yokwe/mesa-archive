-- Binder.pack; last edited--   JGS	 6-Nov-82 13:29:20--   Lewis	 4-Mar-82 18:17:57--   Johnsson	17-Aug-83 18:38:22--   Saxe        1-Apr-85 10:28:51Binder: SEGMENT =  BEGIN    EVCatch: CODE PACK = {    ENTRY VECTOR OF Binder;    CATCH OF Binder};  Unused: DISCARD CODE PACK = {    BcdTreePack[      MakeList, PushProperList, PushSe, PushLit, PushStringLit,      GetHash, GetSe, NthSon, OpName, ListHead, ListTail,      ReverseScanList, ReverseUpdateList, SearchList,      IdentityMap, CopyTree, Shared, SetShared]};  Utilities: CODE PACK = {     BcdSymbolPack[Notifier];    BcdSEBuild[Notifier];    BcdUtilities[      Notifier, EnterName, MapName, MapEquivalentName, NameForHti,       HtiForName, NameForSti, ContextForTree, EqVersions, EquivalentVersions,       InsertFile, MergeFile, EnterFile, SetFileVersion, GetGfi,       GetDummyGfi, NewContext, NewSemanticEntry, EnterConfig, CreateInstanceName,       CopyInstanceName, EnterEntries, EnterModule, EnterLinks, EnterSegment,       EnterImport, EnterExport, EnterType, EnterTypeMap, EnterSpace,       EnterFramePack, GetGfiForLink, InstanceName, Reset];    BcdTab[      UpdateBases, AllocateHash, EnterString, HashValue, SubStringForHash,       FindString, FindEquivalentString]};  Control: CODE PACK = {    BcdControl[      Bind, AlreadyBinding, DoneBinding, FreeAllocTables, StartBinder, Get,      SetupGlobalDefaults, ProcessGlobalSwitches,       SetupLocalDefaults, ProcessLocalSwitches,      ProcessCommand, FreeCommand, ProcessResultList, SetRootName,      InitializeOneBinding, SetupFileNames, SetFileName,      InitializeFeedback, NoteHerald, NoteCommand, NoteProgress,      NoteWarnings, NoteErrors, NoteStatistics,      FinalizeOneBinding, ReportStatistics, StopBinder,        OpenLog, CloseLog, HeraldToLog, EchoCommand, LogInterpretedCommand,       LogString, LogLine, LogChar, LogCR,       OpenInput, CloseInput,      Debug];    BcdUtilities[Init];    BcdTab[Initialize, Finalize, Reset];    BcdTreePack[Initialize, Finalize, Reset];    BindErrors[Initialize, Finalize]};        Trees: CODE PACK = {    BcdTreePack[      UpdateBase, MakeNode, ExpandStack, PushTree, PopTree,      InsertTree, ExtractTree, PushNode, PushList,      PushHash, SetInfo, SetAttr, FreeNode, FreeTree, GetNode,      SonCount, ListLength, UpdateTree,       ScanList, UpdateList, NodeSize]};   Parse: CODE PACK = {     BcdTreeBuild[AssignDescriptors, ProcessQueue, SetLinkAttributes, TokenValue];    BcdScan[ScanInit, ScanReset, FillBuffer, ExpandBuffer, NextChar, Atom];    BcdParse[      ParseInit, ExpandStack, ExpandQueue, EraseQueue, EraseStack,      InputLoc, Parse, TypeSym];    BcdParseData};  SEBuild: CODE PACK = {    BcdSEBuild[      BuildSemanticEntries, EnterArgsAsDirItems, DirItem,       PackId, Stmt, Item, Config, Assign, Expression, Module, SemanticEntry,      ProcessItem, SetFilename, ImpItem, ExpItem, EnterConfig, AssignItem,      ModItem, EnterFileNames, AddFile]};        LoadWarm: CODE PACK = {      BcdLoad[      FindSti, BodyWalk, LoadSti, LoadItem, NormalExports,       AllocateRelocations, EnumerateModules, Load, FileForSti,      FileForPortableItem, MapFile, DeclarePortableItem, DeclareInterface,      DeclareModule, CorrectType, LoadBcd, LoadConfigs, LoadModules,      ProcessTypeMap, ProcessImports, LoadSpaces, LoadFramePacks,       UnloadBcd, CheckInternalName, EnumerateConfigurations, MapSegment,      CheckPacking, EnumerateSpaces, EnumerateFramePacks, GetLocalGfi,      Lookup, HtiForPortable, EnumerateExports, CombineExport,      NewExport, CombineInterface, CombineModule, RelocateExportLink]};        LoadCool: CODE PACK = {      BcdLoad[      Notifier, LoadRoot, CleanupLoading, LoadLocalConfig, ControlForTreeLink,      NameForLink, ProcessLocalImports, FirstLocalImport, NextLocalImport,      DeclareImportByName, DeclareImport, VerifyExports, LoadAssign,      AssignedExports, LoadRhs, LoadOperand, LoadOperandSti,      CreateBcdSpace, GrowBcdSpace, DestroyBcdSpace, FileForFti]};  Bind: CODE PACK = {    BcdBind[      Notifier, BindRoot, CleanupBinding, SetupGFMap, AssignImports,      StiForContext, BindModules, ReleaseGFMap, RelocatedGfi, NameToHti,      ExpiForSti, AssignOuter, AssignByPosition, AssignByName, LookupInstance,      LookupInterface, AssignModule, AssignInterface, AssignImport, Lookup,      HtiForRelocation, MakeLink, SetLinkGfi, SetRelocationForModule, BindFragment,      RelocateLink, LookupImport]};  WriteFront: CODE PACK = {    BcdWrite[      CreateBcd, Notifier, CopyConfigs, CopyModules,      CopyTypes, CopySpaces, CopyFramePacks, CopyImport, CopyExport,      EnterSource, ExportAllInterfaceRecords,       Initialize, InitCodeSymbolCopy, InitHeader, MapCodeSymbolFiles,      InitCopyMap, MapSegments, EnumerateModules, EnumerateSpaces, CopyName,       EnumerateFramePacks, NewExportForModule]};  WriteBack: CODE PACK = {     BcdWrite[      WriteBcd, ApproximateCopiedPages, EnterMissingSymbolFiles,       InitBcdHeader, Finalize, WriteBcdToStream,      CreateCopySegSpace, GrowCopySegSpace, DestroyCopySegSpace,       WriteTables, WriteSubTable,       MoveCodeSegments, OpenCopiedCodeStream, CloseCopiedCodeStream,      PackCodeSegments, AddLinksToCodeSegment, ReadOldCodeSeg, FileForSgi,      WriteFromCopySeg, MoveOldCodeSegment, ReleaseOldCodeSeg,      MoveSymbolSegments, OpenCopiedSymbolStream, CloseCopiedSymbolStream,      MoveOldSymbolSegment, ReleaseOldSymbolSegment,      OpenOutputStream, CloseOutputStream, PositionAtPage, MarkFileBad,      BumpVersion, BcdBaseForFilePage, SetCopied, Copied,      EnumerateSegments, EnumerateOldSegments, PagesForWords,       FreeSgMap, FreeCopyMap, FreePackItems, ReleaseCodeSymbolCopy]};  Symbols: CODE PACK = {    BcdSymbolPack[      Print, Finalize, Initialize, GotImportersSymbols, PrintUsingImporter,      GotInterfacesSymbols, PrintUsingInterface, DestroyBcd, ReleaseSymbolSeg,      GetBcdName, ComputeAddress, AppendNameFromBcd, EqualNames];    };  Cool: CODE PACK = {    BcdWrite[     InitSgMap, FillInSgMap, ReadSgMap, SetSgMap, FixAllSgis, MakePackItem]};  Errors: CODE PACK = {    BindErrors[      Error, ErrorSti, ErrorHti, ErrorName, ErrorItem, ErrorModule,      ErrorInterface, ErrorNameBase, RefInTwoVersions, WrongImportVersion,      WrongExportVersion, ErrorFile, Error2Files, OpenErrorStream,      AcquireErrorStream, HeraldToErrlog, CommandToErrlog,       CloseErrorStream, DestroyAnyOldErrlogFile,      Prefix, ErrorLog, PrintTextLine,      WriteString, WriteLine, WriteChar, WriteCR, WriteSpace, WriteBlanks,       WriteNumber, WriteDecimal, WriteOctal, WriteSubString,       WriteName, WriteNameBase, WriteVersion, WriteHti,      HtiForSti, InterfaceName, ModuleName];    BcdLoad[Error, NotLoadable, NotOperand];    BcdBind[Error];    BcdWrite[Error]};  ParseErrors: CODE PACK = {    BcdScan[ScanError, PrintTextLine, ResetScanIndex, ErrorContext];    BcdParse[      SyntaxError, Recover, Accept, NewLine,      ParserID, DisplayNode, Allocate, LinkHash, ExistingConfiguration,      FindNode, GetNTEntry, ActOnStack, ParseStep, Advance, Discard,      UnDiscard, RecoverInput, RightScan, NextRow, FreeRowList, AddLeaf,      GrowTree, CheckTree]};      Debug: CODE PACK = {    BcdDebug[      Initialize, Finalize, DebugNotify,       WriteName, WriteTime, Indent, PutOctal, PutDecimal, PutIndex,        PrintIndex, PrintFileVersion, WriteNodeName, PrintSubTree, PrintHti,       PrintTree, PrintSemanticEntries, PrintContext, PrintBcd, PrintConfigs,       PrintImports, PrintExports, PrintTypes, PrintTypeMap,       PrintModules, PrintFiles, PrintConfig, WriteNameFromTable, PrintFileName,       PrintImport, PrintExport, PrintControlLink, PrintType,       PrintVersion, PrintMapEntry, PrintSpaces, PrintSpace, PrintModule,       PrintSegment, PrintLinkFrag, PrintFile, PrintMachine, PrintRelocations,       PrintRel,      PrintEntries, PrintEV]};  Atoms: CODE PACK = {    BcdDebug[PrintAtoms, PrintAtom];    BcdUtilities[EnterAtoms, EnterAtomName, MapAtomName];    };  Main: CODE PACK = {    MAIN OF Binder;    BcdControl[Init, GetNetAndHost]};  END;BinderControlFrames: FRAME PACK = {  BcdControl;  BcdParseData;  BcdTab};BinderEarlyFrames: FRAME PACK = {  BcdTreeBuild;  BcdParse;  BcdScan;  BcdTreePack};BinderLateFrames: FRAME PACK = {  BcdSEBuild;  BcdLoad;  BcdUtilities;  BcdBind;  BcdWrite;  };BinderCoolFrames: FRAME PACK = {  BindErrors;  BcdDebug;  BcdSymbolPack;  };