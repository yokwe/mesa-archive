-- Copyright (C) 1982, 1986  by Xerox Corporation. All rights reserved. -- File: TmExpressionTablesImpl.mesa.-- Created from TmExpressionTablesDPImpl.mesa. JWF 27-Oct-87 11:09:10-- Created from TmExpressionTablesImpl.mesa to include the port as a D Input by W.D. Evans-- Last edit: WDE      16-May-86 10:15:25 -- File: TmExpressionTablesImpl.mesa. -- Last edit: DEG      26-Sep-84 20:42:29 -- Last edit: ETN   16-Jul-82 10:19:47DIRECTORY  TmAssembler,  TmModule;TmExpressionTablesImpl: PROGRAM EXPORTS TmAssembler, TmModule =   BEGIN OPEN TmAssembler;    -- operation = x  patternOpx: PUBLIC ARRAY [0..9) OF ExpressionPattern;  -- operation = Nx  patternOpNx: PUBLIC ARRAY [0..5) OF ExpressionPattern;  -- operation = or  patternOpor: PUBLIC ARRAY [0..16) OF ExpressionPattern;  -- operation = and  patternOpand: PUBLIC ARRAY [0..16) OF ExpressionPattern;  -- operation = Nand  patternOpNand: PUBLIC ARRAY [0..12) OF ExpressionPattern;  -- operation = xor  patternOpxor: PUBLIC ARRAY [0..16) OF ExpressionPattern;  -- operation = Nxor  patternOpNxor: PUBLIC ARRAY [0..16) OF ExpressionPattern;  -- operation = plus  patternOpplus: PUBLIC ARRAY [0..17) OF ExpressionPattern;  -- operation = minus  patternOpminus: PUBLIC ARRAY [0..16) OF ExpressionPattern;  -- DSource table  patternDSource: PUBLIC ARRAY [0..15) OF DSourcePattern;  patternAssignR: PUBLIC Pattern;  patternAssignRH: PUBLIC Pattern;  patternAssignU: PUBLIC Pattern;  patternAssignUY: PUBLIC Pattern;  patternCin0: PUBLIC Pattern;  patternCin1: PUBLIC Pattern;  InitGlobalExpTables: PUBLIC PROCEDURE =     BEGIN  -- operation = x  patternOpx ¬ [    [[AB, x], [rB: a1, aS: ZB, aF: rOrS, yOut: t]], [    [AB, x], [rA: a1, aS: ZA, aF: rOrS, yOut: t]], [    [AB, x], [rA: a1, aD: A, yOut: t]], [[Q, x], [aS: ZQ, aF: rOrS, yOut: t]], [    [D, x], [aS: DZ, aF: rOrS, xIn: t, yOut: t]], [[RHm, x], [rB: a1, cy: c1]], [    [zero, x], [aS: ZA, aF: rAndS, yOut: t]], [    [zero, x], [fS2: nibl, fS3: nibl, fZ: aL, xOut: t]], [[x, x], Pattern[]]];  -- operation = Nx  patternOpNx ¬ [    [[AB, x], [rB: a1, aS: ZB, aF: notRxorS, yOut: t]], [    [AB, x], [rA: a1, aS: ZA, aF: notRxorS, yOut: t]], [    [Q, x], [aS: ZQ, aF: notRxorS, yOut: t]], [    [D, x], [aS: DZ, aF: notRxorS, xIn: t, yOut: t]], [    [zero, x], [rA: a1, rB: a1, aS: AB, aF: notRxorS, yOut: t]]];  -- operation = or  patternOpor ¬ [    [[AB, AB], [rB: a1, rA: a2, aS: AB, aF: rOrS, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: rOrS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: rOrS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: rOrS, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: rOrS, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: rOrS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: rOrS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: rOrS, xIn: t, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: rOrS, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: rOrS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: rOrS, yOut: t]], [    [D, zero], [aS: DZ, aF: rOrS, xIn: t, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: rOrS, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: rOrS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: rOrS, yOut: t]], [    [zero, D], [aS: DZ, aF: rOrS, xIn: t, yOut: t]]];  -- operation = and  patternOpand ¬ [    [[AB, AB], [rB: a1, rA: a2, aS: AB, aF: rAndS, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: rAndS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: rAndS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: rAndS, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: rAndS, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: rAndS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: rAndS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: rAndS, xIn: t, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: rAndS, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: rAndS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: rAndS, yOut: t]], [    [D, zero], [aS: DZ, aF: rAndS, xIn: t, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: rAndS, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: rAndS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: rAndS, yOut: t]], [    [zero, D], [aS: DZ, aF: rAndS, xIn: t, yOut: t]]];  -- operation = Nand  patternOpNand ¬ [    [[AB, AB], [rA: a1, rB: a2, aS: AB, aF: notRandS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: notRandS, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: notRandS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: notRandS, xIn: t, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: notRandS, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: notRandS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: notRandS, yOut: t]], [    [D, zero], [aS: DZ, aF: notRandS, xIn: t, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: notRandS, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: notRandS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: notRandS, yOut: t]], [    [zero, D], [aS: DZ, aF: notRandS, xIn: t, yOut: t]]];  -- operation = xor  patternOpxor ¬ [    [[AB, AB], [rB: a1, rA: a2, aS: AB, aF: rXorS, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: rXorS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: rXorS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: rXorS, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: rXorS, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: rXorS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: rXorS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: rXorS, xIn: t, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: rXorS, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: rXorS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: rXorS, yOut: t]], [    [D, zero], [aS: DZ, aF: rXorS, xIn: t, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: rXorS, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: rXorS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: rXorS, yOut: t]], [    [zero, D], [aS: DZ, aF: rXorS, xIn: t, yOut: t]]];  -- operation = Nxor  patternOpNxor ¬ [    [[AB, AB], [rB: a1, rA: a2, aS: AB, aF: notRxorS, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: notRxorS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: notRxorS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: notRxorS, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: notRxorS, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: notRxorS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: notRxorS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: notRxorS, xIn: t, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: notRxorS, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: notRxorS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: notRxorS, yOut: t]], [    [D, zero], [aS: DZ, aF: notRxorS, xIn: t, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: notRxorS, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: notRxorS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: notRxorS, yOut: t]], [    [zero, D], [aS: DZ, aF: notRxorS, xIn: t, yOut: t]]];  -- operation = plus  patternOpplus ¬ [    [[AB, AB], [rB: a1, rA: a2, aS: AB, aF: rPlusS, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: rPlusS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: rPlusS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: rPlusS, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: rPlusS, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: rPlusS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: rPlusS, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: rPlusS, xIn: t, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: rPlusS, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: rPlusS, yOut: t]], [    [Q, zero], [aS: ZQ, aF: rPlusS, yOut: t]], [    [D, zero], [aS: DZ, aF: rPlusS, xIn: t, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: rPlusS, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: rPlusS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: rPlusS, yOut: t]], [    [zero, D], [aS: DZ, aF: rPlusS, xIn: t, yOut: t]], [    [zero, zero], [    aS: DZ, aF: rPlusS, fS2: nibl, fS3: nibl, fZ: aL, xOut: t, xIn: t, yOut: t]]];  -- operation = minus  patternOpminus ¬ [    [[AB, AB], [rA: a2, rB: a1, aS: AB, aF: sMinusR, yOut: t]], [    [AB, AB], [rA: a1, rB: a2, aS: AB, aF: rMinusS, yOut: t]], [    [AB, Q], [rA: a1, aS: AQ, aF: rMinusS, yOut: t]], [    [Q, AB], [rA: a2, aS: AQ, aF: sMinusR, yOut: t]], [    [AB, D], [rA: a1, aS: DA, aF: sMinusR, xIn: t, yOut: t]], [    [D, AB], [rA: a2, aS: DA, aF: rMinusS, xIn: t, yOut: t]], [    [Q, D], [aS: DQ, aF: sMinusR, xIn: t, yOut: t]], [    [D, Q], [aS: DQ, aF: rMinusS, xIn: t, yOut: t]], [    [AB, zero], [rB: a1, aS: ZB, aF: sMinusR, yOut: t]], [    [AB, zero], [rA: a1, aS: ZA, aF: sMinusR, yOut: t]], [    [Q, zero], [aS: ZQ, aF: sMinusR, yOut: t]], [    [D, zero], [aS: DZ, aF: rMinusS, xIn: t, yOut: t]], [    [zero, AB], [rB: a2, aS: ZB, aF: rMinusS, yOut: t]], [    [zero, AB], [rA: a2, aS: ZA, aF: rMinusS, yOut: t]], [    [zero, Q], [aS: ZQ, aF: rMinusS, yOut: t]], [    [zero, D], [aS: DZ, aF: sMinusR, xIn: t, yOut: t]]];  -- DSource table  patternDSource ¬ [    [DSource[nibl], [fS2: nibl, fS3: nibl, fZ: aL, xOut: t]], [    DSource[stk], [enSU: t, cin: f, fS2: stkP, xOut: t]], [    DSource[u], [rA: aH, enSU: t, cin: f, fS2: uadr, fZ: aL, xOut: t]], [    DSource[uy], [rA: aH, enSU: t, cin: f, fS2: uadr, xOut: t]], [    DSource[byte], [fS01: byte, fS2: byte, fS3: byte, fY: aH, fZ: aL, xOut: t]], [    DSource[mem], [mem: t, cy: c3, xOut: t]], [    DSource[ioInZ], [fS2: IOIn, fS3: IOIn, fZ: aL, xOut: t]], [    DSource[ioInY], [fS01: IOut, fY: aL, xOut: t]], [    DSource[rh], [rB: aL, fS2: IOIn, fS3: IOIn, fZ: RH, xOut: t, RHref: r]], [    DSource[ib], [enSU: f, fS2: IOIn, fS3: IOIn, fZ: ib, xOut: t]], [    DSource[ibLow], [enSU: f, fS2: IOIn, fS3: IOIn, fZ: ibLow, xOut: t]], [    DSource[ibHigh], [enSU: f, fS2: IOIn, fS3: IOIn, fZ: ibHigh, xOut: t]], [    DSource[lrot], [fS2: norm, fS3: norm, yIn: t, xOut: t]], [    DSource[port], [fport: t, fS01: port, fY: aL, xOut: t]], [     --  Daybreak Main Port   ****DP    DSource[ports], [fport: t, fS01: ports, fY: aL, xOut: t]]];     --  Daybreak Sec. Port   ****DP  patternAssignR ¬ [rB: a1, aD: B, yOut: t, aluIn: t, yl: t];  patternAssignRH ¬ [rB: a1, fX: RH, xIn: t, RHref: w, xl: t];  patternAssignU ¬ [    rA: aH, enSU: t, wU: t, cin: t, fS2: uadr, fZ: aL, yIn: t, yl: t];  patternAssignUY ¬ [    rA: aH, enSU: t, wU: t, cin: t, fS2: uadr, yIn: t, yl: t];  patternCin0 ¬ [cin: f];  patternCin1 ¬ [cin: t];  END;  --  of Procedure InitGlobalExpTables  END...    -- Log  -- Time: 26-Sep-84 20:42:25	By: DEG     	Action: Added copyright notice and rebuild for 11.1 release.  -- 16-Jul-82 10:20:04 - ETN        - TrinityMass Version 1