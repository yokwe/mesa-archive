{Copyright (C) 1985  by Xerox Corporation. All rights reserved.  File: DaybreakOtherBankKernel.mc Created:   3-Dec-85 19:00:30 by RDH from defs in DaybreakKernel.mc Last edit by 	 4-Dec-85 11:37:49	Add stuff for multibank.  This module contains the breakpoint handling code, and code for starting/resuming execution of the microcode.} {The breakpointed instruction of any cycle in this bank points to kEntry.  The pending dispatch bits are saved in UKSaveDisp and the cycle number, break ID, and bank number are saved in UBreakID.  The lower 8 bits of UBreakID contains the break ID and bits 6 and 7 (PrincOps numbering) contain the cycle information.  Bits 4 and 5 contain the bank number.} Reserve[0, 0FDF];kEntry:	rK ¬ 0, GOTO[kSaveDisp],		c*, at[kEntryLoc];	rK ¬ 1, GOTO[kSaveDisp],		c*, at[1, 10, kEntry];	rK ¬ 2, GOTO[kSaveDisp],		c*, at[2, 10, kEntry];	rK ¬ 3, GOTO[kSaveDisp],		c*, at[3, 10, kEntry];	rK ¬ 4, GOTO[kSaveDisp],		c*, at[4, 10, kEntry];	rK ¬ 5, GOTO[kSaveDisp],		c*, at[5, 10, kEntry];	rK ¬ 6, GOTO[kSaveDisp],		c*, at[6, 10, kEntry];	rK ¬ 7, GOTO[kSaveDisp],		c*, at[7, 10, kEntry];	rK ¬ 8, GOTO[kSaveDisp],		c*, at[8, 10, kEntry];	rK ¬ 9, GOTO[kSaveDisp],		c*, at[9, 10, kEntry];	rK ¬ 0A, GOTO[kSaveDisp],		c*, at[0A, 10, kEntry];	rK ¬ 0B, GOTO[kSaveDisp],		c*, at[0B, 10, kEntry];	rK ¬ 0C, GOTO[kSaveDisp],		c*, at[0C, 10, kEntry];	rK ¬ 0D, GOTO[kSaveDisp],		c*, at[0D, 10, kEntry];	rK ¬ 0E, GOTO[kSaveDisp],		c*, at[0E, 10, kEntry];	rK ¬ 0F, GOTO[kSaveDisp],		c*, at[0F, 10, kEntry];	kSaveDisp:	UKSaveDisp ¬ rK,			c*;	rK ¬ RHrK, XC2npcDisp,			c*;kFindCycle1:	rK ¬ rK + 0FF + 1, BRANCH[$, kFoundCycle1, 0D],	c*;	XC2npcDisp, GOTO[kFindCycle1],		c*;	kFoundCycle1:	rK ¬ rK LRot8,				c1;	rHMailBox ¬ locationHigh,		c2;SetBank:	rK ¬ rK or bank1,			c3;	rK ¬ rK LRot8,				c1;	UBreakID ¬ rK				c2;	Noop,					c3;	Bank ¬ RootBank,			c1;GoToMain:		Noop, GOTOABS[AltKernelEntry],		c2; {Go to main kernel}	AltKernelBuffer: { Used to fill in with stuff for continuing. }	Noop,					c3, at[AltKernelBuffer];	Noop,					c1, at[AltKernelBuffer1];	Noop,					c2, at[AltKernelBuffer2];	Noop, GOTO[kFoundCycle1]{Fool Mass},	c3, at[AltKernelBuffer3]; 		