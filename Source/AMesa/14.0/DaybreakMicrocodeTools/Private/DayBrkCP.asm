$MOD186$PAGELENGTH (95)$PAGEWIDTH  (136);Copyright (C) 1984 by Xerox Corporation. All rights reserved.;-- stored as [Iris]<WMicroTools>Dove>DayBrkCP.asm;-- created on   3-Jan-85 16:29:56; IOP code used by the Daybreak CP debugger for reading and writing control store and stopping and starting the Daybreak CP.;-- last edited by:; JAC		24-Jun-85 11:25:40	;don't include MoonSys.def; FXB   .PA	27-Feb-85 13:16:39	;don't reset before every start; FXB   .PA	25-Feb-85 15:10:07	;fixed starting; FXB   .PA	22-Feb-85  9:48:39	:implemented ResetCP; FXB   .PA	 6-Feb-85 15:27:59	:fixed up starting and stopping; FXB   .PA	 1-Feb-85 16:22:33	:fixed FAR RET problem in WriteCSWord; FXB   .PA 	 7-Jan-85 13:34:20; FXB   .PA	 7-Jan-85 11:17:34NAME	DayBrkCPDaybreakSeg	SEGMENT	ASSUME CS: DaybreakSeg	ReadDaybreakControlStoreVector 	EQU 17*4StartDaybreakVector 		EQU	18*4StopDaybreakVector		EQU 19*4WriteDaybreakControlStoreVector	EQU	20*4ResetDaybreakVector		EQU	21*4	BytesInShiftRegister		EQU 6BytesPerMicroInstruction	EQU 6; The following definitions were taken from MoonSys.defDayBreakPort			EQU 0B0hHaltOnBit			EQU 00HReadPNIA			EQU 400HNoBits				EQU 200HCSStartPort			EQU 8000hBankPort			EQU 0E000hResetPort			EQU 0C0hNoResets			EQU 3FFHResetMesa			EQU 3BFHInitializeVectors:	XOR	AX, AX	MOV	ES, AX				;make ES point to low RAM	MOV	AX, OFFSET StartDaybreak	;Set BX,AX to	MOV	BX, SEG StartDaybreak	;the CS:IP to be stored	MOV	SI, StartDaybreakVector	MOV	ES:[SI], AX			;Store the new IP	MOV	ES:[SI + 2], BX			;and the new CS	XOR	AX, AX	MOV	ES, AX				;make ES point to low RAM	MOV	AX, OFFSET StopDaybreak	;Set BX,AX to	MOV	BX, SEG StopDaybreak	;the CS:IP to be stored	MOV	SI, StopDaybreakVector	MOV	ES:[SI], AX			;Store the new IP	MOV	ES:[SI + 2], BX			;and the new CS	XOR	AX, AX	MOV	ES, AX				;make ES point to low RAM	MOV	AX, OFFSET ReadDaybreakControlStore	;Set BX,AX to	MOV	BX, SEG ReadDaybreakControlStore	;the CS:IP to be stored	MOV	SI, ReadDaybreakControlStoreVector	MOV	ES:[SI], AX			;Store the new IP	MOV	ES:[SI + 2], BX			;and the new CS	XOR	AX, AX	MOV	ES, AX				;make ES point to low RAM	MOV	AX, OFFSET WriteDaybreakControlStore 	;Set BX,AX to	MOV	BX, SEG WriteDaybreakControlStore	;the CS:IP to be stored	MOV	SI, WriteDaybreakControlStoreVector	MOV	ES:[SI], AX			;Store the new IP	MOV	ES:[SI + 2], BX			;and the new CS		XOR	AX, AX	MOV	ES, AX				;make ES point to low RAM	MOV	AX, OFFSET ResetDaybreak 	;Set BX,AX to	MOV	BX, SEG ResetDaybreak		;the CS:IP to be stored	MOV	SI, ResetDaybreakVector	MOV	ES:[SI], AX			;Store the new IP	MOV	ES:[SI + 2], BX			;and the new CS	EndlessLoop:	JMP EndlessLoop	;*****************************************************************************;Daybreak CP debugger Commands:;;on exit CX contains ?;on entry DI contains offset of BindweedBufferReadDaybreakControlStore:	CALL	ReadCSWord	MOV	CL, BytesInShiftRegister + 1		IRET	  StartDaybreak:	CALL	StartCP	MOV	CL, 0		IRET	ResetCP:	CALL	StopCp	CALL	Delay	MOV	AX, ResetMesa	OUT	ResetPort, AX	CALL	StartCp	MOV	AX, NoResets	OUT	ResetPort, AX	CALL	StopCP	RET			StopDaybreak:	CALL	StopCp; Read the PNIA 	MOV	AX, HaltOnBit+ReadPNIA	OUT DayBreakPort,ax	CALL Delay	;WAIT 38 cycles	CALL	ReadCSWord	MOV	AX, HaltOnBit	OUT DayBreakPort,ax		MOV	CL, BytesInShiftRegister + 1	IRET		WriteDaybreakControlStore:	MOV	BX, [DI].WriteCSAddress	MOV	CL, [DI].WriteCSWords	XOR	CH, CHWriteDaybreakCS:	PUSH	CX		CALL	WriteCSWord	POP	CX	ADD	DI, BytesPerMicroInstruction	INC	BX	;increment the control store address	LOOP	WriteDaybreakCS	MOV	CL, 0	IRET	ResetDaybreak:	CALL 	ResetCP	MOV 	CL, 0	IRET						;*******************************************************************************	StopDaybreakReplyBuffer	STRUC	junk	DB 	5 DUP (?)	InCSAddress	DW ?	InCSAddress1	DW ?	InCSData3	DB ?StopDaybreakReplyBuffer	ENDSStartDaybreakWriteBuffer	STRUC	overhead	DB	3 DUP (?)	OutCSAddress	DW	?	OutCSAddress1	DW	?	OutCSData3	DB	?StartDaybreakWriteBuffer	ENDSControlStoreReadReplyBuffer	STRUC	bwOverhead	DB	5 DUP (?)	InCSData0	DW	?	InCSData1	DW	?	InCSData2	DW	?ControlStoreReadReplyBuffer	ENDSControlStoreReadCommandBuffer	STRUC	overhead2	DB	3 DUP (?)	ReadCSAddress	DW		?ControlStoreReadCommandBuffer	ENDS		ControlStoreWriteBuffer 	STRUC	protocol	DB	3 DUP (?)	WriteCSWords	DB	?	WriteCSAddress	DW	?	OutCSData0	DW	?	OutCSData1	DW	?	OutCSData2	DW	?ControlStoreWriteBuffer	ENDS	;*******************************************************************************				StopCp: MOV	Ax, HaltOnBit	;Assert Halt	OUT	DayBreakPort, Ax        Ret       	Delay: shl ax,15       RET              	;*******************************************************************************StartCp:MOV	Ax, NoBits	;Deassert Halt	OUT	DayBreakPort, Ax	;which allows first uInstr to be fetched	RET	;********************************************************************************;SUBROUTINE: WriteCSWord;;	DI: offset of BindweedBuffer;	BX: Control Store Address;WriteCSWord:	CALL	SetPortAddress 	MOV	AX, [DI].OutCSData0	;	CALL 	Write2Bytes	MOV	AX, [DI].OutCSData1	        CALL	Write2Bytes			MOV	AX, [DI].OutCSData2	        CALL	Write2Bytes		        RET;******************************************************************************;SUBROUTINE: ReadCSWord;; Read a 48-bit word from control store and store it at the address pointed to by DI;;	;ReadCSWord:	MOV	BX, [DI].ReadCSAddress	CALL	SetPortAddress 	CALL	Read2Bytes	MOV	[DI].InCSData0,AX 	;	CALL	Read2Bytes	MOV	[DI].InCSData1,AX 	;	CALL	Read2Bytes	MOV	[DI].InCSData2,AX 	;        Ret;*******************************************************************************;SUBROUTINE: SetPortAddress;; on entry BX contains control store address, on exit DX contains the correspoding I/O portSetPortAddress: 	MOV	dx,BX  ; get CSAddress	and   dx,03000H ;strip off lower address	MOV	ax,00h	cmp dx,0	je SetPort	MOV	ax,30h	cmp dx,1000h	je SetPort	MOV	ax,50h	cmp dx,2000h	je SetPort	MOV	ax,90hSetPort: 	MOV dx,BankPort	OUT dx,ax 	MOV	DX,BX ;get CSAddress	and   dx,0FFFH ;strip off bank info	add dx,CSStartPort 	Ret	;********************************************************************************	;*******************************************************************************;SUBROUTINE: Read2BytesRead2Bytes: 	IN	al,  dx		;read Control Store Data 	MOV	ah, al	add dx,1000h	IN	al, dx		;read Control Store Data 	add dx,1000h        Ret	;********************************************************************************			;********************************************************************************;SUBROUTINE: Write2BytesWrite2Bytes: 	MOV	cl, al	MOV	al, ah	OUT	dx, al		;Write Control Store Data 	MOV	al, cl	add dx,1000h	OUT	dx, al		;Write Control Store Data 	add dx,1000h        Ret	;**************************************************************************			DaybreakSeg	ENDSEND	InitializeVectors