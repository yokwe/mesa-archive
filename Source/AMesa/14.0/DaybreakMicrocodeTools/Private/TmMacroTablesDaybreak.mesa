-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- TmMacroTablesDaybreak.mesa-- Created from TmMacroTablesDaybreakDP.mesa. JWF 27-Oct-87 11:28:02-- File: TmMacroTablesDaybreakDP.mesa.  Created from the 12.0 file TmMacroTablesDaybreak.mesa-- by W.D. Evans to include the Daybreak port operations.-- Last edit: WDE      8-Sep-86 15:41:29-- File: TmMacroTablesDaybreak.mesa. - Daybreak, and unfixed AltUaddr -- Last edit: JoM     6-Nov-84 11:12:41-- Last edit: HGM 11-Feb-84 14:47:28-- Last edit: ETN   12-Oct-82 15:06:06DIRECTORY  Heap USING [MakeNode],  String USING [AppendString, WordsForString],  TmModule USING [InsertM, MTtempHeap],  TmAssembler;TmMacroTablesDaybreak: PROGRAM   IMPORTS Heap, String, TmModule   EXPORTS TmAssembler, TmModule =  BEGIN OPEN TmAssembler;  -- KEY TO SYMBOLS:  -- a1 	argument 1 of the expression for rA, rB  --       the macro value for aD, fX, fY, fZ  -- a2	argument 2 of the expression  -- t	TRUE (1)  -- f	FALSE (0)  -- A	(in field aD) means put A on the YBus  -- s	(in fX field) means shift  -- c	(in fX or fY field) means cycle  -- r	(in RHref field) means RH is read  -- w	(in RHref field) means RH is written  -- norm	(in fS01  field) means fYnorm  -- norm	(in fS2, fS3  field) means fZnorm  -- Disp	(in fS01  field) means fYDispBr  -- IOut	(in fS01  field) means fYIOOut  -- c1	(in cy field) means cycle 1  -- c2	(in cy field) means cycle 2  -- c3	(in cy field) means cycle 3  -- cX	(in cy field) means any cycle  -- port    (means use the Main port operation of fY=byte & fZ=NOT nibble)  -- ports    (means use the secondary port opertion of fY=IOOut & fZ=NOT nibble)  -- In the following table, if a macro has more than one encoding, they will follow each other sequentially.  A macroIndex always indexes the first occurance of the macro.  By looking at macroTable[index+1], it will thus be possible to see if there is another encoding for a given macro.  macroTable: PUBLIC LONG POINTER TO ARRAY [0..macroTableSize) OF MacroPattern;  InitGlobalMacroTables: PUBLIC PROCEDURE =     BEGIN    macroTable ¬      Heap.MakeNode[TmModule.MTtempHeap, macroTableSize*SIZE[MacroPattern]];    InitIOXIn[];    InitMacroTables[];    END;  --  of Procedure InitGlobalMacroTables  AddIOEntry: PROC [str: LONG STRING, er: ElementRec] = {    s: LONG STRING;    erptr: LONG POINTER TO ElementRec ¬ Heap.MakeNode[TmModule.MTtempHeap,      SIZE[IOXIn ElementRec] + SIZE[MEntry] + String.WordsForString[str.length]];    mptr: MEntryPtr;    erptr­ ¬ er;    mptr ¬ LOOPHOLE[erptr + SIZE[IOXIn ElementRec]];    s ¬ LOOPHOLE[mptr + SIZE[MEntry]];    s­ ¬ StringBody[maxlength: str.length, length: 0, text:];    String.AppendString[s, str];    mptr­ ¬ MEntry[s, erptr, NIL];    [] ¬ TmModule.InsertM[mptr]};  --end AddIOEntry  AddMTEntry: PROC [    mp: LONG POINTER TO MacroPattern, er: ElementRec, erSize: CARDINAL] = {    s: LONG STRING;    erptr: LONG POINTER TO ElementRec ¬ Heap.MakeNode[TmModule.MTtempHeap,      erSize + SIZE[MEntry] + String.WordsForString[mp.macro.name.length]];    mptr: MEntryPtr;    erptr­ ¬ er;    mptr ¬ LOOPHOLE[erptr + erSize];    s ¬ LOOPHOLE[mptr + SIZE[MEntry]];    s­ ¬ StringBody[maxlength: mp.macro.name.length, length: 0, text:];    String.AppendString[s, mp.macro.name];    mptr­ ¬ MEntry[s, erptr, NIL];    mp.macro.name ¬ s;    [] ¬ TmModule.InsertM[mptr]};  --end AddMTEntry  InitIOXIn: PROC = {    -- AddIOEntry["EIData"L, ElementRec[IOXIn[0, z]]];    -- AddIOEntry["EStatus"L, ElementRec[IOXIn[1, z]]];    -- AddIOEntry["KIData"L, ElementRec[IOXIn[2, z]]];    -- AddIOEntry["KStatus"L, ElementRec[IOXIn[3, z]]];    -- AddIOEntry["MStatus"L, ElementRec[IOXIn[5, z]]];    -- AddIOEntry["KTest"L, ElementRec[IOXIn[6, z]]];    AddIOEntry["ExtStat"L, ElementRec[IOXIn[6, z]]]; -- Daybreak = KTest    -- AddIOEntry["IOPIData"L, ElementRec[IOXIn[8, z]]];    AddIOEntry["DebB"L, ElementRec[IOXIn[8, z]]]; -- Daybreak = IOPIData    -- AddIOEntry["IOPStatus"L, ElementRec[IOXIn[9, z]]];    AddIOEntry["IntStat"L, ElementRec[IOXIn[9, z]]]; -- Daybreak = IOPStatus    AddIOEntry["ErrnIBInt"L, ElementRec[IOXIn[9, z]]]; -- Daybreak = IOPStatus    AddIOEntry["ErrnIBnStkp"L, ElementRec[IOXIn[10, z]]];    AddIOEntry["RH"L, ElementRec[IOXIn[11, z]]];    AddIOEntry["ibNA"L, ElementRec[IOXIn[12, z]]];    AddIOEntry["ib"L, ElementRec[IOXIn[13, z]]];    AddIOEntry["ibLow"L, ElementRec[IOXIn[14, z]]];    AddIOEntry["ibHigh"L, ElementRec[IOXIn[15, z]]];    -- AddIOEntry["TStatus"L, ElementRec[IOXIn[11, y]]];    -- AddIOEntry["TIData"L, ElementRec[IOXIn[14, y]]];    AddIOEntry["SPort2"L, ElementRec[IOXIn[2, ports]]];  --  ****DP  Begins Sec. Port Inputs    AddIOEntry["SPort3"L, ElementRec[IOXIn[3, ports]]];  --  ****DP     AddIOEntry["SPort6"L, ElementRec[IOXIn[6, ports]]];  --  ****DP    AddIOEntry["SPort7"L, ElementRec[IOXIn[7, ports]]];  --  ****DP     AddIOEntry["SPort10"L, ElementRec[IOXIn[10, ports]]];  --  ****DP     AddIOEntry["SPort11"L, ElementRec[IOXIn[11, ports]]];  --  ****DP     AddIOEntry["SPort14"L, ElementRec[IOXIn[14, ports]]];  --  ****DP    AddIOEntry["SPort15"L, ElementRec[IOXIn[15, ports]]];  --  ****DP    AddIOEntry["Port2"L, ElementRec[IOXIn[2, port]]];  --  ****DP  Begin Main Port Inputs    AddIOEntry["Port3"L, ElementRec[IOXIn[3, port]]];  --  ****DP    AddIOEntry["Port6"L, ElementRec[IOXIn[6, port]]];  --  ****DP    AddIOEntry["Port7"L, ElementRec[IOXIn[7, port]]];  --  ****DP    AddIOEntry["Port10"L, ElementRec[IOXIn[10, port]]];  --  ****DP    AddIOEntry["Port11"L, ElementRec[IOXIn[11, port]]];  --  ****DP    AddIOEntry["Port14"L, ElementRec[IOXIn[14, port]]];  --  ****DP    AddIOEntry["Port15"L, ElementRec[IOXIn[15, port]]];  --  ****DP     };  -- end InitIOXIn  InitMacroTables: PROC = {    macroTable­ ¬ [      [["LRot0"L,	12], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot4"L,	15], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot8"L,	14], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot12"L,	13], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],    -- LRotSize def'd at 4      [["L0¬"L,		 0], [fX: a1, ia7: f]],      [["L1¬"L,		 1], [fX: a1, ia7: f]],      [["L2¬"L,		 2], [fX: a1, ia7: f]],      [["L3¬"L,		 3], [fX: a1, ia7: f]],      [["L4¬"L,		 4], [fX: a1, ia7: f]],      [["L5¬"L,		 5], [fX: a1, ia7: f]],      [["L6¬"L,		 6], [fX: a1, ia7: f]],      [["L7¬"L,		 7], [fX: a1, ia7: f]],          -- LinkGetsSize def'd at 12          -- Apass def'd at 12      [["Apass"L,	 0], [rA: a2, aD: A, yOut: t]],          -- PC16 def'd at 13      [["Cin¬pc16"L,	12], [fX: a1]],      [["Cin¬pc16"L,	 3], [fS2: norm, fS3: norm, cin: t, fZ: a1]],          -- pCall and pRet      [["pCall0"L,	 0], [fX: a1, ia7: f]],      [["pCall1"L,	 1], [fX: a1, ia7: f]],      [["pCall2"L,	 2], [fX: a1, ia7: f]],      [["pCall3"L,	 3], [fX: a1, ia7: f]],      [["pCall4"L,	 4], [fX: a1, ia7: f]],      [["pCall5"L,	 5], [fX: a1, ia7: f]],      [["pCall6"L,	 6], [fX: a1, ia7: f]],      [["pCall7"L,	 7], [fX: a1, ia7: f]],      [["pRet0"L,	 0], [fX: a1, ia7: t]],      [["L0Disp"L,	 0], [fX: a1, ia7: t]],      [["pRet1"L,	 1], [fX: a1, ia7: t]],      [["L1Disp"L,	 1], [fX: a1, ia7: t]],      [["pRet2"L,	 2], [fX: a1, ia7: t]],      [["L2Disp"L,	 2], [fX: a1, ia7: t]],      [["pRet3"L,	 3], [fX: a1, ia7: t]],      [["L3Disp"L,	 3], [fX: a1, ia7: t]],      [["pRet4"L,	 4], [fX: a1, ia7: t]],      [["L4Disp"L,	 4], [fX: a1, ia7: t]],      [["pRet5"L,	 5], [fX: a1, ia7: t]],      [["L5Disp"L,	 5], [fX: a1, ia7: t]],      [["pRet6"L,	 6], [fX: a1, ia7: t]],      [["L6Disp"L,	 6], [fX: a1, ia7: t]],      [["pRet7"L,	 7], [fX: a1, ia7: t]],      [["L7Disp"L,	 7], [fX: a1, ia7: t]],          -- Mem ops      [["MAR¬"L,	 0], [mem: t, cy: c1, RHref: r, yIn: t, yl: t]],      [["Map¬"L,	13], [fX: a1, cy: c1, RHref: r, yIn: t, yl: t]],      [["Map¬"L,	 9], [fS01: norm, fY: a1, cy: c1, RHref: r, yIn: t, yl: t]],      -- IO¬ is Daybreak       [["IO¬"L,	 12], [fS01: norm, fY: a1, cy: c1, RHref: r, yIn: t, yl: t]],      [["IO¬"L,	 12], [fS01: IOut, fY: a1, cy: c1, RHref: r, yIn: t, yl: t]],      [["IO¬"L,	 7], [fS2: IOIn, fS3: IOIn, fZ: a1, cy: c1, RHref: r, yIn: t, yl: t]],      -- [["Refresh"L,	 0], [fS2: norm, fS3: norm, fZ: a1, cy: c1]],      -- [["Refresh"L,	 0], [fS2: norm, fS3: norm, fZ: a1, cy: cX]],      -- [["Refresh"L,	10], [fS01: norm, fY: a1, cy: c1]],      -- [["Refresh"L,	10], [fS01: norm, fY: a1, cy: cX]],      [["MDR¬"L,	 0], [mem: t, cy: c2, yIn: t, yl: t]],      -- misc gets      [["Q¬"L,     	 0], [aD: a1, aluIn: t, yIn: t, yl: t]],      [["STK¬"L,	 0], [cin: t, enSU: t, wU: t, fS2: stkP, yIn: t, yl: t]],      [["Xbus¬"L,	 0], [xIn: t, xl: t]],      [["Ybus¬"L,	 0], [yIn: t, yl: t]],      -- shifts and cycles      [["DLShift1"L,	 6], [aD: a1, fX: c, aluIn: t, yl: t]],      [["DLShift1"L,	 6], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["DRShift1"L,	 4], [aD: a1, fX: c, aluIn: t, yl: t]],      [["DRShift1"L,	 4], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["DALShift1"L,	 6], [aD: a1, fX: s, aluIn: t, yl: t]],      [["DARShift1"L,	 4], [aD: a1, fX: s, aluIn: t, yl: t]],      [["LShift1"L,	 7], [aD: a1, fX: s, aluIn: t, yl: t]],      [["RShift1"L,	 5], [aD: a1, fX: s, aluIn: t, yl: t]],      [["RRot1"L,	 5], [aD: a1, fX: c, aluIn: t, yl: t]],      [["RRot1"L,	 5], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["LRot1"L,	 7], [aD: a1, fX: c, aluIn: t, yl: t]],      [["LRot1"L,	 7], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      -- carry and shift-ends      [["Cin¬1"L,	 0], [cin: t]],      [["Cin¬0"L,	 0], [cin: f]],      [["SE¬1"L,	 0], [cin: t]],      [["SE¬0"L,	 0], [cin: f]],      -- fX    -- fX 0-7 are pCall and pRet    -- fX 8 is Noop    -- fX 9 is RH¬    -- fX 10 is shift    -- fX 11 is cycle      [["SE¬pc16"L,	12], [fX: a1]],      [["SE¬pc16"L,	 3], [fS2: norm, fS3: norm, cin: t, fZ: a1]],      [["fXCin¬pc16"L,	12], [fX: a1]],          -- fX 13 is MapRef      [["fXpop"L,	14], [fX: a1]],      [["pop"L,		14], [fX: a1]],      [["pop"L,	 	 5], [fS2: norm, fS3: norm, fZ: a1]],      [["push"L,	15], [fX: a1]],      [["push"L,	 6], [fS2: norm, fS3: norm, fZ: a1]],      [["push"L,	11], [fS01: norm, fY: a1]],          -- fYnorm      -- fill the table, spares?      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      [["NoWayJose"L,	 0], [fS01: norm, fY: a1]],      -- [["ExitKernel"L,	 0], [fS01: norm, fY: a1]],      [["ClrMPIntIOP"L,	 0], [fS01: norm, fY: a1]], -- Daybreak      -- [["EnterKernel"L,	 1], [fS01: norm, fY: a1]],      [["SetMPIntIOP"L,	 1], [fS01: norm, fY: a1]], -- Daybreak      [["ClrIntErr"L,	 2], [fS01: norm, fY: a1]],      [["IBDisp"L,	 3], [fS01: norm, fY: a1, cy: c2]],      [["MesaIntRq"L,	 4], [fS01: norm, fY: a1]],      [["stackP¬"L,	 5], [fS01: norm, fY: a1, yIn: t, yl: t]],      [["IB¬"L,     	 6], [fS01: norm, fY: a1, xIn: t, xl: t]],          --fY = 7 is cycle    --fY = 8 is Noop    --fY = 9 is Map¬    -- fY 10 is Refresh - Except in Daybreak      [["MAPA¬"L,	10], [fS01: norm, fY: a1, xIn: t, xl: t]], -- Daybreak    -- fY 11 is push      -- [["TAddr¬"L,	12], [fS01: norm, fY: a1, xIn: t, xl: t]],      -- [["ClrDPRq"L,	12], [fS01: norm, fY: a1]],    -- fy 12 for Daybreak is a Mem op (see above) called IO¬      -- [["ClrIOPRq"L,	13], [fS01: norm, fY: a1]],      [["Bank¬"L,	13], [fS01: norm, fY: a1, yIn: t, yl: t]], -- Daybreak      -- [["ClrRefRq"L,	14], [fS01: norm, fY: a1]],      [["ClrIE"L,	14], [fS01: norm, fY: a1]],  -- Daybreak      -- [["ClrKFlags"L,	15], [fS01: norm, fY: a1]],      [["SetIE"L,	15], [fS01: norm, fY: a1]],  -- Daybreak      -- fYDispBr      [["NegBr"L,	 0], [fS01: Disp, fY: a1, aluIn: t]],      [["ZeroBr"L,	 1], [fS01: Disp, fY: a1, aluIn: t]],      [["NZeroBr"L,	 2], [fS01: Disp, fY: a1, yIn: t]],      [["MesaIntBr"L,	 3], [fS01: Disp, fY: a1]],      [["PgCarryBr"L,	 4], [fS01: Disp, fY: a1, aluIn: t]],      [["CarryBr"L,	 5], [fS01: Disp, fY: a1, aluIn: t]],      [["XRefBr"L,	 6], [fS01: Disp, fY: a1, xIn: t]],      [["NibCarryBr"L,	 7], [fS01: Disp, fY: a1, aluIn: t]],      [["XDisp"L,	 8], [fS01: Disp, fY: a1, xIn: t]],      [["YDisp"L,	 9], [fS01: Disp, fY: a1, yIn: t]],      [["XC2npcDisp"L,	10], [fS01: Disp, fY: a1]],      -- [["YIODisp"L,	11], [fS01: Disp, fY: a1]],      -- [["EtherDisp"L,	11], [fS01: Disp, fY: a1]],      [["XWtOKDisp"L,	11], [fS01: Disp, fY: a1, xIn: t]], -- Daybreak (for map)      [["XwdDisp"L,	12], [fS01: Disp, fY: a1, xIn: t]],      [["XHDisp"L,	13], [fS01: Disp, fY: a1, xIn: t]],      [["XLDisp"L,	14], [fS01: Disp, fY: a1, xIn: t]],      -- [["XDirtyDisp"L,	14], [fS01: Disp, fY: a1, xIn: t]],      [["PgCrOvDisp"L,	15], [fS01: Disp, fY: a1, aluIn: t]],      -- fYIOOut: Mostly not in Daybreak      -- [["IOPOData¬"L,	 0], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["DebA¬"L,	 0], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["IOPCtl¬"L,	 1], [fS01: IOut, fY: a1, yIn: t, yl: t]],      [["ExtCtrl¬"L,	 1], [fS01: IOut, fY: a1, yIn: t, yl: t]],      -- [["KOData¬"L,	 2], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["KCtl¬"L,	 3], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["EOData¬"L,	 4], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["EICtl¬"L,	 5], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["DCtlFifo¬"L, 6], [fS01: IOut, fY: a1, yIn: t, yl: t]],      -- [["DCtl¬"L,	 7], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["DBorder¬"L,	 8], [fS01: IOut, fY: a1, yIn: t, yl: t]],      -- [["PCtl¬"L,	 9], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["TCtl¬"L,	 9], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["MCtl¬"L,	10], [fS01: IOut, fY: a1, yIn: t, yl: t]],      -- fY 11 is unused      -- [["EOCtl¬"L,	12], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["KCmd¬"L,	13], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["POData¬"L,	15], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- [["TOData¬"L,	15], [fS01: IOut, fY: a1, xIn: t, xl: t]],    --  Port Output operations   ****DP    [["SPort4¬"L,	4], [fS01: ports, fY: a1, xIn: t, xl: t, fport: t]],    [["SPort5¬"L,	5], [fS01: ports, fY: a1, xIn: t, xl: t, fport: t]],    [["SPort8¬"L,	8], [fS01: ports, fY: a1, xIn: t, xl: t, fport: t]],    [["SPort9¬"L,	9], [fS01: ports, fY: a1, xIn: t, xl: t, fport: t]],    [["SPort13¬"L,	13], [fS01: ports, fY: a1, xIn: t, xl: t, fport: t]],    [["Port0¬"L,	0], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port1¬"L,	1], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port4¬"L,	4], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port5¬"L,	5], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port8¬"L,	8], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port9¬"L,	9], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port12¬"L,	12], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    [["Port13¬"L,	13], [fS01: port, fY: a1, xIn: t, xl: t, fport: t]],    -- fZnorm      -- fZ 0 is Refresh (except in Daybreak)      [["IBPtr¬1"L,	 1], [fS2: norm, fS3: norm, fZ: a1]],      [["IBPtr¬0"L,	 2], [fS2: norm, fS3: norm, fZ: a1]],      -- fZ 3 is Cin¬pc16      -- fZ 4 is unused      -- fZ 5 is pop and fZpop      [["fZpop"L,	 5], [fS2: norm, fS3: norm, fZ: a1]],      -- fZ 6 is push      [["AltUaddr"L,	 7], [fS2: norm, fS3: norm, fZ: a1, yIn: t]],      -- fZ 8 - 9 are Noop      [["ClrLOCK"L,	10], [fS2: norm, fS3: norm, fZ: a1]], -- Daybreak      [["SetLOCK"L,	11], [fS2: norm, fS3: norm, fZ: a1]], -- Daybreak      -- fZ 12-15 are LRots      -- fZIOXin (covered in InitIOXIn)    --  [["KStrobe"L,	 4], [fS2: IOIn, fS3: IOIn, fZ: a1]],    --  [["EStrobe"L,	 7], [fS2: IOIn, fS3: IOIn, fZ: a1]],      [["Noop"L,	 8], [fS01: norm, fS2: norm, fS3: norm, fX: a1, fY: a1, fZ: a1]],      -- cycles      [["c1"L,   	 0], [cy: c1]],      [["c2"L,   	 0], [cy: c2]],      [["c3"L,   	 0], [cy: c3]],      [["c*"L,   	 0], [cy: cX]],      -- spares      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []],      [["unused"L,   	 0], []]];      FOR i: CARDINAL IN [0..lrotSize) DO      AddMTEntry[@macroTable[i], ElementRec[LRot[i]], SIZE[LRot ElementRec]];      ENDLOOP;    FOR i: CARDINAL IN [lrotSize..linkSize) DO      AddMTEntry[@macroTable[i], ElementRec[link[i]], SIZE[link ElementRec]];      ENDLOOP;    FOR i: CARDINAL IN [linkSize..macroTableSize) DO      AddMTEntry[@macroTable[i], ElementRec[macro[i]], SIZE[macro ElementRec]];      ENDLOOP;    };  --end InitMacroTables  END...    -- Log  -- 16-Jul-82 13:30:02 - ETN        - TrinityMass Version 1  -- 12-Oct-82 11:26:11 - ETN        - Dicentra  -- 29-Mar-84 11:01:38 - JoM        - Daybreak  --  3-May-84 12:33:21 - JoM        - Change name of dispatch to XWtOKDisp  --  6-Sep-84 16:51:39 - JoM        - Fix bug in MAPA¬ (takes value from X bus, not Y bus)  --  6-Nov-84 11:12:41 - JoM        - Add ErrnIBInt (synonym for IntStat)