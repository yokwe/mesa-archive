-- Copyright (C) 1983, 1984, 1985, 1986  by Xerox Corporation. All rights reserved. ---- CPKernel.mesa,   JAC   ,  4-Aug-86 11:49:05-- from CPKernel.mesa, HGM, 13-Nov-83  0:55:17--DIRECTORY  Format USING [StringProc],    --Bindweed USING [ShiftReg],--  CPDef USING [AReg, Bank, DReg, Link, Map, MiNum,               OtherReg, RealCS, RealMemory, RReg,VirturalMemory],  CPuFormat USING [MI, mi],    Window USING [Handle];CPKernel: DEFINITIONS =  BEGIN    Error: ERROR [reason: LONG STRING];  countOfAChips: CARDINAL;  optionsData: OptionsDataType;  loadBank: LoadBankType;    LoadBankType: TYPE = [0..4);    Bits4: TYPE = [0..16);  Bits5: TYPE = [0..32);  BitsC: TYPE = [0..4096);  ShiftReg: TYPE = MACHINE DEPENDENT RECORD [    BS(0:0..3): Bits4,    INIA(0:4..15): BitsC,    BSHold(1:0..3): Bits4,    INIAHold(1:4..15): BitsC,    blank(2:0..7): Byte,	--kludge because of byte swapping    anotherBlank(2:8..12): Bits5,    EOPTrap(2:13..13): BOOLEAN,    ExInt(2:14..14): BOOLEAN,    CSParity(2:15..15): BOOLEAN];     OptionsDataType: TYPE = MACHINE DEPENDENT RECORD [    formSW(0): Window.Handle ¬ NIL,    aChips(2): CARDINAL ¬ 1,    banksofMicrocode(3): CARDINAL ¬ 1,    aChipAddressSwap(4): BOOLEAN ¬ TRUE,    useOpie(5): BOOLEAN ¬ TRUE,    setBanksOnBoot(6): BOOLEAN ¬ TRUE];  Nibble: TYPE = [0..0FH];  Byte: TYPE = [0..0FFH];    -- Reserved Break ID Number for STOP condition  StopID: Byte = 255;  maxBreaks: CARDINAL = 255;    currentBank, savedBank: CARDINAL;  State: TYPE = {booted, dead, stopped, running, cpBreak};    StopInfoType: TYPE = RECORD [	shiftReg: ShiftReg,	MI: CPuFormat.MI  ];  UpdateLoadBankItem: PROCEDURE[bank: LoadBankType];      InKernel: PROCEDURE RETURNS [BOOLEAN];  GetState: PROCEDURE RETURNS [State];    Pause: PROCEDURE [msec: CARDINAL];  ProbeForStateChange: PROCEDURE [Format.StringProc, LONG POINTER];      Boot: PROCEDURE [Format.StringProc, LONG POINTER];  LoadKernel: PROCEDURE;  LoadKernelHigh: PROCEDURE [CPDef.Bank];  StartKernel: PROCEDURE;  FindBanks: PROCEDURE RETURNS [CPDef.Bank];  Reset: PROCEDURE;--  HalfBoot: PROCEDURE;  Start: PROCEDURE [Format.StringProc, LONG POINTER, LONG STRING, LONG STRING];  Stop: PROCEDURE [Format.StringProc, LONG POINTER];  ContinueAfterBreak: PROCEDURE [Format.StringProc, LONG POINTER, CPuFormat.mi];  ContinueAfterStop: PROCEDURE [Format.StringProc, LONG POINTER];    SetBreak: PROCEDURE [pc: CPDef.RealCS, MI: CPuFormat.MI, id: Byte];  AtBreak: PROCEDURE RETURNS [BOOLEAN];  GetBreakID: PROCEDURE RETURNS [CARDINAL];  StartSirius: PROCEDURE;  StopSirius: PROCEDURE RETURNS [PACKED ARRAY [0..6) OF Byte];  PollSirius: PROCEDURE [Format.StringProc, LONG POINTER] RETURNS [BOOLEAN];  AutoPollSirius: PROCEDURE [Format.StringProc, LONG POINTER] RETURNS [BOOLEAN];    SetShiftReg: PROCEDURE [CPDef.MiNum, CPDef.RealCS];  GetShiftReg: PROCEDURE RETURNS [ShiftReg];  GetStopInfo: PROCEDURE RETURNS [CPDef.RealCS, CPDef.RealCS, BOOLEAN, BOOLEAN, BOOLEAN, CPuFormat.mi];  FixParity: PROCEDURE [data: LONG POINTER TO CPuFormat.MI];  ReadLink: PROCEDURE [CPDef.Link] RETURNS [Nibble];  WriteLink: PROCEDURE [CPDef.Link, Nibble];  ReadCS: PROCEDURE [CPDef.RealCS] RETURNS [data: CPuFormat.MI];  WriteCS: PROCEDURE [CPDef.RealCS, CPuFormat.MI];  WriteCSBad: PROCEDURE [CPDef.RealCS, CPuFormat.MI];  ReadBank: PROCEDURE RETURNS [CPDef.Bank];  WriteBank: PROCEDURE [CPDef.Bank];  ReadRReg: PROCEDURE [CPDef.RReg] RETURNS [WORD];  WriteRReg: PROCEDURE [CPDef.RReg, WORD];  ReadDReg: PROCEDURE [CPDef.DReg] RETURNS [WORD];  WriteDReg: PROCEDURE [CPDef.DReg, WORD];  ReadAReg: PROCEDURE [CPDef.AReg] RETURNS [LONG POINTER];  WriteAReg: PROCEDURE [CPDef.AReg, LONG POINTER];  ReadMap: PROCEDURE [CPDef.Map] RETURNS [WORD];  WriteMap: PROCEDURE [CPDef.Map, WORD];  ReadMemoryWord: PROCEDURE [CPDef.RealMemory] RETURNS [WORD];  WriteMemoryWord: PROCEDURE [CPDef.RealMemory, WORD];  ReadVirturalMemory: PROCEDURE [CPDef.VirturalMemory] RETURNS[WORD];  WriteVirturalMemory: PROCEDURE [CPDef.VirturalMemory, WORD];  ReadOther: PROCEDURE [CPDef.OtherReg] RETURNS [WORD];  WriteOther: PROCEDURE [CPDef.OtherReg, WORD];  OneMI: TYPE = RECORD [real: CPDef.RealCS, mi: CPuFormat.mi];  CSBlock: TYPE = ARRAY [0..0) OF OneMI;  WriteCSBlock: PROCEDURE [CARDINAL, LONG POINTER TO OneMI];    WriteMemoryBlock: PROCEDURE [to: CPDef.RealMemory, count: CARDINAL, data: LONG POINTER];    END.  -- Log:-- JAC	16-Jan-86 11:53:13	add offsetForReal0-- JAC	24-Mar-86 18:52:59	add ShiftReg type-- JAC 	 4-Aug-86 11:49:25	remove offsetForReal0; add countOfAChips