-- LibToolTransferImpl.mesa - Last edited by --   DSC	  17-Sep-85 15:23:28-- Copyright (C) 1985  by Xerox Corporation. All rights reserved. DIRECTORYFileName,FileTransfer,LibToolSubr,LibToolTransfer,MFile,String,Time;LibToolTransferImpl: PROGRAMIMPORTS FileName, FileTransfer, StringEXPORTS LibToolTransfer = { Retrieve: PUBLIC PROC[name: LONG STRING, localDir: LONG STRING ¬ NIL,  h: LibToolSubr.Handle] RETURNS [retrieved: BOOLEAN] = {  remoteVFN: FileName.VFN ¬ NIL;  localVFN: FileName.VFN ¬ NIL;  localName: LONG STRING ¬ NIL;  conn: FileTransfer.Connection ¬ FileTransfer.Create[];  Cleanup: PROCEDURE = {    IF remoteVFN # NIL THEN FileName.FreeVFN[remoteVFN];    IF localVFN # NIL THEN FileName.FreeVFN[localVFN];    IF conn # NIL THEN FileTransfer.Destroy[conn];  };  BEGIN ENABLE {     UNWIND => Cleanup[];    FileTransfer.Error => {      s: LONG STRING ¬ [50];      FileTransfer.CodeToString[code, s];      h.Write[s];      h.Write["\n"L];      CONTINUE;    };  };  FileTransfer.SetProcs[conn: conn, clientData: h, messages: MessageProc, checkAbort: CheckAbort];  MakeNames[@remoteVFN, @localVFN, name, h.localDir];  localName ¬ FileName.PackFilename[localVFN, TRUE, TRUE, TRUE, TRUE];  h.Write["Retrieving file: '"L];  h.Write[name];  h.Write["' to "L];  h.Write[localName];  h.Write[".\n"L];  FileName.FreeFilename[localName];  FileTransfer.Copy[sourceFile: remoteVFN, destFile: localVFN, sourceConn: conn, showDates: TRUE, veto: VetoProc];  Cleanup[];  END; }; MakeNames: PROCEDURE [remoteVFN, localVFN: LONG POINTER TO FileName.VFN, remoteName, localDir: LONG STRING] = {  localName: LONG STRING ¬ [MFile.maxNameLength];   -- The remotename part is simple..   remoteVFN­ ¬ FileName.AllocVFN[remoteName];   -- The local part needs a localdir prepended to the name.   IF localDir # NIL THEN String.AppendString[localName, localDir];   -- Get local part of name and append it to localName   String.AppendString[localName, remoteVFN.name];   localVFN­ ¬ FileName.AllocVFN[localName]; };  MessageProc: FileTransfer.MessageProc = {   h: LibToolSubr.Handle ¬ clientData;   IF s1 # NIL THEN h.Write[s1];   IF s2 # NIL THEN h.Write[s2];   IF s3 # NIL THEN h.Write[s3];   IF s4 # NIL THEN h.Write[s4]; }; CheckAbort: FileTransfer.CheckAbortProc = {   h: LibToolSubr.Handle ¬ clientData;   abort ¬ h.checkAbort[]; };  VetoProc: FileTransfer.VetoProc = { h: LibToolSubr.Handle ¬ clientData;   IF  APPLY[SameCreateDate, info[conn]] THEN {      --h.Write["Same create date...skipping retrieval.\n"L];      RETURN[skip, TRUE];   } ELSE {      RETURN[do, TRUE];   }; };  SameCreateDate: PROCEDURE[source, target: FileTransfer.FileInfo] RETURNS [yes: BOOLEAN] = {   IF target.oldFile AND EqDate[target.create, source.create] THEN {     RETURN[TRUE];   } ELSE {     RETURN[FALSE];   }; };  EqDate: PROCEDURE [target, source: Time.Packed] RETURNS [yes: BOOLEAN] = {  RETURN[target = source]; }; }...Change log8-May-85 17:19:11	DSC	Made the catch phrase for ABORTED CONTINUE. 17-Jun-85 11:52:22	DSC	Took out ABORTED catch phrase.17-Sep-85 15:23:00	DSC	EqDate rather than UpdateOnly. 