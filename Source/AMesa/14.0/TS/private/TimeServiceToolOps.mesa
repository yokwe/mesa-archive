-- TimeServiceToolOps.mesa, last edited by:--  Keith	16-Dec-85 11:38:08DIRECTORY  Format USING [StringProc],  Overlap USING [IntervalSet],  System USING [    gmtEpoch, GreenwichMeanTime, NetworkAddress, NetworkNumber,    nullNetworkAddress];TimeServiceToolOps: DEFINITIONS =  BEGIN  -- common heap  zone: READONLY UNCOUNTED ZONE;  -- surveyor control procedures    EnumerateSurveyors: PROCEDURE [last: SurveyorInfo] RETURNS [next: SurveyorInfo];  SurveyActive: PROCEDURE [info: SurveyorInfo] RETURNS [active: BOOLEAN];  InsertEntryInRing: PROCEDURE [info: SurveyorInfo] RETURNS [inserted: BOOLEAN];  DeleteSurveyors: PROCEDURE;  GetParameters: PROCEDURE RETURNS [    maxSurveyors, delay, minimumTimesSurveyed: CARDINAL];  SetParameters: PROCEDURE [maxSurveyors, delay: CARDINAL ¬ dontChange];  dontChange: CARDINAL = 0;    WaitForNPolls: PROCEDURE [    out: Format.StringProc, when: CARDINAL,    Abort: PROCEDURE RETURNS [abort: BOOLEAN]] RETURNS [aborted: BOOLEAN];  -- surveyor information and procedures  SurveyorInfo: TYPE = LONG POINTER TO SurveyorInfoRecord;  SurveyorInfoRecord: TYPE = RECORD [    net: System.NetworkNumber, gen: CARDINAL, first: ServerInfo ¬ NIL];  ServerInfo: TYPE = LONG POINTER TO ServerInfoRecord;  ServerInfoRecord: TYPE = MONITORED RECORD [    gen: CARDINAL ¬ 0,    timeAvailable: BOOLEAN ¬ FALSE,    who: System.NetworkAddress ¬ System.nullNetworkAddress,    offset: LONG INTEGER ¬ 0,    at: System.GreenwichMeanTime ¬ System.gmtEpoch,    errorAccurate: BOOLEAN ¬ FALSE,    error: LONG CARDINAL ¬ 0,    delay: LONG CARDINAL ¬ 0,    resetOn: System.GreenwichMeanTime ¬ System.gmtEpoch,    resetUsing: System.NetworkAddress ¬ System.nullNetworkAddress,    resetBy: LONG CARDINAL ¬ 0,    resetting: BOOLEAN ¬ FALSE,    active: BOOLEAN ¬ FALSE,    numberRequests: LONG CARDINAL ¬ 0,    hasVersion: BOOLEAN ¬ FALSE,    version: LONG CARDINAL ¬ 0,    validRateInfo: BOOLEAN ¬ FALSE,    baseAt: System.GreenwichMeanTime ¬ System.gmtEpoch,    base: LONG INTEGER ¬ 0,    baseDelay: LONG CARDINAL ¬ 0,    next: ServerInfo ¬ NIL];  AccessProc: TYPE = PROCEDURE [server: ServerInfo];  CalculateRelativeRate: PROCEDURE [item: ServerInfo]    RETURNS [low, high: LONG INTEGER];  EnumerateServerInfo: PROCEDURE [    info: SurveyorInfo, access: AccessProc, trim: CARDINAL];  GetServerInfo: PROCEDURE [    info: SurveyorInfo, who: System.NetworkAddress, access: AccessProc];    Survey: PROCEDURE [info: SurveyorInfo];    -- formatting procedures    AddDP: PROCEDURE [s: LONG STRING, d: CARDINAL];  AppendNetworkAddress: PROCEDURE [x: LONG STRING, n: System.NetworkAddress];  AppendNetworkNumber: PROCEDURE [s: LONG STRING, n: System.NetworkNumber];  DisplaySequence: PROCEDURE [set: Overlap.IntervalSet, Out: Format.StringProc];  DisplayServerInfo: PROCEDURE [    info: SurveyorInfo, server: ServerInfo, out: Format.StringProc];  StripSocket: PROCEDURE [s: LONG STRING] RETURNS [strip: CARDINAL];  Swap: PROCEDURE [x: LONG UNSPECIFIED] RETURNS [y: LONG UNSPECIFIED];    -- time service interaction    AbortProc: TYPE = PROCEDURE RETURNS [abort: BOOLEAN];    FindNetsWithTimeServers: PROCEDURE [    hops: CARDINAL, net: PROCEDURE [n: System.NetworkNumber]];      Command: TYPE = {start, stop, reset};  SendCommand: PROCEDURE [who, by: System.NetworkAddress, cmd: Command]    RETURNS [ack: BOOLEAN];    Diagnose: PROCEDURE [    hops, timeCheck, rateCheck: CARDINAL, out: Format.StringProc,    Abort: AbortProc] RETURNS [problems: BOOLEAN];    Monitor: PROCEDURE [    timeBetweenTests, numberTestsBeforeReport: CARDINAL,    Out: Format.StringProc, Abort: AbortProc];      IntersectType: TYPE = {time, rate};  Intersect: PROCEDURE [    set: Overlap.IntervalSet, type: IntersectType, maxErr: CARDINAL,    out: Format.StringProc] RETURNS [maxErrUsed: CARDINAL];  IntersectTag: TYPE = LONG POINTER TO IntersectTagRecord;  IntersectTagRecord: TYPE = RECORD[who: System.NetworkAddress];  END...