-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. --GraphSW.mesa - (last edited by AOF 20-Jun-83  8:35:47)--Generalize Tajo graph subwindowsDIRECTORY  Window USING [Dims, Handle];GraphSW: DEFINITIONS =  BEGIN  --TYPES AND CONSTANTS  GraphDescriptor: TYPE = LONG DESCRIPTOR FOR Graphs;  Graphs: TYPE = ARRAY CARDINAL OF Graph;  Graph: TYPE = RECORD[    tag: LONG STRING ¬ NIL,  --name of plot    dataPoints: CARDINAL ¬ LAST[CARDINAL],  --# of data pairs maintain in history    xAxis, yAxis: Axis,  --see "Axis"    origin: DataPair ¬ defaultOrigin,  --need not be part of visable plot    compression: CARDINAL ¬ 1];  --'compression' points / plot history point  Axis: TYPE = RECORD[    tag: LONG STRING,  --displayed as part of x-axis label    minValue, maxValue: LONG INTEGER];  --in user coords, used for scaling  DataPair: TYPE = RECORD[x, y: LONG INTEGER];  --in user coords  Smoothing: TYPE = {none, firstOrder, forthOrder, other};  defaultSize: Window.Dims = [-1, -1];  --as wide as parent.box.dims.w  defaultOrigin: DataPair = [0, 0];    --PROCEDURES  Create: PROCEDURE[    parent: Window.Handle,  --of the window to be created    graphs: GraphDescriptor,  --defines how many, what flavor    smoothing: Smoothing ¬ none,  --if any    dims: Window.Dims ¬ defaultSize,  --controls height and width    nextSW: Window.Handle ¬ NIL,  --to insert new window in existing tool    formSW: BOOLEAN ¬ TRUE]  --should window include user formSW?    RETURNS [sw: Window.Handle];  --of the just created graph  Destroy: PROCEDURE[sw: Window.Handle];  --use instead of ToolWindow.Destroy  --Utility procs  --'sw' => the window handle returned by Create  --'graph' => respective index of the array of type Graphs  --Put 'graph' on top of stack, thus visable  Activate: PROCEDURE[sw: Window.Handle, graph: UNSPECIFIED];  --Add a new data point pair to 'graph'    AddPoint: PROCEDURE[sw: Window.Handle, graph: UNSPECIFIED, pair: DataPair];  --Compute new scale based on current history, the replot  Rescale: PROCEDURE[sw: Window.Handle, graph: UNSPECIFIED];  --Clear the history, but don't modify scale, etc  Reset: PROCEDURE[sw: Window.Handle, graph: UNSPECIFIED];  --Display a smoothed version of the graph, but don't modify scale or history  Smooth: PROCEDURE[sw: Window.Handle, smoothing: Smoothing ¬ none];    --Register a client "smoothing" proc (defaults to smoothing ¬ none)  ClientSmoothing: PROCEDURE[proc: SmoothingProcType];  SmoothingProcType: TYPE = PROC[pair: DataPair] RETURNS[DataPair];    END....