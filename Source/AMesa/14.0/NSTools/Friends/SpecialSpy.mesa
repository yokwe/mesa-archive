-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. -- file: SpecialSpy.mesa-- last edited: SMA 27-Nov-85 12:09:42-- The interface for setting the spy triggers in NSSpyTool.DIRECTORY  Buffer USING [Buffer],  BufferDisplay USING [Format, OutputProc],  Environment USING [Block],  Window USING [Handle];SpecialSpy: DEFINITIONS =  BEGIN  << Calling SetNSSpyTrigger proc registers the client's procedure with the   ether spy proc in NSSpyTool. The buffer received by that spy proc will go    through all filters set by the user of the NSSpyTool.  The client's trigger    will be called both to determined whether the buffer is interesting, and again   to allow the trigger to display the desired fields.  The semantics are odd but   simple - if the trigger is called with a NIL oldDataPtr, NSSpyTool is simply    asking whether this packet is interesting.  The client's trigger proc should    decide if he is interested in the packet, do no display of data.  He may rest    assured that he will be called again when it comes time to display.  If the    trigger is called with a non-NIL oldDataPtr, it indicates that he is in display   mode.  Client procs typically displays another layer of protocol   header and set <dataPtr> to the beginning of their definition of data.         Clients   must treat the buffer as read only!  All buffer output should be displayed in   the NSSpyTool fileSW by calling DisplayProc.  The client can register start and   stopping procs with the NSSpy tool that will be called when the spy tool is   started and stopped.  When the client tool is deactivated, it should call   SetStateChangeProcs with NILs to "unhook" the state change procs.      If NSSpyTool finds itself being deactivated or destroyed, it will destroy its   client, using the window handle passed to it in the Set trigger procedure.   The <mode> is the collection mode that NSSpyTool is using, the <format> is the   format of the display. >>  -- For displaying in the spy tool window.   DisplayProc: BufferDisplay.OutputProc;  -- For setting the trigger.  SetNSSpyTrigger: PROC [newTrig: TriggerProc ¬ NIL, wh: Window.Handle]    RETURNS [oldTrig: TriggerProc];  TriggerProc: TYPE = PROC [    b: Buffer.Buffer, mode: Mode, oldDataPtr: Environment.Block]    RETURNS [save: BOOLEAN, newDataPtr: Environment.Block];  -- For notifying the client when the spy tool is started and stopped.  SetStateChangeProcs: PROC [start: StartProc, stop: PROC];  StartProc: TYPE = PROC [format: BufferDisplay.Format];  Mode: TYPE = {display, collect};  END.