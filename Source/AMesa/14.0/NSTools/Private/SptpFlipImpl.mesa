-- File: SptpFlipImpl.mesa - last edit:-- AOF                 13-Nov-87  7:07:41-- Create by FormSWLayoutTool on 15-Oct-85 11:22-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Ascii USING [CR],  Exec USING [AddCommand, ExecProc, Handle, RemoveCommand],  Flipper USING [ClearCounts, Create, Enumerated],  Format USING [LongDecimal, StringProc],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, line0, ProcType],  Heap USING [systemZone],  Put USING [Text],  SptpStats USING [StatCounterIndex],  StatsOps USING [StatArray, statGrand],  Time USING [AppendCurrent],  Tool USING [    Create, Destroy, MakeFileSW, MakeFormSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [TransitionProcType],  Window USING [Box, Handle],  WindowFont USING [CharWidth];SptpFlipImpl: PROGRAM  IMPORTS    Exec, StatsOps, Flipper, Format, FormSW, Heap, Put, Time, Tool,    WindowFont = {  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    statsSW(0): Window.Handle ¬ NIL,    formSW(2): Window.Handle ¬ NIL,    fileSW(4): Window.Handle ¬ NIL];  FormItems: TYPE = {clearCounters, logCounters};  data: DataHandle ¬ NIL;  wh: Window.Handle ¬ NIL;  zone: UNCOUNTED ZONE ¬ Heap.systemZone;  charWidth: CARDINAL = WindowFont.CharWidth['0];  stati: NATURAL =    SptpStats.StatCounterIndex[fragmented].ORD -    SptpStats.StatCounterIndex[packetsXmt].ORD;  initialBox: Window.Box = [place: [x: 512,  y: 30], dims: [w: 512, h: 740]];  CharPos: PROC[char: CARDINAL] RETURNS [x: INTEGER] = {x ¬ charWidth * char};  Write: Format.StringProc = {Put.Text[data.fileSW, s]};  ClearCounters:  FormSW.ProcType = {Flipper.ClearCounts[data.statsSW]};  LogCounters:  FormSW.ProcType =    BEGIN    time: LONG STRING ¬ [40];    statsArray: StatsOps.StatArray = StatsOps.statGrand;    lp: LONG POINTER TO ARRAY NATURAL[0..stati] OF LONG CARDINAL;    stats: ARRAY NATURAL[0..stati] OF STRING ¬ [      "packetsXmt"L, "bytesXmt"L, "packetsRcvd"L,      "bytesRcvd"L, "cntrlRcvd"L, "cntrlBytesRcvd"L,      "cntrlXmt"L, "cntrlBytesXmt"L, "aborted"L,      "framingError"L, "checksumError"L, "dataLost"L,      "deviceError"L, "disaster"L, "frameTimeout"L,      "invalidChar"L, "invalidFrame"L, "parityError"L,      "rcvAborted"L, "xmtAborted"L, "faceReset"L,      "lostInterpt"L, "xmtQEmpty"L,      "commandInit"L, "commandLost"L, "lta"L, "masterTMO"L,      "xmtAddrReject"L, "rcvAddrReject"L, "xmtYouThere"L, "rcvYouThere"L,      "xmtClassReject"L, "rcvClassReject"L, "xmtIHere"L, "rcvIHere"L,      "xmtMyOptions"L, "rcvMyOptions"L, "xmtNull"L, "rcvNull"L,      "xmtOptionsAck"L, "rcvOptionsAck"L, "xmtSizeReject"L, "rcvSizeReject"L,      "xmtTermRep"L, "rcvTermRep"L, "xmtTermReq"L, "rcvTermReq"L,      "xmtVersionReject"L, "rcvVersionReject"L,      "createDriver"L, "adoptNS"L, "disownNS"L,      "decapNS"L, "orphan"L, "encapNS"L,      "lineSpeed"L, "badFragSeq"L, "fragRcvd"L, "reassembly"L,      "fragXmt"L, "fragmented"L];    time[0] ¬ Ascii.CR; time.length ¬ SUCC[time.length];  --append byte!    Time.AppendCurrent[time];    time[time.length] ¬ Ascii.CR; time.length ¬ SUCC[time.length]; --append byte!    Write[time];  --get that out there    lp ¬ LOOPHOLE[@statsArray[statSpares0]];    FOR i: NATURAL IN[0..LENGTH[stats]) DO      Write[stats[i]];      Write[": "L];      Format.LongDecimal[Write, lp[i]];      IF i < (LENGTH[stats] - 1) THEN Write[", "L];      ENDLOOP;    Write["\n"L];    END;  --LogCounters  ClientTransition: ToolWindow.TransitionProcType = {    SELECT TRUE FROM      old = inactive =>        IF data = NIL THEN data ¬ zone.NEW[Data ¬ []];      new = inactive =>        IF data # NIL THEN {	  zone.FREE[@data]};      ENDCASE;    };  Init: PROCEDURE = {    Exec.AddCommand["SptpFlip.~"L, NoOp, NIL, Unload];    IF StatsOps.statGrand = NIL THEN RETURN;  --we can't do this    wh ¬ Tool.Create[      makeSWsProc: MakeSWs, initialState: default, initialBox: initialBox,      cmSection: "SptpStats"L, clientTransition: ClientTransition,      name: "SptpStats"L];    };  NoOp: Exec.ExecProc = { };    Unload: Exec.ExecProc = {    IF wh # NIL THEN Tool.Destroy[wh]; Exec.RemoveCommand[h, "SptpFlip.~"L]};  MakeSWs: Tool.MakeSWsProc = {    logName: LONG STRING ¬ [16];    statsArray: StatsOps.StatArray = StatsOps.statGrand;    lp: LONG POINTER TO ARRAY NATURAL[0..stati] OF LONG CARDINAL;    stats: ARRAY NATURAL[0..stati] OF Flipper.Enumerated ¬ [      [tag: "packetsXmt"L, count: ],      [tag: "bytesXmt"L, count: ],      [tag: "packetsRcvd"L, count: ],      [tag: "bytesRcvd"L, count: ],      [tag: "cntrlRcvd"L, count: ],      [tag: "cntrlBytesRcvd"L, count: ],      [tag: "cntrlXmt"L, count: ],      [tag: "cntrlBytesXmt"L, count: ],      [tag: "aborted"L, count: ],      [tag: "framingError"L, count: ],      [tag: "checksumError"L, count: ],      [tag: "dataLost"L, count: ],      [tag: "deviceError"L, count: ],      [tag: "disaster"L, count: ],      [tag: "frameTimeout"L, count: ],      [tag: "invalidChar"L, count: ],      [tag: "invalidFrame"L, count: ],      [tag: "parityError"L, count: ],      [tag: "rcvAborted"L, count: ],      [tag: "xmtAborted"L, count: ],      [tag: "faceReset"L, count: ],      [tag: "lostInterpt"L, count: ],      [tag: "xmtQEmpty"L, count: ],      [tag: "commandInit"L, count: ],      [tag: "commandLost"L, count: ],      [tag: "lta"L, count: ],      [tag: "masterTMO"L, count: ],      [tag: "xmtAddrReject"L, count: ],      [tag: "rcvAddrReject"L, count: ],      [tag: "xmtYouThere"L, count: ],      [tag: "rcvYouThere"L, count: ],      [tag: "xmtClassReject"L, count: ],      [tag: "rcvClassReject"L, count: ],      [tag: "xmtIHere"L, count: ],      [tag: "rcvIHere"L, count: ],      [tag: "xmtMyOptions"L, count: ],      [tag: "rcvMyOptions"L, count: ],      [tag: "xmtNull"L, count: ],      [tag: "rcvNull"L, count: ],      [tag: "xmtOptionsAck"L, count: ],      [tag: "rcvOptionsAck"L, count: ],      [tag: "xmtSizeReject"L, count: ],      [tag: "rcvSizeReject"L, count: ],      [tag: "xmtTermRep"L, count: ],      [tag: "rcvTermRep"L, count: ],      [tag: "xmtTermReq"L, count: ],      [tag: "rcvTermReq"L, count: ],      [tag: "xmtVersionReject"L, count: ],      [tag: "rcvVersionReject"L, count: ],      [tag: "createDriver"L, count: ],      [tag: "adoptNS"L, count: ],      [tag: "disownNS"L, count: ],      [tag: "decapNS"L, count: ],      [tag: "decapOrphan"L, count: ],      [tag: "encapNS"L, count: ],      [tag: "lineSpeed"L, count: ],      [tag: "badFragSeq"L, count: ],      [tag: "fragRcvd"L, count: ],      [tag: "reassembly"L, count: ],      [tag: "fragXmt"L, count: ],      [tag: "fragmented"L, count: ]];    Tool.UnusedLogName[unused: logName, root: "SptpStats.log"L];    lp ¬ LOOPHOLE[@statsArray[statSpares0]];    FOR i: NATURAL IN[0..LENGTH[stats]) DO      stats[i].count ¬ @lp[i]; ENDLOOP;    data.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeForm];    data.statsSW ¬ Flipper.Create[parent: window, flippers: DESCRIPTOR[stats]];    data.fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    };  MakeForm: FormSW.ClientItemsProcType = {    OPEN FormSW;    nItems: CARDINAL = FormItems.LAST.ORD + 1;    items ¬ AllocateItemDescriptor[nItems];    items[FormItems.clearCounters.ORD] ¬ CommandItem[      tag: "Clear counters"L, place: [CharPos[0], line0], proc: ClearCounters];    items[FormItems.logCounters.ORD] ¬ CommandItem[      tag: "Log counters"L, place: [CharPos[20], line0], proc: LogCounters];    RETURN[items: items, freeDesc: TRUE];    };  -- Mainline code  Init[];  -- this gets string out of global frame  }...  