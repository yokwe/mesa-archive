-- File: SppStatsImpl.mesa - last edit:-- AOF                 19-Jul-87 13:55:35-- Create by FormSWLayoutTool on 15-Oct-85 11:22-- Copyright (C) 1985, 1986, 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Ascii USING [CR],  Exec USING [AddCommand, ExecProc, Handle, RemoveCommand],  Flipper USING [ClearCounts, Create, Enumerated],  Format USING [LongDecimal, StringProc],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, line0, ProcType],  Heap USING [systemZone],  Put USING [Text],  StatsOps USING [StatArray, statGrand],  Time USING [AppendCurrent],  Tool USING [    Create, Destroy, MakeFileSW, MakeFormSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [TransitionProcType],  Window USING [Handle],  WindowFont USING [CharWidth];SppStatsImpl: PROGRAM  IMPORTS    Exec, StatsOps, Flipper, Format, FormSW, Heap, Put, Time, Tool,    WindowFont = {  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    statsSW(0): Window.Handle ¬ NIL,    formSW(2): Window.Handle ¬ NIL,    fileSW(4): Window.Handle ¬ NIL];  FormItems: TYPE = {clearCounters, logCounters};  data: DataHandle ¬ NIL;  wh: Window.Handle ¬ NIL;  zone: UNCOUNTED ZONE ¬ Heap.systemZone;  charWidth: CARDINAL = WindowFont.CharWidth['0];  CharPos: PROC[char: CARDINAL] RETURNS [x: INTEGER] = {x ¬ charWidth * char};  Write: Format.StringProc = {Put.Text[data.fileSW, s]};  ClearCounters:  FormSW.ProcType = {Flipper.ClearCounts[data.statsSW]};  LogCounters:  FormSW.ProcType =    BEGIN    time: LONG STRING ¬ [40];    statsArray: StatsOps.StatArray = StatsOps.statGrand;    lp: LONG POINTER TO ARRAY NATURAL[0..21) OF LONG CARDINAL;    stats: ARRAY NATURAL[0..21) OF STRING ¬ [      "pktsSent"L,"bytsSent"L, "pktsRcvd"L, "bytesRcvd"L, "marksSent"L,      "marksRcvd"L, "ackrSent"L, "ackrRcvd"L, "acksSent"L, "acksRcvd"L,      "sysSent"L, "sysRcvd"L, "attnSent"L, "attnRcvd"L, "retrans"L,      "errorSent"L, "errorRcvd"L, "dups"L, "early"L,"late"L, "probes"L];    time[0] ¬ Ascii.CR; time.length ¬ SUCC[time.length];  --append byte!    Time.AppendCurrent[time];    time[time.length] ¬ Ascii.CR; time.length ¬ SUCC[time.length]; --append byte!    Write[time];  --get that out there    lp ¬ LOOPHOLE[@statsArray[statDataPacketsSent]];    FOR i: NATURAL IN[0..LENGTH[stats]) DO      Write[stats[i]];      Write[": "L];      Format.LongDecimal[Write, lp[i]];      IF i < (LENGTH[stats] - 1) THEN Write[", "L];      ENDLOOP;    Write["\n"L];    END;  --LogCounters  ClientTransition: ToolWindow.TransitionProcType = {    SELECT TRUE FROM      old = inactive =>        IF data = NIL THEN data ¬ zone.NEW[Data ¬ []];      new = inactive =>        IF data # NIL THEN {	  zone.FREE[@data]};      ENDCASE;    };  Init: PROCEDURE = {    Exec.AddCommand["SppStats.~"L, NoOp, NIL, Unload];    IF StatsOps.statGrand = NIL THEN RETURN;  --we can't do this    wh ¬ Tool.Create[      makeSWsProc: MakeSWs, initialState: default, cmSection: "SppStats"L,      clientTransition: ClientTransition, name: "SppStats"L];    };  NoOp: Exec.ExecProc = { };    Unload: Exec.ExecProc = {    Tool.Destroy[wh]; Exec.RemoveCommand[h, "SppStats.~"L]};  MakeSWs: Tool.MakeSWsProc = {    logName: LONG STRING ¬ [16];    statsArray: StatsOps.StatArray = StatsOps.statGrand;    lp: LONG POINTER TO ARRAY NATURAL[0..21) OF LONG CARDINAL;    stats: ARRAY NATURAL[0..21) OF Flipper.Enumerated ¬ [      [tag: "pktsSent"L, count: ],      [tag: "bytsSent"L, count: ],      [tag: "pktsRcvd"L, count: ],      [tag: "bytesRcvd"L, count: ],      [tag: "marksSent"L, count: ],      [tag: "marksRcvd"L, count: ],      [tag: "ackrSent"L, count: ],      [tag: "ackrRcvd"L, count: ],      [tag: "acksSent"L, count: ],      [tag: "acksRcvd"L, count: ],      [tag: "sysSent"L, count: ],      [tag: "sysRcvd"L, count: ],      [tag: "attnSent"L, count: ],      [tag: "attnRcvd"L, count: ],      [tag: "retrans"L, count: ],      [tag: "errorSent"L, count: ],      [tag: "errorRcvd"L, count: ],      [tag: "dups"L, count: ],      [tag: "early"L, count: ],      [tag: "late"L, count: ],      [tag: "probes"L, count: ]];    Tool.UnusedLogName[unused: logName, root: "SppStats.log"L];    lp ¬ LOOPHOLE[@statsArray[statDataPacketsSent]];    FOR i: NATURAL IN[0..LENGTH[stats]) DO      stats[i].count ¬ @lp[i]; ENDLOOP;    data.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeForm];    data.statsSW ¬ Flipper.Create[parent: window, flippers: DESCRIPTOR[stats]];    data.fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    };  MakeForm: FormSW.ClientItemsProcType = {    OPEN FormSW;    nItems: CARDINAL = FormItems.LAST.ORD + 1;    items ¬ AllocateItemDescriptor[nItems];    items[FormItems.clearCounters.ORD] ¬ CommandItem[      tag: "Clear counters"L, place: [CharPos[0], line0], proc: ClearCounters];    items[FormItems.logCounters.ORD] ¬ CommandItem[      tag: "Log counters"L, place: [CharPos[20], line0], proc: LogCounters];    RETURN[items: items, freeDesc: TRUE];    };  -- Mainline code  Init[];  -- this gets string out of global frame  }...  