-- File: BroadcastImpl.mesa - last edit:-- AOF                 30-Jun-87  9:13:12-- Copyright (C) 1984, 1986, 1987 by Xerox Corporation. All rights reserved. DIRECTORY  Buffer USING [Type],  PupDefs USING [Body],  NSBuffer USING [Body],  Driver USING [ChangeNumberOfInputBuffers, Device, GetDeviceChain],  IEEE8023 USING [Encapsulation, EncapObject],  Exec USING [AddCommand, ExecProc, OutputProc, RemoveCommand],  Format USING [StringProc],  Protocol1 USING [SetMaximumBufferSize],  SpecialCommunication USING [SetSpyProc, SpyProc, SpyType],  SpecialSystem USING [broadcastHostNumber, ProcessorID],  String USING [AppendChar, AppendDecimal, AppendString],  System USING [GetGreenwichMeanTime],  Time USING [Append, Unpack];    BroadcastImpl: MONITOR    IMPORTS Driver, Exec, Protocol1, SpecialCommunication, String, System, Time    EXPORTS Buffer =  BEGIN  Device: PUBLIC <<Buffer>> TYPE = Driver.Device;  time: LONG CARDINAL;  collected: Collected;  oldSpy: ARRAY Buffer.Type OF SpecialCommunication.SpyProc;  all: SpecialSystem.ProcessorID = LOOPHOLE[SpecialSystem.broadcastHostNumber];  Collected: TYPE = RECORD[    echoMe, echoed, translation, other, total: CARDINAL ¬ 0,    pup: RECORD[      echoMe, iAmEcho, badEcho, error, rfc, abort, end, endRep,      data, aData, ack, mark, int, intRep, aMark, eData, eAck, eEnd,      eAbort, rpp, gatewayRequest, gatewayInfo, dateTenexRequest,      dateTenexIs, dateAltoRequest, dateAltoIs, mailCheck, mailIsNew,      mailNotNew, mailError, mailCheckLaurel, nameLookup, nameIs, nameError,      addressLookup, addressIs, whereIsUser, userIs, userError, netDirVersion,      sendNetDir, bootFileSend, kissOfDeath, request, result, unsolicited,      custodian, sync, pineAck, noop, bootDirReq, bootDirReply, other, total:      CARDINAL ¬ 0],    ns: RECORD[      routingRequest, routingInfo, echoRequest, echoResponse, error, other,      pex, spp, xlate, ubBoot, ubIPC, boot, mail, ubDiag, total: CARDINAL ¬ 0]];     --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Initialization:  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~      Initialize: PROCEDURE =    BEGIN    collected ¬ [];    Exec.AddCommand["Broadcast.~"L, ExecEntry, , Unload];    Driver.ChangeNumberOfInputBuffers[TRUE];  --allocates extra buffers    FOR device: Device ¬ Driver.GetDeviceChain[], device.next      UNTIL device = NIL DO      IF device.device = ethernet THEN        Protocol1.SetMaximumBufferSize[device, NIL, 1500];      ENDLOOP;    FOR type: SpecialCommunication.SpyType IN SpecialCommunication.SpyType DO      oldSpy[type] ¬ SpecialCommunication.SetSpyProc[SpyProc, type];      ENDLOOP;    time ¬ System.GetGreenwichMeanTime[];        END;  --Initialize  Unload: Exec.ExecProc =    BEGIN    Exec.RemoveCommand[h, "Broadcast.~"L];    FOR type: SpecialCommunication.SpyType IN SpecialCommunication.SpyType DO      [] ¬ SpecialCommunication.SetSpyProc[NIL, type];  --wipe out spy      ENDLOOP;    FOR device: Device ¬ Driver.GetDeviceChain[], device.next      UNTIL device = NIL DO      IF device.device = ethernet THEN        Protocol1.SetMaximumBufferSize[device, NIL, 0];      ENDLOOP;    Driver.ChangeNumberOfInputBuffers[FALSE];    END;  --Unload  ExecEntry: Exec.ExecProc =    BEGIN    Pnz: PROC[v: CARDINAL, tag: STRING] =      BEGIN      IF v # 0 THEN	BEGIN	string.length ¬ 0;	String.AppendString[string, tag];	String.AppendString[string, ": "L];	String.AppendDecimal[string, v];	String.AppendString[string, "  "L];	output[string];	END;      END;  --Pnz    string: STRING ¬ [80];    sPup: STRING = "Pup[ "L;    end: STRING = "]  "L;    sNS: STRING = "NS[ "L;    output: Format.StringProc ¬ Exec.OutputProc[h];    String.AppendString[string, "Broadcasts collected from "L];    Time.Append[string, Time.Unpack[[time]]];    String.AppendString[string, " to "L];    time ¬ System.GetGreenwichMeanTime[];    Time.Append[string, Time.Unpack[[time]]];    String.AppendChar[string, 15C];    output[string];    output[sNS];    PrintNS[Pnz];    Pnz[collected.ns.total, "total"L];    output[end];    output[sPup];    PrintPup1[Pnz];    PrintPup2[Pnz];    PrintPup3[Pnz];    Pnz[collected.pup.total, "total"L];    output[end];    Pnz[collected.echoMe, "echoMe"L];    Pnz[collected.echoed, "echoed"L];    Pnz[collected.other, "other"L];    Pnz[collected.translation, "translation"L];    Pnz[collected.total, "TOTAL"L];    collected ¬ [];    END;  PrintPup1: PROC[pnz: PROC[v: CARDINAL, tag: STRING]] =    BEGIN    pnz[collected.pup.echoMe, "echoMe"L];    pnz[collected.pup.iAmEcho, "iAmEcho"L];    pnz[collected.pup.badEcho, "badEcho"L];    pnz[collected.pup.error, "error"L];    pnz[collected.pup.rfc, "rfc"L];    pnz[collected.pup.abort, "abort"L];    pnz[collected.pup.end, "end"L];    pnz[collected.pup.endRep, "endRep"L];    pnz[collected.pup.data, "data"L];    pnz[collected.pup.aData, "aData"L];    pnz[collected.pup.ack, "ack"L];    pnz[collected.pup.mark, "mark"L];    pnz[collected.pup.int, "int"L];    pnz[collected.pup.intRep, "intRep"L];    pnz[collected.pup.aMark, "aMark"L];    pnz[collected.pup.eData, "eData"L];    pnz[collected.pup.eAck, "eAck"L];    pnz[collected.pup.eEnd, "eEnd"L];    pnz[collected.pup.eAbort, "eAbort"L];    pnz[collected.pup.rpp, "rpp"L];    pnz[collected.pup.other, "other"L];    END;  --PrintPup  PrintPup2: PROC[pnz: PROC[v: CARDINAL, tag: STRING]] =    BEGIN    OPEN collected.pup;    pnz[gatewayRequest, "gatewayRequest"L];    pnz[gatewayInfo, "gatewayInfo"L];    pnz[dateTenexRequest, "dateTenexRequest"L];    pnz[dateTenexIs, "dateTenexIs"L];    pnz[dateAltoRequest, "dateAltoRequest"L];    pnz[dateAltoIs, "dateAltoIs"L];    pnz[mailCheck, "mailCheck"L];    pnz[mailIsNew, "mailIsNew"L];    pnz[mailNotNew, "mailNotNew"L];    pnz[mailError, "mailError"L];    pnz[mailCheckLaurel, "mailCheckLaurel"L];    pnz[nameLookup, "nameLookup"L];    pnz[nameIs, "nameIs"L];    pnz[nameError, "nameError"L];    END;  --PrintPup2  PrintPup3: PROC[pnz: PROC[v: CARDINAL, tag: STRING]] =    BEGIN    OPEN collected.pup;    pnz[addressLookup, "addressLookup"L];    pnz[addressIs, "addressIs"L];    pnz[whereIsUser, "whereIsUser"L];    pnz[userIs, "userIs"L];    pnz[userError, "userError"L];    pnz[netDirVersion, "netDirVersion"L];    pnz[sendNetDir, "sendNetDir"L];    pnz[bootFileSend, "bootFileSend"L];    pnz[kissOfDeath, "kissOfDeath"L];    pnz[request, "request"L];    pnz[result, "result "L];    pnz[unsolicited, "unsolicited"L];    pnz[custodian, "custodian"L];    pnz[sync, "sync"L];    pnz[pineAck, "pineAck"L];    pnz[noop, "noop"L];    pnz[bootDirReq, "bootDirReq"L];    pnz[bootDirReply, "bootDirReply"L];    END;  --PrintPup3  PrintNS: PROC[pnz: PROC[v: CARDINAL, tag: STRING]] =    BEGIN    OPEN collected.ns;    pnz[routingRequest, "routingRequest"L];    pnz[routingInfo, "routingInfo"L];    pnz[echoRequest, "echoRequest"L];    pnz[echoResponse, "echoResponse"L];    pnz[error, "error"L];    pnz[pex, "pex"L];    pnz[spp, "spp"L];    pnz[xlate, "xlate"L];    pnz[ubBoot, "ubBoot"L];    pnz[ubIPC, "ubIPC"L];    pnz[boot, "boot"L];    pnz[mail, "mail"L];    pnz[ubDiag, "ubDiag"L];    END;  --PrintNS  SpyProc: SpecialCommunication.SpyProc =    --PROC[b: Buffer.Buffer] RETURNS[Buffer.Buffer]    BEGIN    IF oldSpy[b.fo.type] # NIL THEN      {b ¬ oldSpy[b.fo.type][b, function]; IF b = NIL THEN RETURN[b]};    IF LOOPHOLE[      b.linkLayer.blockPointer, IEEE8023.Encapsulation].ethernetDest = all THEN      BEGIN      hll: LONG POINTER = LOOPHOLE[	b.linkLayer.blockPointer + SIZE[ethernet IEEE8023.EncapObject]];      collected.total ¬ collected.total + 1;      SELECT LOOPHOLE[        b.linkLayer.blockPointer, IEEE8023.Encapsulation].ethernetType FROM        echoMe => collected.echoMe ¬ collected.echoMe + 1;	echoed => collected.echoed ¬ collected.echoed + 1;	pup =>	  BEGIN	  OPEN collected.pup;	  bb: PupDefs.Body = NARROW[hll];	  total ¬ total + 1;	  SELECT bb.pupType FROM	    gatewayRequest => gatewayRequest ¬ gatewayRequest + 1;	    gatewayInfo => gatewayInfo ¬ gatewayInfo + 1;	    dateTenexRequest => dateTenexRequest ¬ dateTenexRequest + 1;	    dateTenexIs => dateTenexIs ¬ dateTenexIs + 1;	    dateAltoRequest => dateAltoRequest ¬ dateAltoRequest + 1;	    dateAltoIs => dateAltoIs ¬ dateAltoIs + 1;	    mailCheck => mailCheck ¬ mailCheck + 1;	    mailIsNew => mailIsNew ¬ mailIsNew + 1;	    mailNotNew => mailNotNew ¬ mailNotNew + 1;	    mailError => mailError ¬ mailError + 1;	    mailCheckLaurel => mailCheckLaurel ¬ mailCheckLaurel + 1;	    nameLookup => nameLookup ¬ nameLookup + 1;	    nameIs => nameIs ¬ nameIs + 1;	    nameError => nameError ¬ nameError + 1;	    addressLookup => addressLookup ¬ addressLookup + 1;	    addressIs => addressIs ¬ addressIs + 1;	    whereIsUser => whereIsUser ¬ whereIsUser + 1;	    userIs => userIs ¬ userIs + 1;	    userError => userError ¬ userError + 1;	    netDirVersion => netDirVersion ¬ netDirVersion + 1;	    sendNetDir => sendNetDir ¬ sendNetDir + 1;	    bootFileSend => bootFileSend ¬ bootFileSend + 1;	    kissOfDeath => kissOfDeath ¬ kissOfDeath + 1;	    request => request ¬ request + 1;	    result => result ¬ result + 1;	    unsolicited => unsolicited ¬ unsolicited + 1;	    custodian => custodian ¬ custodian + 1;	    sync => sync ¬ sync + 1;	    pineAck => pineAck ¬ pineAck + 1;	    noop => noop ¬ noop + 1;	    bootDirReq => bootDirReq ¬ bootDirReq + 1;	    bootDirReply => bootDirReply ¬ bootDirReply + 1;	    echoMe => echoMe ¬ echoMe + 1;	    iAmEcho => iAmEcho ¬ iAmEcho + 1;	    badEcho => badEcho ¬ badEcho + 1;	    error => error ¬ error + 1;	    rfc => rfc ¬ rfc + 1;	    abort => abort ¬ abort + 1;	    end => end ¬ end + 1;	    endRep => endRep ¬ endRep + 1;	    data => data ¬ data + 1;	    aData => aData ¬ aData + 1;	    ack => ack ¬ ack + 1;	    mark => mark ¬ mark + 1;	    int => int ¬ int + 1;	    intRep => intRep ¬ intRep + 1;	    aMark => aMark ¬ aMark + 1;	    eData => eData ¬ eData + 1;	    eAck => eAck ¬ eAck + 1;	    eEnd => eEnd ¬ eEnd + 1;	    eAbort => eAbort ¬ eAbort + 1;	    rpp => rpp ¬ rpp + 1;	    ENDCASE => other ¬ other + 1;	  END;	translation => collected.translation ¬ collected.translation + 1;	ns =>	  BEGIN	  OPEN collected.ns;	  bb: NSBuffer.Body = NARROW[hll];	  total ¬ total + 1;	  SELECT bb.packetType FROM	    routingInformation =>	      SELECT bb.routingType FROM	        routingInfoRequest =>		  routingRequest ¬ routingRequest + 1;		ENDCASE =>		  routingInfo ¬ routingInfo + 1; 	    echo =>	      SELECT bb.echoType FROM	        echoRequest =>		  echoRequest ¬ echoRequest + 1;		ENDCASE =>		  echoResponse ¬ echoResponse + 1; 	    error => error ¬ error;	    packetExchange => pex ¬ pex + 1;	    sequencedPacket => spp ¬ spp + 1;	    pupAddrTransPacket => xlate ¬ xlate + 1;	    ubBootPacket => ubBoot ¬ ubBoot + 1;	    ubIPCPacket => ubIPC ¬ ubIPC + 1;	    bootServerPacket => boot ¬ boot + 1;	    electronicMailCacheFlushPacket => mail ¬ mail + 1;	    ubDiagnosticPacket => ubDiag ¬ ubDiag + 1;	    ENDCASE => other ¬ other + 1;	  END;	ENDCASE => collected.other ¬ collected.other + 1;      END;    RETURN[b];  --return buffer to dispatcher    END;      -- Mainline code:    Initialize[];    END.  