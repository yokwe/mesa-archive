-- File: MataHariInternal.mesa - last edit:-- AOF                  3-Nov-87  9:51:16-- BKI                 17-Jul-87 20:03:56-- Nannette	        9-Dec-86 14:24:33-- Copyright (C) 1986, 1987 by Xerox Corporation. All rights reserved. DIRECTORY  ArpaTypes USING    [BufferBody, InternetAddress, Port, ProtocolType],  Buffer USING [   Buffer, BufferObject],  BufferDisplay USING [   Format, minLineLen],  FormSW USING [   ClientItemsProcType, NotifyProcType, ProcType],  ISO8073Types USING [   Reference],  MFile USING [   Handle],  MSegment USING [   Handle],  NSConstants USING [   unknownSocketID],  NSTypes USING [   BufferBody, ConnectionID, PacketType],  OSITransportTypes USING [   Protocol],  PupTypes USING [   BufferBody],  Space USING [   Interval, nullInterval],  SpecialCommunication USING [   SpyProc, SpyType],  System USING [   HostNumber, NetworkAddress, nullHostNumber, nullNetworkAddress,   nullSocketNumber, Pulses, SocketNumber],  Window USING [   Handle];    MataHariInternal: DEFINITIONS =  BEGIN    -- TYPES & CONSTANTS   « ============================================================================= »    firstWKS:	System.SocketNumber =	NSConstants.unknownSocketID;   -- 0  rawValue:	CARDINAL = 2054;  clientWh:	Window.Handle;		-- client tool window (if any)  tool:		DataHandle;  toolParams:	ParamHandle;  params:	ParamHandle;		-- current snapshot of the parameters  rawFlp,  runtFlp,  typeFlp,  queued:	PUBLIC LONG CARDINAL;	-- flipper counters for packets  startItem,  stopItem,  bcItem,  rawItem,  nsItem,  pupItem,  arpaItem,  osiItem:	CARDINAL;		-- packet counts      « ============================================================================= »   BootType:	TYPE = MACHINE DEPENDENT {  		       private(0), simpleRequest(1), simpleData(2),		       streamRequest(3)};  Byte:		TYPE = [0..377B];		         ConnType:	TYPE = {spp, tcp, osi};  DispFields:	TYPE = MACHINE DEPENDENT {conHeader(0), encap(1),		       lvl1Headers(2), lvl2Headers(3), system(4), data(5)};  Families:	TYPE = MACHINE DEPENDENT {ns(0), pup(1), arpa(2), osi(3)};  FilterLvl:	TYPE = {broadcast, raw, ns, pup, arpa, osi};         Mode:		TYPE = {etherToDisplay, etherToDisk, diskToDisplay};  PPacketType:	TYPE = MACHINE DEPENDENT{  		       control(0), pup(4), ns(12),		       siuSet(16), siuEcho(17), siuDetermineLS(18), (255)};  PhonePacketType: TYPE = MACHINE DEPENDENT {   		       pupPhonePacket(100B), nsPhonePacket(300B),		       turnAroundPhonePacket(301B),		       turnAroundMTSPhonePacket(302B), (LAST[Byte])};    StreamState:	TYPE = {unconnected, halfConnected, fullyConnected};  Timing:	TYPE = {relative, absolute};    « ============================================================================= »  DisplayParms: TYPE = ARRAY DispFields OF BOOLEAN ¬ ALL[FALSE];  Level1Packets:TYPE = ARRAY Families OF BOOLEAN ¬ ALL[FALSE];  NSPackets:	TYPE = ARRAY NSTypes.PacketType[private..pccPacket] OF BOOLEAN ¬  		       ALL[FALSE];  ArpaPackets:	TYPE = ARRAY ArpaTypes.ProtocolType[icmp..tacMon] OF BOOLEAN ¬  		       ALL[FALSE];  OsiPackets:   TYPE = ARRAY OSITransportTypes.Protocol[iso8073..iso8602] OF BOOLEAN ¬                       ALL[FALSE];  SpyProcs:	TYPE = ARRAY SpecialCommunication.SpyType OF  		       SpecialCommunication.SpyProc ¬ ALL[NIL]; 		             « ============================================================================= »	   ArpaBuffer:	TYPE = LONG POINTER TO ArpaTypes.BufferBody ¬ NIL;  NSBuffer:	TYPE = LONG POINTER TO NSTypes.BufferBody   ¬ NIL;  PupBuffer:	TYPE = LONG POINTER TO PupTypes.BufferBody  ¬ NIL;    SpyBuffer:	TYPE = RECORD [    SELECT	tag: * FROM      ns  =>	[ns: NSBuffer],      pup =>	[pup: PupBuffer],      arpa =>	[arpa: ArpaBuffer],    ENDCASE];        ConnHandle:	TYPE = LONG POINTER TO ConnObject ¬ NIL;  ConnObject:	TYPE = RECORD [    link:	ConnHandle ¬ NIL,    unique:	LONG CARDINAL ¬ 		LAST[LONG CARDINAL], -- ever increasing number (queue management)    state:	StreamState ¬ unconnected,  -- stream type connections    packets:	LONG CARDINAL ¬ 0,  -- number of packets seen on this connection    time:	System.Pulses ¬ [0],  --when last packet was seen on this connect    body:	SELECT type: ConnType FROM     spp =>	[       source,       destination:	System.NetworkAddress ¬ System.nullNetworkAddress,       sourceID,       destinationID:   NSTypes.ConnectionID ¬ [0],       socket:		System.SocketNumber ¬ firstWKS  -- wellknown socket       ],     tcp =>	[       source,       destination: 	ArpaTypes.InternetAddress ¬ [0, 0],       sourcePort,       destinationPort: ArpaTypes.Port ¬ [0]],     osi =>	[       source,       destination: 	LONG STRING ¬ NIL,       sourceRef,       destinationRef:  ISO8073Types.Reference ¬ 0],     ENDCASE];      -- Tool data structures     DataHandle:		TYPE = LONG POINTER TO Data ¬ NIL;   Data:		TYPE = RECORD [     flipperSW,     fileSW,     formSW,     optionsSW,					-- filter options      msgSW,     rbOptionsSW:	Window.Handle ¬ NIL,	-- ring buffer options      «--------------»      rbName:		LONG STRING ¬ NIL,	-- ring buffer file name     segment:		MSegment.Handle ¬ NIL,  -- ring buffer space     backingFile:	MFile.Handle ¬ NIL,	-- ring buffer backing file     fileCopy:		MFile.Handle ¬ NIL,	-- tool's copy of backing file     «--------------»     oldSpy:		SpecialCommunication.SpyProc ¬ NIL,     etherMissed:	LONG CARDINAL ¬ 0,	-- missed by driver (from Face)     spyTypes:		SpyProcs,     processor:		System.HostNumber ¬ System.nullHostNumber,     socket:		System.SocketNumber ¬ System.nullSocketNumber,		     globalLine:	LONG STRING ¬ NIL,     watcher:		PROCESS ¬ NIL,     running:		BOOLEAN ¬ FALSE,     ring:		Space.Interval ¬ Space.nullInterval, -- ring buffer     copyB:		LONG ORDERED POINTER TO Buffer.BufferObject ¬ NIL,     settablePacketLength:	NATURAL ¬ 0, -- user settable buffer length     defaultPacketLength:   NATURAL ¬ 0  -- default before we change it     ];        «  Ring:	TYPE = RECORD [      size:	Space.PageCount ¬ 0,		-- size includes data structure      firstA:	LONG ORDERED POINTER ¬ NIL,	-- first address in space          lastA:	LONG ORDERED POINTER ¬ NIL,	-- last address in space     firstB,					-- first logical buffer in ring     lastB:	LONG ORDERED POINTER TO		-- last logical buffer in ring     		Buffer.BufferObject ¬ NIL,     firstI:	CARDINAL ¬ 0,			-- index of first logical buffer     lastI:	CARDINAL ¬ 0,			-- index of last logical buffer     bytes:	LONG CARDINAL ¬ 0,		-- length of ring buffer data     currentOffset: LONG CARDINAL ¬ 0,		-- offset from when collected      originalBase: LONG ORDERED POINTER ¬ NIL	-- ring base when collected     ];  »      ParamHandle:		TYPE = LONG POINTER TO Params ¬ NIL;   Params:		TYPE = MACHINE DEPENDENT RECORD [     peekAddr(0):	LONG STRING ¬ NIL,	-- address being watched    lineLen(2):		CARDINAL ¬    			BufferDisplay.minLineLen, -- display line length     replayStart(3):	CARDINAL ¬ 0,	-- first buffered pkt to replay    replayStop(4):	CARDINAL ¬ 0,	-- last buffered pkt to replay    driver(5):		Mode ¬ etherToDisplay,	-- collection/display mode    flippers(6):	BOOLEAN ¬ TRUE,		-- turn on flippers    displayParams(7):	DisplayParms,		-- fields to display    format(13):		BufferDisplay.Format ¬ octal2, -- format mode of dump    incoming(14):	BOOLEAN ¬ TRUE,		-- watch incoming pkts    outgoing(15):	BOOLEAN ¬ TRUE,		-- watch outgoing pkts    all(16):		BOOLEAN ¬ FALSE,	-- include broadcast pkts    broadcasts(17):		BOOLEAN ¬ FALSE,	-- broadcast pkts only    raw(18):		BOOLEAN ¬ FALSE,	-- collect raw packets    allRaw(19):		BOOLEAN ¬ TRUE,		-- all raw packets    rawType(20):	CARDINAL ¬ rawValue,    ns(21):		BOOLEAN ¬ FALSE,	-- collect ns pkts    pup(22):		BOOLEAN ¬ FALSE,	-- collect pup pkts    arpa(23):		BOOLEAN ¬ FALSE,	-- collect arpa pkts    osi(24):		BOOLEAN ¬ FALSE,	-- collect osi pkts    timing(25):		Timing ¬ relative,	-- what's the most important    						-- thing in comedy?    level1Type(26):	Level1Packets,    nsType(30):		NSPackets,		-- level 2 ns to display    arpaType(43):	ArpaPackets,		-- level 2 arpa to display    osiType(63):        OsiPackets              -- level 2 osi to display    ];      QueueHandle:		TYPE = LONG POINTER TO QueueObject ¬ NIL;  QueueObject:		TYPE = RECORD [    link:		QueueHandle ¬ NIL,    packetLength:	CARDINAL ¬ NULL,    packet:		Buffer.Buffer ¬ NULL,    connection:		ConnHandle ¬ NIL    ];      -- Etherbooting  			   EtherBootingBody:	TYPE = RECORD [    type:		BootType ¬ private,    fileNumber:		System.HostNumber ¬ System.nullHostNumber,    body: SELECT tag: * FROM      simpleRequest => [],      simpleData => [sequence: CARDINAL],      streamRequest => [connection: CARDINAL],      ENDCASE      ];        -- Phonenet encapsulations  (includes to SIU)  PData:		TYPE = RECORD [    offset:		CARDINAL ¬ 0,		-- spare, not sent on wire    spare1,    spare2:		WORD,    pktType:		PPacketType ¬ ns,    LTA:		BOOLEAN ¬ FALSE,    reserved:		[0..127],    rest: SELECT tag: * FROM       a =>  [spare3,              spare4,	      spare5:	 WORD],       b =>  [immedDest: System.HostNumber],       ENDCASE       ];       			      Version1:		TYPE = RECORD [    offset:		CARDINAL ¬ 0,		-- spare, not sent on wire    framing0,    framing1,    framing2,    framing3:		Byte,    recognition:	Byte,  -- 0 for auto recognition of NS vs SDLC/HDLC    pnType:		PhonePacketType  ¬ LOOPHOLE [LAST[Byte]],    pnSrcID:		System.HostNumber ¬ System.nullHostNumber    ];    « ============================================================================= »    -- PROCS    CloseRBW:		FormSW.ProcType;  CloseOptions:		FormSW.ProcType;  MakeForm:		FormSW.ClientItemsProcType;  SetRB:		FormSW.NotifyProcType;  SaveRB:		FormSW.NotifyProcType;  StartCmd:		FormSW.ProcType;  StopCmd:		FormSW.ProcType;  ToggleFlippers:	FormSW.NotifyProcType;      DispatcherSpy:	SpecialCommunication.SpyProc;  -- dispatches to family spy  ArpaSpy:		SpecialCommunication.SpyProc;  OsiSpy:               SpecialCommunication.SpyProc;  NSSpy:		SpecialCommunication.SpyProc;  PupSpy:		SpecialCommunication.SpyProc;  RawSpy:		SpecialCommunication.SpyProc;    FlushPastState:	PROCEDURE;  Stop:			PROCEDURE;  z: UNCOUNTED ZONE;  --heap created by MataHariToolImpl      END..