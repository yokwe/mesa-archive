-- File: PlotToolImpl.mesa - last edit:-- AOF                 21-Apr-87 18:31:15-- Create by FormSWLayoutTool on 20-Apr-87 13:25-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.DIRECTORY  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, line0, ProcType],  GraphSW USING [AddPoint, Create, Graph],  GraphToolOps USING [Data, DataHandle, Pairs],  Heap USING [systemZone],  Runtime USING [GlobalFrame, SelfDestruct],  Tool USING [Create, Destroy, MakeFormSW, MakeSWsProc],  ToolWindow USING [TransitionProcType],  Window USING [Handle];PlotToolImpl: PROGRAM  IMPORTS    FormSW, GraphSW, Heap, Runtime, Tool  EXPORTS GraphToolOps = {  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    graphSW(0): Window.Handle ¬ NIL,    formSW(2): Window.Handle ¬ NIL,    fileSW(4): Window.Handle ¬ NIL];  FormItems: TYPE = {hardcopy, destroy};  nude: PROGRAM ¬ NIL;  tool: DataHandle ¬ NIL;  wh: Window.Handle ¬ NIL;  dataPairs: GraphToolOps.Pairs ¬ NIL;  parentData: GraphToolOps.DataHandle ¬ NIL;  zone: UNCOUNTED ZONE = Heap.systemZone;  initialize: PROC[pairs: GraphToolOps.Pairs, data: GraphToolOps.DataHandle];  Hardcopy:  FormSW.ProcType =    BEGIN    END;  --Hardcopy  Destroy:  FormSW.ProcType =    BEGIN    Tool.Destroy[wh];  --that gets rid of the pictures    zone.FREE[@dataPairs.BASE];    IF Runtime.GlobalFrame[LOOPHOLE[Destroy]] # nude THEN      Runtime.SelfDestruct[] ELSE nude ¬ NIL;    END;  --Destroy  ClientTransition: ToolWindow.TransitionProcType = {    SELECT TRUE FROM      old = inactive =>        IF tool = NIL THEN tool ¬ zone.NEW[Data ¬ []];      new = inactive =>        IF tool # NIL THEN {zone.FREE[@tool]};      ENDCASE;    };  CreateGraph: PUBLIC <<GraphToolOps>> PROC[    pairs: GraphToolOps.Pairs, data: GraphToolOps.DataHandle] =    BEGIN    IF nude = NIL THEN {nude ¬ PlotToolImpl; Init[pairs, data]}    ELSE      BEGIN      instance: LONG POINTER TO FRAME[PlotToolImpl] ¬ NEW PlotToolImpl;      START instance;  --so we can get the procedure variable init'd      instance.initialize[pairs, data];      END;     END;  --CreateGraph  Init: PROC[pairs: GraphToolOps.Pairs, data: GraphToolOps.DataHandle] = {    dataPairs ¬ pairs;  --copy the data into the local structure    parentData ¬ data;  --and a pointer to the parent data block    wh ¬ Tool.Create[      makeSWsProc: MakeSWs, initialState: default,      clientTransition: ClientTransition, name: parentData.title];    };      MakeSWs: Tool.MakeSWsProc = {    graph: ARRAY [0..1) OF GraphSW.Graph;    minx, miny: LONG INTEGER ¬ LAST[LONG INTEGER];    maxx, maxy: LONG INTEGER ¬ FIRST[LONG INTEGER];    FOR i: NATURAL IN[0..LENGTH[dataPairs]) DO      IF dataPairs[i].x < minx THEN minx ¬ dataPairs[i].x;      IF dataPairs[i].x > maxx THEN maxx ¬ dataPairs[i].x;      IF dataPairs[i].y < miny THEN miny ¬ dataPairs[i].y;      IF dataPairs[i].y > maxy THEN maxy ¬ dataPairs[i].y;      ENDLOOP;    graph ¬ [[      tag: parentData.title,      dataPoints: LENGTH[dataPairs],      xAxis: [parentData.labelx, minx, maxx],      yAxis: [parentData.labely, miny, maxy],      origin: [minx, miny]]];    tool.graphSW ¬ GraphSW.Create[      parent: window, formSW: FALSE, graphs: DESCRIPTOR[graph]];    tool.formSW ¬ Tool.MakeFormSW[      window: window, formProc: MakeForm, zone: zone];    FOR i: NATURAL IN[0..LENGTH[dataPairs]) DO      GraphSW.AddPoint[tool.graphSW, 0, dataPairs[i]]; ENDLOOP;    };  MakeForm: FormSW.ClientItemsProcType = {    nItems: CARDINAL = FormItems.LAST.ORD + 1;    items ¬ FormSW.AllocateItemDescriptor[nItems, zone];    items[FormItems.hardcopy.ORD] ¬ FormSW.CommandItem[      tag: "Hardcopy"L, place: [6, FormSW.line0], proc: Hardcopy, z: zone];    items[FormItems.destroy.ORD] ¬ FormSW.CommandItem[      tag: "Destroy"L, place: [60, FormSW.line0], proc: Destroy, z: zone];    RETURN[items: items, freeDesc: TRUE];    };  -- Mainline code  initialize ¬ Init;  --so we can call the sucker when he's naked  }...    