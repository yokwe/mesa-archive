-- File: XferProtocol.mesa - last edit:-- AOF                 23-Oct-87  8:07:48-- Copyright (C) 1986, 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Courier USING [Description, Handle],  MFile USING [Type],  NetworkStreamInternal USING [CloseState],  PacketStream USING [Handle],  Stream USING [Handle],  System USING [NetworkAddress],  Window USING [Handle];XferProtocol: DEFINITIONS = {  program: LONG CARDINAL = LAST[CARDINAL];  versionLow: CARDINAL = 2;  versionHigh: CARDINAL = 2;  Procedure: TYPE = {store, fetch, list, delete, commit, xfer};  Error: TYPE = {busy, nofile, nospace};  Transport: TYPE = RECORD[    address: System.NetworkAddress,  --well known between these two    source, sink: DeviceType ¬ devnull,  --where bits come/go    type: TransportType ¬ packetstream,  --class of transport    window: CARDINAL ¬ 5,  --packets in an allocation window    frame: CARDINAL ¬ 576,  --bytes at network layer    checksums: BOOLEAN ¬ TRUE];  --should we, do we?  DeviceType: TYPE = MACHINE DEPENDENT{    (FIRST[CARDINAL]),    devnull, rigidDisk, floppyDisk, magtape, dt0, dt1, dt2, dt3,    (LAST[CARDINAL])};  TransportType: TYPE = MACHINE DEPENDENT{    (FIRST[CARDINAL]),    packetstream, bulkdata, exchange, netblt, message, tt0, tt1, tt2, tt3,    (LAST[CARDINAL])};  CommitArguments: TYPE = RECORD[    address: System.NetworkAddress, status: CommitCommand,    length: LONG CARDINAL, type: MFile.Type,    create, write, read: LONG CARDINAL];  CommitResults: TYPE = RECORD[status: CommitReturn];  CommitCommand: TYPE = CommitStatus[commit..decommit];  CommitReturn: TYPE = CommitStatus[okay..error];  CommitStatus: TYPE = MACHINE DEPENDENT{    (FIRST[CARDINAL]), idle, busy, okay, error, commit,    decommit, (LAST[CARDINAL])};  DescribeCommitArguments: Courier.Description;  DescribeCommitResults: Courier.Description;  StoreArguments: TYPE = RECORD[    name: LONG STRING, length: LONG CARDINAL, transport: Transport];  StoreResults: TYPE = RECORD[address: System.NetworkAddress];  DescribeStoreArguments: Courier.Description;  DescribeStoreResults: Courier.Description;  FetchArguments: TYPE = RECORD[name: LONG STRING, transport: Transport];  FetchResults: TYPE = RECORD[    length: LONG CARDINAL, type: MFile.Type,    create, write, read: LONG CARDINAL,    address: System.NetworkAddress];  DescribeFetchArguments: Courier.Description;  DescribeFetchResults: Courier.Description;  PacketStreamFromCourier: PROC[cH: Courier.Handle]    RETURNS[psH: PacketStream.Handle];  ClosePacketStream: PROC[    psH: PacketStream.Handle, state: NetworkStreamInternal.CloseState];  DevNull: PROC[    buffsize: CARDINAL, filesize: LONG CARDINAL, zone: UNCOUNTED ZONE]    RETURNS[Stream.Handle];  StartServer: PROC[zone: UNCOUNTED ZONE] RETURNS[Window.Handle];  }...    