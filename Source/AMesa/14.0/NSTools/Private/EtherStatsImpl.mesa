-- File: EtherStatsImpl.mesa - last edit:-- AOF                 19-Jul-87 13:50:49-- Create by FormSWLayoutTool on 15-Oct-85 11:22-- Copyright (C) 1985, 1986, 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Ascii USING [CR],  Driver USING [Device, GetDeviceChain],  EthernetDriver USING [etherStats],  EthernetDriverFriends USING [EtherStatsInfo, GetEthernetStats],  Exec USING [AddCommand, ExecProc, Handle, RemoveCommand],  Format USING [LongDecimal, StringProc],  Flipper USING [ClearCounts, Create, Enumerated],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, line0, ProcType],  Heap USING [systemZone],  Put USING [Text],  Runtime USING [GlobalFrame],  Time USING [AppendCurrent],  Tool USING [    Create, Destroy, MakeFileSW, MakeFormSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [TransitionProcType],  Window USING [Box, Handle],  WindowFont USING [CharWidth];EtherStatsImpl: PROGRAM  IMPORTS    Driver, Exec, EthernetDriverFriends, Flipper, Format, FormSW, Heap, Put,    Runtime, Time, Tool, WindowFont  SHARES EthernetDriver = {  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    flipperSW(0): Window.Handle ¬ NIL,    formSW(2): Window.Handle ¬ NIL,    fileSW(4): Window.Handle ¬ NIL];  FormItems: TYPE = {clearCounters, logCounters};  data: DataHandle ¬ NIL;  wh: Window.Handle ¬ NIL;  zone: UNCOUNTED ZONE ¬ Heap.systemZone;  charWidth: CARDINAL = WindowFont.CharWidth['0];  box: Window.Box = [place:[x:0, y:326], dims:[w:572, h:416]];  CharPos: PROC[char: CARDINAL] RETURNS [x: INTEGER] = {x ¬ charWidth * char};  Write: Format.StringProc = {Put.Text[data.fileSW, s]};  ClearCounters:  FormSW.ProcType = {Flipper.ClearCounts[data.flipperSW]};  LogCounters:  FormSW.ProcType =    BEGIN    time: LONG STRING ¬ [40];    statsArray: EthernetDriverFriends.EtherStatsInfo;    lp: POINTER TO ARRAY NATURAL[0..21) OF LONG CARDINAL;    stats: ARRAY NATURAL[0..34) OF STRING ¬ [      "pktsRecv"L, "wordsRecv"L, "pktsMissed"L, "badRecv"L, "dribble"L,      "badCrc"L, "alignButOk"L, "alignAndBad"L, "tooLong"L, "overrun"L,      "idleInput"L, "pktsSent"L, "wordsSent"L, "badSend"L, "collisions"L,      "lateCol"L, "underrun"L, "stuckOutput"L, "1-tries"L, "2-tries"L,      "3-tries"L, "4-tries"L, "5-tries"L, "6-tries"L, "7-tries"L,      "8-tries"L, "9-tries"L, "A-tries"L, "B-tries"L, "C-tries"L,      "D-tries"L, "E-tries"L, "F-tries"L, "*-tries"L];    time[0] ¬ Ascii.CR; time.length ¬ SUCC[time.length];  --append byte!    Time.AppendCurrent[time];    time[time.length] ¬ Ascii.CR; time.length ¬ SUCC[time.length]; --append byte!    Write[time];  --get that out there    lp ¬ LOOPHOLE[@statsArray];    statsArray ¬ EthernetDriverFriends.GetEthernetStats[1];    FOR i: NATURAL IN[0..LENGTH[stats]) DO      Write[stats[i]];      Write[": "L];      Format.LongDecimal[Write, lp[i]];      IF i < (LENGTH[stats] - 1) THEN Write[", "L];      ENDLOOP;    Write["\n"L];    END;  --LogCounters  ClientTransition: ToolWindow.TransitionProcType = {    SELECT TRUE FROM      old = inactive =>        IF data = NIL THEN data ¬ zone.NEW[Data ¬ []];      new = inactive =>        IF data # NIL THEN {	  zone.FREE[@data]};      ENDCASE;    };  Init: PROCEDURE = {    Exec.AddCommand["EtherStats.~"L, NoOp, NIL, Unload];    wh ¬ Tool.Create[      makeSWsProc: MakeSWs, initialState: default, initialBox: box,      clientTransition: ClientTransition, name: "EtherStats"L,      cmSection: "EtherStats"L];    };      NoOp: Exec.ExecProc = { };    Unload: Exec.ExecProc = {    Tool.Destroy[wh]; Exec.RemoveCommand[h, "EtherStats.~"L]};  MakeSWs: Tool.MakeSWsProc = {    logName: LONG STRING ¬ [40];    gf: LONG POINTER TO FRAME[EthernetDriver];    lp: LONG POINTER TO ARRAY[0..34) OF LONG CARDINAL;    device: Driver.Device = Driver.GetDeviceChain[];    stats: ARRAY CARDINAL[0..34) OF Flipper.Enumerated ¬ [      [tag: "pktsRecv"L, count: ],      [tag: "wordsRecv"L, count: ],      [tag: "pktsMissed"L, count: ],      [tag: "badRecv"L, count: ],      [tag: "dribble"L, count: ],      [tag: "badCrc"L, count: ],      [tag: "alignButOk"L, count: ],      [tag: "alignAndBad"L, count: ],      [tag: "tooLong"L, count: ],      [tag: "overrun"L, count: ],      [tag: "idleInput"L, count: ],      [tag: "pktsSent"L, count: ],      [tag: "wordsSent"L, count: ],      [tag: "badSend"L, count: ],      [tag: "collisions"L, count: ],      [tag: "lateCol"L, count: ],      [tag: "underrun"L, count: ],      [tag: "stuckOutput"L, count: ],      [tag: "1-tries"L, count: ],      [tag: "2-tries"L, count: ],      [tag: "3-tries"L, count: ],      [tag: "4-tries"L, count: ],      [tag: "5-tries"L, count: ],      [tag: "6-tries"L, count: ],      [tag: "7-tries"L, count: ],      [tag: "8-tries"L, count: ],      [tag: "9-tries"L, count: ],      [tag: "A-tries"L, count: ],      [tag: "B-tries"L, count: ],      [tag: "C-tries"L, count: ],      [tag: "D-tries"L, count: ],      [tag: "E-tries"L, count: ],      [tag: "F-tries"L, count: ],      [tag: "*-tries"L, count: ]];    gf ¬ LOOPHOLE[Runtime.GlobalFrame[LOOPHOLE[device.activateDriver]]];    Tool.UnusedLogName[unused: logName, root: "EtherStats.log"L];    lp ¬ LOOPHOLE[@gf.etherStats];    FOR i: CARDINAL IN[0..LENGTH[stats]) DO      stats[i].count ¬ @lp[i]; ENDLOOP;    data.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeForm];    data.flipperSW ¬ Flipper.Create[parent: window, flippers: DESCRIPTOR[stats]];    data.fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    };  MakeForm: FormSW.ClientItemsProcType = {    OPEN FormSW;    nItems: CARDINAL = FormItems.LAST.ORD + 1;    items ¬ AllocateItemDescriptor[nItems];    items[FormItems.clearCounters.ORD] ¬ CommandItem[      tag: "Clear counters"L, place: [CharPos[0], line0], proc: ClearCounters];    items[FormItems.logCounters.ORD] ¬ CommandItem[      tag: "Log counters"L, place: [CharPos[20], line0], proc: LogCounters];    RETURN[items: items, freeDesc: TRUE];    };  -- Mainline code  Init[];  -- this gets string out of global frame  }...  