-- Copyright (C) 1982, 1986  by Xerox Corporation. All rights reserved. -- file Pass3.Mesa-- last modified by Satterthwaite, September 7, 1982 1:00 pm-- last modified by Sweet, 19-Oct-82 11:43:37-- Wagner		22-Aug-86 14:02:54DIRECTORY  ComData USING [    importCtx, moduleCtx, monitored, outerCtx, ownSymbols, stopping, textIndex, zone],  CompilerUtil: TYPE USING [],  Copier USING [    CopierInit, CopierReset, CopyingInline, FileProblem, FileVersion,     FileVersionMix, TableRelocated],  CLog USING [ErrorHti, WarningTree],  P3 USING [    Pass3BInit, Pass3DInit, Pass3MInit, Pass3SInit, Pass3TInit, Pass3VInit,     Pass3XaInit, Pass3XbInit, Pass3XcInit, Pass3IInit, ExpReset, IdReset,    BodyList, DeclList, Header, PopCtx, PushCtx],  SymLiteralOps USING [Reset],  Symbols USING [CSEIndex, CSENull, RootBti],  SymbolTable USING [Handle],  Tree USING [Base, Link, Index, NullIndex],  TreeOps USING [Map, GetNode, DecodeCard];Pass3: PROGRAM    IMPORTS      Copier, CLog, P3, SymLiteralOps, TreeOps,      dataPtr: ComData    EXPORTS CompilerUtil = PUBLIC {  OPEN TreeOps;  syms: SymbolTable.Handle ¬ NIL;  lockNode: Tree.Index;			-- lambda expr for monitor lock  checkedANY: Symbols.CSEIndex;		-- typeANY in CHECKED code    -- overall control  P3Unit: TreeOps.Map = {    node: Tree.Index;    saveIndex: CARDINAL = dataPtr.textIndex;    checkedANY ¬ Symbols.CSENull;    syms ¬ dataPtr.ownSymbols;    node ¬ GetNode[syms, t];    dataPtr.textIndex ¬ DecodeCard[syms.tb[node].info];    Copier.CopierInit[syms];    P3.Pass3BInit[syms];   P3.Pass3DInit[syms];   P3.Pass3MInit[syms];    P3.Pass3SInit[syms];   P3.Pass3TInit[syms];   P3.Pass3VInit[syms];    P3.Pass3XaInit[syms];  P3.Pass3XcInit[syms];      P3.Pass3XbInit[syms, dataPtr.zone];  P3.Pass3IInit[syms, dataPtr.zone];          BEGIN      ENABLE {	Copier.FileProblem => {CLog.ErrorHti[fileName, hti]; RESUME [TRUE]};	Copier.FileVersion => {CLog.ErrorHti[fileWrong, hti]; RESUME [TRUE]};	Copier.FileVersionMix => {	  CLog.WarningTree[fileVersion, [hash[index: hti]]]; RESUME};	Copier.TableRelocated => {RESUME};	Copier.CopyingInline => {RESUME}};      dataPtr.stopping ¬ FALSE;      P3.Header[node];      P3.PushCtx[dataPtr.outerCtx];  P3.PushCtx[dataPtr.moduleCtx];      P3.PushCtx[dataPtr.importCtx];      lockNode ¬ IF ~dataPtr.monitored THEN Tree.NullIndex         ELSE GetNode[syms, syms.tb[node].son[5]];      P3.DeclList[syms, syms.tb[node].son[6]];      P3.BodyList[Symbols.RootBti];      P3.PopCtx[];	-- import context      P3.PopCtx[];  P3.PopCtx[];      P3.IdReset[syms, syms.tb[node].son[1]];  P3.ExpReset[];      END;    Copier.CopierReset[syms];  SymLiteralOps.Reset[];    dataPtr.textIndex ¬ saveIndex;    RETURN [t]};  }.