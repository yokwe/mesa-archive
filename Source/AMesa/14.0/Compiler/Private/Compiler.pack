-- Compiler.pack--   Edited by Sweet,  18-Apr-84 10:40:33--   Edited by JGS,    14-Jan-82 11:53:00--   Edited by SHayes, 29-Aug-81 17:18:01--   Edited by Lewis,  13-Oct-81 10:07:23--   MEW		23-Aug-86 10:13:48S1: SEGMENT =  BEGIN    P1Code: CODE PACK = {P1;  MesaTab};    P2Code: CODE PACK = {Pass2};    END;  S2: SEGMENT =  BEGIN     P3CPEV: CODE PACK = {     Pass3 [EV];     Pass3B [EV];     Pass3D [EV];     Pass3I [EV];     Pass3M [EV];     Pass3S [EV];     Pass3T [EV];     Pass3V [EV];     Pass3Xa [EV];     Pass3Xb [EV];     Pass3Xc [EV];     --SymbolCopierA [EV];     --SymbolCopierB [EV]     };   P3CP0: CODE PACK = {      Pass3I[CompleteRecord];      Pass3S[Case];      Pass3T[TargetType];      Pass3Xa[        Apply, Assignment, CheckLength, ContextComplete, Dot, DotExpr,	KeyedList, MatchFields];      Pass3Xb[Exp, RAttr, RPop, RPush, RType, RelOp];      Pass3Xc[GenericRhs, OperandInternal, Rhs];      };         P3CP1: CODE PACK = {      Pass3I[        BumpCount, CheckRestrictedCtx, ConstResolved, FieldId,	FindSe, Id, RecordMention, ResolveIdValue, SearchCtxList, SearchRecord,	SearchRecordSegment, SearchRestrictedCtx];      };         P3CP2: CODE PACK = {      Pass3D[        CheckTypeId, DeclA, DeclBInit, InitialExp, TypeForTree, TypeLink,	TypeSymbol];      Pass3I[ClearRefStack];      Pass3S[Stmt];      Pass3Xa[Construct, Extract];      Pass3Xb[AttrClass, BalanceAttributes, CheckNonVoid];      };         P3CP3: CODE PACK = {      Pass3D[DeclBDefault, DefineSeType, DefineSeValue, ItemId, RecordDeclInit];      Pass3I[ImportSe, RecordLhs, TopCtx];      Pass3T[MakeLongType];      Pass3Xa[CheckInline];      Pass3Xc[Addr, OperandLhs, BoolOp];      --SymbolCopierA[      --  CacheType, CopyCtxSe, CopyCtxSeInfo, CopyIncludedSymbol,      --  CopyNonCtxSe, IncludedTargets, MapCtx, MapHti, CloseIncludedTable,      --  OpenIncludedTable, SearchFileCtx]      };         P3CP5: CODE PACK = {      Pass3D[PopArgCtx, PushArgCtx, TypeAttr];      Pass3I[PopCtx, PushCtx];      Pass3S[Body, BodyList, DoStmt, PopArgCtx, PushArgCtx, SetArgRefs];      Pass3T[Bundling, DefaultInit, Unbundle];      };         P3CP6: CODE PACK = {      Pass3B[IncludedIds];      Pass3D[ArgAttr, CheckPositions, CollectAttrs, DefaultExp];      Pass3I[ArrangeKeys, CheckDisjoint, UpdateTreeAttr];      Pass3S[SelectStmt];      Pass3T[AssignableType, Voidable];      Pass3Xa[FieldDefault];      Pass3Xb[BalanceTypes, ForceType];      };   P3CP7: CODE PACK = {      Pass3B[ImportItem];      Pass3D[DeclList];      Pass3I[UnsealRefStack];      Pass3S[Return, Scope];      Pass3T[IdentifiedType];      Pass3Xb[ArithType, EvalNumeric, Minus, OperandType, Plus];      Pass3Xc[OperandInline, WritableRef];      --SymbolCopierA[FillModule];      };   P3CP8: CODE PACK = {      Pass3D[ProcessDefault];      Pass3I[MoveSe];      Pass3M[CatchPhrase, MiscStmt];      Pass3S[AssignDefaults];      Pass3T[Default];      Pass3Xb[Interval, Lengthen];      --SymbolCopierA[CopyCtxEntries, Delink];      --SymbolCopierB[CopyExtension, InputExtension];      };   P3CP9: CODE PACK = {      Pass3B[GetSe];      Pass3D[DefineTypeSe, UpdateHints];      Pass3I[BindTree];      Pass3S[BumpArgRefs, ImpliedReturn];      Pass3T[NullableType];      Pass3V[Discrimination];      Pass3Xa[Dereference];      Pass3Xb[ArithOp];      --SymbolCopierA[CopyIncludedValues, ResetCtx, ResetIncludeContexts];      };   P3CP10: CODE PACK = {      Pass3D[ResolveType, ResolveValue, TypeExp];      Pass3I[SealRefStack];      Pass3T[CanonicalType, OrderedType, VoidItem];      Pass3Xb[IfExp, In, MinMax, SetAttributes];      Pass3Xc[BalancedRhs];      --SymbolCopierA[InverseMapHti];      };   P3CP11: CODE PACK = {      Pass3B[DirectoryScan];      Pass3I[EnterIdList];      Pass3M[PopArgCtx, PushArgCtx];      Pass3S[DeleteLabels, InsertLabels];      Pass3T[MakeRefType];      Pass3V[        ConsType, DiscriminatedType, SequenceField, UnionField, VariantUnionType];      };   P3CP12: CODE PACK = {      Pass3D[FirstId, MergeVariantAttrs];      Pass3I[SearchOverlays];      Pass3M[ForceApplication, Signal];      Pass3S[LabelList, ValidateLabel];      Pass3V[BindTest];      Pass3Xa[PadList, PopKeyList, RowCons];      --SymbolCopierA[CompleteContext, FillContext];      };   P3CP13: CODE PACK = { -- merged 13-17      Pass3B[        Directory, ImportType, SetDefaultImport,	ExportItem, ImportInstance, NewImportedCtx, Sharing];      Pass3D[AssignedEnumeration,	AssignedPositions,	Pass3DInit,	TagValue, TypeAppl, VariantList];      Pass3I[        BaseTree, DeRef, OpenBase, OpenPointer, PushRecordCtx, CloseBase,	DefaultImport, Pass3IInit, MakeIdTable, PushHtCtx];      Pass3M[        AllocFrameRecord, MakeFrameRecord, Pass3MInit, XferBody,	EvalZone, MiscXfer, New];      Pass3S[CloseItem, SetBodyAttrs,	OpenItem,	Pass3SInit];      Pass3T[IndexType,	Pass3TInit];      Pass3Xa[All,	Pass3XaInit];      Pass3Xb[BalancedTarget, EndPoint, SelectExp, Pass3XbInit];      Pass3Xc[CtxLast, Span, StripRelative, Length];      Pass3[P3Unit];      --SymbolCopierA[CopierInit, CopierReset,      -- CopyBodyType, CopyContext, CopyIncludedBody,      -- CopyUnion, CtxFirst, CtxNext, InverseMapCtx, TokenHash, TokenValue]      };         P3CPRemainder: CODE PACK = {     EXCEPT [EV];      Pass3 EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3B EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3D EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3I EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3M EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3S EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3T EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3V EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3Xa EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3Xb EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      Pass3Xc EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      --SymbolCopierA EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      --SymbolCopierB EXCEPT  P3CP0, P3CP1, P3CP2, P3CP3, P3CP5, P3CP6, P3CP7, P3CP8, P3CP9, P3CP10, P3CP11, P3CP12, P3CP13;      };  Pass3P;  Pass3POps;  END;  S3: SEGMENT =  BEGIN  P4Code: CODE PACK = {P4};  Cold: CODE PACK = {Debug;  DebugTab};  END;  S4: SEGMENT =  BEGIN  UtilCode: CODE PACK = {    EXCEPT [MAIN];    OSMiscOpsImpl;    --SymbolPack;    --SymbolPackExt;    SymLiteralPack;    --SymbolCache;    --TreePack;    --LiteralPack;    --TypePack;    --FilePack;    ObjectOut;    Sequencer;    ComData;    Interface; };    Errors: CODE PACK = {EXCEPT [MAIN]; LogPack; ErrorTab};  IeeePack EXCEPT [MAIN];  S4InitCode: CODE PACK = {MAIN OF S4};  END;  S5: SEGMENT =  BEGIN    P5CPEV: CODE PACK = {EV OF S5};    P5CP0: CODE PACK = {      CgenUtil[        AllocCodeCCItem, CCellAlloc, CreateLabel, DeleteCell, FreeChunk,	GetChunk, LabelAlloc, LinkCCItem, Out0, Out1, Out2, Out3, OutJump,	OutSource, OutLocalCall, ParamCount];      Driver[ProcBody, CATCH];      StackImpl[        Above, Check, Decr, DelStackItem, Depth, Incr, Load, LoadToDepth, Loc,	Mark, Top];      Statement[IfStmt, StatementTree];      Temp[PurgeHeapList, PurgePendTempList, PushHeapList];      VarMove[StoreComponent];      VarUtils[GenVarItem, OVarItem, TOSLex];      };   P5CP1: CODE PACK = {      Calls[CallExp];      CgenUtil[LongTreeAddress, TreeLiteral];      Constructor[ConsAssign, LoadPointer];      Expression[        Dollar, DotOrUparrow, Exp, Minus, MwConst, Plus, PushRhs, SPushLex,	SPushRhs, LPushRhs, LPushLex, UMinus];      Flow[FlowIn, FlowTree, SFRel, VarVarComp];      FlowExpression[Lengthen];      StackImpl[Also];      SelectionCode[CaseStmtExp];      Store[Assign, ComAssign, ProbablyDumpStack];      VarBasics[LoadBoth, MakeComponent, VarVarAssign, Words];      VarMove[LoadComponent, LoadVar, MoveBo, MoveInd, StoreVar];      VarUtils[        AdjustComponent, AllLoaded, ComponentForLex, ComponentForSE,	ReleaseReally, ReleaseVarItem, TOSComponent, VarAlignment, VarForLex];      };   P5CP2: CODE PACK = {      Address[Index, SeqIndex];      Calls[        BuildArgRecord, Call, CallCatch, ConstructOnStack,	PushParms, SCall, SSigErr, SysCall];      CgenUtil[        BitsForOperand, BitsForType, FieldAddress, FullWordBits, Monitor,	NextVar, OperandType, PrevVar, ReferentType, UnMonitor,	WordAligned, WordsForSei];      Constructor[MainConstruct];      Driver[PopInVals, PushRetVals, SPopInVals];      Flow[ExplicitJump, Label];      FlowExpression[FlowExp, IfExp];      StackImpl[Dump, Pop];      Statement[Block, EnterBlock, ExitBlock];      Store[Extract, ExtractFrom];      VarUtils[CopyToTemp, FieldOfComponent, ModComponent, NormalizeExp];      };   P5CP3: CODE PACK = {      Calls[PRetLex];      CgenUtil[BeginCatch, EndCatch, NewEnableItem, OutEnableMark, PushLitVal];      Driver[InsertRetLabels];      FlowExpression[CMinMax];      StackImpl[DeleteToMark, Reset, ResetToMark];      Statement[DoStmt];      };   P5CP4: CODE PACK = {      Address[CheckAdditivity];      Calls[SigErr];      CgenUtil[ComputeFrameSize, WordsForOperand, MarkedType, VariantTag];      Constructor[ConstructCountDown, GetPointer];      Driver[        Body, CommonRet, Return, SReturn, SSubst, SetLock, ReleaseLock,	Resume, Lock];      Expression[Addr, PushLex, Times];      Flow[CatchMark, MakeExitLabel, PushLabel];      FlowExpression[Rel];      StackImpl[Off, On, RoomFor];      Statement[CatchPhrase, SCatchPhrase];      SelectionCode EXCEPT P5CP1, [MAIN, EV, SelectionNotify];      Store[SAssign];      Temp[PushStatementState];      VarBasics[AddrForVar];      VarMove[MoveBdo];      VarUtils[FieldOfComponentOnly, FieldOfVar, FieldOfVarOnly, LongVarAddress];      };   P5CP5: CODE PACK = {      Address[ScaleComponent];      Calls[CodeInline, Free];      CgenUtil[RecordConstant, TreeLiteralValue, WordsForString, LongLiteralValue, TreeLiteralDesc];      Constructor[        Construct, ConstructExp, CountDups, New, Row, SetConsDest, UnionConstruct];      Driver[SubstExp];      Expression[Div, Mod];      Flow[        Continue, Exit, FindLabel, GetLabelMark, GoTo, LabelList,	ObscureLabels, PopLabels];      FlowExpression[CAnd, Min];      StackImpl[Clear, New, Restore, UnMark];      Statement[Enable];      Store[AssignExp, StringInit];      Temp[PopTempState];      VarBasics[AddrComponent, GenAdd, LoadAddress, LoadSum, MakeBo];      VarUtils[NormalLex, VarStackWords];      };   P5CP6: CODE PACK = {      Calls[SysError];      CgenUtil[EnumerateCaseArms, MakeTreeLiteral, MakeLongTreeLiteral];      Constructor[RowCons];      Expression[ConstOperand];      Flow[Zero];      FlowExpression[Max, Not];      StackImpl[        KeepOnly, LoadItem, MoveToTemp, Prefix, Require, Store, StoreItems,	StoreWord, TempStore];      Temp[        BumpTemps, CreateTempLex, FreeTempSei, GenAnonLex, GenStringBodyLex,	GenTempLex, PopStatementState, PushTempState, ReleaseTempLex,	ReleaseTempSei];      VarBasics[BaseComponent, GenShift];      VarUtils[        CopyLex, CopyVarItem, EasilyLoadable, EasyToLoad, ReusableCopies,	StackSpareAddr, StackSpareLoad];      };   P5CP7: CODE PACK = {      Address[AddressNotify, UnscaleComponent];      Calls[CallsNotify];      CgenUtil[CgenUtilInit, CgenUtilNotify, TypeForTree, MAIN];      Code EXCEPT[EV];      Constructor[ConstructorNotify, DumpPointer, VanillaCons];      CountingImpl[CountingNotify];      Driver[DriverNotify, Module, Subst, MAIN];      Expression[ExpressionNotify, Log2];      Flow[FlowNotify];      FlowExpression[FlowExpressionNotify];      StackImpl[Init, StackImplNotify];      Statement[Open, StatementNotify];      SelectionCode[SelectionNotify, MAIN];      Store[StoreNotify];      Temp[TempInit, TempNotify];      VarBasics[VarBasicsNotify];      VarMove[VarMoveNotify, MAIN];      VarUtils[ReleaseLex, TOSAddrLex, VarFinal, VarUtilsNotify];      };   P5RemainderFront: CODE PACK = {     EXCEPT [EV];--   EXCEPT [MAIN];   Address EXCEPT  P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Calls EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Constructor EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   CountingImpl EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Expression EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Flow EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   FlowExpression EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   StackImpl EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Statement EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Store EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   Temp EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   VarBasics EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   VarUtils EXCEPT P5CP0, P5CP1, P5CP2, P5CP3, P5CP4, P5CP5, P5CP6, P5CP7;   };  END;  S5b: SEGMENT =  BEGIN    P5bCPEV: CODE PACK = {EV OF S5b};     P5bCP0: CODE PACK = {      CrossJump[        CPass5, CrossJumpIt, EqualInst, Executable, FirstItem, FunnyUCjump,	NextItem];      FOpTable EXCEPT [EV];      Final[CPass1, CPass2, CPass3, CPass4, CPass7, DotPlusOneJump, Fixup, UCjump];      OpTable[InstAligned, InstLength];      OutCode[NewFgtEntry, OutBinary, OutChunks, OutJumpTables, WriteCodeByte];      PeepholeA EXCEPT [EV, PeepholeANotify];      PeepholeQ[        Peep0, Peep3, Peep4, Peep5, Peep5a, Peep8, Peep9,	Peep11, Peep13, PeepHole];      PeepholeU[        C0, C1, CondFillInC, InitJParametersBC, InitParameters, InstParamCount,	LoadConstant, NextInteresting, PeepAllocCodeCCItem, PrevInteresting,	SlidePeepState1, SlidePeepState2];      PeepholeZ[MakeLPReal, MakeReal, MoveVar, PeepZ];      };   P5bCP2: CODE PACK = {      OutCode[DelinkCatch, MoveToCodeWord, OutputCatchBodies, OutputCatchTables,      ProcessLocalStrings, RemoveCatchCode];      PeepholeU[PackPair];      };   P5bCP3: CODE PACK = {      DJumps[BindJumpDStar, CodeJumpDStar];      Final[CPass0, CPass8, DeleteJump, DeleteLabel, Removeablejump, UnthreadJump];      PeepholeU[SetRealInst];      PeepholeZ[Move];      };   P5bCP4: CODE PACK = {      Final[CPass9, CPass10];      OutCode[BLTStrings, WriteCodeWord];      PeepholeQ[Popable, RemoveThisPop];      PeepholeU[C1W, C2, Delete2, UnpackFD];      };   P5bCP5: CODE PACK = {      DJumps[FillInPCEstimatesDStar];      Final[FillInPC];      };   P5bCP6: CODE PACK = {      OutCode[ProcessGlobalStrings, WriteCodeString];      PeepholeQ[IsLoad];      };   P5bCP7: CODE PACK = {      CrossJump[CrossJumpNotify];      DJumps[DJumpsNotify];      Final[FinalNotify];      OutCode[EndCodeFile, OutCodeNotify, StartCodeFile];      PeepholeA[PeepholeANotify];      PeepholeQ[Log2, PeepholeNotify];      PeepholeU[PeepholeUNotify];      PeepholeZ[PeepholeZNotify];      };   P5RemainderBack: CODE PACK = {     EXCEPT [EV];--   EXCEPT [MAIN];   OpTable EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   OutCode EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   PeepholeQ EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   PeepholeU EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   PeepholeZ EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   DJumps EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   CrossJump EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   Final EXCEPT P5bCP0, P5bCP2, P5bCP3, P5bCP4, P5bCP5, P5bCP6, P5bCP7;   };--  P5InitCode: CODE PACK = {MAIN OF S5b};  END;  -- Frame packs  P12Frames: FRAME PACK = {P1; Pass2};  P34Frames: FRAME PACK = {P3; Pass3P; Pass3POps; P4};  P5Frames: FRAME PACK = {P5};  UtilFrames: FRAME PACK = {    OSMiscOpsImpl;    IeeePack;    --SymbolPackExt;    SymLiteralPack;    --SymbolCache;    --SymbolPack;    --TreePack;    --LiteralPack;    --TypePack;    --FilePack;    ObjectOut;    MesaTab;    Sequencer;    ComData;    LogPack;    ErrorTab;    Debug;    DebugTab;    Interface;    };