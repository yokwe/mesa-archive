-- Copyright (C) 1982, 1985, 1986  by Xerox Corporation. All rights reserved. -- file TreeOps.Mesa-- last modified by Satterthwaite, 30-Apr-82 15:23:44-- Wagner	16-Aug-86 12:03:37DIRECTORY  Literals USING [LTIndex, STIndex],  Symbols USING [BTIndex, CBTIndex, CSEIndex, HTIndex, ISEIndex, SEIndex],  SymbolTable USING [Handle],  Tree;TreeOps: DEFINITIONS = {  Handle: TYPE = SymbolTable.Handle;   -- Inlines for converting the Info field    DecodeCard: PROC [n: Tree.Info] RETURNS [CARDINAL] = INLINE {    RETURN[LOOPHOLE[n, CARDINAL]] };  DecodeSei: PROC [sei: Tree.Info] RETURNS [Symbols.SEIndex] = INLINE {    RETURN[LOOPHOLE[sei, Symbols.SEIndex]] };  DecodeISei: PROC [isei: Tree.Info] RETURNS [Symbols.ISEIndex] = INLINE {    RETURN[LOOPHOLE[isei, Symbols.ISEIndex]] };  DecodeCSei: PROC [csei: Tree.Info] RETURNS [Symbols.CSEIndex] = INLINE {    RETURN[LOOPHOLE[csei, Symbols.CSEIndex]] };    DecodeBti: PROC [bti: Tree.Info] RETURNS [Symbols.CBTIndex] = INLINE {    RETURN[LOOPHOLE[bti, Symbols.CBTIndex]] };    EncodeCard: PROC [n: CARDINAL] RETURNS [Tree.Info] = INLINE {    RETURN[LOOPHOLE[n, Tree.Info]] };  EncodeSei: PROC [sei: Symbols.SEIndex] RETURNS [Tree.Info] = INLINE {    RETURN[LOOPHOLE[sei, Tree.Info]] };    EncodeBti: PROC [bti: Symbols.BTIndex] RETURNS [Tree.Info] = INLINE {    RETURN[LOOPHOLE[bti, Tree.Info]] }; -- tree construction interface  TreeInitialize: PROC [Handle];  TreeReset, TreeFinalize: PROC [Handle];  PushTree: PROC [h: Handle, v: Tree.Link];  PopTree: PROC [Handle] RETURNS [Tree.Link];  InsertTree: PROC [Handle, Tree.Link, CARDINAL];  ExtractTree: PROC [Handle, CARDINAL] RETURNS [Tree.Link];  MakeNode: PROC [h: Handle, name: Tree.NodeName, count: INTEGER] RETURNS [Tree.Link];  MakeList: PROC [h: Handle, size: INTEGER] RETURNS [Tree.Link];  PushNode: PROC [h: Handle, name: Tree.NodeName, count: INTEGER];  PushList, PushProperList: PROC [h: Handle, size: INTEGER];  PushHash: PROC [h: Handle, hti: Symbols.HTIndex];  PushSe: PROC [h: Handle, sei: Symbols.ISEIndex];  PushLit: PROC [h: Handle, lti: Literals.LTIndex];  PushStringLit: PROC [h: Handle, sti: Literals.STIndex];  SetInfo: PROC [h: Handle, info: Tree.Info];  SetAttr: PROC [h: Handle, attr: Tree.AttrId, value: BOOLEAN]; -- tree deallocation  FreeNode: PROC [h: Handle, node: Tree.Index];  FreeTree: PROC [h: Handle, t: Tree.Link] RETURNS [Tree.Link]; -- tree attributes  GetHash: PROC [h: Handle, t: Tree.Link] RETURNS [Symbols.HTIndex];  GetNode: PROC [h: Handle, t: Tree.Link] RETURNS [Tree.Index];  GetSe: PROC [h: Handle, t: Tree.Link] RETURNS [Symbols.ISEIndex];  NthSon: PROC [h: Handle, t: Tree.Link, n: CARDINAL] RETURNS [Tree.Link];  OpName: PROC [h: Handle, t: Tree.Link] RETURNS [Tree.NodeName];  Shared: PROC [h: Handle, t: Tree.Link] RETURNS [BOOLEAN];  SetShared: PROC [h: Handle, t: Tree.Link, shared: BOOLEAN];   -- tree manipulation  Id: TYPE = RECORD [baseP: Tree.Finger, link: Tree.Link];  Scan: TYPE = PROC [h: Handle, t: Tree.Link];  Map: TYPE = PROC [h: Handle, t: Tree.Link] RETURNS [v: Tree.Link];  Test: TYPE = PROC [h: Handle, t: Tree.Link] RETURNS [BOOLEAN];  ScanSons: PROC [h: Handle, root: Tree.Link, action: Scan];  UpdateLeaves: PROC [h: Handle, root: Tree.Link, map: Map] RETURNS [v: Tree.Link]; -- list testing  ListLength: PROC [h: Handle, t: Tree.Link] RETURNS [CARDINAL];  ListHead: PROC [h: Handle, t: Tree.Link] RETURNS [Tree.Link];  ListTail: PROC [h: Handle, t: Tree.Link] RETURNS [Tree.Link]; -- list manipulation  ScanList: PROC [h: Handle, root: Tree.Link, action: Scan];  SearchList: PROC [h: Handle, root: Tree.Link, test: Test];  ReverseScanList: PROC [h: Handle, root: Tree.Link, action: Scan];  UpdateList: PROC [h: Handle, root: Tree.Link, map: Map] RETURNS [Tree.Link];  ReverseUpdateList: PROC [h: Handle, root: Tree.Link, map: Map] RETURNS [Tree.Link]; -- cross-table tree copying  CopyTree: PROC [h: Handle, root: Id, map: Map] RETURNS [v: Tree.Link];  IdentityMap: Map;  NodeSize: PROC [h: Handle, baseP: Tree.Finger, node: Tree.Index] RETURNS [CARDINAL];  }.