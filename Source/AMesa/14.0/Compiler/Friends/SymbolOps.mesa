-- Copyright (C) 1982, 1984, 1985, 1986  by Xerox Corporation. All rights reserved. -- file SymbolOps.mesa-- last modified by Satterthwaite,  9-Feb-82 10:09:27-- last modified by Sweet, 26-Mar-84 15:59:36-- last modified by Wagner, 16-Aug-86 11:36:19DIRECTORY  Alloc USING [Handle],  String USING [SubString],  Symbols,  SymbolTable USING [Handle],  TimeStamp USING [Stamp],  Tree USING [Index, Link];SymbolOps: DEFINITIONS = {  OPEN Symbols;    Handle: TYPE = SymbolTable.Handle;    -- Inlines for converting Unspec fields    ToBitAddr: PROC [ba: Unspec] RETURNS [BitAddress] = INLINE {    RETURN[LOOPHOLE[ba, BitAddress]] };    ToBti: PROC [bti: Unspec] RETURNS [CBTIndex] = INLINE {    RETURN[LOOPHOLE[bti, CBTIndex]] };    ToCard: PROC [n: Unspec] RETURNS [CARDINAL] = INLINE {    RETURN[LOOPHOLE[n, CARDINAL]] };    ToInt: PROC [n: Unspec] RETURNS [INTEGER] = INLINE {    RETURN[LOOPHOLE[n, INTEGER]] };    ToLink: PROC [l: Unspec] RETURNS [DummyLink] = INLINE {    RETURN[LOOPHOLE[l, DummyLink]] };    ToTreeIndex: PROC [node: Unspec] RETURNS [Tree.Index] = INLINE {    RETURN[LOOPHOLE[node, Tree.Index]] };    ToSei: PROC [sei: Unspec] RETURNS [SEIndex] = INLINE {    RETURN[LOOPHOLE[sei, SEIndex]] };    ToCSei: PROC [csei: Unspec] RETURNS [CSEIndex] = INLINE {    RETURN[LOOPHOLE[csei, CSEIndex]] };    ToISei: PROC [isei: Unspec] RETURNS [ISEIndex] = INLINE {    RETURN[LOOPHOLE[isei, ISEIndex]] };    FromBitAddr: PROC [ba: BitAddress] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[ba, Unspec]] };    FromBti: PROC [bti: BTIndex] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[bti, Unspec]] };    FromCard: PROC [n: CARDINAL] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[n, Unspec]] };    FromInt: PROC [n: INTEGER] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[n, Unspec]] };    FromLink: PROC [l: DummyLink] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[l, Unspec]] };    FromTreeIndex: PROC [node: Tree.Index] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[node, Unspec]] };    FromSei: PROC [sei: SEIndex] RETURNS [Unspec] = INLINE {    RETURN[LOOPHOLE[sei, Unspec]] };  -- implemented by SymbolPack -- hash manipulation  FindString: PROC [h: Handle, s: String.SubString] RETURNS [HTIndex];  HashValue: PROC [String.SubString] RETURNS [HVIndex];  SubStringForHash: PROC [h: Handle, s: String.SubString, hti: HTIndex]; -- context management  CtxEntries: PROC [h: Handle, ctx: CTXIndex] RETURNS [CARDINAL];  FirstCtxSe: PROC [h: Handle, ctx: CTXIndex] RETURNS [ISEIndex];  NextSe: PROC [h: Handle, sei: ISEIndex] RETURNS [ISEIndex];  SearchContext: PROC [h: Handle, hti: HTIndex, ctx: CTXIndex] RETURNS [ISEIndex];  SeiForValue: PROC [h: Handle, value: Unspec, ctx: CTXIndex] RETURNS [ISEIndex]; -- module management  FindMdi: PROC [h: Handle, stamp: TimeStamp.Stamp] RETURNS [MDIndex]; -- type manipulation  ArgCtx: PROC [h: Handle, type: CSEIndex] RETURNS [CTXIndex];  ArgRecord: PROC [h: Handle, type: CSEIndex] RETURNS [RecordSEIndex];  ClusterSe: PROC [h: Handle, type: SEIndex] RETURNS [SEIndex];  NormalType: PROC [h: Handle, type: CSEIndex] RETURNS [CSEIndex];  RecordLink: PROC [h: Handle, type: RecordSEIndex] RETURNS [RecordSEIndex];  RecordRoot: PROC [h: Handle, type: RecordSEIndex] RETURNS [RecordSEIndex];  ReferentType: PROC [h: Handle, type: CSEIndex] RETURNS [CSEIndex];  TransferTypes: PROC [h: Handle, type: SEIndex]     RETURNS [typeIn, typeOut: RecordSEIndex];  TypeForm: PROC [h: Handle, type: SEIndex] RETURNS [TypeClass];  TypeLink: PROC [h: Handle, type: SEIndex] RETURNS [SEIndex];  TypeRoot: PROC [h: Handle, type: SEIndex] RETURNS [SEIndex];  UnderType: PROC [h: Handle, type: SEIndex] RETURNS [CSEIndex];  XferMode: PROC [h: Handle, type: SEIndex] RETURNS [TransferMode]; -- information returning procedures  BitsForRange: PROC [LONG CARDINAL] RETURNS [CARDINAL];  BitsForType: PROC [h: Handle, type: SEIndex] RETURNS [BitCount];  BitsPerElement: PROC [h: Handle, type: SEIndex, packed: BOOLEAN]     RETURNS [BitCount];  Cardinality: PROC [h: Handle, type: SEIndex] RETURNS [LONG CARDINAL];  FindExtension: PROC [h: Handle, sei: ISEIndex]     RETURNS [type: ExtensionType, tree: Tree.Link];  FnField: PROC [h: Handle, field: ISEIndex]     RETURNS [offset: BitAddress, size: FieldBitCount];  RecField: PROC [h: Handle, field: ISEIndex]     RETURNS [offset: BitAddress, size: FieldBitCount];  HashForSe: PROC [h: Handle, sei: ISEIndex] RETURNS [HTIndex];  LinkMode: PROC [h: Handle, sei: ISEIndex] RETURNS [Linkage];  PackedSize: ARRAY PackedBitCount OF CARDINAL = [1, 2, 4, 4, 8, 8, 8, 8];  RCType: PROC [h: Handle, type: CSEIndex] RETURNS [RefClass];  VariantField: PROC [h: Handle, type: CSEIndex] RETURNS [ISEIndex];  WordsForType: PROC [h: Handle, type: SEIndex] RETURNS [WordCount]; -- body table management  EnumerateBodies: PROC [h: Handle, root: BTIndex,     proc: PROC [h: Handle, bti: BTIndex] RETURNS [stop: BOOLEAN]]    RETURNS [BTIndex];  ParentBti: PROC [h: Handle, bti: BTIndex] RETURNS [BTIndex];  SiblingBti: PROC [h: Handle, bti: BTIndex] RETURNS [BTIndex];  SonBti: PROC [h: Handle, bti: BTIndex] RETURNS [BTIndex];-- implemented by SymbolPackExt (extensions for building tables)  Create: PROC [Alloc.Handle, UNCOUNTED ZONE] RETURNS [Handle];  Reset, Finalize: PROC [Handle];  -- hash manipulation  EnterString: PROC [h: Handle, s: String.SubString] RETURNS [HTIndex];  HashBlock: PROC [h: Handle] RETURNS [LONG POINTER TO HashVector]; -- context management  NextLevel: PROC [h: Handle, cl: ContextLevel] RETURNS [ContextLevel];  BlockLevel: PROC [cl: ContextLevel] RETURNS [ContextLevel];  NewCtx: PROC [h: Handle, level: ContextLevel] RETURNS [CTXIndex];  SetMainCtx: PROC [h: Handle, ctx: CTXIndex];  ResetCtxList: PROC [h: Handle, ctx: CTXIndex];  FirstVisibleSe: PROC [h: Handle, ctx: CTXIndex] RETURNS [ISEIndex];  NextVisibleSe: PROC [h: Handle, sei: ISEIndex] RETURNS [ISEIndex];  VisibleCtxEntries: PROC [h: Handle, ctx: CTXIndex] RETURNS [CARDINAL];  ContextVariant: PROC [h: Handle, ctx: CTXIndex] RETURNS [ISEIndex];  StaticNestError: SIGNAL;  MakeCtxSe: PROC [h: Handle, hti: HTIndex, ctx: CTXIndex] RETURNS [ISEIndex];  MakeNonCtxSe: PROC [h: Handle, size: CARDINAL] RETURNS [CSEIndex];  MakeSeChain: PROC [    h: Handle, ctx: CTXIndex, n: CARDINAL, linked: BOOLEAN] RETURNS [ISEIndex];  FillCtxSe: PROC [h: Handle, sei: ISEIndex, hti: HTIndex, public: BOOLEAN];  NameClash: SIGNAL [h: Handle, hti: HTIndex];  EnterExtension: PROC [    h: Handle, sei: ISEIndex, type: ExtensionType, tree: Tree.Link];  SetSeLink: PROC [h: Handle, sei, next: ISEIndex]; -- body table utilities  LinkBti: PROC [h: Handle, bti, parent: BTIndex];  DelinkBti: PROC [h: Handle, bti: BTIndex]; -- copying within current table  CopyArgSe: PROC [h: Handle, copy, master: ISEIndex];  CopyBasicType: PROC [h: Handle, type: CSEIndex] RETURNS [CSEIndex];  CopyXferType: PROC [h: Handle, type: CSEIndex] RETURNS [CSEIndex]; -- attribute extraction  ConstantId: PROC [h: Handle, sei: ISEIndex] RETURNS [BOOLEAN]; -- implemented by Pass1  PrefillMesaSymbols: PROC [h: Handle] RETURNS[outerCtx: CTXIndex];    SetSource: PROC[h: Handle, sourceFile: LONG STRING];    }.