-- File: LockSync.mesa - last edit:-- Sturtevant.PA       15-Nov-84 11:28:46-- Copyright (C) 1984 by Xerox Corporation. All rights reserved. LockSync: DEFINITIONS =  BEGIN  «  * Lock - invariant and condition variable for locking & unlocking.  * This should perhaps be an opaque type, but that's such a lot of  * work.  * Lock's are used to obtain and release records - usu. of instance  * data.  The Lock is one of the fields of the reccord.  * LockAndWait waits until the lock is open,  * locks it, and returns.  * LockNoWait locks an unlocked  * lock, but does not wait for a locked one.  * both LockAndWait and LockNoWait return:  TRUE if  * they didn't have to wait.  * Unlock unlocks the lock.  *  * This style of locking is per tool, and not per module.  It works across  * fork boundries.  It allows the program to recognize a lock w/o waiting  * on it.  *  * Implementation is LockSyncImpl.mesa  »  Lock: TYPE = RECORD [    busy: BOOLEAN ¬ FALSE,  -- invariant    cond: CONDITION];  LockNoWait: PROCEDURE [lock: LONG POINTER TO Lock] RETURNS [gotTheLock: BOOLEAN];  LockAndWait: PROCEDURE [lock: LONG POINTER TO Lock] RETURNS [noWait: BOOLEAN];  Unlock: PROCEDURE [lock: LONG POINTER TO Lock];  END.LOG  created Sturtevant - 17-Jul-84 10:54:16  Partial Gealification - Sturtevant -  6-Nov-84  9:43:55