-- Copyright (C) 1983, 1984, 1985  by Xerox Corporation. All rights reserved. -- File: AdobeServer.mesa  Edited by:-- BJD    	18-May-84 11:04:21-- TXS 		 5-May-83 10:56:36-- RSF      	15-Aug-85 13:03:02-- JCS  	21-Jan-85 18:40:19-- RLC		25-Feb-88 17:17:02DIRECTORY  AdobeOps USING [    ARSystemHandle, ARVersion, FieldItemObject, FieldList,    FieldType, SetOfARs],  Courier USING [Handle],  NSFile USING [Reference],  NSString USING [String],  Stream USING [Handle],  System USING [GreenwichMeanTime, NetworkAddress];AdobeServer: DEFINITIONS =  BEGIN  -- Types and data  SystemElement: TYPE = System.NetworkAddress;  Reference: TYPE = NSFile.Reference;  FieldItemValue: TYPE = MACHINE DEPENDENT RECORD [    body(0): SELECT type(0): AdobeOps.FieldType FROM      arId => [ar(1): LONG CARDINAL],      dateTime => [time(1): System.GreenwichMeanTime],      numeric => [number(1): LONG UNSPECIFIED],      fixedLengthString => [        string(1): LONG STRING, maxLength(3): CARDINAL],      enumerated => [enumVal(1): CARDINAL],      ENDCASE];  Relation: TYPE = {    equal, notEqual, lessThan, lessThanOrEqual, greaterThan,    greaterThanOrEqual, in, notIn};  FieldItemQueryValue: TYPE = MACHINE DEPENDENT RECORD [    relationalOp(0): Relation, value(1): FieldItemValue];  StartOrStop: TYPE = {start, stop};  Time: TYPE = NSString.String;  StringArray: TYPE = RECORD [    array: SEQUENCE length: CARDINAL OF LONG STRING];  -- Types for changes to FieldList    ChangeType: TYPE = {modify, add, remove};  ChangeList: TYPE = LONG POINTER TO Changes;  Changes: TYPE = RECORD [    seq: SEQUENCE length: CARDINAL OF ChangeItem];  ChangeItem: TYPE = RECORD [    oldFieldName: LONG STRING,    newItem:      SELECT changeType: ChangeType FROM	add, modify => [newFlItem: AdobeOps.FieldItemObject],	remove => NULL,	ENDCASE];	  StreamCheckoutProcType: TYPE = PROCEDURE [cH: Courier.Handle];  -- Procedures  GetNextSubmitNumber: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    version: AdobeOps.ARVersion]    RETURNS [submitNumber: LONG CARDINAL];  SubmitFailed: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    arNumber: LONG CARDINAL, version: AdobeOps.ARVersion];  GetLocationOfARs: PROCEDURE [    server: SystemElement, systemName: LONG STRING]    RETURNS [referenceToARs: Reference];  GetStartOrStopTime: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    which: StartOrStop] RETURNS [startOrStopTime: Time];  -- FreeLocationOfARs must be called to free the imbedded service;  FreeLocationOfARs: PROCEDURE [referenceToARs: Reference];  GetSystemDescription: PROCEDURE [    server: SystemElement, systemName: LONG STRING]    RETURNS [description: AdobeOps.ARSystemHandle];      FreeSystemDescription: PROCEDURE [    description: AdobeOps.ARSystemHandle]    RETURNS [nil: AdobeOps.ARSystemHandle];  GetSystemDefaultUserFile: PROCEDURE [    server: SystemElement, systemName: LONG STRING, to: Stream.Handle]    RETURNS [bytesInFile: CARDINAL];  VerifyVersion: PROCEDURE [    server: SystemElement, systemName: LONG STRING,     version: AdobeOps.ARVersion]    RETURNS [ok: BOOLEAN];      GetVersion: PROCEDURE [    server: SystemElement, systemName: LONG STRING]    RETURNS[version: AdobeOps.ARVersion];  -- Accelerator file and querying procedures   -- For querying   LookupARs: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    version: AdobeOps.ARVersion,    fieldName: LONG STRING, value: FieldItemQueryValue,    set: AdobeOps.SetOfARs] RETURNS [s: AdobeOps.SetOfARs];  FreeSetOfARs: PROCEDURE [s: AdobeOps.SetOfARs];  -- The following 3 procedures are to be called when storing (i.e. submit or checkin) an AR;  AboutToStore and CompletedUpdate are provided to protect against lost AR edits;   << The sequence should be:      AboutToStore[...];      ARAccess.SubmitAR[...]  or  ARAccess.CheckInAR[...];      UpdateAcceleratorField[...];  -- for each field that changed;         ...      UpdateAcceleratorField[...];      CompletedUpdate[...]; >>  AboutToStore: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    version: AdobeOps.ARVersion, arNumber: LONG CARDINAL];  UpdateAcceleratorField: PROCEDURE [    server: SystemElement, systemName: LONG STRING, version: AdobeOps.ARVersion,    arNumber: LONG CARDINAL, fieldName: LONG STRING,    value: FieldItemValue];  CompletedUpdate: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    arNumber: LONG CARDINAL];  GetAcceleratorInfo: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    version: AdobeOps.ARVersion, ql: AdobeOps.SetOfARs,    fieldList: LONG POINTER TO StringArray,    streamCheckout: StreamCheckoutProcType];  --These will not be needed if we register systems in the Clearinghouse?  GetResidentSystemStrings: PROCEDURE [server: SystemElement]    RETURNS [systemStrings: DESCRIPTOR FOR ARRAY OF LONG STRING];  FreeResidentSystemStrings: PROCEDURE [    systemStrings: DESCRIPTOR FOR ARRAY OF LONG STRING];  --  Administrator-level commands  PutSystemDescription: PROCEDURE [    server: LONG STRING, systemName: LONG STRING,    description: AdobeOps.ARSystemHandle];  PutSystemDefaultUserFile: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    from: Stream.Handle];  PutSubmitNumber: PROC [    server: SystemElement, systemName: LONG STRING,    submitNumber: LONG CARDINAL];  PutStartOrStopTime: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    which: StartOrStop, startOrStopTime: Time];  ReadLastARNumber: PROCEDURE [    server: SystemElement, system: LONG STRING]    RETURNS [lastAR: LONG CARDINAL];  UpdateAccelerators: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    ars: AdobeOps.SetOfARs];  ChangeLocationOfARs: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    newHost, newDirectory: LONG STRING];  ChangeFieldList: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    oldVersion: AdobeOps.ARVersion, changeCount: CARDINAL,    changeList: ChangeList];  MakeAcceleratorFileForField: PROCEDURE [    server: SystemElement, systemName: LONG STRING,    fieldName: LONG STRING, fieldList: AdobeOps.FieldList];  <<  To be added:  DeleteSystem: PROCEDURE [systemName: LONG STRING];>>  -- Signals and Errors  ErrorType: TYPE = MACHINE DEPENDENT{    communicationError(0), unknownSystem(1), cantDetermineLocOfARs(2),    illegalLogin(3), systemAlreadyExists(4), fileNotFound(5),    serverUnreachable(6), serverDown(7), noAdobeServiceAtServer(8),    courierTimedOut(9), parameterInconsistency(10),    obsoleteVersion(11), systemNotRegistered(12), sysDescChanging(13),    others(14), tooManyConnections(15), spare1(16), spare2(17), (31)};  Error: SIGNAL [why: ErrorType];  END.  25-Feb-88 17:17:02 - rlc - add tooManyConnections(15), spare1(16), spare2(17), (31) to ErrorType