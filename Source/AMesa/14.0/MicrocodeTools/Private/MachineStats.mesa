-- MachineStats.mesa-- JWF 30-Mar-87 16:00:15DIRECTORY  Ascii,  Exec,  Format,  Process,  ProcessorFaceExtras,  TTY,  Window;InstallProcsTest: MONITOR  IMPORTS    Exec, Format, ProcessorFaceExtras = {  Init: PROCEDURE = { Exec.AddCommand["MachineStats.~"L,     GetMachineStats, NIL, Unload]; };      GetMachineStats: Exec.ExecProc =     BEGIN     WriteToExec: Format.StringProc ¬ Exec.OutputProc[h];     version: ProcessorFaceExtras.VersionResult ¬ ProcessorFaceExtras.Version[];     banks: CARDINAL;      <<	#########################################################	Write Machine Type	######################################################### >>               WriteToExec["Machine type = "L];     SELECT version.machineType FROM       altoI => WriteToExec["altoI"L];       altoII => WriteToExec["altoII"L];       altoIIXM => WriteToExec["altoIIXM"L];       dolphin => WriteToExec["dolphin"L];       dorado => WriteToExec["dorado"L];       dandelion => WriteToExec["dandelion"L];       dicentra => WriteToExec["dicentra"L];       daybreak => WriteToExec["daybreak"L];       daisy => WriteToExec["daisy"L];       kiku => WriteToExec["kiku"L];       daylight => WriteToExec["daylight"L];       tridlion => WriteToExec["tridlion"L];       ENDCASE =>           BEGIN	  WriteToExec["Error -- invalid machine type = "L];	  Format.Decimal[WriteToExec, ORD[version.machineType], NIL];	  END;       WriteToExec["\N"L];<<	#########################################################	Write Machine Version	######################################################### >>               WriteToExec["Machine version = "L];     Format.Decimal[WriteToExec, version.majorVersion, NIL];     WriteToExec["\N"L];     <<	#########################################################	Test For Floating Point		This code tests for "NOT version.floatingPoint" because	the microcode implementation of ProcessorFaceExtras.Version[]	gives an invalid value for this field for the "TRUE" case. 	######################################################### >>	          WriteToExec["FloatingPoint = "L];          IF NOT version.floatingPoint THEN        WriteToExec["FALSE"L]     ELSE        WriteToExec["TRUE"L];	     WriteToExec["\N"L];     <<	#########################################################	Test For Cedar	######################################################### >>	               WriteToExec["Cedar = "L];     IF version.cedar THEN        WriteToExec["TRUE"L]     ELSE        WriteToExec["FALSE"L];	     WriteToExec["\N"L];<<	#########################################################	Write Print Date	######################################################### >>          WriteToExec["Release date = "L];     Format.Decimal[WriteToExec, version.releaseDate, NIL];     WriteToExec["\N"L];          WriteToExec["\N"L];<<	#########################################################	Write number of banks of control store.	Not called for non-Dove type machines	######################################################### >>	          IF version.machineType = daybreak OR version.machineType = daisy THEN        BEGIN	banks ¬ ProcessorFaceExtras.CountCSBanks[];             WriteToExec["This machine has "L];        Format.Decimal[WriteToExec, banks, NIL];        WriteToExec[" banks of control store.\N"L];	END;     END;    Unload: Exec.ExecProc = {Exec.RemoveCommand[h, "InstallProcsTest.~"L]};  -- Mainline code  Init[];  -- this gets string out of global frame  }...    