-- SequoiaMissing.doc-- Last edited:		18-Sep-85 16:27:15TAJO>	On a Dove keyboard, the CASE key has the same function as KEYBOARD-L on a Dandelion keyboard.  I.e. it will make the selection lower case, and if shifted it will make the selection upper case.  If you are interested in other differences between the Dove and Dandelion keyboards, see the Pilot Change Summary.>	PROP'S-CR will "unindent" one level.  For example, you can type it instead of a CR when you want to close a scope on the next line.>	FileWindows.Save[] from the debugger saves Empty windows to a file named "ScratchWindows.saved" on your client volume.  You will need FileWindows.bcd on your debugger volume to use this command from the debugger.>	ScratchSources.Save[] saves all scratch sources to a file named "ScratchSources.saved."  Unlike the previous command, this one saves your mail send windows as well as your Empty Windows, but doesn't save FileWindows that you were Editing. You will need ScratchSources.bcd on your debugger volume to use this command from the debugger.>	A SetPositionBalanceBeam will affect the way text is displayed in your windows.  When you do a FIND or Position in a window, the position in question will be displayed at the top of the window in "top" mode (the way Tajo has always worked), in the middle in "middle" mode, or at either the top or bottom, which ever is more convenient, in "topBottom" mode.  TopBottom mode minimizes the repainting needed when you jump between various positions in the window.  Top mode only saves repainting when jumping backwards.  Middle mode doesn't save much at all, but it always positions things of interest in the middle of your window.  Top mode is the default.>	A CaretShape switch selects between two different styles of carets.  The default is "triangle," which gives you the standard Tajo TextSW and TTYSW carets.  With caretShape = IBeam, however, you get an I-Beam caret in TextSWs and a gray rectangle in TTYSWs.>	MenuSymbiotes can have their own font.  You can specify what font you want them to have in the FileWindow section of your User.cm.  The file name should have the .strike extension on it.  The file should be on your root directory, <>, so the system is assured of finding it even before your search path is set up.  An interesting font to use in your MenuSymbiotes is MenuSymbolsFont.strike on [Rasp:OSBU North:Xerox]<Fonts>.  Read MenuSymbolsFont.doc on the same directory for a description of the font.  You can also specify how many lines you would like your MenuSymbiotes to be.  It's not as easy as 1, 2, 3.  The MenuSymbiotsLines field in your User.cm can be a real number (e.g. 2.37).  It may take a few tries to get the MenuSymbiotes looking just the way you want them to.>	When you hit DoIt in a FileWindow several default extensions are tried.  These defaults (.mesa .config .cm) can be changed by specifying a list of extensions in FileWindow sections of your User.cm.  Any string starting with a '.' is allowed.  For Example:	[FileWindow]	Extensions: .mesa .config .cm .doc .df .log  >	J.Last positions the last line of the file in the middle of your window (even if you don't have SetPositionBalanceBeam = middle).>	If the Notifier is busy and is not taking any page faults, Shift-STOP will not take you to the debugger. In this situation, use Shift-Shift-STOP to get to the debugger. If you must do this, you will not be able to execute Interpret-Calls from the debugger.  >	When chording the mouse buttons to bring up a menu, we recommend that you release the POINT (=left=red) button as soon as you have brought up the menu successfully.  The menu will stay up as long as you hold down the ADJUST button. Address faults may occur if you release the ADJUST button before releasing the POINT button when using menus. >	Avoid running Othello, Tajo, or CoPilot with extremely full volumes. Tools can fail in particularly ungraceful ways otherwise. >	Boot switches:  Three boot switches have been added to set the parameters of the system zone.         '[  tiny      initial: 4 pages, increment: 4 pages, large node: 128	'%  standard  initial: 40 pages, increment: 20 pages, large node: 260	']  large     initial: 100 pages, increment: 50 pages, large node: 260	The largest size specified by switches is the one used.  If no switch is specified the default switch '% is used.  Four page uniform swap units are used throughout. Reminder: the 'I boot switch causes all TIP tables to be re-initialized, i.e., the switch causes all existing .TIP files to be ignored, and new ones written as they are needed.	  >	NEXT and NEXT-DELETE search from the insertion point, not the selection.>	FileSystem:  If some tool in CoPilot gives the message that it could not close a volume, try to figure out why the volumeAboutToClose was aborted and rectify the situation, then close the volume manually by using the Exec's CloseVolume command. If you still cannot close the volume, you must reboot yourself before you try to proceed to the client. Reminder: if you open your client volume, or any volume readable from your client volume, for write, you must not proceed your client. >	If you go to the debugger and you want to save files, retrieve TajoTools.symbols from the release directory (contrary to the XUG appendix). AR 2170.DEBUGGER>	The symbols for HeapImpl are in UnpackedHeapImpl.bcd.  Once retrieved, Copilot realizes where the symbols are unless it has already given the "No symbols for HeapImpl" message.  In this case, after retrieving UnpackedHeapImpl.bcd, you have to tell Copilot to either     >ATtach Symbols global frame: x  Filename: UnpackedHeapImpl.bcd  or  >­Nvalidate caches [Confirm]   --undocumented, done by [CONTROL]N<cr>>	If you first interpret an expression containing a multi-word constant identifier and later try to interpret that (or another expression) containing the same multi-word constant identifier, CoPilot will complain "!Literal problem. Invalidate Caches (CONTROL-N) and try again."  This is a work around.>	Don't delete .symbols files or .bcd files that CoPilot has used for symbols. If you must delete such a file, you can improve your chances of CoPilot working by invalidating CoPilot's caches (CONTROL-N command). >/	The syntax specifying a host to CoPilot's Remote Debug command as a network address is: "net.host." (note the two periods; numbers are octal only). The command will also recognize any of the other formats documented in the AddressTranslation chapter of the Mesa Programmer's Manual. AR 2033.>/	You can now set conditional breaks of any of the following forms:1) <number> -- copilot will break every <number>th occurrance2) <expression> <relation> <expression> where  <relation> is one of < <= = >= > # and  <expression> is one of (get this)  a) constant  b) local variable  c) parameter or return result at ENTRY/EXIT  d) global variable  e) pointerToRecord.field -- note that pointerToRecord.array[constantExpression] is legal too  f) pointerToArray[constantExpression]  g) pointerToSequence[constantExpression]  h) descriptor[constantExpression]all or these values can be [1..16] or 32 bits in length>	To go backward in the stack, use "b" or "jump -n".>	Hex numbers may be entered with an 'H or 'h suffix.  Relations are implemented ( =, #, >, <, >=, <= ).  Real numbers and their operations are implemented.>	To get concrete values of opaque types, use Attach Opaque. For example, ATtach Opaque: Window.Object Filename: WindowImplBwill cause all Window.Object to be printed as WindowImplB$Object. The attachment remains in effect until a new session.>	The debugger supports multiple remote debuggers.>	User.cm Entries:  [Debugger]  Boot: VolumeName  cRadix: octal | decimal | hex  cSigned: TRUE | FALSE  iRadix: octal | decimal | hex  iSigned: TRUE | FALSE  pRadix: octal | decimal  lpRadix: octal | decimal  relRadix: octal | decimal  unspec: CARDINAL | INTEGER  elements: ArrayElementsToShow  chars: StringCharactersToShowEDITOR  The edit symbiote is a form subwindow with the following items:    All!	invokes a global replace substituting the match from the target   	specified the the search field with the the replacement from the 	replace field.  S!	will do a search of the target in the search field.  RS!:	will do a R! followed by a S!  ¬:	is the search field.  SR!	will do a S! followed by a R!  R!	invokes the replace command which will substitute text specified by   	the replace field with the current selection.  ¬:	is the replace field.    If an edit symbiote has the input focus, and you hit DoIt, the edit symbiote will grow to two lines, with All!, S! and RS! on the top line, and SR! and R! on the second line for more space to enter text.  If the field for the search pattern is empty when you invoke S!, the edit symbiote will stuff the current selection into the search field and try to find the new pattern.  The Help key will bring up the Editor Property Sheet described below.EDITOR PROPERTY SHEET  The Editor property sheet is on a Tajo Tool called Editor.  It  has the following properties:    Scope:	refers to the scope of the All! function on the edit symbiote.    		Using all will allow the All! command to make global replacements 		in the entire file. Using rest, the All! starts either at the 		top of the page, or from the insertion point if it is visible. 		Using selection will restrict the replacement to the current 		selection.		  Interpret match as: refers to the interpretation of the text entered in   		the Find: item.  If pattern refers to interpreting the target as 		a regular expression, literal refers to ignore the regular 		expression and using the target literally.		  Context of match: refers to the text found in a window.  anywhere mean that   		the pattern can match within a larger word. words will only 		match patterns that are surrounded by non alphanumeric characters.  IgnoreCase	If this boolean is selected, then case will be ignored when   		searching for literals.  Confirm Replace If the boolean is selected, then all replacements   		will have to be confirmed by the user.  A mouse red cursor 		will appear, and if the user hits point, the replace will occur, 		if the user hits adjust, the replace will not.  Level = 	is a numeric value used by the Nest and UnNest command in the   		Edit Ops menu.  Level is the number of characters to be shifted.		  The property sheet also has a command subwindow with the commands:    GetDefault!	Allows the user to set the editor properties to a default state  SetDefault!	Allows the user to specify the default state. The default   		state will become the current value of the editor properties.		  The typical Tajo tool parameters can be set for the Editor Property sheet under [Editor] in the User.cm (ie WindowBox, InitialState, TinyPlace).  ALSO, you can specify your default values for the options above by specifying one of the possible values listed for each item below: 	[Editor]	Scope: all | rest | selection	Interpret: pattern | literal	Context: anywhere | words	IgnoreCase: FALSE | TRUE	ConfirmReplace: FALSE | TRUE	Level: 2  EDIT OPS MENU  When an edit symbioted is attached to a subwindow, an Edit Ops menu is also placed on the window.  The All, Search, SearchReplace, ReplaceSearch, and Replace menu items invoke the same commands as the edit symbiote's All!, S!, SR!, RS! and R! command.  Other menu commands, which only operate on Text subwindows, are:    Nest		will cause the lines that contain the current selection to be   		shifted level characters to the right, where level is specified 		in the editor property sheet.		  UnNest	will cause the lines that contain the current selection to   		be shifted level characters to the left, where level is specified 		by the editor property sheet.		  Match		will identify matching parentheses, angle, square, and curly   		brackets.  If one of these character types is selected, Match 		will extend the selection to the matching character.  If a 		character which is not one of these types is selected, the 		selection will extend in both directions until is contains 		a match.  Successively using Match will match larger scopes.  Count		will give a count of how many occurances of a pattern is found in  		the text.  The scope and target are specified as in the All!		command.  The result if given in the message subwindow of the		editor property sheet.SEARCHRegular expressions are a concatenation of the following elements:  s		literal s  #		any character   %		beginning of a line (when first element in the pattern)  [...]		character class (any of the character specified)  [~...]		negated character class (all but the characters specified)  *		short closure (zero or more occurence of the previous pattern)  **		long closure (short & long closure explained below)  @c		escaped character c    A character class consist of zero or more of the following elements, surrounded by [ and ]    c		literal character  c1-c2		range of characters  ~		negated character class  \c		escaped character    Escaped characters look as follows:    \n		carriage return  \t		tab  \c		c  \ddd		Octal value ddd, where d = '0..'9, ie \101 = 'AREPLACEThe replacement expressions are a concatenation of the following:    s		literal  @&		complete match, matches the text found  @n@		partial match, where n = 1,2,3... .  n corresponds to the   		nth element of the regular expressionCHARACTER CLASSES AND CLOSURE  Character classes are the means by which different characters can be matched in part of a pattern. To match the letters a,b,c, either [a-c] OR [abc] are character classes that will match. Usually one does not only want to match just one character in a character class, but a word or a list of them. The * and the ** (* is short closure, ** is long) will allow this.  * and ** match the zero or more of previous character class or pattern element, the difference being * matches the shortest number of the previous pattern element type, and ** matches the longest. For example:   Given the text "Hello.bcd Goodbye.bcd"    "H#*.bcd" will match "Hello.bcd",     "H#**.bcd" will match "Hello.bcd Goodbye.bcd"    "H[a-z]*.bcd" and "H[a-z]**.bcd" will match "Hello.bcd"  Be careful about using #* and #**. If you are editing a large file, since # matches any character, #* and #** will be slow. Since #** matches the longest run of characters, it will be very slow.EXAMPLES:1. To find a word that start with an upper case letter:	Find: [A-Z][a-z]**	Result: 'I', 'Hello', 'Prince' will all match, 'warthog' will not		2. To find a word whose 	first character is either a,b,c,d,s,x,y,z	second character is either a,e,i,o,u	third character is g,p,4,5,6	and reverse the order of the letters found:	Find: [a-dsx-z][aeiou][gp4-6]	Replace: @3@@2@@1@	Result: dog => god	3. To delete the leading zeroes from numbers 	Find: [~0-9][0]**[0-9]	Replace: @1@@3@	Result:  000000B => 0B, 00343B => 343B	4. Generate exec command from a list of files	Input: "Access.archivebcd Adobe.archivebcd Binder.archivebcd "	Find: "#* "	Replace: "Copy <>Temp>@1@ _ @1@@n"	Result:	  Copy <>Temp>Access.archivebcd _ Access.archivebcd	  Copy <>Temp>Adobe.archivebcd _ Adobe.archivebcd	  Copy <>Temp>Binder.archivebcd _ Binder.archivebcd>	The editor's Match! command matches BEGINs & ENDs, DOs & ENDLOOPs, SELECTs & ENDCASEs, as well as [], {}, (), «», and <<>>.  It won't match [..), however.User.cm Entries For Tajo 12.0	[System]	SetPositionBalanceBeam: top |  middle | topBottom	CaretShape: triangle | iBeam	FileServerProtocol: NS	--or Pup	[FileWindow]	MenuSymbioteFont: MenuSymbolsFont.strike	MenuSymbioteLines: 1	>	The defaults, where applicable, are listed first.  MenuSymbioteLines can be a real number whose syntax is {CARDINAL | NULL} {. CARDINAL | . | NULL}EXECUTIVE:>	The commands Floppy.~ erase and Floppy.~ scavenge can be called from the executive.TOOLS>	Several Pup based tools have been replaced by their NS counterparts.  The Pup tools are included as friends level tools on the archive directory.	NS				Pup	Adobe			PupAdobe	Chat			PupChat	LibrarianTool		Access	MailTool		Hardy	Maintain		PupMaintain	MFileServer		STPServer	RemoteExec		PupRemoteExec	SendTool		MailSendTool>	Compare: does not work for files on NS file servers, and ignores more than 5120 lines of a file. >	MakeDLionBootFloppyTool:  now has an option to allow the user to reserve the last cylinder for diagnostics.  The user interface has changed slightly.  The command formSW has changed to contain three booleans and a command:  Format   ReserveLastCylinderForDiagnostics  InstallFiles   Start!  After selecting the desired options, the user selects Start! >	Brownie:o  Non-XDE files will NOT be transferred reliably from NS file servers.  In particular, long file names, non-standard file types (such as Star file types), and multi-segmented files (such as Star documents) are not supported.>	FTP:The List/f and List/b commands have a syntax different from that described in the XUG.  Only one of the /f or /b switches may be used and it must be the last switch.  After one of these switches is seen, the rest of the command line is assumed to be a list of files.  The new syntax is as follows:  	> FTP List/f date-with-no-spaces <files>	> FTP List/f "date with spaces" <files>The date may be in any valid format for dates.  The /f switch lists the files that have a create date after the date given.  The /b switch lists those files with a create date before the date given.   Example:  	> FTP RamRod Dir/c AMesa List/dalf 10-Oct-84 '*>/	Command Central and the Run.~ and Load.~ commands of the Executive now recognize the v switch, which causes version mismatches to be ignored. >	Executive:  There are new built-in Exec commands.  Protect.~ changes the protection status of files and directories.  Registry.~ sets the default registry. Clearinghouse.~ sets the default domain and organization.  The user must execute the Login command after the Clearinghouse command in order to update the Clearinghouse of the logged in user.  Type "Help.~ <command>" to the Executive for further documentation.      >	Executive:  In trying to re-execute a command to the Executive by selecting and stuffing a previous command, you may accidentally select the prompt character '>'. If so, the command that the Executive will try to run will start with the character > and will not match any of the registered commands. However, it will match the corresponding file when the Executive tries its autoload heuristic, causing the Executive to load another instance of your bcd. AR 2528>/	IncludeChecker:The /k (Output Packager Command) switch writes Packager commands in the output file that make Packager source and object files consistent (default TRUE).>	MakeBoot:Makeboot contains some new options and some old options have been removed.   The GFT entry is obsolete in the bootmesa file.  The gftLength command lineargument is also obsolete.   In the bootmesa file the options:    LOADSTATEMODULES: number    LOADSTATEBCDS: numberare now available.  These items set the number of empty module and bcd slots you would like to have in the initial LoadState.  Such entries are used when, for instance, modules are loaded or NEW'ed.  This number does not include the modules and bcds in the boot file.  In the command line, the options:    lsModules: number    lsBcds: numberare now available.  These items override the numbers in the parameter file given by LOADSTATEMODULES and LOADSTATEBCDS, respectively.  They have the same meaning as LOADSTATEMODULES and LOADSTATEBCDS, respectively.  Since Pilot will automatically expand the loadstate as necessary, these numbers are optional and need not be particularly accurate. The /u switch may be added to the MakeBoot command for UtilityPilot-based bootfiles.  This switch has no effect on program execution but makes the bootfile smaller by eliminating unnecessary data. With multiple bootmesa files, the last file takes precedence for all parameters except lsModules, lsBcds, and processes, in which cases the first bootmesa file takes precedence.  Parameters on the command line override those in a bootmesa file. Also, MakeBoot will take "\nnn" boot switches in its command line if they are enclosed in double quotes, such as:MakeBoot OthelloTriDLion[parm: UtilityPilot, parm: UtilityCommunication, switches: "\372"]/dhu>	<Mesa>11.1>Doc>SampleUser.cm is a sample User.cm containing all of the sections and entries recognized by the released tools. (Although some tools in this example do not have entries for WindowBox, TinyPlace, and InitialState, all released tools recognize these entries).    Internal Tools>	Chat:  filename/F (read commands from a file) doesn't work.>	TTYTajo:  The Protect.~ command isn't in TTYTajo.>	PupAdobe registers PupAdobe* (eg. PupAdobeEdit, PupAdobeQuery, ...) with the tooldriver.  Menu names are the same as Adobe's.  To use the tooldriver be sure you retrieve the latest PupAdobe.bcd and tool.sws and edit the tool names in the tooldriver script to refer to PupAdobe* instead of Adobe*.