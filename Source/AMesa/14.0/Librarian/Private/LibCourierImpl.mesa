-- File: LibCourierImpl.mesa - last edit:-- bjd                 14-Jul-86 18:03:14-- PLK                 27-Mar-84 15:45:24-- Copyright (C) 1985, 1986 by Xerox Corporation. All rights reserved.DIRECTORY  Auth USING [DescribeCredentials, DescribeVerifier],  Courier USING [Description],  LibCourier USING [CloseArguments, GetPrintNameArguments, GetPrintNameResults, MakeAtomArguments, MakeAtomResults, maxArrayLength, maxRecordSize, maxStrings, NextLibjectArguments, NextLibjectResults, OpenArguments, OpenResults, QueryArguments, QueryResults, SetPropertiesArguments, SimpleArguments],  LibOps USING [Properties],  XLibrarian USING [Atom, Property, PropertyType, Value],  XString;  LibCourierImpl: PROGRAM IMPORTS Auth, XString EXPORTS LibCourier =  BEGIN  Property: TYPE = XLibrarian.Property;  Value: TYPE = XLibrarian.Value;  Atom: TYPE = XLibrarian.Atom;  -- describe the procedure records  DescribeSimpleArguments: PUBLIC Courier.Description = {    sa: LONG POINTER TO LibCourier.SimpleArguments =      notes.noteSize[SIZE[LibCourier.SimpleArguments]];    notes.noteParameters[@sa.verifier, Auth.DescribeVerifier];    notes.noteParameters[@sa.libject, XString.DescribeReader]};    DescribeOpenArguments: PUBLIC Courier.Description = {    oa: LONG POINTER TO LibCourier.OpenArguments =      notes.noteSize[SIZE[LibCourier.OpenArguments]];    notes.noteParameters[@oa.dataBase, XString.DescribeReader];    notes.noteParameters[@oa.cred, Auth.DescribeCredentials];    notes.noteParameters[@oa.verifier, Auth.DescribeVerifier]};    DescribeOpenResults: PUBLIC Courier.Description = {    or: LONG POINTER TO LibCourier.OpenResults =      notes.noteSize[SIZE[LibCourier.OpenResults]];    notes.noteParameters[@or.replyVerifier, Auth.DescribeVerifier]};    DescribeCloseArguments: PUBLIC Courier.Description = {    ca: LONG POINTER TO LibCourier.CloseArguments =      notes.noteSize[SIZE[LibCourier.CloseArguments]];    notes.noteParameters[@ca.verifier, Auth.DescribeVerifier]};    DescribeNextLibjectArguments: PUBLIC Courier.Description = {    ncoa: LONG POINTER TO LibCourier.NextLibjectArguments =      notes.noteSize[SIZE[LibCourier.NextLibjectArguments]];    notes.noteParameters[@ncoa.verifier, Auth.DescribeVerifier];    notes.noteParameters[@ncoa.current, XString.DescribeReader];    notes.noteParameters[@ncoa.mask, XString.DescribeReader];    notes.noteParameters[@ncoa.user, XString.DescribeReader]};    DescribeNextLibjectResults: PUBLIC Courier.Description = {    ncor: LONG POINTER TO LibCourier.NextLibjectResults =      notes.noteSize[SIZE[LibCourier.NextLibjectResults]];    notes.noteParameters[@ncor.next, XString.DescribeReaderBody];    notes.noteParameters[@ncor.replyVerifier, Auth.DescribeVerifier]};    DescribeMakeAtomArguments: PUBLIC Courier.Description = {    aa: LONG POINTER TO LibCourier.MakeAtomArguments =      notes.noteSize[SIZE[LibCourier.MakeAtomArguments]];    notes.noteParameters[@aa.verifier, Auth.DescribeVerifier];    notes.noteString[@aa.tag]};    DescribeMakeAtomResults: PUBLIC Courier.Description = {    ar: LONG POINTER TO LibCourier.MakeAtomResults =      notes.noteSize[SIZE[LibCourier.MakeAtomResults]];    notes.noteParameters[@ar.replyVerifier, Auth.DescribeVerifier]};    DescribeGetPrintNameArguments: PUBLIC Courier.Description = {    gpna: LONG POINTER TO LibCourier.GetPrintNameArguments =      notes.noteSize[SIZE[LibCourier.GetPrintNameArguments]];    notes.noteParameters[@gpna.verifier, Auth.DescribeVerifier]};    DescribeGetPrintNameResults: PUBLIC Courier.Description = {    gpnr: LONG POINTER TO LibCourier.GetPrintNameResults =      notes.noteSize[SIZE[LibCourier.GetPrintNameResults]];    notes.noteString[@gpnr.s];    notes.noteParameters[@gpnr.replyVerifier, Auth.DescribeVerifier]};    DescribeQueryArguments: PUBLIC Courier.Description = {    qa: LONG POINTER TO LibCourier.QueryArguments =      notes.noteSize[SIZE[LibCourier.QueryArguments]];    notes.noteParameters[@qa.verifier, Auth.DescribeVerifier];    notes.noteParameters[@qa.libject, XString.DescribeReader];    notes.noteArrayDescriptor[@qa.atoms, SIZE[Atom], LibCourier.maxArrayLength]};    DescribeQueryResults: PUBLIC Courier.Description = {    qr: LONG POINTER TO LibCourier.QueryResults =      notes.noteSize[SIZE[LibCourier.QueryResults]];    notes.noteParameters[@qr.plist, DescribeProperties];    notes.noteParameters[@qr.replyVerifier, Auth.DescribeVerifier]};    DescribeSetPropertiesArguments: PUBLIC Courier.Description = {    spa: LONG POINTER TO LibCourier.SetPropertiesArguments =      notes.noteSize[SIZE[LibCourier.SetPropertiesArguments]];    notes.noteParameters[@spa.verifier, Auth.DescribeVerifier];    notes.noteParameters[@spa.libject, XString.DescribeReader];    notes.noteParameters[@spa.plist, DescribeProperties]};  -- describing my types  DescribeProperties: PUBLIC Courier.Description =    BEGIN    refProps: LONG POINTER TO LibOps.Properties =      notes.noteSize[SIZE[LibOps.Properties]];    notes.noteDeadSpace[@refProps.props, 0];    notes.noteArrayDescriptor[      @refProps.props, SIZE[Property], LibCourier.maxArrayLength];    FOR i: NATURAL IN [0..refProps.props.LENGTH) DO      notes.noteParameters[@refProps.props[i], DescribeProperty];      ENDLOOP;    END;    DescribeProperty: PUBLIC Courier.Description =    BEGIN    prop: LONG POINTER TO Property ¬ notes.noteSize[SIZE[Property]];    lengths: ARRAY [0..XLibrarian.PropertyType.LAST.ORD] OF CARDINAL ¬ [      SIZE[Value.null], SIZE[Value.time], SIZE[Value.client],      SIZE[Value.string], SIZE[Value.strings], SIZE[Value.integer],      SIZE[Value.xString], SIZE[Value.xStrings],      SIZE[Value.spare8], SIZE[Value.spare9]];    notes.noteChoice[@prop.value.body, SIZE[Value], DESCRIPTOR[lengths]];    WITH val: prop.value SELECT FROM      null, spare8, spare9 => NULL;      time => notes.noteLongCardinal[LOOPHOLE[@val.time]];      client => notes.noteArrayDescriptor[        @val.record, SIZE[WORD], LibCourier.maxRecordSize];      string => notes.noteString[@val.string];      strings => {        notes.noteArrayDescriptor[	  @val.strings, SIZE[LONG STRING], LibCourier.maxStrings];	FOR i: NATURAL IN [0..val.strings.LENGTH) DO	  notes.noteString[@val.strings[i]];	  ENDLOOP};      integer => notes.noteLongInteger[@val.integer];      xString => notes.noteParameters[@val.string, XString.DescribeReader];      xStrings => {        notes.noteArrayDescriptor[	  @val.strings, SIZE[XString.Reader], LibCourier.maxStrings];	FOR i: NATURAL IN [0..val.strings.LENGTH) DO	  notes.noteParameters[@val.strings[i], XString.DescribeReader];	  ENDLOOP};      ENDCASE;    END;  -- main line code  END.LOG (date - person - action)27-Mar-84 15:45:24 - plk - created. 27-Mar-86 11:06:51 - bjd - added xstring stuff.   