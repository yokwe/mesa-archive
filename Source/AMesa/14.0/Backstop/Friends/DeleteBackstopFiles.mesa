-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- File; [Igor]<Int>Backstop>Friends>DeleteBackstopFiles.mesa - last edit by-- LXR    ,	22-Apr-83 11:22:52DIRECTORY  CommonSoftwareFileTypes USING [tBackstopDebugger, tBackstopDebuggee],  Exec USING [AddCommand, ExecProc, FreeTokenString, GetToken, OutputProc],  File USING [File, Delete, nullFile],  Format USING [Line, StringProc],  String USING [EquivalentString],  Volume USING [    ID, GetLabelString, GetNext, LookUpRootFile, maxNameLength,     nullID, RemoveRootFile, RootDirectoryError, systemID];DeleteBackstopFiles: PROGRAM  IMPORTS Exec, File, Format, String, Volume =  BEGIN    DoIt: Exec.ExecProc = {    volume, switches: LONG STRING ¬ NIL;    Write: Format.StringProc = Exec.OutputProc[h];    lvID: Volume.ID ¬ Volume.nullID;    DO      ENABLE        UNWIND => {          volume ¬ Exec.FreeTokenString[volume];          switches ¬ Exec.FreeTokenString[switches]};      [volume, switches] ¬ Exec.GetToken[h];      IF volume = NIL AND switches = NIL THEN EXIT;      IF volume # NIL THEN {        lvID ¬ MapClientVolumeNameToID[volume];	DeleteBackstopFiles[lvID];	Write["Deleted backstop files from volume "L];	Format.Line[Write, volume]};      volume ¬ Exec.FreeTokenString[volume];      switches ¬ Exec.FreeTokenString[switches];      ENDLOOP;    };  DeleteBackstopFiles: PROCEDURE [volume: Volume.ID ¬ Volume.systemID] =     BEGIN    cap: File.File ¬ File.nullFile;    cap ¬ Volume.LookUpRootFile[      type: CommonSoftwareFileTypes.tBackstopDebugger,      volume: volume ! Volume.RootDirectoryError => CONTINUE];    IF cap # File.nullFile THEN {      Volume.RemoveRootFile[type: CommonSoftwareFileTypes.tBackstopDebugger, volume: volume !        Volume.RootDirectoryError => CONTINUE];      File.Delete[cap]};    cap ¬ Volume.LookUpRootFile[      type: CommonSoftwareFileTypes.tBackstopDebuggee,      volume: volume ! Volume.RootDirectoryError => CONTINUE];    IF cap # File.nullFile THEN {      Volume.RemoveRootFile[type: CommonSoftwareFileTypes.tBackstopDebuggee, volume: volume !        Volume.RootDirectoryError => CONTINUE];      File.Delete[cap]};    END;  MapClientVolumeNameToID: PROCEDURE [name: LONG STRING]    RETURNS [volumeID: Volume.ID] =    BEGIN    volumeID ¬ Volume.nullID;    UNTIL (volumeID ¬ Volume.GetNext[volumeID, ALL[TRUE]]) = Volume.nullID DO      volumeLabel: STRING ¬ [Volume.maxNameLength];      Volume.GetLabelString[volumeID, volumeLabel];      IF String.EquivalentString[volumeLabel, name] THEN EXIT;      ENDLOOP;    END;      Exec.AddCommand["RemoveBackstopFiles"L, DoIt];    END.  of DeleteBackstopFiles.mesa    