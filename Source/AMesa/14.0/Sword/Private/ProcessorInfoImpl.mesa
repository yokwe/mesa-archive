-- ProcessorInfoImpl.mesa created by DEG on 11-Jan-86 23:29:29-- last edited by DEG:	21-Nov-86 16:18:56DIRECTORY  Device USING [Type],  DeviceTypes USING [    anyPilotDisk, cdc9730, sa1000, sa1004, sa4000, sa4008, t300, t80],  DeviceTypesExtraExtras USING [m2235, m2242, m2243],  DiskChannel USING [Drive, GetDriveAttributes, GetNextDrive, nullDrive],  ESCAlpha USING [aVERSION, aXOR],  Frame USING [GetReturnFrame, ReadPC, WritePC],  Mopcodes USING [zESC],  PrincOps USING [ESCTrapTable, LocalFrameHandle, StateVector],  ProcessorInfo USING [DisplayType, FloatingPointStyle, MachineType],  UserTerminal USING [screenHeight, screenWidth];ProcessorInfoImpl: PROGRAM   IMPORTS DiskChannel, Frame, UserTerminal  EXPORTS ProcessorInfo =  BEGIN    MachineType: TYPE = MACHINE DEPENDENT {    altoI (1), altoII (2), altoIIXM (3), dolphin (4), dorado (5), dandelion (6),    dicentra (7), daybreak (8), daisy (9), kiku(0AH), unknown(0FH)};    MicrocodeVersion: TYPE =  MACHINE DEPENDENT RECORD [    machineType(0:0..3): MachineType,    majorVersion(0:4..7): [0..17B],  -- incremented by incompatible changes    unused(0:8..11): [0..17B],    ttyLF(0:12..12): TTYorLF,    color(0:13..13): BOOLEAN,    floatingPoint(0:14..14): BOOLEAN,    cedar(0:15..15): BOOLEAN,    releaseDate (1): CARDINAL];  -- days since January 1, 1901    SubMachineType: TYPE = {color, none, trident};   TTYorLF: TYPE = {tty, lf};    aXWPL:     [0..256) = 0EBH;    cedarSupport: PUBLIC BOOLEAN;  displayType: PUBLIC ProcessorInfo.DisplayType;  floatingPoint: PUBLIC ProcessorInfo.FloatingPointStyle;  globalMachineType: MachineType;  machineType: PUBLIC ProcessorInfo.MachineType;  microcodeVersion: MicrocodeVersion;  subType: SubMachineType;      GetMachineAttributes: PUBLIC PROCEDURE    RETURNS[    machineType: ProcessorInfo.MachineType,    displayType: ProcessorInfo.DisplayType,    floatingPoint: ProcessorInfo.FloatingPointStyle, cedarSupport: BOOLEAN] =    BEGIN    RETURN[machineType: machineType, displayType: displayType,      floatingPoint: floatingPoint, cedarSupport: cedarSupport];    END;    GetMachineType: PUBLIC PROCEDURE RETURNS[ProcessorInfo.MachineType] =     BEGIN    RETURN[machineType];    END;    GetMicrocodeVersion: PROC RETURNS [MicrocodeVersion] = MACHINE CODE    {Mopcodes.zESC, ESCAlpha.aVERSION};    Init: PROCEDURE =    BEGIN      IF PrincOps.ESCTrapTable[ESCAlpha.aVERSION] =         PrincOps.ESCTrapTable[ESCAlpha.aXOR] THEN	BEGIN << no default implementation for VERSION yet. >>	diskDrive: DiskChannel.Drive ¬ DiskChannel.nullDrive;	deviceType: Device.Type ¬ DeviceTypes.anyPilotDisk;	subType ¬ none;	diskDrive ¬ DiskChannel.GetNextDrive[prev: diskDrive];	deviceType ¬ DiskChannel.GetDriveAttributes[drive: diskDrive].deviceType;	globalMachineType ¬ unknown;	SELECT deviceType FROM	  DeviceTypes.t80, DeviceTypes.t300, DeviceTypes.cdc9730 => {	    globalMachineType ¬ dandelion;	    subType ¬ trident};	  DeviceTypes.sa1000, DeviceTypes.sa1004,	  DeviceTypes.sa4000, DeviceTypes.sa4008 => globalMachineType ¬ dandelion;	  DeviceTypesExtraExtras.m2235, DeviceTypesExtraExtras.m2242,	  DeviceTypesExtraExtras.m2243 => globalMachineType ¬ kiku;	  ENDCASE;	IF globalMachineType = unknown THEN {	  globalMachineType ¬ IF (UserTerminal.screenHeight = 808) AND 	    (UserTerminal.screenWidth = 1024) THEN	    dandelion ELSE unknown};	IF globalMachineType = dandelion THEN {	  IF subType = none THEN {	    PrincOps.ESCTrapTable[aXWPL] ¬ LOOPHOLE[TimesWordsPerLine];	    subType ¬ IF TimesWpl[1] = 512 THEN color ELSE none;	    };	  };	PrincOps.ESCTrapTable[ESCAlpha.aVERSION] ¬ LOOPHOLE[VERSION];	END;      microcodeVersion ¬ GetMicrocodeVersion[];    END;    TimesWpl: PROC [v: LONG INTEGER] RETURNS [LONG INTEGER] =     MACHINE CODE {Mopcodes.zESC, aXWPL};    TimesWordsPerLine: PROC [v: LONG INTEGER] RETURNS [wpl: LONG INTEGER] = {    << This is only implemented on DLions. >>    lf: PrincOps.LocalFrameHandle;    state: PrincOps.StateVector;    state ¬ STATE;    wpl ¬ v * 64; << 1024 bit per line / 16 bits per word = 64 words per line. >>    lf ¬ Frame.GetReturnFrame[];    Frame.WritePC[pc: [Frame.ReadPC[lf] + 2], lf: lf];    STATE ¬ state};    VERSION: PROC RETURNS [version: MicrocodeVersion] = {    lf: PrincOps.LocalFrameHandle;    state: PrincOps.StateVector;    state ¬ STATE;    version ¬ [machineType: globalMachineType, majorVersion: 0, unused: 0,      ttyLF: (IF subType = trident THEN tty ELSE lf), color: (subType = color),       floatingPoint: FALSE, cedar: FALSE, releaseDate: 0];    lf ¬ Frame.GetReturnFrame[];    Frame.WritePC[pc: [Frame.ReadPC[lf] + 2], lf: lf];    STATE ¬ state};    Init[];    cedarSupport ¬ microcodeVersion.cedar;  displayType ¬ IF microcodeVersion.ttyLF = tty THEN tty ELSE    IF microcodeVersion.color THEN largeFormatColor ELSE largeFormatMonochrome;  floatingPoint ¬ IF microcodeVersion.floatingPoint THEN microcode ELSE software;  machineType ¬ SELECT microcodeVersion.machineType FROM    dandelion => (IF subType = trident THEN tridentDandelion ELSE dandelion),    daybreak => daybreak,    daisy => daisy,    kiku => kiku,    dorado => dorado,    dicentra => dicentra,    altoIIXM => altoIIXM,    altoII => altoII,    altoI => altoI,    dolphin => dolphin,    ENDCASE => unknown;      END...