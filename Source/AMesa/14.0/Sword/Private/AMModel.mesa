-- Copyright (C) 1985  by Xerox Corporation. All rights reserved. -- AMModel.mesaDIRECTORYBcdDefs,WorldVM USING [World],WorldVMOps USING [LongGlobalFrameHandle];AMModel: DEFINITIONS = {  GFHandle: TYPE = WorldVMOps.LongGlobalFrameHandle;  Context: TYPE = RECORD[    world: WorldVM.World,     classroom: SELECT tag: Class FROM      world => [],      model => [index: CARDINAL], --LoadStateFormat.Index      prog => [gf: GFHandle],      interface => [],      proc => [],      statement => [],      none => [],      ENDCASE];      Source: TYPE = LONG POINTER TO SourceObj;  SourceObj: TYPE = RECORD[    fileName: LONG STRING ¬ NIL,    class: Class ¬ none,    versionStamp: BcdDefs.VersionStamp,    sourceRange: SELECT tag:* FROM      entire => [],      field => [firstpos, lastpos: LONG CARDINAL ¬ 0],      ENDCASE];        Section: TYPE = LONG POINTER TO SectionObj;  SectionObj: TYPE = RECORD[    world: WorldVM.World,    classroom: SELECT class: Class FROM      world => [],      model => [],      prog => [moduleName: LONG STRING, versionStamp: BcdDefs.VersionStamp,        gf: GFHandle],      interface => [],      proc => [prog: LONG POINTER TO SectionObj.prog ¬ NIL,        entryPointIndex: CARDINAL],      statement => [prog: LONG POINTER TO SectionObj.prog ¬ NIL,         sourcePosition: CARDINAL],      none => [],      ENDCASE];      Class: TYPE = {world, model, prog, interface, proc, statement, none};  nullContext: Context = [NIL, none[]];       IsNullContext: PROC[c: Context] RETURNS[BOOLEAN] = INLINE {     RETURN[WITH c SELECT FROM none => TRUE, ENDCASE => FALSE]};        FileSource: PROC [fileName: LONG STRING, class: --model, prog, interface--Class]    RETURNS [Source];      SourceFileName: PROC [source: Source] RETURNS [LONG STRING] = INLINE {    RETURN[source.fileName]};  SourceVersion: PROC [source: Source] RETURNS [BcdDefs.VersionStamp] = INLINE {    RETURN[source.versionStamp]};  SourceSection: PROC [source: Source, context: --world or model--Context]    RETURNS [section: Section, contexts: --prog--Context];    NextSection: PROC[section: Section] RETURNS[Section];  NoNextSection: ERROR;    FreeSource: PROC[source: Source];  FreeSection: PROC[section: Section];          RootContext: PROC[world: WorldVM.World] RETURNS[Context];    ContextWorld: PROC[context: Context] RETURNS[WorldVM.World];    ContextClass: PROC[context: Context] RETURNS[Class];    ContextName: PROC[context: Context, name: LONG STRING, radix: CARDINAL ¬ 10];    --        world => worldName    --        model => <configName>:ConfigIndex#<index in loadstate>    --        prog => <progName>:gfh#<gfh>    --        interface => <interface name>     --        proc => <procName>:fh#<fh>    --        statement => <ContextName[proc]>:FGT#<index in fgt>    -- radix used for any numbers        ContextChildren: PROC[context: Context, p: ChildProc] RETURNS[Context];   ChildProc: TYPE = PROC[c: Context] RETURNS[stop: BOOL];   « Given a module name and a world context, this returns a Context for the most recently loaded global frame for a program with that name. name must identify a model or prog (someday interface) if context identifies a world, or a prog (someday interface) if context identifies a model. The format of the name should be the same as that produced by ContextName, with elided fields meaning "don't care". The result will be either a model or prog (someday interface) context.»      MostRecentNamedContext: PROC[name: LONG STRING,     context: --world or model--Context] RETURNS[Context];    -- Like MostRecentNamedContext, but gets 'em all.  NamedContexts: PROC[name: LONG STRING, context: Context,    proc: PROC[Context] RETURNS[stop: BOOL]]    RETURNS[Context];      ParentContext: PROC[context: Context] RETURNS[Context];      «   InterfaceRecords: PROC[world: Context] RETURNS[LIST OF --interface--Context];  Imports: PROC[context: Context] RETURNS[LIST OF PartialInterfaceInstance];        -- Implemented only for model and prog contexts  Exports: PROC[context: Context] RETURNS[LIST OF PartialInterfaceInstance];        -- Implemented only for model and prog contexts   »  }..