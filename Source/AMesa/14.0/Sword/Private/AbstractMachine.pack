-- File: AbstractMachine.pack - last edit:-- Litman              19-Oct-87  0:46:19-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.AbstractMachine: SEGMENT = {ErrorA: CODE PACK = {  AMEventsImplA [EV, CATCH CODE];   AMEventsImplB [EV, CATCH CODE];   AMEventsImplC [EV, CATCH CODE];  AMLoadstateImpl [EV, CATCH CODE];  AMModelImpl [EV, CATCH CODE];   AMModelLocationImpl [EV, CATCH CODE];  AMModelSectionImpl [EV, CATCH CODE];  AMProcessImpl [EV, CATCH CODE];  };ErrorB: CODE PACK = {  AMProcessBasicImpl [EV, CATCH CODE];  AMUsefulImpl [EV, CATCH CODE];  FastBreakImpl [EV, CATCH CODE];  RuntimeErrorImpl [EV, CATCH CODE];  WVMBootingImpl [EV, CATCH CODE];  WVMCache [EV, CATCH CODE, ExpandMapLog];  };ErrorC: CODE PACK = {  FreezeImpl [EV, CATCH CODE];  WVMGlobalFrames [EV, CATCH CODE];  WVMImpl [EV, CATCH CODE];  WVMOutLd [EV, CATCH CODE];  WVMPatchImpl [EV, CATCH CODE];  WVMTeledebug [EV, CATCH CODE];  RiggleImpl [EV, CATCH CODE];  VMMapLogImpl [EV, CATCH CODE];  OthelloOpsExtrasImpl [EV, CATCH CODE];  };Init: CODE PACK = {  FreezeImpl [MAIN];  RuntimeErrorImpl [MAIN];  WVMImpl [MAIN];  WVMOutLd [MAIN];  WVMBootingImpl [MAIN];  AMEventsImplA [MAIN];   AMEventsImplB [MAIN];   AMEventsImplC [MAIN];  AMLoadstateImpl [MAIN];  AMModelImpl [MAIN];   AMModelLocationImpl [MAIN];  AMModelSectionImpl [MAIN];  AMProcessImpl [MAIN];  AMProcessBasicImpl [MAIN];  AMUsefulImpl [MAIN];  FastBreakImpl [MAIN];  WVMCache [MAIN];  WVMGlobalFrames [MAIN];  WVMPatchImpl [MAIN];  WVMTeledebug [MAIN];  RiggleImpl [MAIN];  VMMapLogImpl [MAIN];  OthelloOpsExtrasImpl [MAIN];  };  MoreInit: CODE PACK = {  WVMOutLd [MakeVolumes, ProtectOutloadFiles];  AMEventsImplA [GetEvents, GrabLocalEvents, HandleLocalEvents];  FastBreakImpl [SpecifyDefaultBreakHandler];  RuntimeErrorImpl [    RegisterUncaughtSignalHandler, RegisterFaultHandler,     RegisterCallDebugHandler, RegisterBreakHandler,     InitializeFilter, RegisterFilter, UnRegisterFilter, ClearFilter];  WVMBootingImpl [RegisterProcs];  WVMImpl [SetSymbols];  };  GetWorld: CODE PACK = {  WVMOutLd [LocateOutload, ParseSwitches];  WVMImpl [RemoteWorld, OutloadWorld, LocalWorld, ClientWorld,     GetWorld, EntryFindWorld, NoWorld];  WVMTeledebug [LocateRemote, TimeForHops];  };Stop: CODE PACK = {  AMEventsImplA [StopEvents, EntryStop, ReleaseLocalEvents];  WVMCache [StopLocal, StopOutload, StopTeledebugging, StopClient,    UnmapMFSpace, UnmapBootSpace, DeleteCache, UnmapBFM];  AMLoadstateImpl [DestroyLoadstate];  WVMOutLd [CloseOutload];  WVMTeledebug [CloseConnection, FreeStorage, FreeBlock];  WVMImpl [InvalidateWorld];  WVMBootingImpl [Deregister];  };  Unload: CODE PACK = {  FreezeImpl [PrepareToUnload];  RuntimeErrorImpl [PrepareToUnload];  OthelloOpsExtrasImpl [MapStartListHeader, GetVolumeBootFile, ConvertBootFileType];  WVMBootingImpl [UnloadWVMBooting];  WVMOutLd [UnloadWVMOutLd, DeleteVolumes, ReleaseMFiles,    PleaseRelease, WorldForOutload, RemoveMFile];  WVMTeledebug [UnloadWVMTeledebug];  };  LocalEvent: CODE PACK = { « resident, one page only »  RuntimeErrorImpl [InitializeAwaitDebuggerRequest];  FastBreakImpl [FastBreakHandler];  FreezeImpl [FreezingPoint, FreezeTrapFrame];  };   Events: CODE PACK = {  AMEventsImplA [MyBreak, SignalEvent, LocalEvent,     UnknownEvent, FaultEvent, ProvokeProcessEvent, CallDebugger,    MyCallDebug, MyFaulter, MyCatcher, GatherLocalESV];  AMEventsImplB [BreakEvent];  AMEventsImplC [    ConditionTrue, ConditionSatisfied, GetOperand,    MyBug, MyBugValue, MyBugLongValue];  RuntimeErrorImpl [InformationalSignal];  WVMImpl [LocalCome, LocalGo];  };  Proceed: CODE PACK = {  RiggleImpl [RiggleUnMapBootSpace];  AMEventsImplA [MyCheckpoint, RunClient];  WVMCache [FlushMaplog, PutNonLocalESV, SetMaplog,    FlushBootFile, FlushCache, FlushBootSpace, FlushCS];  WVMTeledebug [FlushRemoteBootFile, RemoteCoreWrite, RemoteDiskWrite];  WVMImpl [BeforeHeraldBoot];  };Swap: CODE PACK = {  RiggleImpl [RiggleWorld];  WVMImpl [Go, Notify, StartRun, EndRun,    Lock, Unlock];  WVMTeledebug [GoRemote];  WVMBootingImpl [OutLoadInLoad, InloadedTwice];  WVMOutLd [    OutloadInload, TajoOutloadRiggle, TajoOutload, HardBoot,    GoOutloadRiggle, GoOutload, CreateOutload, UpdateMFile, GrowMFiles];  };Resume: CODE PACK = {  RiggleImpl [RiggleMapBootSpace];  AMEventsImplA [MyRollback, LookAtClient, RemoteEvent,     CallBootedNotifiers, NextBootedNotifier];  AMEventsImplB [FlushBreaks];  WVMOutLd [CurrentOutloadWorld];  WVMImpl [AfterHeraldBoot, ValidLoadstate, LoadstateAddress];  WVMCache [GetMaplog, SetupBootFile, CreateCache, KillCache,     MapMFSpace, MapBootSpace, MapBFM, GFT, GetNonLocalESV,    ProcessVMMapLog, ResetMaplog];  VMMapLogImpl [InsertEntry, SeeEntry];  WVMTeledebug [SetupRemoteBootFile, AllocateStorage, AllocBlock];  AMLoadstateImpl [AcquireLoadstate];  };SetModule: CODE PACK = {  AMUsefulImpl [MapConfigToReal, MapRealToConfig, WriteName,    «SetModule proper»    Frame];  AMLoadstateImpl [CopyLoadstate, ExpandBcds, FixupLoadstate, GetNode, FreeNode,    MapConfigToReal, MapRealToConfig, MapRealToEnh, MapConfigToMth,    GetAttributes, EnumerateModules,     «SetModule proper»    EnumerateBcds, AcquireBcd, EnumerateModulesInConfig,     MapCgfiToMth, Validate, Copy, AcquireLocalBcd];  };  ConfigSW: CODE PACK = {  AMModelImpl [ContextName, AppendLongNumber, AppendNumber];  AMUsefulImpl [    CtiName, ModuleName, ConfigName, WriteName2, ErrorName,    ModuleInConfig, ConfigInConfig,    EnumerateModules, EnumerateModulesInConfig, EnumerateConfigsForModule,     EnumerateConfigs, EnumerateConfigsInConfig];  };  NewSeg: CODE PACK = {  WVMCache [    NewSeg, NewCoreSegment, NewDiskSegment, OutloadCoreRead, OutloadDiskRead,    FindPageInBootFile, BootFileAddress, LookupVMMapEntry,    SwappedIn, GetPageState];  VMMapLogImpl [MovePages, SignalIfError, FindEntry, InEntry, IsWriteProtected];  WVMTeledebug [RemoteCoreRead, ReadCorePage, RemoteDiskRead, ReadDiskPage];  };  Breakpoint: CODE PACK = {  AMEventsImplB [ContinueFromBreak,    BreakAt, BreakAfter, BreakIt,     FrameBreak, SetBreak, RealSetBreak, ClearBreak, NextBreak];  AMModelLocationImpl [EntryLocations, ExitLocations, GetCodeLocation,    PcForEntryPoint, GetENRecord, SymbolsForSection, PcForSourcePosition,    ClosestSource];  WVMPatchImpl [SetBreak, ClearBreak, ReadCodeByte, ReadCodeWord,     WriteCodeByte, Patch, AtomicWrite, CheckPatchTable];  WVMImpl [GetSym];  };  Process: CODE PACK = {  AMProcessImpl [    GetProcesses, AddProcessToList, InList, MergeProcessLists,    DeleteProcessList, Name, Freeze, Adjust, FreezeOrAdjust,    Thaw, Abort, GetState, CallDebugger, ContextFrames, ProcessInfo];  AMProcessBasicImpl [    Info, InfoFromPSB,     OnRemoteQueue, GetRemotePSB, PsbAddr,    Thaw, Unfreeze, LockFilter, UnlockFilter,    ApplyRemoteFilter,    Dequeue, AbortFrame, TrapME, TrapMRE,     Abort, GetFreezee, SetFreezee, Freezees, Freezer,    GetRemoteLink, SetRemoteLink, SetRemotePsbFrame, Lock];  };ProcessSW: CODE PACK = {  AMUsefulImpl [FirstSonConfig, SiblingConfig, SiblingModule, Sibling,    NextBcd, FindLevel];  };  MiscHot: CODE PACK = {  WVMImpl [WorldName, GetLoadstate, GetType, GetMDS, GetESV, GetSV,      SetBreakNumber, GetBreakNumber];  WVMGlobalFrames [GFlong, GFshort, LFshort, LFlong, CodebaseFromGf];  WVMTeledebug [Setup, EnetSetup, SendAndReceive, EnetSendAndReceive, CheckAbort, Like];  WVMCache [    NilAddress, Long, PageAndOffsetFromLongPointer, Read, LongRead, CopyRead,    Write, SpecialWrite, WriteCommon, LongWrite, CopyWrite,    GetCS, GetLocalCS, GetNonLocalCS];  };  MiscCold: CODE PACK = {  AMEventsImplA [ActorForWorld, CallClient, GetOutcome,    ApplyProcedure, ComputeFrameSize, ApplySignal, GetResults, Kill, Screen];  WVMImpl [CurrentIncarnation, EnumerateWorlds];  WVMOutLd [VolumeForOutload, VolumeForBootLocation];  WVMTeledebug [SetTTY];  WVMGlobalFrames [GlobalFrameTable, Copy, Started, Codelinks,     MakeControlLink, GFFromControlLink, GetLink];  AMModelImpl [RootContext, ContextClass, ContextWorld];  AMModelImpl [MostRecentNamedContext, ContextChildren];  AMUsefulImpl [VersionStamp];  };  Trash: DISCARD CODE PACK = {  AMEventsImplA [RopeFromRemote, RegisterBootedNotifier, UnRegisterBootedNotifier,    TurkeyCatcher];  VMMapLogImpl [FindFirstForInsert];  AMModelImpl [NextSection];  AMModelLocationImpl [    GetCodeAndSourceLocation, PcOnStatementBoundary,     SectionForLocation, SourcePositionForPc, EntryPointForPc];  AMModelSectionImpl [    WorldSection, ModelSection, InterfaceSection,    ProgramSection, ProcSection, StmtSection, FreeSection];  AMProcessImpl [ReturnFrom, Retry];  AMProcessBasicImpl [ReturnLink];  AMUsefulImpl [Config];  FastBreakImpl [    FastBreaksLeft, SetFastBreak,     ClearFastBreak, ClearAllFastBreaks, ClearInternal,     CountBreaksAtLocation, SetBreak, ClearBreak];  RiggleImpl [RiggleCheckVM, GetNextPilotVM];  WVMBootingImpl [Boot, Checkpoint, DeleteCheckpoint, CallBootingProcs];  WVMImpl [RiggleWorldOk];  }; }; -- AbstractMachineResident: FRAME PACK = {  FreezeImpl;  RuntimeErrorImpl;  WVMPatchImpl;  };Frames: FRAME PACK = {  AMEventsImplA;   AMEventsImplB;   AMEventsImplC;  AMLoadstateImpl;  AMModelImpl;   AMModelLocationImpl;  AMModelSectionImpl;  AMProcessImpl;  AMProcessBasicImpl;  AMUsefulImpl;  FastBreakImpl;  WVMBootingImpl;  WVMCache;  WVMGlobalFrames;  WVMImpl;  WVMOutLd;  WVMTeledebug;  RiggleImpl;  VMMapLogImpl;  OthelloOpsExtrasImpl;  };        