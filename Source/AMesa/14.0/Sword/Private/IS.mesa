-- Copyright (C) 1985  by Xerox Corporation. All rights reserved. -- IS.mesaDIRECTORYBcdDefs,BcdOps,CommandList, -- possible input commands for CoPilotITDIParseTable,Format,IT,PrincOps USING [SVPointer, Port],String,Symbols,UserInput;IS: DEFINITIONS = {  OPEN IT;  «====================================================  PROCEDURES====================================================»  -- CPContext  ResetContext: PROCEDURE[h: Handle];  SetOctal: PROCEDURE [h: Handle, p: LONG POINTER];  SetGlobal: PROCEDURE [h: Handle, gf: GFHandle];  SetLocal: PROCEDURE [h: Handle, lf: LFHandle];  SetProcess: PROCEDURE [h: Handle, p: IT.Process];  SetRootConfig: PROCEDURE [h: Handle, config: LONG STRING];  SetConfig: PROCEDURE [h: Handle, config: LONG STRING];  SetModule: PROCEDURE [h: Handle, mod: LONG STRING];  GetOctal: PROCEDURE[h: Handle] RETURNS [p: LONG POINTER];  GetGlobal: PROCEDURE[h: Handle] RETURNS [gf: GFHandle];  GetLocal: PROCEDURE[h: Handle] RETURNS [lf: LFHandle];  GetProcess: PROCEDURE[h: Handle] RETURNS [p: IT.Process];  GetRootConfig: PROCEDURE[h: Handle] RETURNS [config: LONG STRING];  GetRootConfigIndex: PROCEDURE[h: Handle]     RETURNS[config: CARDINAL --LoadStateFormat.Index--];  GetConfig: PROCEDURE[h: Handle] RETURNS [config: LONG STRING];  GetConfigIndex: PROCEDURE[h: Handle] RETURNS [cti: BcdDefs.CTIndex];  GetModule: PROCEDURE[h: Handle] RETURNS [mod: LONG STRING];  ListConfigs: PROCEDURE[h: Handle];  DisplayConfig: PROCEDURE[h: Handle];  DisplayCurrent: PROCEDURE[h: Handle];  SameConfig: PROC [h: Handle, bcd: BcdOps.BcdBase,     child, parent: BcdDefs.CTIndex]     RETURNS [BOOLEAN];        -- CPPsb  ResetCache: PROC[h: Handle];  ReadPsb: PROC [h: Handle, p: IT.Process] RETURNS [IT.PsbItem];  NextPsb: PROC [h: Handle, p: IT.Process] RETURNS [IT.PsbItem];  FaultAddr: PROC [h: Handle, p: IT.Process] RETURNS [LONG POINTER];  Frame: PROC [Handle, IT.PsbItem] RETURNS [LFHandle];  DisplayReadyList: PROC[h: Handle];  ListProcesses: PROC[h: Handle];  DisplayQueue: PROC [Handle, LONG STRING];  DisplayProcess: PROC [Handle, LONG STRING];  FindModule: PROC [Handle, LONG STRING];  Invalid: SIGNAL [psb: IT.Process];  DumpPSB: PROC [h: IT.Handle, psb: IT.PsbItem];    -- CommandList.Commands  Go: PROC [h: Handle];  Umbrella: PROC [it: Handle, data: LONG UNSPECIFIED,     proc: PROC [Handle, LONG UNSPECIFIED]];  DispatchChar: PROC [Handle, CHARACTER];  WriteError: PROC [h: Handle, error: CommandList.Error, eol: BOOLEAN ¬ TRUE];  WriteCommand: PROC [h: Handle, code: CommandList.Command];  Prompt: PROC[h: Handle, resetPrompt, resetParse: BOOLEAN ¬ FALSE];  Execute: PROC [h: Handle, code: CommandList.Command, call: ZeroProc];  Confirm: PROC [h: Handle, code: CommandList.Command, call: ZeroProc];  ModuleBreak: PROC [h: Handle, proc: TwoProc, prompt: CommandList.Command];  GetComment: PROC [h: Handle];  GetLine: PROC [h: Handle, com: IT.CommandRec, call: OneProc,    prompt: CommandList.Command ¬ null];  GetString: PROC [h: Handle, com: IT.CommandRec, call: OneProc,    prompt: CommandList.Command ¬ null];  GetText: PROC [h: Handle, com: IT.CommandRec, call: OneProc, term: TermProc];  GetTwoStrings: PROC [h: Handle,     com1, com2: IT.CommandRec, proc: TwoProc,    prompt: CommandList.Command ¬ null];  IsAtom: PROC [h: Handle, c: CHARACTER] RETURNS [BOOLEAN];  IsCR: PROC [h: Handle, c: CHARACTER] RETURNS [BOOLEAN];    -- Dump  ResetPrinters: PROC[h: Handle];   ShowTypeWithProc: PROC [      s: LONG STRING, layout: BOOLEAN ¬ FALSE,    output: Format.StringProc ¬ NIL, clientData: LONG POINTER ¬ NIL];  ShowTypeWithHandle: OneProc;  Basic, Pointer, Relative, StringPrinter, Enumerated, Record,    Array, LongArrayDesc, ArrayDesc, Xfer, Subrange, Real,     DumpLong, Opaque: FooProc;  Variant: PROC [h: Handle, f: Foo, pad: CARDINAL, usei: UnionSEIndex,    variant: PROC[h: Handle] RETURNS [Symbols.RecordSEIndex] ¬ NullVariant];  Sequence: PROC [h: Handle, f: Foo, pad: CARDINAL, sei: SequenceSEIndex,    variant: PROC[h: Handle] RETURNS [Symbols.RecordSEIndex] ¬ NullVariant];  CalculateAddr: PROC [h: Handle, ai: ArrayHandle, n: CARDINAL]     RETURNS [ba: BitAddress];  SeqToArray: PROC [h: Handle, f: Foo, sei: SequenceSEIndex, pad: CARDINAL,     ai: ArrayHandle];  Elements: PROC [h: Handle, ai: LONG POINTER TO ArrayInfo, printAll: BOOLEAN ¬ FALSE];  CompareSes: PROC [h: Handle, sei1, sei2: Symbols.SEIndex]     RETURNS [print: BOOLEAN];  EvalStack: PROC[h: Handle];  FieldCtx: PROC [h: Handle, f: Foo, ctx: Symbols.CTXIndex, pad: CARDINAL,    variant: PROC[h: Handle] RETURNS [Symbols.RecordSEIndex] ¬ NullVariant,    rsei: Symbols.RecordSEIndex ¬ Symbols.RecordSENull];  NullVariant: PROC[h: Handle] RETURNS [Symbols.RecordSEIndex];  Proc: PROC [Handle, ControlLink];  Port: PROC [Handle, LONG POINTER TO PrincOps.Port];  Process: PROC [Handle, UNSPECIFIED];  Prog: PROC [Handle, UNSPECIFIED];  PrintUCS: PROC[Handle];  Sig: PROC [Handle, SignalDesc];  SignalCtxFromState: PROC [Handle, SignalDesc, PrincOps.SVPointer];  XferName: PROC [h: Handle, cl: ControlLink, isei: Symbols.ISEIndex];  XferFrame: PROC [h: Handle, cl: ControlLink];  DumpChar: PROC [Handle, UNSPECIFIED];  HashVal: PROC [h: Handle, isei: Symbols.ISEIndex];  HtiVal: PROC [h: Handle, hti: Symbols.HTIndex];  Type: PROC [h: Handle, isei: Symbols.ISEIndex,    pub: BOOLEAN ¬ FALSE, nest: CARDINAL ¬ 0, recurring: BOOLEAN ¬ FALSE];  EnumVal: PROC [h: Handle, val: UNSPECIFIED, esei: EnumeratedSEIndex];  TypedNum: PROC [h: Handle, val: UNSPECIFIED, tsei: Symbols.SEIndex];  TypedLongNum: PROC [h: Handle, val: LONG UNSPECIFIED, tsei: Symbols.SEIndex];  BadNum: PROC [Handle, UNSPECIFIED];  Num: PROC [Handle, UNSPECIFIED, ValFormat];  LongNum: PROC [Handle, LONG UNSPECIFIED, ValFormat];  ModeName: PROC [Handle, Symbols.TransferMode];  UserText: PROC [h: Handle, s: STRING];  UserLongText: PROC[h: Handle, s: LONG STRING];  UserSubString: PROC[h: Handle, ss: String.SubString];    -- CPState  SetParse: PROC [h: Handle, proc: ParseProc];  ResetParse: PROC[h: Handle];  PopParse: PUBLIC PROC [h: IT.Handle];  PushParse: PUBLIC PROC [h: IT.Handle, proc: IT.ParseProc];  PopPrompt: PUBLIC PROC [h: IT.Handle];  PushPrompt: PUBLIC PROC [h: IT.Handle, proc: IT.PromptProc];  StringProc: UserInput.StringProcType;  FrameFromIContext: PROC[h: Handle] RETURNS [LONG POINTER];  GFFromIContext: PROC[h: Handle] RETURNS [GFHandle];  SetString: PROC[h: Handle, id: StringId, val: LONG STRING];    -- DIP1  Parse: PROCEDURE [Handle, LONG STRING] RETURNS [BOOLEAN];  Atom: PROCEDURE[h: Handle] RETURNS [symbol: Token];  ScanInit: PROCEDURE [h: Handle, string: LONG STRING];  ScanReset: PROCEDURE[h: Handle] RETURNS [BOOLEAN];  ProcessQueue: PROCEDURE [h: Handle];  QueueInit: PROC [lproddata: ITDIParseTable.ProdDataRef];    }..