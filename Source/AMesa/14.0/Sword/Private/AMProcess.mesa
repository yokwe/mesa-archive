-- File: AMProcess.mesa - last edit:-- Litman              22-Apr-87 23:31:41-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.DIRECTORYAMModel USING [Context, nullContext],AMProcessBasic USING [StateArray, State],WorldVM USING [World],WorldVMOps USING [LongLocalFrameHandle, Process, NullProcess];AMProcess: DEFINITIONS = {  LFHandle: TYPE = WorldVMOps.LongLocalFrameHandle;  ProcessList: TYPE = LONG POINTER TO ProcessRec;  ProcessRec: TYPE = RECORD[next: ProcessList, p: Process];  Process: TYPE = RECORD[world: WorldVM.World, psbi: WorldVMOps.Process];  nullProcess: Process = [NIL, WorldVMOps.NullProcess];    GetProcesses: PROC[context: AMModel.Context, states: AMProcessBasic.StateArray] RETURNS[processList: ProcessList];  AddProcessToList: PROC[processList: ProcessList, process: Process] RETURNS[ProcessList];  MergeProcessLists: PROC[listA, listB: ProcessList] RETURNS[listC: ProcessList];  DeleteProcessList: PROC[list: ProcessList] RETURNS[nil: ProcessList ¬ NIL];  HowManyInList: PROC[list: ProcessList] RETURNS[howMany: CARDINAL ¬ 0] = INLINE {    FOR p: ProcessList ¬ list, p.next UNTIL p = NIL DO      howMany ¬ howMany.SUCC;      ENDLOOP };  Name: PROC[p: WorldVMOps.Process, s: LONG STRING, radix: CARDINAL ¬ 10];  Freeze: PROC[processes: ProcessList, context: AMModel.Context ¬ AMModel.nullContext];  Adjust: PROC[processes: ProcessList, context: AMModel.Context ¬ AMModel.nullContext];  Thaw: PROC[processes: ProcessList];  GetState: PROC[p: Process] RETURNS[state: AMProcessBasic.State, faultData: LONG CARDINAL, priority: [0..7], stack: LFHandle, topFrame: BOOL];  CallDebugger: PROC[p: Process, msg: LONG STRING];    Abort: PROC[p: Process];  ReturnFrom: PROC[p: Process, frame: LFHandle, result: ArgsOrResults];  Retry: PROC[p: Process, frame: LFHandle, args: ArgsOrResults];  ArgsOrResults: TYPE = LONG POINTER;  LocalOnly: ERROR;  }.