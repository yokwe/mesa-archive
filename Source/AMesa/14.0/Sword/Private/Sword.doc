-- Sword.doc[Rasp:OSBU North]<MHacks>Doc>Sword.doc[Rasp:OSBU North]<MHacks>Tools>Sword.bcdWARNINGS: 1. Sword does not handle maplogs. It is meant to work with Pilot 13.0, which will not do maplogging. Outload clients should either have a Pilot 13.0 bootfile, or be booted with the /375 switch.Sword runs two tools, the Sword tool and the Interpreter tool. The Sword tool is used for freezing and thawing processes. The Interpreter tool is used to debug crashes, control breakpoints, and examine the runtime state of programs.[User.cm][Sword]WindowBox: [x: 0, y: 30, w: 512, h: 400]InitialState: tiny[Debugger]WindowBox: [x: 412, y: 0, w: 612, h: 435]uncaught: TRUEfault: TRUEbreak: TRUEcalldebug: TRUEprocesses: FALSEconfigs: FALSEmenu: TRUEWhen you load Sword.bcd, the Sword tool appears automatically. Sword allows you to inspect and modify the state of parallel processes, and to enumerate the set of loaded configurations and modules. Loadstate facilitiesAt the bottom left of the form subwindow are "List LoadState" and "List Context". "List LoadState" enumerates the currently loaded configurations in the client. If you type the name of a configuration in the "Context" stringitem, then click "List Context", Sword enumerates the modules in that configuration. At the bottom right corner of the menu is the "Destroy" command, which destroys the tool. Process facilitiesThe process facilities are based on the concept of "freezing" a process at some point on its callstack.  This means that the process continues execution normally, but when it returns to that point on its callstack, the process stops executing until it is thawed.  Of course, there is the special case where you freeze the process at its current frame, so it stops executing immediately.  The Sword allows you to freeze and thaw processes, and to look at the frozen frames of processes (even while the rest of the process is still executing).  There is no way to look at a process (or part of a process) that isn't frozen.  There are four "Freeze" buttons: "All", which freezes all processes at their current frame; "Ready", which freezes all ready processes at their current frame (i.e. processes that aren't suspended for a monitor lock, condition variable wait or fault); "Process" which freezes the process whose number (PSB index) is given in octal as the text beside the "PsbIndex" button on the right of the viewer.  Finally, the "Context" button freezes all processes associated with a perticular configuration or module, freezing them at the boundary of the context.  More precisely, "Context" enumerates all processes, and determines every process that has on its callstack a frame within the specified module or configuration; each such process is frozen at the point where control would return to within the module or configuration; any process currently executing (or waiting or faulted) within the module or configuration stops executing immediately.Examining frozen processesFor each process that is frozen, Sword displays a description of the process's current state, and three buttons, labelled with "Adjust", "Thaw", and "Debug". The state says things like "ready" or "waitingCV" or "pageFault", followed by the name of the frame at which the process is frozen and the priority of the process.  There is no way to look at non-frozen frames of the process. The state is wrapped in parentheses if the process's current frame is not frozen (that is, if the process is still executing). If you click the "Debug" button, an Interpreter tool is created for that process, which allows you to look at the frozen parts of the callstack in more detail. If you click the  "Thaw" button, the process is unfrozen and continues execution. If you click the "Adjust" button, it refreezes the entire callstack of the process. You can't thaw or adjust a process while it has an Interpreter; proceed the Interpreter first.They're really frozen!If you resume an outloaded client (for example, by proceeding the action that invoked the world-swap debugger) while some processes are frozen, they really are frozen when the client resumes.  This can be important when debugging parallel computations, but it can be dangerous. In particular, beware of resuming the client while critical system processes are frozen! You should freeze configurations as much as possible, so that you don't freeze anything unexpectedly.Interpreter ToolSword registers the Executive command "Interpreter.~", which may be used to create an Interpreter tool. This tool has the same functionality as CoPilot. There may be any number of Interpreter tools active at once. Interpreters are created automatically to handle certain local events. In the User.cm entry for [Debugger] there are booleans for uncaught signals, storage faults, breakpoints, and call debugs. If any of these booleans is TRUE, then if the corresponding event occurs, it is handled locally (that is, an Interpreter is created) instead of world-swapping. If any of these booleans is FALSE, then the event causes a world-swap. The booleans may be reset in the "CoPilot Options" window in any Interpreter. When an event occurs, an existing Interpreter is used if possible. An existing Interpreter can be used if it is dormant (has no client). Dormant Interpreters are destroyed with the destroy! button. The items in the tool's form subwindow are described below. For commands that require arguments, the arguments can be terminated either with the Apply! button or by typing carriage return.The go itemProceed continues execution of the client. Abort raises the error ABORTED in the currently executing process of the client. (It is suggested that you abort out of address faults.) Kill and screen are the same as in the Sword window. Start prompts for a global frame and start the frame. Proceed, abort, or kill makes the Interpreter dormant. The client itemWhen created with the "Interpreter.~" command, an Interpreter initially has the local world as client. A remote host or outload file can be debugged by setting this enumerated item to "remote" or "outload", respectively. You will be prompted for the name of the remote host or outload file. To end an outload debugging session, change this enumerated to "dormant". To end a remote debugging session, change this enumerated to "closeRem". If you are about to boot from the HeraldWindow and you do not want to use "<>Debuggee.outload" as the outload file, you can specify what the debuggee ouload file should be named by setting this enumerated item to "setOutld", and you will be prompted for the name of the new debuggee outload file. The processes boolean Turning the processes boolean on creates a subwindow in the Interpreter. The subwindow contains processes and callstacks and localvariables. You can zoom or close a particular line by selecting the cross (´) at the head of the line. The windows are automatically initialized to the context of the crash. It takes about 10 seconds from the time of the crash until the processes subwindow is displayed. For now, the processes boolean is global across all Interpreters.The configs booleanTurning the configs boolean on creates a subwindow in the Interpreter. The subwindow contains configurations and modules and globalvariables. You can zoom or close a particular line by selecting the cross (´) at the head of the line. The windows are automatically initialized to the context of the crash. It takes about 10 seconds from the time of the crash until the configs subwindow is displayed. For now, the configs boolean is global across all Interpreters.The destroy! commandIf the Interpreter is dormant, it is destroyed.The read and write itemsOctal and Ascii prompts for an address and number of values. Addresses in the first 64K of virtual memory should start with 0, which lets the Interpreter know that they are long.The attach itemTo use a source whose version does not match the one required by a symbols file, load the source into a filewindow, select anywhere in the source, and bug "source". To tell the Interpreter about a correspondence between a symbols file and a particular global frame, bug "symbols" and fill in the prompts for a global frame and a filename.The source! commandIf the current selection is on a local frame line in the process subwindow, then source! loads a filewindow with the source for that local frame. If the current selection is on a global frame line in the config subwindow, then source! loads a filewindow with the source for that global frame.The findModule! commandIf the current selection is on a local frame line in the process subwindow, then findModule! marks the configuration in the config subwindow that contains the global frame that the local frame points to. If the current selection is on a global frame line in the config subwindow, then findModule! marks the processes in the process subwindow that contain local frames which point to the global frame.The rep?! commandPrints numerical representations of the current selection.The showType! and type&bits! commandPrints type of selection. type&bits! also prints the bit layout.The options! commandCreates an options window.The break itemBreakpoints are global across all Interpreters, so they may be set and cleared from any Interpreter. "setbreak" sets a breakpoint at the sourceline where the selection is. "clearbreak" clears a breakpoint at the sourceline where the selection is. "clearall" clears all breakpoints. "list" lists the current breakpoints. "attachCondition" prompts for a break number and a condition. "attachKey" prompts for a break number and keystrokes.   