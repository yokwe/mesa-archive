-- WVMGlobalFrames.mesaDIRECTORYInline,PrincOps USING [GlobalFrameHandle, PrefixHandle, codebaseLowOffset, GlobalWord,  globalWordOffset, GlobalOverhead, BytePC, ControlLink, ControlLinkTag, GlobalCodebase],PrincOpsExtras2 USING [GlobalFrameTable, GFT, LongGlobalFrameHandle,   extraGlobalWordOffset, globalWordOffset, GlobalWord, ExtraGlobalWord,  GlobalOverhead, GFTHandle, ControlLink, ControlLinkTag],WorldVM,WorldVMOps,WVMPrivate;WVMGlobalFrames: PROGRAM   IMPORTS Inline, WorldVMOps  EXPORTS WorldVM, WorldVMOps = {    World: TYPE = LONG POINTER TO WorldObject;  WorldObject: PUBLIC TYPE = WVMPrivate.WorldObject;  GFT: PrincOpsExtras2.GlobalFrameTable = PrincOpsExtras2.GFT;    MaskFour: PROC[u: UNSPECIFIED] RETURNS[UNSPECIFIED] = INLINE {     RETURN[Inline.BITAND[u, 0FFFCH]] };    GlobalFrameTable: PUBLIC PROC[world: World] RETURNS[BOOLEAN] = {    RETURN[world.globalFrameTable]};      GFlong: PUBLIC PROC[world: World, gf: PrincOps.GlobalFrameHandle]    RETURNS[PrincOpsExtras2.LongGlobalFrameHandle] = {    IF gf = NIL THEN RETURN[NIL];    IF world.globalFrameTable THEN {      gfti: PrincOpsExtras2.GFTHandle = MaskFour[gf];      RETURN[WorldVMOps.LongRead[world, @GFT[gfti].globalFrame]]}    ELSE      RETURN[WorldVMOps.Long[world, gf]]};        GFshort: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS[PrincOps.GlobalFrameHandle] = {    IF gf = NIL THEN RETURN[NIL];    IF world.globalFrameTable     THEN RETURN[MaskFour[WorldVMOps.Read[world, gf-PrincOpsExtras2.globalWordOffset]]]    ELSE RETURN[Inline.LowHalf[gf]] };      LFshort: PUBLIC PROC[world: World, gf: WorldVMOps.LongLocalFrameHandle]     RETURNS[WorldVMOps.LocalFrameHandle] = {    RETURN [Inline.LowHalf[gf]] };      LFlong: PUBLIC PROC[world: World, gf: WorldVMOps.LocalFrameHandle]     RETURNS[WorldVMOps.LongLocalFrameHandle] = {    RETURN [WorldVMOps.Long[world, gf]] };      CodebaseFromGf: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS[PrincOps.PrefixHandle] = {    cb: PrincOps.GlobalCodebase;    IF world.globalFrameTable THEN {      gfti: PrincOpsExtras2.GFTHandle = LOOPHOLE[GFshort[world, gf]];      cb ¬ LOOPHOLE[WorldVMOps.LongRead[world, @GFT[gfti].codebase]] }    ELSE {      cb ¬ LOOPHOLE[WorldVMOps.LongRead[world, gf-PrincOps.codebaseLowOffset]] };    cb.out ¬ FALSE;    RETURN[cb.codebase]};    Copy: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS[BOOLEAN] = {    IF world.globalFrameTable THEN {      extra: PrincOpsExtras2.ExtraGlobalWord =         WorldVMOps.Read[world, gf-PrincOpsExtras2.extraGlobalWordOffset];      RETURN[extra.copy]}    ELSE {      word: PrincOps.GlobalWord =        WorldVMOps.Read[world, gf-PrincOps.globalWordOffset];      RETURN [word.copy] }};      Started: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS[BOOLEAN] = {    IF world.globalFrameTable THEN {      extra: PrincOpsExtras2.ExtraGlobalWord =         WorldVMOps.Read[world, gf-PrincOpsExtras2.extraGlobalWordOffset];      RETURN[extra.started]}    ELSE {      word: PrincOps.GlobalWord =        WorldVMOps.Read[world, gf-PrincOps.globalWordOffset];      RETURN [word.started] }};      Codelinks: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS[BOOLEAN] = {    IF world.globalFrameTable THEN {      word: PrincOpsExtras2.GlobalWord =         WorldVMOps.Read[world, gf-PrincOpsExtras2.globalWordOffset];      RETURN[word.codelinks]}    ELSE {      word: PrincOps.GlobalWord =        WorldVMOps.Read[world, gf-PrincOps.globalWordOffset];      RETURN [word.codelinks] }};        MakeControlLink: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle,     pc: WorldVMOps.BytePC] RETURNS[cl: WorldVMOps.ControlLink] = {    OPEN pcl: LOOPHOLE[cl, PrincOps.ControlLink];    pcl.gf ¬ GFshort[world, gf];    pcl.pc ¬ [pc];    pcl.proc ¬ TRUE;    IF world.globalFrameTable THEN pcl.indirect ¬ TRUE};      GFFromControlLink: PUBLIC PROC[world: World, cl: WorldVMOps.ControlLink]    RETURNS[gf: PrincOpsExtras2.LongGlobalFrameHandle] = {    OPEN pcl: LOOPHOLE[cl, PrincOpsExtras2.ControlLink];    IF world.globalFrameTable THEN {      gf ¬ SELECT pcl.tag FROM        frame => -- only occurs in old signals from GA0	  WorldVMOps.Long[world, pcl.gf-PrincOpsExtras2.ControlLinkTag.frame.ORD],	shortProc => -- old procedure descriptor	  WorldVMOps.Long[world, pcl.gf-PrincOpsExtras2.ControlLinkTag.shortProc.ORD],	indirect => ERROR, -- should already be dereferenced	longProc => GFlong[world, pcl.gf-PrincOpsExtras2.ControlLinkTag.longProc.ORD],         ENDCASE => ERROR }    ELSE gf ¬ WorldVMOps.Long[world, MaskFour[pcl.gf]] };      GetLink: PUBLIC PROC[world: World, gf: PrincOpsExtras2.LongGlobalFrameHandle,     link: CARDINAL] RETURNS[LONG POINTER] = {    Size: CARDINAL = SIZE[LONG POINTER];    offset: CARDINAL = (link+1)*Size;    oldOverhead: CARDINAL = SIZE[PrincOps.GlobalOverhead];    newOverhead: CARDINAL = SIZE[PrincOpsExtras2.GlobalOverhead];    IF Codelinks[world, gf]     THEN RETURN[WorldVMOps.LongRead[world, CodebaseFromGf[world, gf]-offset]]    ELSE {      IF world.globalFrameTable       THEN RETURN[WorldVMOps.LongRead[world, gf-offset-newOverhead]]      ELSE RETURN[WorldVMOps.LongRead[world, gf-offset-oldOverhead]] }};  }..