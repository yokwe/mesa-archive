-- Copyright (C) 1985  by Xerox Corporation. All rights reserved. -- IR.mesaDIRECTORYIT,Symbols,Tree;IR: DEFINITIONS = {  OPEN IT;  «====================================================  PROCEDURES====================================================»  -- DIOps  Abs: PROC [h: Handle, t: Tree.Link, target: SEIndex];  Assign: PROC [h: Handle, lhs: Foo];  Assignable: PROC [Handle, Foo, CSEIndex];  Base: PROC [Handle, Foo, SEIndex];  DoApply: PROC [h: Handle, t: Tree.Link, target: Foo];  Interval: PROC [h: Handle,     t: Tree.Link, type: SEIndex, openLow, openHigh, cntOnly: BOOLEAN ¬ FALSE];  Length: PROC [h: Handle, f: Foo, sei: SEIndex];  LengthenFob: PROC [h: Handle, f: Foo];  LoopHole: PROC [h: Handle, f: Foo, type: SEIndex, lengthen: BOOLEAN ¬ FALSE];  Deref: PROC [h: Handle, f: Foo] RETURNS [success: BOOLEAN];  DumpArray: PROC [Handle, Foo];  DumpMemory: PROC [h: Handle, fcnt: Foo];  Memory: PROC [Handle, Tree.Link, SEIndex];  Max: PROC [h: Handle, size: NumberType, cnt: CARDINAL, signed: BOOLEAN];  Min: PROC [h: Handle, size: NumberType, cnt: CARDINAL, signed: BOOLEAN];  ProcedureCall: PROC [h: Handle, args: Tree.Link, procfoo: Foo];  PushNil: PROC [Handle, Foo];  PutReps: PROC [Handle, UNSPECIFIED];  PutLongReps: PROC [Handle, LONG UNSPECIFIED];  Qualify: PROC [h: Handle, f: Foo, hti: HTIndex];  Size: PROC [Handle, Foo];  First: PROC [Handle, Foo];  Last: PROC [Handle, Foo];  FoldExpr: PROC [h: Handle, op: Tree.NodeName];  NumberLength: PROC [h: Handle, f: Foo] RETURNS [NumberType];  MinimalRep: PROC [h: Handle, t: Tree.Link, type: SEIndex]      RETURNS [f: Foo, size: NumberType, signed: BOOLEAN];  GetRep: PROC [h: Handle, t: Tree.Link, type: SEIndex]      RETURNS [f: Foo, size: NumberType, signed: BOOLEAN];  GetSize: PROC [h: Handle, index: Tree.Index, type: SEIndex]      RETURNS [size: NumberType, cnt: CARDINAL, signed: BOOLEAN];  Long: PROC [h: Handle, f: Foo, signed: BOOLEAN];  Inc: PROC [h: Handle, f: Foo, size: NumberType, signed: BOOLEAN];  Dec: PROC [h: Handle, f: Foo, size: NumberType, signed: BOOLEAN];  TotalWords: PROC [Handle, Foo] RETURNS [CARDINAL];  MakeCnt: PROC [h: Handle, top, sub: Foo, size: NumberType, signed: BOOLEAN];  CheckLength: PROC [h: Handle, f: Foo, size: CARDINAL] RETURNS [BOOLEAN];  SetupLongs: PROC[h: Handle];  ResetLongs: PROC[h: Handle];   VariantField: PROC [h: Handle, type: CSEIndex] RETURNS [sei: ISEIndex];  VariantUnionType: PROC [h: Handle, type: SEIndex] RETURNS [vType: CSEIndex];  SelectVariantType: PROC [h: Handle, type: SEIndex, tag: HTIndex]     RETURNS [sei: ISEIndex];  CheckNode: PROC [h: Handle, t: Tree.Link, name: Tree.NodeName]     RETURNS [son1: Tree.Link];  CheckLink: PROC [h: Handle, t: Tree.Link, type: TreeType] RETURNS [UNSPECIFIED];  FirstSon: PROC [h: Handle, index: Tree.Index, type: SEIndex ¬ Symbols.typeANY]     RETURNS [f: Foo];  Son: PROC [h: Handle, t: Tree.Link, target: SEIndex] RETURNS [Foo];  LoopHoleWork: PROC [h: Handle, t: Tree.Link, type: SEIndex];  TargetTypeWork: PROC [h: Handle, t: Tree.Link, type: SEIndex];  Work: PROC [h: Handle, t: Tree.Link, type: SEIndex ¬ Symbols.typeANY];  PushVal: PROC [Handle, UNSPECIFIED, SEIndex];  PushLongVal: PROC [Handle, LONG UNSPECIFIED, SEIndex];  Pop: PROC[h: Handle] RETURNS [f: Foo];  Push: PROC [Handle, Foo];  Tos: PROC[h: Handle] RETURNS [Foo];  nullProc, nullSig, nullError: CSEIndex;  MakeXferType: PROC [h: Handle, mode: Symbols.TransferMode]     RETURNS [csei: CSEIndex];  MakePointerType: PROC [h: Handle, cType: SEIndex] RETURNS [type: CSEIndex];  CheckForStackEmpty: PROC[h: Handle];  DIAbort: ERROR;  Underflow: ERROR;  StackNotEmptyAtStatement: ERROR;  IllegalCondition: ERROR;  InConditional: PROCEDURE[h: Handle] RETURNS [BOOLEAN] = INLINE     {RETURN[h.operand # NIL]};  DerefOperand: PROCEDURE [h: Handle, f: Foo];  SelectOperand: PROCEDURE [h: Handle, oldAddr: BitAddress,     newFoo: Foo];  MakeOperand: PROCEDURE [h: Handle, f: Foo];  LongImmediateOperand: PROCEDURE[h: Handle, val: LONG POINTER TO LONG CARDINAL];  ShortImmediateOperand: PROCEDURE [h: Handle, val: LONG POINTER TO CARDINAL];    -- DIOpsExtras  Relation: PROC[h: Handle, lhs, rhs: Foo, relation: Tree.NodeName];      }..