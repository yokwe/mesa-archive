-- SwordDangers.docThis doc describes situations which may be difficult to same world debug. An event should be same world debugged with caution if it occurs in code that Sword may use, which includes all code in the boot file. Crashes or breakpoints which occur in boot file code may leave system monitors locked, and sword will hang if it needs to acquire such a lock. For instance, deadlock can occur after crashes in the window system or the file system. Avoid setting breakpoints in code which is executed very often, such as hot communications code, since sword requires a non-negligible amount of time to handle a breakpoint.If you intend to crash in boot file code, then turn off the booleans "fault" and "uncaught" in your Options window, so that you will world swap when the crash occurs. If you crash unintentionally in boot file code, and Sword hangs, shift stop to another debugger. Do a "Find Module: RuntimeErrorImpl". A couple of frames above RuntimeErrorImpl on the stack is the frame that initially crashed. If the crasher is Signals, then above Signals will be the frame that raised the uncaught signal. If the crasher is PageFaultImpl, then get the symbols for PageFaultImpl and look at the variable "process". That process is the one that faulted. Sword will not debug an event locally if: 1. the user turned off the boolean for the event type in the Options window.2. the event is an uncaught signal, fault, or calldebug and there is already a local debugging session for one of those events (ie only one uncaught signal, fault, or calldebug can be same world debugged at a time). 3. the user put the module in which the event occurred in the filter, either through the Options window or the User.cm.4. a client such as RuntimeInternal.Bug or RuntimeInternal.WorryCallDebugger has disallowed procedure calls by setting the mayCallDebuggee flag in the external state vector FALSE.5. a client set the external state vector swap reason to something other than storageFault, breakpoint, uncaughtSignal, or callDebugger.