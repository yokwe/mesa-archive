-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- WVMPrivate.mesaDIRECTORYAMLoadstate,CPSwapDefs USING [ExternalStateVector],Environment,File,PacketExchange,--PrincOps USING [StateVector],SymbolTable,System,TTY,WVMCacheRep,WorldVM,WorldVMExtras;WVMPrivate: DEFINITIONS = {    World: TYPE = LONG POINTER TO WorldObject;    WorldObject: PUBLIC TYPE = RECORD[    next: World ¬ NIL,    name: LONG STRING ¬ NIL,    incarnation: WorldVM.Incarnation ¬ FIRST[WorldVM.Incarnation],    lock: CARDINAL ¬ 0,    state: { creating, created, bad } ¬ creating,    running: BOOLEAN ¬ TRUE,    globalFrameTable: BOOLEAN ¬ FALSE,    x80386: BOOLEAN ¬ FALSE,    loadstateValid: BOOLEAN ¬ FALSE,    loadstate: AMLoadstate.Handle ¬ NIL,    esv: CPSwapDefs.ExternalStateVector ¬ NULL,    --sv: dst PrincOps.StateVector ¬ NULL,    tty: TTY.Handle ¬ TTY.nullHandle,    sym: SymbolTable.Handle ¬ NIL,    cacheLock: MONITORLOCK,    numberOfBreaks: CARDINAL ¬ 0,    foo: SELECT type: WorldVM.WorldType FROM      none => NULL,      local => [seg: WVMCacheRep.Segment ¬ NIL],      outload => [        CS: WVMCacheRep.Cache ¬ NIL,	maplog: WVMCacheRep.Maplog ¬ [],        bootArea: WVMCacheRep.BootArea ¬ [],	riggle: BOOLEAN ¬ FALSE,	file: File.File ¬ File.nullFile, leaderPages: CARDINAL ¬ 0],      remote => [        CS: WVMCacheRep.Cache ¬ NIL,	maplog: WVMCacheRep.Maplog ¬ [],	host: System.NetworkAddress ¬ System.nullNetworkAddress,	req: Environment.Block ¬ [blockPointer: NIL, startIndex: 0, stopIndexPlusOne:],	ack: Environment.Block ¬ [blockPointer: NIL, startIndex: 0, stopIndexPlusOne:],	waitTime: LONG CARDINAL ¬ 0,	peh: PacketExchange.ExchangeHandle,	packetCursor: HeraldWindowSlot ¬ NIL,	timeout: BOOLEAN ¬ FALSE,	rs232: BOOLEAN ¬ FALSE],      client => [clientProcs: WorldVMExtras.ClientProcs],      ENDCASE];        HeraldWindowSlot: TYPE = LONG POINTER;        OutloadWorld: TYPE = LONG POINTER TO WorldObject.outload;  RemoteWorld: TYPE = LONG POINTER TO WorldObject.remote;  LocalWorld: TYPE = LONG POINTER TO WorldObject.local;   ClientWorld: TYPE = LONG POINTER TO WorldObject.client;           -- WVMTeledebug  LocateRemote: PROC[where, switches: LONG STRING, tty: TTY.Handle]     RETURNS[host: System.NetworkAddress, waitTime: LONG CARDINAL, rs232: BOOLEAN];  GoRemote: PROC[world: RemoteWorld];  StopTeledebugging: PROC[world: RemoteWorld];    -- WVMOutLd  LocateOutload: PROC[where, switches: LONG STRING, tty: TTY.Handle]     RETURNS[file: File.File, leaderPages: CARDINAL, riggle: BOOLEAN, ignoreMaplog: BOOLEAN];  GoOutload: PROC[world: OutloadWorld];  StopOutload: PROC[world: OutloadWorld];    StopLocal: PROC[world: LocalWorld];    StopClient: PROC[world: ClientWorld];      -- WVMCache  GetMaplog: PROC[world: World];  FlushMaplog: PROC[world: World];      }..