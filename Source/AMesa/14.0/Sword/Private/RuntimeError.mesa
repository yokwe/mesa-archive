-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- RuntimeError.mesaDIRECTORYCPSwapDefs,PrincOps,PrincOpsExtras,PrincOpsExtras2,PSB;RuntimeError: DEFINITIONS = BEGIN UCSProc: TYPE = PROC [  signalError: CPSwapDefs.SignalError,  sigArgs: POINTER,  signal: PrincOpsExtras.SignalDesc,  frame: PrincOps.LocalFrameHandle];  FaultProc: TYPE = PROC [  type: CPSwapDefs.StorageFaultType,  process: PSB.PsbIndex,  frame: PrincOps.LocalFrameHandle];  CDProc: TYPE = PROC [  msg: LONG STRING,  frame: PrincOps.LocalFrameHandle];  BreakProc: TYPE = PROC [  instByteReceptacle: POINTER TO PrincOps.BYTE,  sv: LONG POINTER TO dst PrincOps.StateVector,  frame: PrincOps.LocalFrameHandle]   RETURNS[ok: BOOLEAN];    RegisterUncaughtSignalHandler: PROC [proc: UCSProc] RETURNS [old: UCSProc];RegisterFaultHandler: PROC [proc: FaultProc] RETURNS [old: FaultProc];RegisterCallDebugHandler: PROC [proc: CDProc] RETURNS [old: CDProc];RegisterBreakHandler: PROC [proc: BreakProc] RETURNS [old: BreakProc];InitializeFilter: PROC[n: CARDINAL];RegisterFilter: PROC[gf: PrincOpsExtras2.GFTHandle];TooManyFilters: ERROR;UnRegisterFilter: PROC[gf: PrincOpsExtras2.GFTHandle];NoSuchFilter: ERROR;ClearFilter: PROC[];-- raised when the UncaughtSignalHandler is about to be called.  -- Using UNCAUGHT is much better than handling ANY!  -- UNCAUGHT should be provided by the compiler, eventually.UNCAUGHT: ERROR [ucsignal: SIGNAL, parameters: WORD];-- This is a temporary kludge that provides a minimal informational -- signal mechanism.InformationalSignal: PROC [signal: SIGNAL];-- Call if the implementation is about to be unloaded.PrepareToUnload: PROC[];END.