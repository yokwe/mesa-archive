-- File: ITOutPack.mesa - last edit:-- Litman              21-Apr-87 15:11:07-- Copyright (C) 1987 by Xerox Corporation. All rights reserved.DIRECTORY  Ascii USING [CR],  Format USING [StringProc],  IO USING [],  IT USING [Handle],  MStream USING [Handle, IsIt, PleaseReleaseProc, SetLogReadLength, SetReleaseData],  Stream USING [GetPosition, Handle],  String USING [SubString],  TTY USING [BackingStream, Handle, PutBlanks, PutChar, PutLongString, PutLongSubString, ResetUserAbort, SetEcho, UserAbort];ITOutPack: PROGRAM  IMPORTS MStream, Stream, TTY  EXPORTS IO = {  UserAborted: PUBLIC SIGNAL = CODE;    UserAbort: PUBLIC PROC[h: IT.Handle] RETURNS[true: BOOLEAN] = {    IF (true ¬ TTY.UserAbort[h.tty]) THEN TTY.ResetUserAbort[h.tty]};    SetOutput: PUBLIC PROC [h: IT.Handle, tty: TTY.Handle] = {    h.tty ¬ tty;    [] ¬ TTY.SetEcho[tty, none];    h.stream ¬ TTY.BackingStream[tty];    IF h.stream # NIL AND MStream.IsIt[h.stream] THEN MStream.SetReleaseData[h.stream, [TruncateLog, @h.lastLineEnd]] };      TruncateLog: MStream.PleaseReleaseProc = {    lastLineEnd: LONG POINTER TO LONG CARDINAL = instanceData;    MStream.SetLogReadLength[stream, lastLineEnd­];    RETURN[no] };      SetPosition: PROC [h: IT.Handle, c: CHARACTER] = {    h.newLine ¬ (c = Ascii.CR);    IF h.newLine AND h.stream # NIL AND h.stream.getPosition # NIL THEN h.lastLineEnd ¬ Stream.GetPosition[h.stream]};    Char: PUBLIC PROCEDURE [h: IT.Handle, c: CHARACTER] = {    TTY.PutChar[h.tty, c];    h.newLine ¬ (c = Ascii.CR)};         Blanks: PUBLIC PROCEDURE [h: IT.Handle, n: CARDINAL] = {    TTY.PutBlanks[h.tty, n];     h.newLine ¬ FALSE };         EOL: PUBLIC PROC[h: IT.Handle] = {    IF ~h.newLine THEN Char[h, Ascii.CR];     SetPosition[h, Ascii.CR] };    DToH: PROC[p: LONG POINTER] RETURNS[IT.Handle] = INLINE {RETURN[p]};    Text: PUBLIC Format.StringProc = {    IF s = NIL OR s.length = 0 THEN RETURN;    IF UserAbort[DToH[clientData]] THEN SIGNAL UserAborted;    TTY.PutLongString[DToH[clientData].tty, s];    SetPosition[DToH[clientData], s[s.length-1]]};      NonAbortableText: PUBLIC Format.StringProc = {    IF s = NIL THEN RETURN;    TTY.PutLongString[DToH[clientData].tty, s];    IF s.length # 0 THEN SetPosition[DToH[clientData], s[s.length-1]]};    SubString: PUBLIC PROC [h: IT.Handle, s: String.SubString] = {    IF s = NIL OR s.base = NIL THEN RETURN;    IF UserAbort[h] THEN SIGNAL UserAborted;    TTY.PutLongSubString[h.tty, s];    IF s.length # 0 THEN SetPosition[h, s.base[s.length-1]]};    }.