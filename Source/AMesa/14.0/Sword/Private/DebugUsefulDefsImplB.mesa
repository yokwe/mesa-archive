-- DebugUsefulDefsImplB.mesaDIRECTORYAlloc,AMEvents,AMLoadstate,BcdOps,CommandList,Copier,DebugUsefulDefs,DebugUsefulDefsExtras, DebugUsefulDefsExtras2,Environment,Format, IH, IO, IP, IQ, IS, IT, PageMap,PSB USING [PsbIndex],PrincOps USING [GlobalFrameHandle],PrincOpsExtras2 USING [LongGlobalFrameHandle],Space,SwordUsefulDefs USING [GetDefaultWorld, NoSession],Symbols, SymbolTable USING [Handle],WorldVM,WorldVMExtras,WorldVMOps;DebugUsefulDefsImplB: PROGRAM   IMPORTS AMEvents, Environment, IP, IQ, IH, IO, IS, WorldVMOps, SwordUsefulDefs,     AMLoadstate, DUD: DebugUsefulDefs, Copier, WorldVMExtras  EXPORTS DebugUsefulDefsExtras, DebugUsefulDefsExtras2 = {  ControlLink: TYPE = DebugUsefulDefsExtras.ControlLink;   ControlLink2: TYPE = IT.ControlLink;  GFHandle: TYPE = DebugUsefulDefsExtras.GFHandle;  GFHandle2: TYPE = PrincOps.GlobalFrameHandle;  BytePC: TYPE = DebugUsefulDefsExtras.BytePC;  PrefixHandle: TYPE = DebugUsefulDefsExtras.PrefixHandle;  LFHandle: TYPE = DebugUsefulDefsExtras.LFHandle;    ModItem: TYPE = IT.ModItem;  Foo: TYPE = IT.Foo;  BitAddress: TYPE = IT.BitAddress;  EVIndex: TYPE = IT.EVIndex;  BBHandle: TYPE = IT.BBHandle;    NoFGT: PUBLIC ERROR ¬ IQ.NoFGT;    CLtoCL2: PROC[cl: ControlLink]     RETURNS[ControlLink2] = INLINE {RETURN[LOOPHOLE[cl]]};      CL2toCL: PROC[cl: ControlLink2]     RETURNS[ControlLink] = INLINE {RETURN[LOOPHOLE[cl]]};    GFtoGF2: PROC[gf: GFHandle]     RETURNS[GFHandle2] = INLINE {RETURN[LOOPHOLE[gf]]};      GF2toGF: PROC[gf: GFHandle2]     RETURNS[GFHandle] = INLINE {RETURN[LOOPHOLE[gf]]};  Numeric: PUBLIC PROC [s: LONG STRING] RETURNS [BOOLEAN] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IO.Numeric[h, s]] };  MapRealToEnh: PUBLIC PROC [gf: GFHandle] RETURNS [enh: BcdOps.ENHandle] = {    world: WorldVM.World = SwordUsefulDefs.GetDefaultWorld[];    RETURN[AMLoadstate.MapRealToEnh[WorldVMOps.GetLoadstate[world], GFtoGF2[gf]]] };    CrossJumped: PUBLIC PROC [gf: GFHandle] RETURNS [BOOLEAN] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.CrossJumped[h, GFlong[gf]]] };  FindFrame: PUBLIC PROC [gf: GFHandle] RETURNS [i: ModItem] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.FindFrame[h, GFlong[gf]]] };  CBti: PUBLIC PROC [pc: BytePC, gf: GFHandle] RETURNS[cbti: Symbols.CBTIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IP.CBti[h, pc, GFlong[gf]]] };  GFrameMdi: PUBLIC PROC [gf: GFHandle, fgt: BOOLEAN ¬ FALSE]     RETURNS [Symbols.MDIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.GFrameMdi[h, GFlong[gf], fgt]] };  OpenFile: PUBLIC PROC [gf: GFHandle, file: LONG STRING, hti: Symbols.HTIndex]     RETURNS [syms: ModItem] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.OpenFile[h, GFlong[gf], file, hti]] };      Open: PUBLIC PROC [mdi: Symbols.MDIndex, inner: PROC [SymbolTable.Handle]] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    Copier.Outer[h.sym, mdi, inner]};  ResetSymbols: PUBLIC PROC[] RETURNS[] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    IQ.ResetSymbols[h] };  DerefProcDesc: PUBLIC PROC [cl: ControlLink] RETURNS [ControlLink] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[CL2toCL[IP.DerefProcDesc[h, CLtoCL2[cl]]]] };  GetControlLink: PUBLIC PROC [f: Foo] RETURNS [ControlLink] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[CL2toCL[IP.GetControlLink[h, f]]] };  SearchCtxList: PUBLIC PROC [hti: Symbols.HTIndex, ctx: Symbols.CTXIndex]     RETURNS [sei: Symbols.ISEIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IP.SearchCtxList[h, hti, ctx]] };  MakeFoo: PUBLIC PROC[isei: Symbols.ISEIndex, ba: BitAddress ¬ [NIL, 0, FALSE],    sizeInc: CARDINAL ¬ 0] RETURNS [f: Foo] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IP.MakeFoo[h, isei, ba, sizeInc]]};  StringToHti: PUBLIC PROC[s: LONG STRING] RETURNS [Symbols.HTIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IP.StringToHti[h, s]] };  EntryPC: PUBLIC PROC[gf: GFHandle, i: EVIndex] RETURNS[pc: BytePC] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[[IP.EntryPC[h, GFlong[gf], i]]] };  ExitPC: PUBLIC PROC[cbti: Symbols.CBTIndex]     RETURNS[pc: BytePC] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[[IP.ExitPC[h, cbti]]] };  GetPc: PUBLIC PROC[gf: GFHandle, i: EVIndex] RETURNS[pc: BytePC] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[[IP.GetPc[h, GFlong[gf], i]]] };  SpecialDisplay: PUBLIC PROC [     out: Format.StringProc, gf: GFHandle, pc: BytePC, load: BOOLEAN,     msg: LONG STRING ¬ NIL, suppressErrors: BOOLEAN ¬ FALSE] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    IP.SpecialDisplay[h, out, GFlong[gf], pc, load, msg, suppressErrors] };    ConfigForFrame: PUBLIC PROC [gf: GFHandle, config: LONG STRING] = {    DUD.ConfigForFrame[GFtoGF2[gf], config]};  Enumerate: PUBLIC PROC [proc: PROC [GFHandle] RETURNS [BOOLEAN]]     RETURNS [gf: GFHandle] = {RETURN[GF2toGF[DUD.Enumerate[LOOPHOLE[proc]]]]};  Name: PUBLIC PROC [name: LONG STRING, gf: GFHandle] = {    DUD.Name[name, GFtoGF2[gf]]};  Frame: PUBLIC PROC [name: LONG STRING] RETURNS [GFHandle] = {    RETURN[GF2toGF[DUD.Frame[name]]]};  Started: PUBLIC PROC [gf: GFHandle] RETURNS [BOOLEAN] = {    RETURN[DUD.Started[GFtoGF2[gf]]]};  Valid: PUBLIC PROC [gf: GFHandle] RETURNS [BOOLEAN] = {    RETURN[DUD.Valid[GFtoGF2[gf]]]};  Copied: PUBLIC PROC [gf: GFHandle] RETURNS [BOOLEAN] = {    RETURN[DUD.Copied[GFtoGF2[gf]]]};  Original: PUBLIC PROC [new: GFHandle] RETURNS [old: GFHandle] = {    RETURN[GF2toGF[DUD.Original[GFtoGF2[new]]]]};      ApplyProcedure: PUBLIC PROC[control: ControlLink,    args: AMEvents.ArgsOrResults, result: AMEvents.ArgsOrResults] = {    AMEvents.ApplyProcedure[SwordUsefulDefs.GetDefaultWorld[],      CLtoCL2[control], args, result] };        GetAlloc: PUBLIC PROC[] RETURNS[Alloc.Handle] = { RETURN[IO.alloc] };    GetSym: PUBLIC PROC[] RETURNS[SymbolTable.Handle] = {     h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[h.sym] };      GetLoadstate: PUBLIC PROC[] RETURNS[AMLoadstate.Handle] = {    RETURN[WorldVMOps.GetLoadstate[SwordUsefulDefs.GetDefaultWorld[]]] };      ShowType: PUBLIC PROC [    s: LONG STRING, layout: BOOLEAN ¬ FALSE,    output: Format.StringProc, clientData: LONG POINTER ¬ NIL] = {    IS.ShowTypeWithProc[s, layout, output, clientData] };  EnumerateBBs: PUBLIC PROCEDURE [proc: PROC [BBHandle] RETURNS [BOOLEAN], gf: GFHandle]    RETURNS [BBHandle] = {    Proc: PROC[h: IT.Handle, bb: BBHandle] RETURNS[BOOLEAN] = {RETURN[proc[bb]]};    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.EnumerateBBs[h, Proc, GFlong[gf]]] };  FindBB: PUBLIC PROCEDURE [gf: GFHandle, pc: BytePC] RETURNS [bb: BBHandle] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.FindBB[h, GFlong[gf], pc]] };  FindBBNum: PUBLIC PROC [c: CARDINAL] RETURNS [BBHandle] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.FindBBNum[h, c]]} ;  FindUserBB: PUBLIC PROCEDURE [ph: PrefixHandle, pc: BytePC] RETURNS [CARDINAL] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.FindUserBB[h, ph, pc]] };  Conditionalize: PUBLIC PROCEDURE [bb: BBHandle, ls: LONG STRING] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    IQ.Conditionalize[h, bb, ls] };  BPFail: PUBLIC ERROR [type: CommandList.BPError] ¬ IQ.BPFail;    ProcessFrame: PUBLIC PROC [psb: PSB.PsbIndex] RETURNS [LFHandle] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[WorldVMOps.LFshort[SwordUsefulDefs.GetDefaultWorld[], IS.Frame[h, IS.ReadPsb[h, psb]]]] };      ValidateF: PUBLIC PROC[lf: LFHandle] RETURNS[BOOLEAN] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[IQ.ValidateF[h, WorldVMOps.LFlong[h.world, lf]].ok] };      FirstPsb: PUBLIC PROC[] RETURNS[PSB.PsbIndex] = {RETURN[NextPsb[LastPsb[]]]};  NextPsb: PUBLIC PROC[psb: PSB.PsbIndex] RETURNS[PSB.PsbIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[WorldVMOps.ProcessShort[IS.NextPsb[h, psb].p]]};  LastPsb: PUBLIC PROC[] RETURNS[PSB.PsbIndex] = {    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[WorldVMOps.ProcessShort[h.lastPSB]]};      Previous: PUBLIC PROC[frame: LFHandle] RETURNS[LFHandle] = {    ENABLE {      IP.NoPrevious => { SIGNAL NoPrevious[WorldVMOps.LFshort[SwordUsefulDefs.GetDefaultWorld[], f]]; RESUME };      IP.Clobbered => { SIGNAL Clobbered[WorldVMOps.LFshort[SwordUsefulDefs.GetDefaultWorld[], f]]; RESUME };      IP.NoAccessLink => { SIGNAL NoAccessLink[WorldVMOps.LFshort[SwordUsefulDefs.GetDefaultWorld[], f]]; RESUME }};    h: IT.Handle = IH.InterpreterForWorld[SwordUsefulDefs.GetDefaultWorld[]];    RETURN[WorldVMOps.LFshort[SwordUsefulDefs.GetDefaultWorld[],       IP.Previous[h, WorldVMOps.LFlong[SwordUsefulDefs.GetDefaultWorld[], frame]]]]};        NoPrevious: PUBLIC SIGNAL [f: LFHandle] = CODE; -- ¬ IP.NoPrevious;  Clobbered: PUBLIC SIGNAL [f: LFHandle] = CODE; -- ¬ IP.Clobbered;  NoAccessLink: PUBLIC SIGNAL [f: LFHandle] = CODE; -- ¬ IP.NoAccessLink;    NoSession: PUBLIC ERROR ¬ SwordUsefulDefs.NoSession;  GFlong: PUBLIC PROC[gf: GFHandle] RETURNS[PrincOpsExtras2.LongGlobalFrameHandle] = {    RETURN[WorldVMOps.GFlong[SwordUsefulDefs.GetDefaultWorld[], LOOPHOLE[gf]]]};  GFshort: PUBLIC PROC[gf: PrincOpsExtras2.LongGlobalFrameHandle] RETURNS[GFHandle] = {    RETURN[GF2toGF[WorldVMOps.GFshort[SwordUsefulDefs.GetDefaultWorld[], gf]]]};  GetPageState: PUBLIC PROC[vmPage: Environment.PageNumber]     RETURNS[swapState: DebugUsefulDefsExtras2.SwapState, access: Space.Access, flags: PageMap.Flags, real: PageMap.RealPageNumber] = {    ENABLE WorldVMOps.AddressFault => ERROR DUD.InvalidAddress[addr];    [LOOPHOLE[swapState, WorldVMExtras.SwapState],access,flags,real] ¬       WorldVMExtras.GetPageState[SwordUsefulDefs.GetDefaultWorld[], Environment.LongPointerFromPage[vmPage]]};      GetVMSize: PUBLIC PROC[] RETURNS [page: Environment.PageCount] = {    RETURN[WorldVMOps.GetESV[SwordUsefulDefs.GetDefaultWorld[]].virtualMemoryCount]};  }..