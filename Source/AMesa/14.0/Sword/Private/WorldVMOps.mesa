-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- WorldVMOps.mesa-- This interface is (mostly) machine independent.DIRECTORYAMLoadstate USING [Handle],CPSwapDefs USING [ExternalStateVector],Inline USING [LowHalf],PrincOps USING [StateVector],SymbolTable USING [Handle],WorldVM USING [World, WorldType];WorldVMOps: DEFINITIONS IMPORTS Inline = {  -- Types  World: TYPE = WorldVM.World;  Address: TYPE = LONG UNSPECIFIED;   ShortAddress: TYPE = UNSPECIFIED;  Process: TYPE = LONG UNSPECIFIED;  ShortProcess: TYPE = UNSPECIFIED; --PSB.PsbIndex  NullProcess: Process = 0;  LocalFrameHandle: TYPE = POINTER; --PrincOps.LocalFrameHandle  LongLocalFrameHandle: TYPE = LONG POINTER; --  GlobalFrameHandle: TYPE = POINTER; --PrincOps.GlobalFrameHandle; PrincOpsExtras2.GFTIndex;  LongGlobalFrameHandle: TYPE = LONG POINTER; --PrincOpsExtras2.LongGlobalFrameHandle;  ControlLink: TYPE = LONG UNSPECIFIED; --PrincOps.ControlLink; PrincOpsExtras2.ControlLink  SignalDesc: TYPE = LONG UNSPECIFIED; --PrincOpsExtras.SignalDesc; PrincOpsExtras2.SignalDesc  PrefixHandle: TYPE = LONG POINTER; --PrincOps.PrefixHandle;  BytePC: TYPE = CARDINAL; --PrincOps.BytePC;  BYTE: TYPE = [0..255]; --PrincOps.BYTE;    -- VM operations  AddressFault: ERROR[addr: Address];  WriteProtected: ERROR[addr: Address];  Long: PROC[world: World, addr: ShortAddress] RETURNS[Address];  Read: PROC[world: World, addr: Address, process: Process ¬ NullProcess] RETURNS[UNSPECIFIED];  Write: PROC[world: World, addr: Address, value: UNSPECIFIED, process: Process ¬ NullProcess];  LongRead: PROC[world: World, addr: Address, process: Process ¬ NullProcess] RETURNS[LONG UNSPECIFIED];  LongWrite: PROC[world: World, addr: Address, value: LONG UNSPECIFIED, process: Process ¬ NullProcess];  CopyRead: PROC[world: World, from: Address, nwords: CARDINAL, to: LONG POINTER, process: Process ¬ NullProcess];  CopyWrite: PROC[world: World, from: LONG POINTER, nwords: CARDINAL, to: Address, process: Process ¬ NullProcess];  NilAddress: PROC[world: World, addr: Address] RETURNS[BOOLEAN];  SwappedIn: PROCEDURE [world: World, addr: Address, process: Process ¬ NullProcess] RETURNS [BOOLEAN];  SpecialWrite: PROC[world: World, addr: Address, value: UNSPECIFIED, process: Process ¬ NullProcess];    -- Breakpoints   IllegalPatch: ERROR;  SetBreak: PROC[world: World, addr: Address, offset: BytePC, process: Process ¬ NullProcess] RETURNS[oldByte: BYTE];  ClearBreak: PROC[world: World, addr: Address, offset: BytePC, oldByte: BYTE, process: Process ¬ NullProcess];  ReadCodeByte: PROC[world: World, cb: PrefixHandle, pc: BytePC, process: Process ¬ NullProcess] RETURNS [BYTE];  ReadCodeWord: PROC[world: World, cb: PrefixHandle, offset: INTEGER, process: Process ¬ NullProcess] RETURNS [UNSPECIFIED];  WriteCodeByte: PROC[world: World, cb: PrefixHandle, pc: BytePC, op: BYTE, process: Process ¬ NullProcess];    -- Get client address of loadstate   LoadstateAddress: PROC[world: World] RETURNS[Address];  -- Tell everyone that the loadstate has been acquired.  ValidLoadstate: PROC[world: World];  -- Get local handle for loadstate.   GetLoadstate: PROC[world: World] RETURNS[AMLoadstate.Handle];    GetSym: PROC[world: World] RETURNS[SymbolTable.Handle];  GetType: PROC[world: World] RETURNS[WorldVM.WorldType];  GetMDS: PROC[world: World] RETURNS[CARDINAL];  GetESV: PROC[world: World] RETURNS[LONG POINTER TO CPSwapDefs.ExternalStateVector];  GetSV: PROC[world: World] RETURNS[LONG POINTER TO dst PrincOps.StateVector];  SetSymbols: PROC[sym: SymbolTable.Handle];    -- Conversions   GFlong: PROC[world: World, gf: GlobalFrameHandle] RETURNS[LongGlobalFrameHandle];  GFshort: PROC[world: World, gf: LongGlobalFrameHandle] RETURNS[GlobalFrameHandle];  LFlong: PROC[world: World, gf: LocalFrameHandle] RETURNS[LongLocalFrameHandle];  LFshort: PROC[world: World, gf: LongLocalFrameHandle] RETURNS[LocalFrameHandle];  CodebaseFromGf: PROC[world: World, gf: LongGlobalFrameHandle] RETURNS[PrefixHandle];  Copy: PROC[world: World, gf: LongGlobalFrameHandle] RETURNS[BOOLEAN];  Started: PROC[world: World, gf: LongGlobalFrameHandle] RETURNS[BOOLEAN];  Codelinks: PROC[world: World, gf: LongGlobalFrameHandle] RETURNS[BOOLEAN];  GetLink: PROC[world: World, gf: LongGlobalFrameHandle, link: CARDINAL] RETURNS[LONG POINTER];  MakeControlLink: PROC[world: World, gf: LongGlobalFrameHandle, pc: BytePC] RETURNS[cl: ControlLink];  GFFromControlLink: PROC[world: World, cl: ControlLink] RETURNS[gf: LongGlobalFrameHandle];    ProcessShort: PROC[p: Process] RETURNS[ShortProcess] = INLINE {RETURN[Inline.LowHalf[p]]};  ProcessLong: PROC[p: ShortProcess] RETURNS[Process] = INLINE {RETURN[LONG[p]]};     }..