-- Copyright (C) 1981, 1983, 1985  by Xerox Corporation. All rights reserved. -- CommandList.mesa  last edit,-- BXM  ,	29-Sep-81 18:12:16-- CXH   ,	10-Nov-83 17:15:14CommandList: DEFINITIONS =  BEGIN  CSRptr: TYPE = LONG BASE POINTER TO CompStrRecord;  CompStrDesc: TYPE = RECORD [offset, length: CARDINAL];    CompStrRecord: TYPE = RECORD [    stringOffset: CSRptr RELATIVE POINTER TO StringBody,    CommandStrings: ARRAY Command OF CompStrDesc,    ErrorMessages: ARRAY Error OF CompStrDesc,    DIErrorMessages: ARRAY DIErr OF CompStrDesc,    BPErrorMessages: ARRAY BPError OF CompStrDesc];  Command: TYPE = {  -- random useful strings (not commands)    null, confirm, gets, n10, bytePC, di, comment, name,    bbNum, condition, expression, symbols,    callStack, oneFrame, check, invalidate,   -- top level commands    firstCommand, Comment, a, break, c, display, find, kill,     list, octal, proceed, quit, re, s, trace, userscreen, worry,   -- "A" commands    ascii, attach,   -- "ATtach" commands    Condition, Exp, Symbols,   -- "AScii" commands    adisplay, read,   -- "Octal" commands    clearGlobal, oread, breakGlobal, write,   -- "C" commands    clear, current,   -- "Re" commands    redisplay, remote, reset,   -- "S" commands    set, showType, start,   -- "Display" commands    displayBreak, configuration, evalStack, frame, gft, module, process,     queue, readyList, stack, Variable,  -- "SEt" commands    config, moduleCtx, octalCtx, processCtx, rootCtx,  -- "Break" and "Trace" commands    all, entryProc, xitProc,   -- "CLear All" commands     clearAllBreaks, clearAllTraces, entriesMod, xitsMod,  -- "CLear" commands    clearAll, entry, xit,   -- "Clear Entry procedure" and "Clear Xit procedure" commands    breakProc, traceProc,  -- "List" commands    breaks, configs, processes, traces,  -- "Worry" commands    off, on,  -- Spares    spare1, spare2, spare3, spare4, spare5, spare6, spare7, spare8};  Error: TYPE = {XXX, aborted, nAllowed, resume, file, num,    compress, nFrame, cFrame, nReturnlink, nGframe,    nProcess, nPsb, nAccesslink, nWorry, nSymtab,    nVersion, notFound, insufficientVM, badAddress, notImpl,    badSyntax, badParse, badChar, diffver, badDir, noPage, writeProtect, invalidPc,    notAtBreak, notArray, notHere, tooLong, symbolOverflow, badEvalStack, noStack,    err1, err2, err3};  DIErr: TYPE = {    callingInline, cantLengthen, constructor, indexTooBig, invalidAddress,    invalidNumber, invalidPointer, invalidSubrange, missingSyms, nilChk,     notFound, notProcDesc, notRelative, notType, notUniqueField, notValidField,    overflow, relation, sizeMismatch, symbolsReset, illegalIndexOp,    illegalConstantOp, tooManyArgs, typeMismatch, unknownVariant, wontDump,     worryCall, wrongBase, wrongNumberArgs, wrongBrackets, wrongDollar, notArray,    returnAborted, spare1, spare2, spare3, spare4, spare5, spare6};  BPError: TYPE = {    tooManyConditions, invalidRelation, conditionNotFound, size, stack,    portI, notExchangable, notFound, noneSet, noSym, noFGT, inInline,    alreadySet, noReturn, worryOn, cantDereference, patchTableFull,     nonMDSCondition,    spare1, spare2, spare3, spare4};  END.