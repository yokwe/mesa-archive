-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- Script4.mesa       26-Apr-83 17:17:42 by CAJ -- Virtual memory test program, Klamath Pilot.-- Script4 tests Kill.DIRECTORY  Environment USING [PageCount],  ScriptOps USING [RegisterScript],  VM USING [Interval, nullBackingStoreRuns],  VMTestOperations --USING [all the operations]--,  VMTestScript USING [GetHeap, GetTestVMSize, GiveBackHeap, MakeBackingData,    MakeIrregularSwapData, Ticker];Script4: PROGRAM  IMPORTS ScriptOps, VMTestOperations, VMTestScript =  BEGIN  ------------  -- PUBLIC procedures:  -- RunTests is a script of tests using VMTestOperations procedures  RunTests: PROCEDURE =    BEGIN OPEN VMTestOperations, VMTestScript;        heap: UNCOUNTED ZONE ¬ GetHeap[];    TestKillA[heap];    TestKillB[heap];    heap ¬ GiveBackHeap[heap];    END;  ------------  -- PRIVATE procedures:  -- Map unit attribute combinations, part 1  TestKillA: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN OPEN VMTestOperations, VMTestScript;    vmSize: CARDINAL = CARDINAL[GetTestVMSize[]];  -- known single-word value    pArray: LONG POINTER;    --**    -- Kills with normal case Map (swappable + readWrite + alive)    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readWrite + alive"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole swap units, out    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole swap units, in    Touch[[0, 6], read];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole map unit, none in    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some in + alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped dead    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readWrite + dead"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill whole swap units, out    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill whole swap units, in    Touch[[0, 6], write];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: swappable];    -- kill whole map unit, none in    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some in + alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped resident + readWrite + alive    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole swap units, in, clean    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole swap units, in, dirty    Touch[[0, 6], write];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole map unit    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some dead + some alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped resident + readWrite + dead    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole swap units, out    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole swap units, in    Touch[[0, 6], read];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole map unit, none in    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some in + alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    END;  -- Map unit attribute combinations, part 2  TestKillB: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN OPEN VMTestOperations, VMTestScript;    vmSize: CARDINAL = CARDINAL[GetTestVMSize[]];  -- known single-word value    pArray: LONG POINTER;    --**    -- Kills on space Mapped resident + not backed (standard data space)    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, vmSize],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [1, vmSize/2],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole swap units, in, clean    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole swap units, in, dirty    Touch[[0, 6], write];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + alive"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole map unit    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some dead + some alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped resident + not backed + dead    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, vmSize],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [1, vmSize/2],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole swap units, in, clean    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole swap units, in, dirty    Touch[[0, 6], write];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readWrite + dead"L,      interval: [0, 10],      backed: FALSE,      runs:  VM.nullBackingStoreRuns,      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: dead,      swappability: resident];    -- kill whole map unit    Kill[[0, 10]];    Ticker[];    -- kill whole map unit, some dead + some alive    Touch[[4, 5], write];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped resident + readOnly + alive    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readOnly + alive"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "resident + readOnly + alive"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "resident + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole swap units    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole map unit    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "resident + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: resident];    -- kill whole map unit, some dead + some alive    Kill[[4, 5]];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Kills on space Mapped swappable + readOnly + alive    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, vmSize],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill all of testVM, all mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, vmSize - 9, 4]];    Map[id: "swappable + readOnly + alive"L,      interval: [1, vmSize/2],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill all of testVM, some mapped    Kill[[0, vmSize]];    Ticker[];    Unmap[page: 1];    heap.FREE[@pArray];    -- kill all of testVM, unmapped    Kill[[0, vmSize]];    Ticker[];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole swap units, out    Kill[[0, 6]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 1, 4]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole swap units, in    Touch[[0, 6], read];    Kill[[0, 6]];    Ticker[];    -- kill already killed    Kill[[0, 6]];    Ticker[];    -- kill within swap unit (no kill)    Touch[[7, 1], read];    Kill[[7, 1]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill across swap units, none included (no kill)    Touch[[1, 5], read];    Kill[[1, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill overlap + include swap units    Touch[[4, 5], read];    Kill[[4, 5]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole map unit, none in    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    pArray ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [5, 3, 2]];    Map[id: "swappable + readOnly + alive"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArray, 3]],      access: readOnly,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArray, 3]],      life: alive,      swappability: swappable];    -- kill whole map unit, some dead + some alive    Kill[[4, 5]];    Kill[[0, 10]];    Ticker[];    Unmap[page: 0];    heap.FREE[@pArray];    --**    -- Case swappable + readOnly + dead is illegal Map option    END;  ------------  -- PUBLIC SIGNALs and ERRORs: none  ------------  -- Initialization:  ScriptOps.RegisterScript[RunTests, "Kill"L];  END.LOG 3-Mar-83 15:41:32   CAJ    Created file.