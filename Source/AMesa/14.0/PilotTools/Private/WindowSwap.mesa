-- WindowSwap.mesa      22-Apr-85 15:34:56 by Jose--	Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved.-- WindowSwap provides a facility to create and swap multiple alternative-format-- views for a page of data within a single tool subwindow. A view, or a-- subwindow providing a particular formatting of the data, registers itself-- with a central facility. It provides its name, procedures to handle data-- translation between the raw data and the view format, and procedures to deal-- with window transition. A menu of all currently-registered views is provided.-- Selecting a view from the menu causes the current contents of the subwindow-- to be replaced by the selected view. A view may also be deregistered.DIRECTORY  FormSW USING [ClientItemsProcType],  Window USING [Handle];WindowSwap: DEFINITIONS =  BEGIN  ------------  -- PUBLIC types, constants:  Key: TYPE  = CARDINAL;  OtherWindows: TYPE = LONG DESCRIPTOR FOR ARRAY OF Window.Handle;  DataFromViewProc: TYPE = PROCEDURE;    -- This procedure is responsible for making the raw data provided by the    -- main tool correspond to changes in the view's local data. This function    -- is required when the view is about to be replaced and when the underlying    -- data is about to be used. It must not call WindowSwap procedures.  DestroyViewProc: TYPE = PROCEDURE;    -- Procedures of this type are responsible for things like cleanup and    -- resource return which must be done when the view is about to be destroyed.  ViewFromDataProc: TYPE = PROCEDURE;    -- This procedure is responsible for making the view data correspond to    -- the raw data provided by the main tool. It does any local unpacking or    -- reformatting needed to turn the data into the format displayed in the    -- view. This function is required when the view is first brought up and    -- when the underlying data changes. It must not call WindowSwap procedures.  nullDataFromViewProc: DataFromViewProc;  nullDestroyViewProc: DestroyViewProc;  nullKey: Key;  nullViewFromDataProc: ViewFromDataProc;  ------------  -- PUBLIC procedures:  CurrentViewHandle: PROCEDURE [key: Key] RETURNS [viewH: Window.Handle];    -- This procedure returns the window handle for the view currently    -- occupying the swapping subwindow designated by key.  DeactivateViewsWindow: PROCEDURE [key: Key];    -- This procedure is to be called in the tool's TransitionProc on the    -- active -> inactive transition.  DeregisterAll: PROCEDURE [key: Key];    -- This procedure is equivalent to calling DeregisterView for all views    -- registered for a given subwindow.  DeregisterView: PROCEDURE [key: Key, viewName: LONG STRING];    -- This procedure is the complement of RegisterView.  It removes the    -- subwindow which was registered with the name viewName from the tool's    -- list of alternative views and destroys the subwindow.  When the last    -- view is Deregistered, the views window is retired as well, leaving the    -- most recent occupant in sole possession.  The default subwindow (the    -- one used in EstablishViewsWindow) is not destroyed.  EstablishViewsWindow: PROCEDURE [    menuName: LONG STRING, viewH: Window.Handle, viewName: LONG STRING,    viewFromDataProc: ViewFromDataProc ¬ nullViewFromDataProc,    dataFromViewProc: DataFromViewProc ¬ nullDataFromViewProc,    destroyViewProc: DestroyViewProc ¬ nullDestroyViewProc,    otherWindows: OtherWindows ¬ NIL]    RETURNS [key: Key];    -- This procedure designates a tool subwindow as one in which alternate view    -- subwindows will swap and registers the default formSW occupant    -- of the subwindow.  (Use RegisterView for subsequent views.)  This    -- subwindow, identified by its window handle viewH, belongs to the host    -- tool rather than WindowSwap: it is initially created (via Tool.MakeFormSW    -- in the MakeSWsProc passed to Tool.Create) and maintained through    -- deactivate/activate by the tool as a non-view-swapping subwindow would be.    -- EstablishViewsWindow is called after the Tool.Create.  The string    -- menuName is the title for the menu of alternate views registered in the    -- subwindow. The view implementor provides the name that goes into the menu,    -- the procedure to create the form, and procedures which the view handler    -- calls to have the implementor deal with the mapping back and forth    -- between the raw data and the view formatting of the data.  The    -- destroyViewProc procedure is called when the view is about to be destroyed.    -- Optionally, otherWindows can specify a list of additional windows in which    -- the views menu is to appear.  The key returned is used to identify the    -- particular views window.  Parameters are copied.  ReactivateViewsWindow: PROCEDURE [    key: WindowSwap.Key, defaultSW: Window.Handle,    otherWindows: OtherWindows ¬ NIL];    -- This procedure recreates all the view subwindows and rebuilds the menu    -- after they have been deactivated.  It belongs in the MakeSWsProc (passed    -- to Tool.Create) as the procedure to be called on invocations subsequent    -- to tool creation (i.e., tool being activated after being deactivated).    -- A useful way to do this is the following:    --    IF key ~= WindowSwap.nullKey THEN key ¬ ReactivateViewsWindow[...]    -- If the subwindows were not deleted, (DeactivateViewsWindow was not    -- called), it does not recreate them.  If key is null then    -- ReactivateViewsWindow is a noop.  RegisterView: PROCEDURE [    key: Key, viewName: LONG STRING, makeFormSW: FormSW.ClientItemsProcType,    viewFromDataProc: ViewFromDataProc ¬ nullViewFromDataProc,    dataFromViewProc: DataFromViewProc ¬ nullDataFromViewProc,    destroyViewProc: DestroyViewProc ¬ nullDestroyViewProc];    -- This procedure creates and registers a subwindow which provides a view,    -- or particular formatting, of the data in the tool's global data buffer.    -- Registering adds viewName to the menu of alternatives available for the    -- subwindow identified by key. The makeFormSW procedure is used to set up    -- the window layout. The viewFromData and dataFromView procedures are    -- provided for the view handler to call to have the implementor deal with    -- the mapping back and forth between the raw data and the view formatting    -- of the data. The destroyViewProc procedure is called when the view is    -- about to be destroyed.  The string is copied.  UpdateDataFromView: PROCEDURE [key: Key];    -- This procedure calls the DataFromViewProc procedure registered for    -- the current view in the subwindow identified by key. It is normally    -- called when the underlying raw data, owned by the tool, must be made to    -- correspond to any changes in local view contents, such as when the data    -- is about to be written out.  UpdateViewFromData: PROCEDURE [key: Key];    -- This procedure calls the ViewFromDataProc procedure registered for    -- the current view in the subwindow identified by key. This causes any    -- local view data to be updated to match the raw data. It is normally    -- called after a change in the data, which is owned by the tool, such    -- as when new data is read in.  ------------  -- PUBLIC SIGNALs and ERRORs  ErrorType: TYPE = {invalidParameters, noSuchKey, noSuchView, viewInUse};  Error: SIGNAL [type: ErrorType];  END.LOG 2-Aug-84 17:42:21   Jose   Created file.22-Apr-85 15:34:12   Jose   Added DeregisterAll, DestroyViewProc and usage of it;   changed Error from ERROR to SIGNAL, added proc defaults to EstablishViewsWindow   and RegisterView.