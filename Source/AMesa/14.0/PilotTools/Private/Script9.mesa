-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- Script9.mesa       31-Jan-83 17:25:16 by CAJ -- Virtual memory test program, Klamath Pilot.-- Script9 tests CopyOut over multiple map units.DIRECTORY  Environment USING [PageCount],  ScriptOps USING [RegisterScript],  VM USING [Interval],  VMTestOperations --USING [all the operations]--,  VMTestScript USING [GetHeap, GiveBackHeap, MakeBackingData,    MakeIrregularSwapData, MakeUniformSwapData, MakeUnitarySwapData, Ticker];Script9: PROGRAM  IMPORTS ScriptOps, VMTestOperations, VMTestScript =  BEGIN  ------------  -- PUBLIC procedures:  -- RunTests is a script of tests using procedures from VMTestOperations (for  -- VM operations) and VMTestScript (for test utilities).  RunTests: PROCEDURE =    BEGIN OPEN VMTestOperations, VMTestScript;        heap: UNCOUNTED ZONE ¬ GetHeap[];    CopyOutLikeA[heap];    CopyOutLikeB[heap];    CopyOutUnlikeA[heap];    -- CopyOutUnlikeB is in Script10 because of module size limitations here.    heap ¬ GiveBackHeap[heap];    END;  -- CopyOut tests over multiple map units, unitary and uniform  CopyOutLikeA: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN OPEN VMTestOperations, VMTestScript;      pRunsA: LONG POINTER;    pRunsB: LONG POINTER;    -- Unitary    -- 2 unitary, all of both    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 20],      runLength: 20,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 unitary, end of A + all of B    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 13],      runLength: 13,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 unitary, all of A + beginning of B    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 14],      runLength: 14,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 unitary, end of A + beginning of B    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [9, 2],      runLength: 2,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- now all 4 previous copies in single Map/Unmap    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 20],      runLength: 20,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 13],      runLength: 13,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 14],      runLength: 14,      returnWait: wait];    Ticker[];    CopyOut[interval: [9, 2],      runLength: 2,      returnWait: wait];    Ticker[];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    -- now same 4 copies with dead pages    pRunsA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A, dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: dead,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B, dead"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: dead,      swappability: swappable];    CopyOut[interval: [0, 20],      runLength: 20,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 13],      runLength: 13,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 14],      runLength: 14,      returnWait: wait];    Ticker[];    CopyOut[interval: [9, 2],      runLength: 2,      returnWait: wait];    Ticker[];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    -- Uniform    -- 2 uniform, all of both    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, end of A + all of B, whole swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 15],      runLength: 15,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, all of A + beginning of B, whole swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 13],      runLength: 13,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, end of A + beginning of B, whole swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [6, 7],      runLength: 7,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, end of A + all of B, partial swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 12],      runLength: 12,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, all of A + end of B, partial swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 11],      runLength: 11,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- 2 uniform, end of A + beginning of B, partial swap units    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 5],      runLength: 5,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    Ticker[];    -- now all of previous 6 copies within single Map/Unmap    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Ticker[];    CopyOut[interval: [4, 15],      runLength: 15,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 13],      runLength: 13,      returnWait: wait];    Ticker[];    CopyOut[interval: [6, 7],      runLength: 7,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 12],      runLength: 12,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 11],      runLength: 11,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 5],      runLength: 5,      returnWait: wait];    Ticker[];    -- and same 6 again with (all) dirty pages    Touch[[0, 19], write];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Ticker[];    Touch[[4, 15], write];    CopyOut[interval: [4, 15],      runLength: 15,      returnWait: wait];    Ticker[];    Touch[[0, 13], write];    CopyOut[interval: [0, 13],      runLength: 13,      returnWait: wait];    Ticker[];    Touch[[6, 7], write];    CopyOut[interval: [6, 7],      runLength: 7,      returnWait: wait];    Ticker[];    Touch[[7, 12], write];    CopyOut[interval: [7, 12],      runLength: 12,      returnWait: wait];    Ticker[];    Touch[[0, 11], write];    CopyOut[interval: [0, 11],      runLength: 11,      returnWait: wait];    Ticker[];    Touch[[7, 5], write];    CopyOut[interval: [7, 5],      runLength: 5,      returnWait: wait];    Ticker[];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    -- and same 6 again with (all) dead pages    pRunsA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A, dead"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pRunsB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B, dead"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pRunsB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Ticker[];    CopyOut[interval: [4, 15],      runLength: 15,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 13],      runLength: 13,      returnWait: wait];    Ticker[];    CopyOut[interval: [6, 7],      runLength: 7,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 12],      runLength: 12,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 11],      runLength: 11,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 5],      runLength: 5,      returnWait: wait];    Ticker[];    Unmap[page: 0];    heap.FREE[@pRunsA];    Unmap[page: 10];    heap.FREE[@pRunsB];    END;  -- CopyOut tests over multiple map units, irregular  CopyOutLikeB: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN OPEN VMTestOperations, VMTestScript;      pArrayA: LONG POINTER;    pArrayB: LONG POINTER;    -- Irregular    -- 2 irregular, all of both    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, end of A + all of B, whole swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 18],      runLength: 18,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, all of A + beginning of B, whole swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 24],      runLength: 24,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, end of A + beginning of B, whole swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 17],      runLength: 17,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, end of A + all of B, partial swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [10, 15],      runLength: 15,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, all of A + beginning of B, partial swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 22],      runLength: 22,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- 2 irregular, end of A + beginning of B, partial swap units    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [10, 12],      runLength: 12,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    Ticker[];    -- now all of previous 6 copies within single Map/Unmap    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 18],      runLength: 18,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 24],      runLength: 24,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 17],      runLength: 17,      returnWait: wait];    Ticker[];    CopyOut[interval: [10, 15],      runLength: 15,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 22],      runLength: 22,      returnWait: wait];    Ticker[];    CopyOut[interval: [10, 12],      runLength: 12,      returnWait: wait];    -- and same 6 again with (all) dirty pages    Touch[[0, 25], write];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Ticker[];    Touch[[7, 18], write];    CopyOut[interval: [7, 18],      runLength: 18,      returnWait: wait];    Ticker[];    Touch[[0, 24], write];    CopyOut[interval: [0, 24],      runLength: 24,      returnWait: wait];    Ticker[];    Touch[[7, 17], write];    CopyOut[interval: [7, 17],      runLength: 17,      returnWait: wait];    Ticker[];    Touch[[10, 15], write];    CopyOut[interval: [10, 15],      runLength: 15,      returnWait: wait];    Ticker[];    Touch[[0, 22], write];    CopyOut[interval: [0, 22],      runLength: 22,      returnWait: wait];    Ticker[];    Touch[[10, 12], write];    CopyOut[interval: [10, 12],      runLength: 12,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    -- and same 6 again with (all) dead pages    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 13]];    Map[id: "Irregular A, dead"L,      interval: [0, 21],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: dead,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 1, 1]];    Map[id: "Irregular B, dead"L,      interval: [21, 4],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: dead,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 18],      runLength: 18,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 24],      runLength: 24,      returnWait: wait];    Ticker[];    CopyOut[interval: [7, 17],      runLength: 17,      returnWait: wait];    Ticker[];    CopyOut[interval: [10, 15],      runLength: 15,      returnWait: wait];    Ticker[];    CopyOut[interval: [0, 22],      runLength: 22,      returnWait: wait];    Ticker[];    CopyOut[interval: [10, 12],      runLength: 12,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 21];    heap.FREE[@pArrayB];    END;   -- CopyOut tests over multiple unlike map units, part 1  CopyOutUnlikeA: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN OPEN VMTestOperations, VMTestScript;      pArrayA: LONG POINTER;    pArrayB: LONG POINTER;    -- This set of tests does not do all possible combinations.    -- unitary + uniform: all of both    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- same as previous, with runs not corresponding to swap units    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2,6,1]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 19],      runLength: 19,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- unitary + uniform: end of unitary + whole swap units of uniform    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 9],      runLength: 9,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- same as previous, with runs not corresponding to swap units    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2,6,1]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 9],      runLength: 9,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- unitary + uniform: end of unitary + partial swap unit of uniform    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3,3,3]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 8],      runLength: 8,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- same as previous, with runs not corresponding to swap units    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2,6,1]];    Map[id: "Uniform B"L,      interval: [10, 9],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[3],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 8],      runLength: 8,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + unitary: all of both    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 20],      runLength: 20,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + unitary: end of unitary + whole swap units of uniform    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [5, 9],      runLength: 9,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + unitary: end of unitary + partial swap unit of uniform    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary B"L,      interval: [10, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    CopyOut[interval: [5, 10],      runLength: 10,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- unitary + irregular: all of both    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3, 1, 11]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- unitary + irregular: end of unitary + whole swap units of irregular    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3, 1, 11]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [5, 9],      runLength: 9,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- unitary + irregular: end of unitary + partial swap unit of irregular    pArrayA ¬ heap.NEW[ARRAY[0..1) OF WORD ¬ [10]];    Map[id: "Unitary A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 1]],      access: readWrite,      swapUnits: MakeUnitarySwapData[],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [3, 1, 11]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [5, 12],      runLength: 12,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- irregular + uniform: all of both    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 11]];    Map[id: "Irregular A"L,      interval: [0, 19],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 2, 2]];    Map[id: "Uniform B"L,      interval: [19, 6],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 19];    heap.FREE[@pArrayB];    Ticker[];    -- irregular + uniform: whole swap units from each    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 11]];    Map[id: "Irregular A"L,      interval: [0, 19],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 2, 2]];    Map[id: "Uniform B"L,      interval: [19, 6],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    CopyOut[interval: [7, 16],      runLength: 16,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 19];    heap.FREE[@pArrayB];    Ticker[];    -- irregular + uniform: partial swap units from each    pArrayA ¬ heap.NEW[ARRAY[0..4) OF WORD ¬ [2, 5, 1, 11]];    Map[id: "Irregular A"L,      interval: [0, 19],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 4]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayA, 4]],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [2, 2, 2]];    Map[id: "Uniform B"L,      interval: [19, 6],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    CopyOut[interval: [4, 18],      runLength: 18,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 19];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + irregular: all of both    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [9, 1, 5]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [0, 25],      runLength: 25,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + irregular: whole swap units from each    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [9, 1, 5]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [8, 11],      runLength: 11,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    -- uniform + irregular: partial swap units from each    pArrayA ¬ heap.NEW[ARRAY[0..5) OF WORD ¬ [2, 2, 2, 2, 2]];    Map[id: "Uniform A"L,      interval: [0, 10],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayA, 5]],      access: readWrite,      swapUnits: MakeUniformSwapData[2],      life: alive,      swappability: swappable];    pArrayB ¬ heap.NEW[ARRAY[0..3) OF WORD ¬ [9, 1, 5]];    Map[id: "Irregular B"L,      interval: [10, 15],      backed: TRUE,      runs:  MakeBackingData[DESCRIPTOR[pArrayB, 3]],      access: readWrite,      swapUnits: MakeIrregularSwapData[DESCRIPTOR[pArrayB, 3]],      life: alive,      swappability: swappable];    CopyOut[interval: [1, 23],      runLength: 23,      returnWait: wait];    Unmap[page: 0];    heap.FREE[@pArrayA];    Unmap[page: 10];    heap.FREE[@pArrayB];    Ticker[];    END;  ------------  -- PUBLIC SIGNALs and ERRORs: none  ------------  -- Initialization:  ScriptOps.RegisterScript[RunTests, "More CopyOut tests"L];  END.LOG29-Nov-82 16:12:05   CAJ    Created file.