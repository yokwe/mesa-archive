-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- GraphTomDMain.mesa (last edited by Jonathan JXG     27-Jun-83 11:24:30)DIRECTORY  Context USING [Type, UniqueType],  FormSW USING [ClientItemsProcType, Create, Destroy],  GraphTomDOps,  Heap USING [systemZone],  Selection USING [ClearOnMatch],  TomD,  Tool USING [AddThisSW, DeleteThisSW, NopSleepProc, NopWakeupProc,     RegisterSWType, SWType],  ToolWindow USING [CreateSubwindow, Destroy],  Window USING [Dims, GetBox, SetDisplayProc, SetClearingRequired];  GraphTomDMain:  MONITOR   LOCKS globalInfo USING globalInfo:GraphTomDOps.GlobalInfoP   IMPORTS Context, FormSW, GraphTomDOps, Heap, Selection,     TomD, Tool, ToolWindow, Window  EXPORTS GraphTomDOps =  BEGIN OPEN GraphTomDOps;    graphSWType: PUBLIC Tool.SWType ¬     Tool.RegisterSWType[AdjustGraph, Tool.NopSleepProc, Tool.NopWakeupProc];  graphContextType: PUBLIC Context.Type ¬ Context.UniqueType[];  z:PUBLIC UNCOUNTED ZONE ¬ Heap.systemZone;         -- the entry routine to start and stop the display ...    Set: TomD.SetDisplayProcType =    BEGIN    globalInfo: GlobalInfoP ¬ clientHandle;       IF globalInfo=NIL    THEN      BEGIN -- first time being called - initialise world      FormClientItemsProc: FormSW.ClientItemsProcType={RETURN FormSWItems[globalInfo]};      globalInfo ¬ z.NEW[GlobalInfo];      globalInfo.hold.b ¬ FALSE; globalInfo.normalize.b ¬ FALSE;      globalInfo.filename ¬ NIL;      globalInfo.items ¬ NIL;      globalInfo.historySize ¬ globalInfo.usersHistorySize ¬ 100;      globalInfo.last ¬ globalInfo.historySize-1;      globalInfo.graphHeight ¬ globalInfo.usersGraphHeight ¬ 40;      globalInfo.yOffset ¬ 0;      globalInfo.slctScale ¬ none;      globalInfo.selectionMarked ¬ FALSE;	      globalInfo.msgSW ¬ msgSW;            globalInfo.formSW ¬ ToolWindow.CreateSubwindow[parent:parent];      FormSW.Create[globalInfo.formSW, FormClientItemsProc];      Tool.AddThisSW[window:parent, sw:globalInfo.formSW, nextSW:insertBeforeThis,      		     swType:predefined];		           globalInfo.mainSW ¬ ToolWindow.CreateSubwindow[parent:parent];      CreateScrollbar[globalInfo.mainSW];	      CreateTIPClient[globalInfo.mainSW];         [] ¬ Window.SetDisplayProc[globalInfo.mainSW, DisplayGraph];      [] ¬ Window.SetClearingRequired[globalInfo.mainSW, TRUE];      Tool.AddThisSW[window:parent, sw:globalInfo.mainSW, nextSW:insertBeforeThis,                     swType:graphSWType, h:768 -- perhaps an overestimate!!--];      END    ELSE      BEGIN  -- clean up after previous picture      DestroyGraphs[globalInfo];      END;              IF items=NIL     THEN       BEGIN -- last time being called - clean up world      Selection.ClearOnMatch[globalInfo];           DestroyScrollbar[globalInfo.mainSW];      DestroyTIPClient[globalInfo.mainSW];      Tool.DeleteThisSW[globalInfo.mainSW];      ToolWindow.Destroy[globalInfo.mainSW];      Tool.DeleteThisSW[globalInfo.formSW];      FormSW.Destroy[globalInfo.formSW];      ToolWindow.Destroy[globalInfo.formSW];      FOR i:CARDINAL IN [0..LENGTH[globalInfo.items])        DO	itemInfo:ItemInfoP ¬ globalInfo.items[i].client;	z.FREE[@itemInfo]	ENDLOOP;      z.FREE[@globalInfo];      END    ELSE       BEGIN      initialDims:Window.Dims ¬ Window.GetBox[insertBeforeThis].dims;      CreateGraphs[globalInfo, items, initialDims];      END;	                      RETURN [globalInfo]    END;                  -- the entry routine to update the display ...      Update: TomD.UpdateDisplayProcType = {LockedUpdate[clientHandle]};    LockedUpdate: ENTRY PROCEDURE[globalInfo:GlobalInfoP] =    BEGIN    IF globalInfo.hold.b THEN RETURN;        globalInfo.last ¬      (IF globalInfo.last=globalInfo.historySize-1 THEN 0 ELSE globalInfo.last+1);        FOR i:CARDINAL IN [0..LENGTH[globalInfo.items])      DO      item:ItemP ¬ globalInfo.items[i];      itemInfo:ItemInfoP ¬ item.client;      IF item.counter.b      THEN         BEGIN        current: LONG CARDINAL ¬ item.varAddr­;   -- ensure only looked at once!	IF itemInfo.prev#undefined	THEN itemInfo.history[globalInfo.last] ¬ current-itemInfo.prev;        itemInfo.prev ¬ current;	END      ELSE        itemInfo.history[globalInfo.last] ¬ item.varAddr­;      ENDLOOP;          UpdateGraphs[globalInfo];          END;             -- main line code ...      [] ¬ TomD.Register["Graph", Set , Update]    END.   LOG27-Jun-83 11:24:43 changes for better update handling   