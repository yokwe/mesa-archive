-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- GumoutParam.mesa - last edit by: CAJ   on: 21-Feb-85 17:06:36-- Floppy Disk Tool Parameter SW HandlerDIRECTORY  FloppyChannel USING [Context, Density, Format, GetDeviceAttributes],  FormSW        USING [    AllocateItemDescriptor, BooleanItem, ClientItemsProcType, DisplayItem,    Enumerated, EnumeratedItem, EnumeratedNotifyProcType, NumberItem,    NumberNotifyProcType, TagOnlyItem, line0, line1, line2, line3, line4, line5,    line6, sameLine, NotifyProcType],  GumoutDefs    USING [    AddrType, ContextType, FillType, FuncType, nCylinders, nHeads, nSectors,    PrintFormatType, ResetContext, toolData],  MsgSW         USING [Clear, Post],  Put           USING [Decimal, Line];GumoutParam: PROGRAM  IMPORTS FloppyChannel, GumoutDefs, FormSW, MsgSW, Put  EXPORTS GumoutDefs =  BEGIN OPEN toolData: GumoutDefs.toolData;  -- Global constants  FormItems: TYPE = {function, print, printOpt, fill, sides, context,    writeProt, format, density, sectorLength, startAddr, startCyl, startHead,    startSector, endAddr, endCyl, endHead, endSector};  -- Parameter FormSW Creation Routines  MakeParamForm: PUBLIC FormSW.ClientItemsProcType =    BEGIN OPEN FSW: FormSW;    -- This procedure creates a window for the operating context.    nItems: CARDINAL = FormItems.LAST.ORD + 1;    commands: ARRAY [0..7) OF FSW.Enumerated ¬ [      ["Format"L, 	GumoutDefs.FuncType[format]],      ["Read"L, 	GumoutDefs.FuncType[read]],      ["Write"L,  	GumoutDefs.FuncType[write]],      ["ReadID"L,       GumoutDefs.FuncType[readID]],      ["WriteDeleted"L, GumoutDefs.FuncType[writeDeleted]],      ["No-op"L,        GumoutDefs.FuncType[nop]],      ["Write+Check"L,  GumoutDefs.FuncType[writeCheck]]];    densities: ARRAY [0..2) OF FSW.Enumerated ¬ [      ["single"L, FloppyChannel.Density[single]], ["double"L,        FloppyChannel.Density[double]]];    fill: ARRAY [0..4) OF FSW.Enumerated ¬ [      ["zeroes"L, GumoutDefs.FillType[zeroes]],      ["ones"L, GumoutDefs.FillType[ones]],       ["random"L, GumoutDefs.FillType[random]],      ["current contents"L, GumoutDefs.FillType[leaveAlone]]];    formats: ARRAY [0..2) OF FSW.Enumerated ¬ [      ["IBM"L, FloppyChannel.Format[IBM]], ["Troy"L, FloppyChannel.Format[Troy]]];    printHow: ARRAY [0..6) OF FSW.Enumerated ¬ [      ["octal"L,         GumoutDefs.PrintFormatType[octal]],      ["octal byte"L,    GumoutDefs.PrintFormatType[octalByte]],      ["hex"L,           GumoutDefs.PrintFormatType[hex]],      ["octal swapped"L, GumoutDefs.PrintFormatType[octalSwapped]],      ["ascii"L,         GumoutDefs.PrintFormatType[ascii]],      ["ascii Swapped"L, GumoutDefs.PrintFormatType[asciiSwapped]]];    sectors: ARRAY [0..5) OF FSW.Enumerated ¬ [      ["128"L, 64], ["256"L, 128], ["512"L, 256], ["1024"L, 512], [      "2044"L, 1022]];    sides: ARRAY [0..2) OF FSW.Enumerated ¬ [      ["single-sided"L, 1], ["double-sided"L, 2]];    items ¬ FSW.AllocateItemDescriptor[nItems];    items[FormItems.function.ORD] ¬ FSW.EnumeratedItem[      tag: "Function"L, place: [0, FSW.line0], feedback: one,      value: @toolData.function, choices: DESCRIPTOR[commands]];    items[FormItems.print.ORD] ¬ FSW.BooleanItem[      tag: "Print"L, place: [0, FSW.line1], switch: @toolData.print];    items[FormItems.printOpt.ORD] ¬ FSW.EnumeratedItem[      tag: "Print Option"L, place: [-20, FSW.sameLine], feedback: one,      value: @toolData.printHow, choices: DESCRIPTOR[printHow]];    items[FormItems.fill.ORD] ¬ FSW.EnumeratedItem[      tag: "Fill Option"L, place: [230, FSW.sameLine], feedback: one,      value: @toolData.fill, proc: FillProc, choices: DESCRIPTOR[fill]];    items[FormItems.sides.ORD] ¬ FSW.EnumeratedItem[      tag: "Sides"L, place: [230, FSW.line2], feedback: one,      value: @GumoutDefs.nHeads, choices: DESCRIPTOR[sides]];    items[FormItems.context.ORD] ¬ FSW.TagOnlyItem[      tag: "Context/"L, place: [0, FSW.line3]];    items[FormItems.writeProt.ORD] ¬ FSW.BooleanItem[      tag: "write protect"L, place: [70, FSW.sameLine],      switch: @toolData.context.protect, proc: ChangeProtect];    items[FormItems.format.ORD] ¬ FSW.EnumeratedItem[      tag: "format"L, place: [-15, FSW.sameLine], feedback: one,      value: @toolData.context.format, proc: ChangeFormat,      choices: DESCRIPTOR[formats]];    items[FormItems.density.ORD] ¬ FSW.EnumeratedItem[      tag: "density"L, place: [-15, FSW.sameLine], feedback: one,      value: @toolData.context.density, proc: ChangeDensity,      choices: DESCRIPTOR[densities]];    items[FormItems.sectorLength.ORD] ¬ FSW.EnumeratedItem[      tag: "sector length (bytes)"L, place: [70, FSW.line4], feedback: all,      value: @toolData.context.sectorLength, proc: ChangeSector,      choices: DESCRIPTOR[sectors]];    items[FormItems.startAddr.ORD] ¬ FSW.TagOnlyItem[      tag: "Start address/"L, place: [0, FSW.line5]];    items[FormItems.startCyl.ORD] ¬ FSW.NumberItem[      tag: "cylinder"L, place: [90, FSW.sameLine], proc: CheckValue, default: 0,      value: @toolData.startAddr.cylinder];    items[FormItems.startHead.ORD] ¬ FSW.NumberItem[      tag: "head"L, place: [-10, FSW.sameLine], proc: CheckValue, default: 0,      value: @toolData.startAddr.head];    items[FormItems.startSector.ORD] ¬ FSW.NumberItem[      tag: "sector"L, place: [-10, FSW.sameLine], proc: CheckValue, default: 1,      value: @toolData.startAddr.sector];    items[FormItems.endAddr.ORD] ¬ FSW.TagOnlyItem[      tag: "End address/"L, place: [0, FSW.line6]];    items[FormItems.endCyl.ORD] ¬ FSW.NumberItem[      tag: "cylinder"L, place: [90, FSW.sameLine], proc: CheckValue,      default: GumoutDefs.nCylinders - 1, value: @toolData.endAddr.cylinder];    items[FormItems.endHead.ORD] ¬ FSW.NumberItem[      tag: "head"L, place: [-10, FSW.sameLine], proc: CheckValue,      default: GumoutDefs.nHeads - 1, value: @toolData.endAddr.head];    items[FormItems.endSector.ORD] ¬ FSW.NumberItem[      tag: "sector"L, place: [-10, FSW.sameLine], proc: CheckValue,      default: GumoutDefs.nSectors, value: @toolData.endAddr.sector];    RETURN[items: items, freeDesc: TRUE];    END;  -- Public Support Routines  CurrentContext: PUBLIC PROCEDURE RETURNS [FloppyChannel.Context] =    -- Make FloppyChannel-acceptable context from toolData information    BEGIN    RETURN[      [        protect: toolData.context.protect, format: IBM,        density: toolData.context.density,        sectorLength: toolData.context.sectorLength]];    END;  -- Parameter FormSW Support Routines  ChangeContext: PROC RETURNS [ok: BOOLEAN] =    -- This procedure is called whenever any of the context values is changed.    BEGIN    MsgSW.Clear[toolData.msgSW];    ok ¬ ~toolData.drivePresent OR GumoutDefs.ResetContext[CurrentContext[]];    IF ok THEN      GumoutDefs.nSectors ¬ FloppyChannel.GetDeviceAttributes[        toolData.floppyDrive].maxSectorsPerTrack      ELSE MsgSW.Post[toolData.msgSW, "Can't set that context; not changed."L];    END;  ChangeDensity: FormSW.EnumeratedNotifyProcType =    BEGIN    -- assumptions: Troy not available; Pilot disk may be either density.    IF ~ChangeContext[].ok THEN      BEGIN  -- reset to old value      toolData.context.density ¬ oldValue;      FormSW.DisplayItem[sw, index];      END;    END;  ChangeFormat: FormSW.EnumeratedNotifyProcType =    BEGIN    IF toolData.context.format = Troy THEN      BEGIN  -- reset to old value      MsgSW.Post[toolData.msgSW, "Sorry, no Troy."L];      toolData.context.format ¬ oldValue;      FormSW.DisplayItem[sw, index];      END    ELSE [] ¬ ChangeContext[];    END;  ChangeProtect: FormSW.NotifyProcType = {[] ¬ ChangeContext[]};  ChangeSector: FormSW.EnumeratedNotifyProcType =    BEGIN    IF ~ChangeContext[].ok THEN      BEGIN  -- reset to old value      toolData.context.sectorLength ¬ oldValue;      FormSW.DisplayItem[sw, index];      END;    END;  CheckValue: FormSW.NumberNotifyProcType =    BEGIN    max: CARDINAL =      SELECT index FROM        FormItems.startCyl.ORD, FormItems.endCyl.ORD => GumoutDefs.nCylinders - 1,        FormItems.startHead.ORD, FormItems.endHead.ORD => GumoutDefs.nHeads - 1,        ENDCASE --sector-- => GumoutDefs.nSectors;    MsgSW.Clear[toolData.msgSW];    WITH ii: item SELECT FROM      number =>        IF ii.value­ > max THEN          BEGIN          Put.Decimal[toolData.msgSW, max];          Put.Line[toolData.msgSW, " is max value."L];          ii.value­ ¬ oldValue;          FormSW.DisplayItem[sw, index];          END;      ENDCASE => NULL;    END;  FillProc: FormSW.EnumeratedNotifyProcType =    BEGIN    MsgSW.Clear[toolData.msgSW];    IF toolData.fill = leaveAlone THEN      BEGIN      MsgSW.Post[toolData.msgSW, "Not implemented; using random."L];      toolData.fill ¬ random;      FormSW.DisplayItem[sw, FormItems.fill.ORD];      END;    END;  END...  LOGTime: February 5, 1981  2:24 PM	By: CAJ 	Action: Add log, remove Troy format option, allow either density in PilotFormat,	miscellaneous fixes.Time: March 7, 1981  9:59 AM	By: CAJ 	Action: Add CheckValue and FillProc; clean up context changes and monitorize	actual call; add nop and writeCheck functions; add single/double sides option;	revise print options; rearrange param window; clear msg window.Time: 11-Nov-81 14:53:41	By: CAJ 	Action: Convert to Trinity FloppyChannel, delete Pilot floppy option.Time: 21-Feb-85 17:02:40	By: CAJ 	Action: Convert to 12.0 FloppyChannel.