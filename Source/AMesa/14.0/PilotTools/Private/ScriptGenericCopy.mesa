-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- ScriptGenericCopy.mesa        5-May-83 14:04:03 by CAJ -- Virtual memory test program, Klamath Pilot.-- ScriptGenericCopy contains generic Copy procedures which may be called by-- scripts.  They do combinations of CopyIn/Out with other operations.-- This is not a registered script.DIRECTORY  Environment USING [PageCount, PageNumber],  ScriptGeneric USING [CopyProc, RestoreProc],  VMTestOperations USING [Activate, CannotTouch, Deactivate, ForceOut, Kill,    MakeResident, MakeReadOnly, Touch],  VMTestScript USING [Ticker];ScriptGenericCopy: PROGRAM  IMPORTS VMTestOperations, VMTestScript  EXPORTS ScriptGeneric =  BEGIN  ------------  -- Public procedures:  -- Test specified Copy operation in a standard set of tests in combination  -- with other operations.  Expects interval [0, regionSize] to be mapped.  CopyCombos:  PUBLIC PROCEDURE [    copyProc: ScriptGeneric.CopyProc, restoreProc: ScriptGeneric.RestoreProc,    regionSize: CARDINAL] =    BEGIN OPEN ScriptGeneric, VMTestOperations, VMTestScript;    count: Environment.PageCount;    page: Environment.PageNumber;    BEGIN ENABLE VMTestOperations.CannotTouch => CONTINUE;    -- Just skip Touch if the page isn't mapped.    -- Copy, Kill, MakeResident    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	MakeResident[interval: [page, count], returnWait: return];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Touch-write    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	ENDLOOP;      -- dirty every other page      FOR page ¬ 0, page + 2 UNTIL page >= regionSize DO	Touch[interval: [page, 1], operation: write]; ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      -- do Copy and Kill separately      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	ENDLOOP;      -- read all at once      Touch[interval: [0, regionSize], operation: read];      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, ForceOut    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      -- read all at once      Touch[interval: [0, regionSize], operation: read];      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, MakeResident, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: return];	MakeResident[interval: [0, count], returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: read];        ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, MakeReadOnly, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: return];	MakeReadOnly[interval: [0, count]];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: read];        ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, ForceOut    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: return];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Activate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	Activate[interval: [page, count], returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Touch-write    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: write];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, MakeResident, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	MakeResident[interval: [page, count], returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Activate, Copy, Deactivate    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Activate[interval: [page, count], returnWait: wait];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Activate, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Activate[interval: [page, count], returnWait: return];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Deactivate, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: return];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Deactivate, Copy, Activate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: return];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Activate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- ForceOut, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	ForceOut[interval: [page, count], returnWait: return];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, Activate, Touch-write, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Activate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: write];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Deactivate    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, ForceOut    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, MakeReadOnly, ForceOut    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc[interval: [page, count], runLength: count, returnWait: return];	MakeReadOnly[interval: [0, count]];	ForceOut[interval: [page, count], returnWait: wait];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Activate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	Activate[interval: [page, count], returnWait: wait];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Deactivate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	Deactivate[interval: [page, count], returnWait: wait];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, ForceOut, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	ForceOut[interval: [page, count], returnWait: wait];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Kill, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	Kill[interval: [page, count]];	copyProc[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    END;  -- end scope of ENABLE    END;  -- Test two specified Copy operations in a standard set of tests in various  -- combinations with other operations and each other.  Copy operations may be  -- the same or different.  Expects interval [0, regionSize] to be mapped.  DoubleCopyCombos: PUBLIC PROCEDURE [    copyProc1, copyProc2: ScriptGeneric.CopyProc,    restoreProc: ScriptGeneric.RestoreProc, regionSize: CARDINAL] =    BEGIN OPEN ScriptGeneric, VMTestOperations, VMTestScript;    count: Environment.PageCount;    page: Environment.PageNumber;    BEGIN ENABLE VMTestOperations.CannotTouch => CONTINUE;    -- Just skip Touch if the page isn't mapped.    -- Touch-write, Copy, Touch-read, Copy    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Activate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Activate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: wait];	Deactivate[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, MakeResident, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	MakeResident[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, MakeReadOnly, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	MakeReadOnly[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, Activate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	ENDLOOP;      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Activate[interval: [page, count], returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Deactivate, Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, ForceOut, Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Kill, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, MakeReadOnly, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	MakeReadOnly[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Activate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Activate[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Deactivate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, ForceOut, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: wait];	ForceOut[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-read, Copy, Kill, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: wait];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Kill, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: read];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, MakeReadOnly, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: read];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	MakeReadOnly[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Copy, Activate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Activate[interval: [page, count], returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Copy, Copy, Kill, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, Kill, Copy, Touch-write    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: write];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Kill, Copy, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Kill[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- ForceOut, Copy, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	ForceOut[interval: [page, count], returnWait: wait];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Deactivate, Copy, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Deactivate[interval: [page, count], returnWait: wait];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- MakeReadOnly, Copy, Copy, Deactivate, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	MakeReadOnly[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Deactivate[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, MakeReadOnly, Copy, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	MakeReadOnly[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, MakeResident, Copy, Copy, ForceOut, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	MakeResident[interval: [page, count], returnWait: return];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	ForceOut[interval: [page, count], returnWait: wait];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    -- Touch-write, Copy, Kill, Copy, Activate, Copy, ForceOut, Copy,    --   Deactivate, Copy, Touch-read    FOR count IN [1..regionSize] DO      FOR page ¬ 0, page + count UNTIL page > regionSize - count DO	Touch[interval: [page, count], operation: write];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Kill[interval: [page, count]];	copyProc1[interval: [page, count], runLength: count, returnWait: wait];	Activate[interval: [page, count], returnWait: return];	copyProc2[interval: [page, count], runLength: count, returnWait: wait];	ForceOut[interval: [page, count], returnWait: wait];	copyProc2[interval: [page, count], runLength: count, returnWait: return];	Deactivate[interval: [page, count], returnWait: return];	copyProc1[interval: [page, count], runLength: count, returnWait: return];	Touch[interval: [page, count], operation: read];	ENDLOOP;      Ticker[];      restoreProc[];      ENDLOOP;    END;  -- end scope of ENABLE    END;  ------------  -- PRIVATE procedures:  ------------  -- PUBLIC SIGNALs and ERRORs: none  ------------  -- Initialization: none  END.LOG17-Mar-83 14:03:43   CAJ    Created file.