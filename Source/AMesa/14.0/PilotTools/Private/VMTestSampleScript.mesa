-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- VMTestSampleScript.mesa       14-Mar-83 17:33:00 by CAJ -- Virtual memory test program.-- VMTestSampleScript is a template for creating a script of tests for VMTest.DIRECTORY  Environment USING [PageCount, PageNumber],  ScriptOps USING [RegisterScript],  VM USING [Interval],  VMTestOperations --USING [all the operations]--,  VMTestScript USING [GetHeap, GetTestVMSize, GiveBackHeap, MakeBackingData,    MakeUniformSwapData, Ticker];VMTestSampleScript: PROGRAM  IMPORTS ScriptOps, VMTestOperations, VMTestScript =  BEGIN  ------------  -- PUBLIC procedures:  -- RunTests is a registered script procedure which may be called by the  -- VMTest driver.  The tests in the script may use procedures from  -- VMTestOperations (for VM operations) and VMTestScript (for test utilities).  RunTests: PROCEDURE =    BEGIN    heap: UNCOUNTED ZONE ¬ VMTestScript.GetHeap[];    -- Insert tests or test subprocedures here        SubTestProcA[heap];    -- etc. .. other procs, other tests ...    heap ¬ VMTestScript.GiveBackHeap[heap];    END;  -- Sample proc containing subgrouping of tests  SubTestProcA: PROCEDURE [heap: UNCOUNTED ZONE] =    BEGIN      pBackingArray: LONG POINTER;    vmSize: Environment.PageCount ¬ VMTestScript.GetTestVMSize[];    -- Create array of backing data sizes:    --   split the interval into two runs - 1 page and the rest of the interval.    pBackingArray ¬ heap.NEW[ARRAY[0..2) OF WORD ¬ [1, CARDINAL[vmSize] - 1]];      -- Note that vmSize is known to be a short value.    -- Map all of VM with uniform swap units and normal case attributes    VMTestOperations.Map[id: "All VM, uniform swap"L,      interval: [0, vmSize],      backed: TRUE,      runs:  VMTestScript.MakeBackingData[DESCRIPTOR[pBackingArray, 2]],      access: readWrite,      swapUnits: VMTestScript.MakeUniformSwapData[2], -- 2 page uniform swapunits      life: alive,      swappability: swappable];    -- Make the whole interval resident    VMTestOperations.MakeResident[interval: [0, vmSize], returnWait: wait];    VMTestScript.Ticker[];  -- Log the test step    -- Dirty a page in each run    VMTestOperations.Touch[interval: [0, 2], operation: write];    VMTestScript.Ticker[];  -- Log the test step    -- Deactivate those pages    VMTestOperations.Deactivate[interval: [0, 2], returnWait: wait];    VMTestScript.Ticker[];  -- Log the test step    -- Copy each page separately, without waiting for I/O completion    FOR i: Environment.PageCount IN [0..vmSize) DO      VMTestOperations.CopyIn[interval: [i, 1], runLength: 1, returnWait: return];      ENDLOOP;    VMTestScript.Ticker[];  -- Log the test step    -- Unmap and free up backing array    VMTestOperations.Unmap[page: 0];    heap.FREE[@pBackingArray];    END;  ------------  -- PUBLIC SIGNALs and ERRORs: none  ------------  -- Initialization:  -- Register the given script proc and identifying name with the script  -- handling facility at start time.  Module must be explicitly started.  ScriptOps.RegisterScript[script: RunTests, name: "Sample script"L];  END.LOG22-Feb-83 14:23:56   CAJ    Created file.