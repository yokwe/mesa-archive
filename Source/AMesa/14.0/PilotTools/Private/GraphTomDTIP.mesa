-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- GraphTomDTIP.mesa (last edited by Jonathan JXG     25-Apr-83  9:40:46)DIRECTORY  Atom USING [ATOM, MakeAtom],  GraphTomDOps,  Put USING [Char, Line, LongDecimal, LongString],  System USING [Pulses],  TIP USING [clickTimeout, CreateClient, DestroyClient, First, mouseTIP, NotifyProc,     Rest, ResultElement],  Window USING [Handle, Place];    GraphTomDTIP:  PROGRAM  IMPORTS Atom, GraphTomDOps, Put, TIP  EXPORTS GraphTomDOps =  BEGIN OPEN GraphTomDOps;    pointDown:    Atom.ATOM ¬ Atom.MakeAtom["PointDown"];  pointUp:      Atom.ATOM ¬ Atom.MakeAtom["PointUp"];  pointMotion:  Atom.ATOM ¬ Atom.MakeAtom["PointMotion"];    adjustDown:   Atom.ATOM ¬ Atom.MakeAtom["AdjustDown"];    adjustMotion: Atom.ATOM ¬ Atom.MakeAtom["AdjustMotion"];  adjustUp:     Atom.ATOM ¬ Atom.MakeAtom["AdjustUp"];  enter:        Atom.ATOM ¬ Atom.MakeAtom["Enter"];  exit:         Atom.ATOM ¬ Atom.MakeAtom["Exit"];    allowMotion:BOOLEAN ¬ FALSE;    tipData: RECORD [place, prevPlace:Window.Place, time, prevTime:System.Pulses];        CreateTIPClient: PUBLIC PROCEDURE[w:Window.Handle] =     {TIP.CreateClient[window:w, table:TIP.mouseTIP, notify:TIPNotifyProc]};		        DestroyTIPClient:PUBLIC PROCEDURE[w:Window.Handle] =     {TIP.DestroyClient[window:w]};		      	     	            TIPNotifyProc: TIP.NotifyProc =    BEGIN    globalInfo:GlobalInfoP ¬ GetGlobalInfo[window];     UNTIL results=NIL      DO      e:TIP.ResultElement ¬ TIP.First[results];      WITH ee:e SELECT       FROM        coords => tipData.place ¬ ee.place;        time => tipData.time ¬ ee.time;        atom => InterpretAtom[globalInfo, ee.a];        char => {Put.LongString[globalInfo.msgSW, "TIP "];       	         Put.Char[globalInfo.msgSW, ''];                  Put.Char[globalInfo.msgSW, ee.c];		 Put.Line[globalInfo.msgSW, ""]};        keys => Put.Line[globalInfo.msgSW, "TIP KEYS"];        string => {Put.LongString[globalInfo.msgSW, "TIP "];       		   Put.Char[globalInfo.msgSW, '"];       		   Put.LongString[globalInfo.msgSW, ee.s];  		   Put.Char[globalInfo.msgSW, '"];		   Put.Line[globalInfo.msgSW, ""]};        int => {Put.LongString[globalInfo.msgSW, "TIP "];       	        Put.LongDecimal[globalInfo.msgSW, ee.i];       	        Put.Line[globalInfo.msgSW, ""]};        ENDCASE => Put.Line[globalInfo.msgSW, "TIP xxx "];      results ¬ TIP.Rest[results];      ENDLOOP;    END;      InterpretAtom: PROCEDURE[globalInfo:GlobalInfoP, a:Atom.ATOM] =    BEGIN    SELECT a     FROM      pointDown =>        BEGIN        SetSlct[globalInfo, tipData.place, SoonAfterInSamePlace[], FALSE];	tipData.prevTime  ¬ tipData.time;	tipData.prevPlace ¬ tipData.place;	allowMotion ¬ TRUE	END;      pointUp =>        BEGIN        tipData.prevTime  ¬ (IF SoonAfterInSamePlace[] THEN tipData.time ELSE [0]);	tipData.prevPlace ¬ tipData.place;        allowMotion ¬ FALSE	END;        pointMotion =>        IF allowMotion THEN SetSlct[globalInfo, tipData.place, FALSE, TRUE];      adjustDown =>         BEGIN	AdjustSlct[globalInfo, tipData.place, SoonAfterInSamePlace[], FALSE];	tipData.prevTime  ¬ tipData.time;	tipData.prevPlace ¬ tipData.place;	allowMotion ¬ TRUE	END;      adjustMotion =>         IF allowMotion THEN AdjustSlct[globalInfo, tipData.place, FALSE, TRUE];      adjustUp =>         BEGIN        tipData.prevTime  ¬ (IF SoonAfterInSamePlace[] THEN tipData.time ELSE [0]);	tipData.prevPlace ¬ tipData.place;        allowMotion ¬ FALSE	END;      enter, exit => allowMotion ¬ FALSE;  -- perhaps superfluous on enter!      ENDCASE => Put.LongString[globalInfo.msgSW, a]    END;      SoonAfterInSamePlace: PROCEDURE[] RETURNS [BOOLEAN] =    { RETURN [tipData.time-tipData.prevTime < TIP.clickTimeout              AND ABS[tipData.place.x - tipData.prevPlace.x] < 5	      AND ABS[tipData.place.y - tipData.prevPlace.y] < 5] };       END...