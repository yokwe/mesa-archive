-- Copyright (C) 1984, 1985, 1986  by Xerox Corporation. All rights reserved. -- FileBasicsTomP.mesa  (last edited by RSV       21-Apr-86 13:29:40)DIRECTORY  FileBasicsPerf,  FileMgrPerf USING [nCreates],  Format USING [LongDecimal, LongString, StringProc],  Heap USING [systemZone],  Inline USING [DBITSHIFT],  String USING [AppendStringAndGrow],  System USING [PulsesToMicroseconds],  TomP;  FileBasicsTomP:   PROGRAM  IMPORTS    FileBasicsPerf, FileMgrPerf, Format, Heap, Inline, String, System, TomP =  BEGIN    setSizeRequests,   totalAllocs, totalFrees, expands, percentageExpands,  currentBufferCount, getBufferCalls, getBufferHits, splits, merges,  transfers,  locks, lvLockWaits, pvLockWaits, svLockWaits, microsecondsInClientProc,    ltAvgMicrosecondsInClientProc, stAvgMicrosecondsInClientProc,    prevMicrosecondsInClientProc, prevLocks: LONG CARDINAL ¬ 0;  hist: ARRAY FileBasicsPerf.HistIndex OF LONG CARDINAL ¬ ALL[0];  histNames: ARRAY FileBasicsPerf.HistIndex OF LONG STRING ¬ ALL[NIL];    z:UNCOUNTED ZONE ¬ Heap.systemZone;      UpdateVariables: TomP.UpdateVariablesProcType =    BEGIN        -- might as well lump most of these together for simplicity    -- note Tom will optimise out redundant calls of this proc        -- SimpleFile    setSizeRequests ¬ FileBasicsPerf.setSizeRequests;        -- VolAllocMap    totalAllocs ¬ FileBasicsPerf.totalAllocs;    totalFrees ¬ FileBasicsPerf.totalFrees;    expands ¬ FileBasicsPerf.expands;    percentageExpands ¬       (IF totalAllocs = FileMgrPerf.nCreates        THEN 0        ELSE (100 * expands) / (totalAllocs-FileMgrPerf.nCreates));        -- VolFileMap    currentBufferCount ¬ FileBasicsPerf.currentBufferCount;    getBufferCalls ¬ FileBasicsPerf.getBufferCalls;    getBufferHits ¬ FileBasicsPerf.getBufferHits;    splits ¬ FileBasicsPerf.splits;    merges ¬ FileBasicsPerf.merges;        -- VolBackingStore    transfers ¬ FileBasicsPerf.transfers;        -- VolTable    locks ¬ FileBasicsPerf.locks;    lvLockWaits ¬ FileBasicsPerf.lvLockWaits;    pvLockWaits ¬ FileBasicsPerf.pvLockWaits;    svLockWaits ¬ FileBasicsPerf.svLockWaits;    microsecondsInClientProc ¬     	System.PulsesToMicroseconds[FileBasicsPerf.timeInClientProc];    ltAvgMicrosecondsInClientProc ¬       (IF locks=0        THEN 0        ELSE microsecondsInClientProc/locks);    stAvgMicrosecondsInClientProc ¬      (IF locks = prevLocks        THEN 0        ELSE (microsecondsInClientProc - prevMicrosecondsInClientProc)/(locks - prevLocks));     prevLocks ¬ locks;     prevMicrosecondsInClientProc ¬ microsecondsInClientProc;    END;          UpdateLabelTransferVariables: TomP.UpdateVariablesProcType =    BEGIN    -- this is a bit too expensive to throw in with all the others    IF FileBasicsPerf.logging THEN hist ¬ FileBasicsPerf.hist;   -- note: array assignment    END;      GetSimpleFileVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["setSizeRequests", @setSizeRequests]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetVolAllocMapVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["allocs", @totalAllocs]];      1 => RETURN [["frees", @totalFrees]];      2 => RETURN [["expands", @expands]];      3 => RETURN [["percentageExpands", @percentageExpands]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetVolFileMapVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["currentBuffers", @currentBufferCount, FALSE]];      1 => RETURN [["getBufferCalls", @getBufferCalls]];      2 => RETURN [["getBufferHits", @getBufferHits]];      3 => RETURN [["splits", @splits]];      4 => RETURN [["merges", @merges]];      ENDCASE => RETURN [["invalid index", NIL]];    END;  GetVolBackingStoreVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["transfers", @transfers]];      ENDCASE => RETURN [["invalid index", NIL]];    END;  GetVolTableVariable: TomP.GetVariableProcType =    BEGIN    SELECT index    FROM      0 => RETURN [["locks", @locks]];      1 => RETURN [["lvLockWaits", @lvLockWaits]];      2 => RETURN [["pvLockWaits", @pvLockWaits]];      3 => RETURN [["svLockWaits", @svLockWaits]];      4 => RETURN [["timeInClientProc", @microsecondsInClientProc]];      5 => RETURN [        ["ltAverageTimeInClientProc", @ltAvgMicrosecondsInClientProc, FALSE]];      6 => RETURN [        ["stAverageTimeInClientProc", @stAvgMicrosecondsInClientProc, FALSE]];      ENDCASE => RETURN [["invalid index", NIL]];    END;      GetLabelTransferVariable: TomP.GetVariableProcType =    BEGIN    i:CARDINAL ¬ index + FIRST[FileBasicsPerf.HistIndex];    IF i NOT IN FileBasicsPerf.HistIndex THEN RETURN [["invalid index", NIL]];    IF histNames[i]=NIL    THEN     BEGIN      p:Format.StringProc =         {String.AppendStringAndGrow[to:@histNames[i], from:s, z:z, extra:10]};      Format.LongString[p, "requestsOfSize"L];      Format.LongDecimal[p, Inline.DBITSHIFT[value:1, count:i-1]];      Format.LongString[p, "To"L];      Format.LongDecimal[p, Inline.DBITSHIFT[value:1, count:i]-1];      END;    RETURN [[histNames[i], @hist[i], FALSE]];    END;                  [] ¬ TomP.Register[name:"SimpleFile", nVariables:1,  		getVariableProc:GetSimpleFileVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"VolAllocMap", nVariables:4,  		getVariableProc:GetVolAllocMapVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"VolFileMap", nVariables:5,  		getVariableProc:GetVolFileMapVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"VolBackingStore", nVariables:1,  		getVariableProc:GetVolBackingStoreVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"VolTable", nVariables:7,  		getVariableProc:GetVolTableVariable, 		updateVariablesProc:UpdateVariables];		  [] ¬ TomP.Register[name:"LabelTransfer",   		nVariables:LAST[FileBasicsPerf.HistIndex]-FIRST[FileBasicsPerf.HistIndex]+1,  		getVariableProc:GetLabelTransferVariable, 		updateVariablesProc:UpdateLabelTransferVariables];										      END.LOG 1-Feb-84 16:47:18      AWL        Created log.  Compute both short term and long term averages. 5-Dec-85 11:08:13      RSV  Fixed divide by zero problems (AR 8656) and changed computation of short term average (AR 8657) since both long term and short term were the same.21-Apr-86 13:29:40      RSV  made percentageExpands a number between 0 and 100 instead of equal to 0 or 1 (AR 9364).