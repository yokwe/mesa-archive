-- Copyright (C) 1988  by Xerox Corporation. All rights reserved. -- FloppyTapeEditRootPageSW.mesa	last edited by: CAJ   9-May-88  9:49:17-- This module implements a view of the floppy tape file system root page for-- the data display subwindow of the floppy tape editor.DIRECTORY  Floppy USING [FileID],  FloppyEditInternal USING [data, heap, Msg, swapWindowKey],  FloppyEditUtilities USING [ReplaceFileID, ReplaceFileIDString, ValidateFileID],  FloppyTape USING [maxBytesInName],  FloppyTapeFormat USING [RootPage],  FormSW USING [    AllocateItemDescriptor, BooleanItem, ClientItemsProcType, CommandItem,    DisplayItem, FilterProcType, line0, line1, line2, line3, line4, line5, line6,    line7, line8, line9, LineN, LongNumberItem, NumberItem, NumberNotifyProcType,    ProcType, TagOnlyItem, StringEditProc, StringItem],  Inline USING [BITAND],  MsgSW USING [Clear],  String USING [Replace],  Window USING [Handle],  WindowSwap USING [RegisterView];FloppyTapeEditRootPageSW: PROGRAM  IMPORTS    FloppyEditInternal, FloppyEditUtilities, FormSW, Inline, MsgSW, String, WindowSwap =  BEGIN  --//////////////////  -- Local TYPEs, constants, and variables  FormItems: TYPE = {    rootPage, seal, version, numberOfStreams, numberOfTracks, sectorsPerTrack,    initialMicrocodeID, initialMicrocodeOffset, pilotMicrocodeID,    pilotMicrocodeOffset, diagnosticMicrocodeID, diagnosticMicrocodeOffset,    germID, germOffset, pilotBootFileID, pilotBootFileOffset, clientWord,    currentEOT, lastFileID, nextUnusedFileID, numberOfBadPages, changing, pad,    rootFile, labelSize, label, spareIndex, spareValue, next, back};  -- This is the actual contents of sector nine  rootPage: LONG POINTER TO FloppyTapeFormat.RootPage ¬ NIL;  -- File ID strings and things needed in a different form for display  changing: BOOLEAN ¬ FALSE;  diagnosticMicrocodeFileID: LONG STRING ¬ NIL;  germFileID: LONG STRING ¬ NIL;  initialMicrocodeFileID: LONG STRING ¬ NIL;  label: LONG STRING ¬ NIL;  lastFileID: LONG STRING ¬ NIL;  nextUnusedFileID: LONG STRING ¬ NIL;  pad: WORD ¬ 0;  pilotBootFileFileID: LONG STRING ¬ NIL;  pilotMicrocodeFileID: LONG STRING ¬ NIL;  rootFileString: LONG STRING ¬ NIL;  spareIndex: WORD ¬ 0;  spareValue: WORD ¬ 0;  --//////////////////  -- Procedures  Back: FormSW.ProcType =    BEGIN    MsgSW.Clear[FloppyEditInternal.data.msgSW];    IF spareIndex IN [0..LENGTH[rootPage.spare]) THEN      rootPage.spare[spareIndex] ¬ spareValue;    spareIndex ¬ IF spareIndex = 0      THEN LENGTH[rootPage.spare] - 1      ELSE spareIndex - 1;    spareValue ¬ rootPage.spare[spareIndex];    FormSW.DisplayItem[sw, FormItems.spareIndex.ORD];    FormSW.DisplayItem[sw, FormItems.spareValue.ORD];    END;  CleanupRootPageSW: PROCEDURE =    -- Make data buffer match display.    BEGIN    valid: BOOLEAN;    id: Floppy.FileID;    -- The only things copied here are things which occupy less than a full word    -- in the actual root page and are not handled by change-time notify procs;    -- all others are accessed directly.    rootPage.changing ¬ changing;    -- ID strings get a possibly redundant update here because there is at least    -- one way they can be edited (delete only) without tripping the notify proc.    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[diagnosticMicrocodeFileID];    IF valid THEN rootPage.diagnosticMicrocode.file ¬ LOOPHOLE[id];    -- ELSE (can't do anything about it here)    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[germFileID];    IF valid THEN rootPage.germ.file ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[initialMicrocodeFileID];    IF valid THEN rootPage.initialMicrocode.file ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[lastFileID];    IF valid THEN rootPage.lastFileID ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[nextUnusedFileID];    IF valid THEN rootPage.nextUnusedFileID ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[pilotBootFileFileID];    IF valid THEN rootPage.pilotBootFile.file ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[pilotMicrocodeFileID];    IF valid THEN rootPage.pilotMicrocode.file ¬ LOOPHOLE[id];    [valid, id] ¬ FloppyEditUtilities.ValidateFileID[rootFileString];    IF valid THEN rootPage.rootFile ¬ LOOPHOLE[id];    FOR i: CARDINAL IN [0..MIN[FloppyTape.maxBytesInName, rootPage.labelSize])      DO rootPage.label[i] ¬ label[i]; ENDLOOP;    END;  -- CleanupRootPageSW  ChangePad: FormSW.NumberNotifyProcType =    -- [sw: Window.Handle, item: FormSW.ItemHandle, index: CARDINAL,    -- oldValue: UNSPECIFIED]    BEGIN    MsgSW.Clear[FloppyEditInternal.data.msgSW];    IF pad ~= Inline.BITAND[pad, 077777B] THEN      BEGIN      pad ¬ oldValue;      FloppyEditInternal.Msg["Out of bounds", TRUE];      FormSW.DisplayItem[sw, FormItems.pad.ORD];      END    ELSE rootPage.pad ¬ pad;    END;  -- ChangePad  CopyLabel: FormSW.FilterProcType =    --[sw: Window.Handle, item: FormSW.ItemHandle, insert: CARDINAL,    -- string: LONG STRING]    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FOR i: CARDINAL IN [0..MIN[FloppyTape.maxBytesInName, rootPage.labelSize])      DO rootPage.label[i] ¬ label[i]; ENDLOOP;    END;  -- CopyLabel  DestroyRootPageSW: PROCEDURE =    -- Give back resources when view is going away for good.    BEGIN    String.Replace[@diagnosticMicrocodeFileID, NIL, FloppyEditInternal.heap];    String.Replace[@germFileID, NIL, FloppyEditInternal.heap];    String.Replace[@initialMicrocodeFileID, NIL, FloppyEditInternal.heap];    String.Replace[@label, NIL, FloppyEditInternal.heap];    String.Replace[@lastFileID, NIL, FloppyEditInternal.heap];    String.Replace[@nextUnusedFileID, NIL, FloppyEditInternal.heap];    String.Replace[@pilotBootFileFileID, NIL, FloppyEditInternal.heap];    String.Replace[@pilotMicrocodeFileID, NIL, FloppyEditInternal.heap];    String.Replace[@rootFileString, NIL, FloppyEditInternal.heap];    END;  FillRootPageSW: PROCEDURE =    -- Make display match data buffer.    BEGIN    -- Only things which do not occupy integral word(s) are copied to local    -- variables.  Everything else just accesses the actual root page.    -- File IDs which are displayed as strings are also constructed here.    localLabel: STRING ¬ [FloppyTape.maxBytesInName];    changing ¬ rootPage.changing;    pad ¬ rootPage.pad;    spareIndex ¬ 0;    spareValue ¬ rootPage.spare[spareIndex];    FloppyEditUtilities.ReplaceFileIDString[      @diagnosticMicrocodeFileID, LOOPHOLE[rootPage.lastFileID]];    FloppyEditUtilities.ReplaceFileIDString[      @germFileID, LOOPHOLE[rootPage.lastFileID]];    FloppyEditUtilities.ReplaceFileIDString[      @initialMicrocodeFileID, LOOPHOLE[rootPage.lastFileID]];    FloppyEditUtilities.ReplaceFileIDString[      @lastFileID, LOOPHOLE[rootPage.lastFileID]];    FloppyEditUtilities.ReplaceFileIDString[      @nextUnusedFileID, LOOPHOLE[rootPage.nextUnusedFileID]];    FloppyEditUtilities.ReplaceFileIDString[      @pilotBootFileFileID, LOOPHOLE[rootPage.rootFile]];    FloppyEditUtilities.ReplaceFileIDString[      @pilotMicrocodeFileID, LOOPHOLE[rootPage.rootFile]];    FloppyEditUtilities.ReplaceFileIDString[      @rootFileString, LOOPHOLE[rootPage.rootFile]];    localLabel.length ¬ MIN[rootPage.labelSize, FloppyTape.maxBytesInName];    FOR i: CARDINAL IN [0..localLabel.length) DO      localLabel[i] ¬ rootPage.label[i]; ENDLOOP;    String.Replace[@label, localLabel, FloppyEditInternal.heap];    END;  -- FillRootPageSW  MakeRootPageSW: PUBLIC FormSW.ClientItemsProcType =    BEGIN    nItems: CARDINAL = FormItems.LAST.ORD + 1;    rootPage ¬ LOOPHOLE[FloppyEditInternal.data.sectorBuffer];    items ¬ FormSW.AllocateItemDescriptor[nItems];    items[FormItems.rootPage.ORD] ¬ FormSW.TagOnlyItem[      tag: "RootPage"L, place: [3, FormSW.line0]];    items[FormItems.seal.ORD] ¬ FormSW.NumberItem[      tag: "Seal "L, place: [148, FormSW.line0], signed: FALSE, notNegative: TRUE,      radix: octal, default: 177777B, value: @rootPage.seal];    items[FormItems.version.ORD] ¬ FormSW.NumberItem[      tag: "Version "L, place: [262, FormSW.line0], signed: FALSE,      notNegative: TRUE, radix: decimal, default: 177777B,      value: @rootPage.version];    items[FormItems.numberOfStreams.ORD] ¬ FormSW.NumberItem[      tag: "NumberOfStreams "L, place: [3, FormSW.line1], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.numberOfStreams];    items[FormItems.numberOfTracks.ORD] ¬ FormSW.NumberItem[      tag: "NumberOfTracks "L, place: [175, FormSW.line1], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.numberOfTracks];    items[FormItems.sectorsPerTrack.ORD] ¬ FormSW.NumberItem[      tag: "SectorsPerTrack "L, place: [335, FormSW.line1], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.sectorsPerTrack];    items[FormItems.initialMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "InitialMicrocode fileID "L, inHeap: FALSE, place: [3, FormSW.line2],      string: @initialMicrocodeFileID,      filterProc: ValidateInitialMicrocodeFileID];    items[FormItems.initialMicrocodeOffset.ORD] ¬ FormSW.LongNumberItem[      tag: "offset "L, place: [310, FormSW.line2], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.initialMicrocode.offset];    items[FormItems.pilotMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "PilotMicrocode fileID "L, inHeap: FALSE, place: [3, FormSW.line3],      string: @pilotMicrocodeFileID, filterProc: ValidatePilotMicrocodeFileID];    items[FormItems.pilotMicrocodeOffset.ORD] ¬ FormSW.LongNumberItem[      tag: "offset "L, place: [310, FormSW.line3], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.pilotMicrocode.offset];    items[FormItems.diagnosticMicrocodeID.ORD] ¬ FormSW.StringItem[      tag: "DiagnosticMicrocode fileID "L, inHeap: FALSE,      place: [3, FormSW.line4], string: @diagnosticMicrocodeFileID,      filterProc: ValidateDiagnosticMicrocodeFileID];    items[FormItems.diagnosticMicrocodeOffset.ORD] ¬ FormSW.LongNumberItem[      tag: "offset "L, place: [310, FormSW.line4], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.diagnosticMicrocode.offset];    items[FormItems.germID.ORD] ¬ FormSW.StringItem[      tag: "Germ fileID "L, inHeap: FALSE, place: [3, FormSW.line5],      string: @germFileID, filterProc: ValidateGermFileID];    items[FormItems.germOffset.ORD] ¬ FormSW.LongNumberItem[      tag: "offset "L, place: [310, FormSW.line5], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.germ.offset];    items[FormItems.pilotBootFileID.ORD] ¬ FormSW.StringItem[      tag: "PilotBootFile fileID "L, inHeap: FALSE, place: [3, FormSW.line6],      string: @pilotBootFileFileID, filterProc: ValidatePilotBootFileFileID];    items[FormItems.pilotBootFileOffset.ORD] ¬ FormSW.LongNumberItem[      tag: "offset "L, place: [310, FormSW.line6], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.pilotBootFile.offset];    items[FormItems.clientWord.ORD] ¬ FormSW.NumberItem[      tag: "ClientWord "L, place: [3, FormSW.line7], signed: FALSE,      notNegative: TRUE, radix: octal, default: 0, value: @rootPage.clientWord];    items[FormItems.currentEOT.ORD] ¬ FormSW.LongNumberItem[      tag: "CurrentEOT "L, place: [250, FormSW.line7], signed: FALSE,      notNegative: TRUE, default: 1777777B, value: @rootPage.currentEOT];    items[FormItems.lastFileID.ORD] ¬ FormSW.StringItem[      tag: "LastFileID "L, inHeap: FALSE, place: [3, FormSW.line8],      string: @lastFileID, filterProc: ValidateLastFileID];    items[FormItems.nextUnusedFileID.ORD] ¬ FormSW.StringItem[      tag: "NextUnusedFileID "L, inHeap: FALSE, place: [250, FormSW.line8],      string: @nextUnusedFileID, filterProc: ValidateNextUnusedFileID];    items[FormItems.numberOfBadPages.ORD] ¬ FormSW.NumberItem[      tag: "NumberOfBadPages"L, place: [3, FormSW.line9], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.numberOfBadPages];    items[FormItems.changing.ORD] ¬ FormSW.BooleanItem[      tag: "changing"L, place: [165, FormSW.line9],      switch: @changing];    items[FormItems.pad.ORD] ¬ FormSW.NumberItem[      tag: "pad "L, place: [260, FormSW.line9], signed: FALSE,      notNegative: TRUE, radix: octal, default: 0, value: @pad, proc: ChangePad];    items[FormItems.rootFile.ORD] ¬ FormSW.StringItem[      tag: "RootFile "L, inHeap: FALSE, place: [3, FormSW.LineN[10]],      string: @rootFileString, filterProc: ValidateRootFile];    items[FormItems.labelSize.ORD] ¬ FormSW.NumberItem[      tag: "Label size "L, place: [3, FormSW.LineN[11]], signed: FALSE,      notNegative: TRUE, default: 0, value: @rootPage.labelSize];    items[FormItems.label.ORD] ¬ FormSW.StringItem[      tag: "Label"L, place: [145, FormSW.LineN[11]], inHeap: FALSE,      string: @label, filterProc: CopyLabel];    items[FormItems.spareIndex.ORD] ¬ FormSW.NumberItem[      tag: "Spare area index "L, place: [3, FormSW.LineN[12]], signed: FALSE,      notNegative: TRUE, default: 0, value: @spareIndex];    items[FormItems.spareValue.ORD] ¬ FormSW.NumberItem[      tag: "value "L, place: [175, FormSW.LineN[12]], signed: FALSE,      notNegative: TRUE, radix: octal, default: 0, value: @spareValue];    items[FormItems.next.ORD] ¬ FormSW.CommandItem[      tag: "Next"L, place: [300, FormSW.LineN[12]], proc: Next];    items[FormItems.back.ORD] ¬ FormSW.CommandItem[      tag: "Back"L, place: [345, FormSW.LineN[12]], proc: Back];    RETURN[items, TRUE]    END;  -- MakeRootPageSW  Next: FormSW.ProcType =    BEGIN    MsgSW.Clear[FloppyEditInternal.data.msgSW];    IF spareIndex IN [0..LENGTH[rootPage.spare]) THEN      rootPage.spare[spareIndex] ¬ spareValue;    spareIndex ¬ (spareIndex + 1) MOD LENGTH[rootPage.spare];    spareValue ¬ rootPage.spare[spareIndex];    FormSW.DisplayItem[sw, FormItems.spareIndex.ORD];    FormSW.DisplayItem[sw, FormItems.spareValue.ORD];    END;  ValidateDiagnosticMicrocodeFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @diagnosticMicrocodeFileID, LOOPHOLE[@rootPage.diagnosticMicrocode.file]];    END;  -- ValidateDiagnosticMicrocodeFileID  ValidateGermFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[@germFileID, LOOPHOLE[@rootPage.germ.file]];    END;  -- ValidateGermFileID  ValidateInitialMicrocodeFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @initialMicrocodeFileID, LOOPHOLE[@rootPage.initialMicrocode.file]];    END;  -- ValidateInitialMicrocodeFileID  ValidateLastFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @lastFileID, LOOPHOLE[@rootPage.lastFileID]];    END;  -- ValidateLastFileID  ValidateNextUnusedFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @nextUnusedFileID, LOOPHOLE[@rootPage.nextUnusedFileID]];    END;  -- ValidateNextUnusedFileID  ValidatePilotBootFileFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @pilotBootFileFileID, LOOPHOLE[@rootPage.pilotBootFile.file]];    END;  -- ValidatePilotBootFileFileID  ValidatePilotMicrocodeFileID: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @pilotMicrocodeFileID, LOOPHOLE[@rootPage.pilotMicrocode.file]];    END;  -- ValidatePilotMicrocodeFileID  ValidateRootFile: FormSW.FilterProcType =    BEGIN    FormSW.StringEditProc[sw, item, insert, string];    FloppyEditUtilities.ReplaceFileID[      @rootFileString, LOOPHOLE[@rootPage.rootFile]];    END;  -- ValidateRootFile  -- Module initialization:  -- Register this subwindow as an alternate view for the data subwindow  WindowSwap.RegisterView[    key: FloppyEditInternal.swapWindowKey, viewName: "RootPage"L,    makeFormSW: MakeRootPageSW, viewFromDataProc: FillRootPageSW,    dataFromViewProc: CleanupRootPageSW, destroyViewProc: DestroyRootPageSW];  END.LOG 9-May-88  8:58:21   CAJ	Created file.