Copyright (C) 1983, 1987  by Xerox Corporation. All rights reserved.FaultBrowser.doc			29-Sep-87 14:59:08 by WDKFaultBrowser is a "debugger" tool which displays processor data and Pilot tables relating to the processing of page, frame, and write faults on the ~debuggee~ volume.  It is useful in analyzing fault-related problems, and also gives information about recently used spaces and their properties. It also displays information about the current contents of real memory and its referenced and dirty status.FaultBrowser displays five kinds of information:	*   processor fault queues	*   the processor ready queue	*   the state vector heap	*   Pilot's run table  (mapped spaces)	*   Pilot's swap unit table	*   data about individual mapped pages	Some of this data is included in the information that debugger prints, but FaultBrowser typically prints more complete information, and in a tabular form.	=== FORM SUBWINDOW ===The fields in the form subwindow operate as follows:Table: {}   This enumerated item is used to specify what kind of data FaultBrowser will display next, chosen from the following possibilities: the processor fault queues, the processor ready queue, the state vector heap, Pilot's run table (mapped spaces), Pilot's swap unit table, and data about individual mapped pages.  More information on the significance of these tables are given in the next section.Display Table!   This command displays the entire table specified by the Table enumerated item.For some types of information, FaultBrowser allows the user to display table item(s) related to a particular key.  For example, one can ask for the mapped spaces which include a specified page.  For tables which have a notion of sequence, a key may be accompanied by a count of items to be displayed, and the next and previous entry may be displayed.  Some commands do not apply to some tables, and will respond with "not implemented".Start Key =   This numeric field specifies the key of the (first) item to be displayed.Count =   This numeric field specifies the number of table items to be displayed.Display Table Items!   This command displays those table items specified by Start Key and Count.Next!   This command displays the table item following the most-recently-displayed one.Prev!   This command displays the table item preceeding the most-recently-displayed one.verbose   This boolean field specifies that additional data, typically of low interest, should be included in displayed data.	=== FAULT QUEUES DISPLAY ===The fault queues table describes the processes which are have taken a page, frame, or write fault and are waiting for the fault to be serviced.  A typical line displayed by this command is:PSB: 210B, priority: 1, L: 54410B, waiting page fault (being processed),  pointer: 1717000B^, page: 3636BFor page faults, the line shows Pilot's progress in the several stages of processing the fault (e.g. "being processed").	=== READY QUEUE DISPLAY ===The ready queue table describes the processes which are "ready to run".  However, these processes may still be blocked by the unavailability of a state vector for their priority level (see display of state vector pool).  A typical table displayed by this command is:PSB: 113B, priority: 3, L: 11470B, ready.PSB: 104B, priority: 2, L: 3230B, ready.	=== STATE VECTOR POOL DISPLAY ===The state vector pool table (ho ho) describes the number of available state vectors for each process priority level.  No processes at a particular priority level may run until a state vector becomes available for its level (by some faulted process having its fault satisfied and being restarted, thus freeing its state vector).  A typical table displayed by this command is:priority nStateVectors    0       1    1       5    2       8    3       5    4       3    5       5    6       1    7       1	=== RUN TABLE DISPLAY ===The run table describes the properties of "runs".  A run is a portion of a mapped space whose backing storage is contiguous (e.g. is a single run on the disk).  There is at least one run for each mapped space, and typically, there is only one--since the backing file for a mapped space is typically contiguous.Among other things, a run table entry contains data about the starting page and count of the run, a pointer to the swap unit data, flags indicating whether this run begins and/or ends a map unit, its Space.Usage and Space.Class, and the transferProc ID (backing storage implementation) that the memory is mapped to. A typical table displayed by this command (in nonverbose mode) is:860 runs in run table.48 pages occupied by run table.  run   run swapU @swapU allOut begin end  usage   xProc  page count type  data         mUnit mUnit    class ID    514     1 unit  self  maybe  begin  end    0  2    3   515     1 unit  self  maybe  begin  end    0  2    3   . . .   793    31  irr     0  maybe  begin  end    0  2    3   827     2  irr     4  maybe  begin  end    0  2    3   928     1 unit  self  maybe  begin  end   30  6    3   929     1 unit  self    yes  begin  end   30  6    3   960     5 unif    14  maybe  begin  end   30  6    3   . . .End of VM.In verbose mode, the data for the backing storage implementation is also displayed (7 words).A Start Key and Count may be specified for the run table.  The run containing the specified page will be displayed, and the Count-1 runs following it.  Next! and Prev! may be used to continue this incremental display.	=== SWAP UNIT TABLE DISPLAY ===The swap unit table describes the properties of swap units. Swap units are subdivisions of Pilot mapped spaces.  The swap unit information displayed is: the swap unit's starting page and page length, availability for operations (avail/busy), access (write/read), swappability (swaps/pin'd), and life (alive/dead). The run table information is also displayed to show the run boundaries.  A typical table displayed by this command is:  run   run swapU @swapU allOut begin end  usage   xProc  page count type  data         mUnit mUnit    class ID     swapU swapU     page count  ...swap unit state...  1024   161 unit  self    yes  begin  end    0  2    3     1024   161 avail  read swaps alive  1194    11  irr    19  maybe  begin  end    0  2    3     1194     4 avail write swaps  dead     1198     5 avail write swaps alive     1203     2 avail write swaps alive  1205    36  irr    22  maybe  begin  end    0  2    3     1205     3 avail write swaps alive     1208     2 avail write swaps alive     . . .  1960     5 unif    14  maybe  begin  end   30  6    3     1960     1 avail write swaps alive     1961     1 avail write swaps  dead     1962     1 avail write swaps  dead     1963     1 avail write swaps  dead     1964     1 avail write swaps  dead     . . .End of VM.A Start Key may be specified for the swap unit table.  The run containing the specified page will be displayed, and the Count-1 swap units following it.  Next! is implemented. Prev! is ignored.	=== PAGE DISPLAY ===The page displays shows the properties of individual pages of mapped spaces. The page information displayed is either "vacant", indicating that the page is swapped out, or its cleanliness (clean/dirty) and referenced status (ref'd/unrefd). The run table and swap unit table information is also displayed to show the run and swap unit boundaries boundaries. Runs of adjacent pages with identical properties are displayed in a single line; each line shows the starting page and number of pages of the run of like pages. A typical table displayed by this command is:  run   run swapU @swapU allOut begin end  usage   xProc  page count type  data         mUnit mUnit    class ID     swapU swapU     page count  ...swap unit state...       page count  --flags--    real      . . .   960     5 unif    14  maybe  begin  end   30  6    3     466       0   23537    1302       0   12606       0      960     1 avail write swaps alive        960     1 dirty  ref'd   422      961     1 avail write swaps  dead        961     1 dirty  ref'd  2616      962     1 avail write swaps  dead        962     1 dirty  ref'd   541      963     1 avail write swaps  dead        963     1 dirty  ref'd   542      964     1 avail write swaps  dead        964     1   vacant   965     1 unit  self  maybe  begin  end   30  6    3     466       0   23537    1307       0   12613       0      965     1 avail write swaps  dead        965     1 dirty unrefd   545        . . .End of VM.The "verbose" form item controls display of the real page backing swapped in virtual pages. Note: The real page is not available for remote debuggees; in this case a constant value will be printed for the real page number.A Start Key may be specified for the page display.  The specified page will be displayed, and the Count-1 pages following it.  Next and Prev! are ignored.	11-Mar-87 13:29:27   RSV   Changed to initials.29-Sep-87 15:02:49   WDK   Added real page numbers. Updated example displays.