-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. -- FactorialSkeleton.mesa last edit: AOF 14-Jul-83  9:52:30DIRECTORY  Courier USING [    Description, Arguments, Dispatcher, ExportRemoteProgram, Handle, Free,    NoSuchProcedureNumber, Results, Parameters, Create, Call, Delete],  Factorial USING [],  FactorialInternal USING [    programNumber, versionRange, procNumberFactorial, version],  Heap USING [systemZone],  System USING [NetworkAddress];FactorialSkeleton: PROGRAM  IMPORTS Courier, Heap EXPORTS Factorial, FactorialInternal =  BEGIN  z: UNCOUNTED ZONE = Heap.systemZone;  -- Server side  StartServer: PROCEDURE =    BEGIN    Courier.ExportRemoteProgram[      FactorialInternal.programNumber, FactorialInternal.versionRange,      Dispatcher, "Factorial"L, z, transactional];    END;  Dispatcher: Courier.Dispatcher =    BEGIN    SELECT procedureNumber FROM      FactorialInternal.procNumberFactorial => Factorial[cH, arguments, results];      ENDCASE => ERROR Courier.NoSuchProcedureNumber;    END;  Factorial: PROCEDURE [    cH: Courier.Handle, arguments: Courier.Arguments, results: Courier.Results] =    BEGIN    number: CARDINAL;    factorial: LONG CARDINAL;    arguments[[@number, DescribeCardinal]];    factorial ¬ ComputeFactorial[number];    [] ¬ results[[@factorial, DescribeLongCardinal]];    -- Use Courier.Free if Courier allocated any storage for the args    END;  ComputeFactorial: PROCEDURE [num: CARDINAL] RETURNS [fact: LONG CARDINAL] =    BEGIN    temp: LONG CARDINAL;    SELECT TRUE FROM      num = 0, num = 1 => fact ¬ 1;      ENDCASE =>        BEGIN        temp ¬ ComputeFactorial[num - 1].fact;        fact ¬ num*temp;        IF fact/num # temp THEN ERROR;  -- numberTooBig - overflow check        END;    END;  -- Client or "Stub" side procedure  GetFactorial: PUBLIC PROCEDURE [number: CARDINAL, host: System.NetworkAddress]    RETURNS [factorial: LONG CARDINAL] =    BEGIN    args: Courier.Parameters ¬ [@number, DescribeCardinal];    results: Courier.Parameters ¬ [@factorial, DescribeLongCardinal];    callHandle: Courier.Handle;    callHandle ¬ Courier.Create[      host, FactorialInternal.programNumber, FactorialInternal.version,      z, transactional];    [] ¬ Courier.Call[      callHandle, FactorialInternal.procNumberFactorial, args, results];    Courier.Delete[callHandle];    Courier.Free[results, z];  -- required if Courier allocated storage     -- to hold results    END;  -- of GetFactorial  -- Courier Description Procedures  DescribeCardinal: PUBLIC Courier.Description =    BEGIN data: LONG POINTER TO CARDINAL = notes.noteSize[SIZE[CARDINAL]]; END;  DescribeLongCardinal: PUBLIC Courier.Description =    BEGIN    data: LONG POINTER TO LONG CARDINAL = notes.noteSize[SIZE[LONG CARDINAL]];    notes.noteLongCardinal[data];    END;  END.<< log14-Jun-83 10:40:48 - Kluger - created file14-Jul-83  9:52:26 - AOF - removed MDSZone 6-Sep-83 15:42:22 - AOF - rearanged order of args in GetFactorial>>