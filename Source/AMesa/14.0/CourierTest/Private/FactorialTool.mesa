-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. -- FactorialTool.mesa Last Edit: SMA   9-Oct-84 17:24:20DIRECTORY  AddressTranslation USING [Error, StringToNetworkAddress],  Factorial USING [GetFactorial, ErrorReason, Error],  Format USING [StringProc],  FormSW USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, DisplayItem, line0,    line1, NotifyProcType, NumberItem, StringItem, LongNumberItem],  Heap USING [systemZone],  Put USING [Line, CR, Text],  String USING [AppendString],  System USING [NetworkAddress],  Tool USING [    Create, MakeFileSW, MakeFormSW, MakeMsgSW, MakeSWsProc, UnusedLogName],  ToolWindow USING [State, TransitionProcType],  Window USING [Handle];FactorialTool: MONITOR  IMPORTS AddressTranslation, Factorial, FormSW, Heap, Put, String, Tool  =  BEGIN  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = RECORD [    msgSW: Window.Handle ¬ NIL,    formSW: Window.Handle ¬ NIL,    fileSW: Window.Handle ¬ NIL,    number: CARDINAL ¬ 0,    address: LONG STRING ¬ NIL,    result: LONG CARDINAL ¬ 0];  toolData: DataHandle ¬ NIL;  Init: PROCEDURE =    BEGIN    tool: Window.Handle;    name: STRING ¬ [100];    String.AppendString[name, "Factorial Tool"L];    tool ¬ Tool.Create[      name: name, makeSWsProc: MakeSWs, clientTransition: ClientTransition,      tinyName1: "Factorial"L, tinyName2: "Tool"L];    END;  MakeSWs: Tool.MakeSWsProc =    BEGIN    logName: STRING ¬ [40];    Tool.UnusedLogName[unused: logName, root: "FactTool.log$"L];    toolData.msgSW ¬ Tool.MakeMsgSW[window: window, lines: 1];    toolData.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeForm];    toolData.fileSW ¬ Tool.MakeFileSW[window: window, name: logName];    END;  MakeForm: FormSW.ClientItemsProcType =    BEGIN    i: INTEGER ¬ -1;    nParams: CARDINAL = 4;    items ¬ FormSW.AllocateItemDescriptor[nParams];    items[i ¬ i + 1] ¬ FormSW.StringItem[      tag: "Server"L, string: @toolData.address, place: [0, FormSW.line0],      inHeap: TRUE];    items[i ¬ i + 1] ¬ FormSW.NumberItem[      tag: "Number"L, signed: FALSE, notNegative: TRUE, value: @toolData.number,      place: [0, FormSW.line1]];    items[i ¬ i + 1] ¬ FormSW.CommandItem[      tag: "Factorial"L, proc: FindFactorial, place: [150, FormSW.line1]];    items[i ¬ i + 1] ¬ FormSW.LongNumberItem[      tag: "Result"L, signed: FALSE, notNegative: TRUE, value: @toolData.result,      place: [250, FormSW.line1]];    IF i # nParams - 1 THEN ERROR;    RETURN[items, TRUE];    END;  ClientTransition: ToolWindow.TransitionProcType =    BEGIN    SELECT TRUE FROM      old = inactive => BEGIN toolData ¬ Heap.systemZone.NEW[Data ¬ []]; END;      new = inactive =>        BEGIN IF toolData # NIL THEN Heap.systemZone.FREE[@toolData]; END;      ENDCASE;    END;  FindFactorial: FormSW.NotifyProcType =    BEGIN    host: System.NetworkAddress;    factErr: Factorial.ErrorReason;    sp: Format.StringProc = {Put.Text[toolData.msgSW, s]};    BEGIN    ENABLE      BEGIN      AddressTranslation.Error => GOTO badInput;      Factorial.Error => {factErr ¬ reason; GOTO factorialError};      END;    Put.CR[toolData.msgSW];  -- clear the window     [addr: host] ¬ AddressTranslation.StringToNetworkAddress[s: toolData.address];    toolData.result ¬ Factorial.GetFactorial[toolData.number, host];    FormSW.DisplayItem[toolData.formSW, 3];    EXITS      factorialError =>        BEGIN	PrintFactorialErrorCode[factErr, sp];	Put.CR[toolData.msgSW];	END;      badInput => Put.Line[toolData.msgSW, "Bad target address. Try again."L];    END;  --ENABLE    END;  PrintFactorialErrorCode: PROC[    ec: Factorial.ErrorReason, sp: Format.StringProc] =    BEGIN    WITH ec SELECT FROM      noRetry =>        BEGIN	sp["No retry advised: "L];	sp[SELECT nr FROM	  transmissionMediumHardwareProblem => "transmissionMediumHardwareProblem"L,	  transmissionMediumUnavailable => "transmissionMediumUnavailable"L,	  noCourierAtRemoteSite => "noCourierAtRemoteSite"L,	  noSuchProgramNumber => "noSuchProgramNumber"L,	  noSuchProcedureNumber => "noSuchProcedureNumber"L,	  unknownErrorInRemoteProcedure => "unknownErrorInRemoteProcedure"L,	  parameterInconsistency => "parameterInconsistency"L,	  invalidMessage => "invalidMessage"L,	  protocolMismatch => "protocolMismatch"L,	  invalidArguments => "invalidArguments"L,	  invalidHandle => "invalidHandle"L,	  versionMismatch => "versionMismatch"L,	  ENDCASE => "????"L];	END;      retryLater =>        BEGIN	sp["Retry at a later time: "L];	sp[SELECT rl FROM	  transmissionMediumNotReady => "transmissionMediumNotReady"L,	  noAnswerOrBusy => "noAnswerOrBusy"L,	  noRouteToSystemElement => "noRouteToSystemElement"L,	  remoteSystemElementNotResponding => "remoteSystemElementNotResponding"L,	  tooManyConnections => "tooManyConnections"L,	  ENDCASE => "????"L];	END;      retryNow =>        BEGIN	sp["Retry operation: "L];	sp[SELECT rn FROM          returnTimedOut => "returnTimedOut"L,	  transportTimeout => "transportTimeout"L,	  ENDCASE => "????"L];	END;      clientError =>        BEGIN	sp["Specification error: "L];	sp[SELECT ce FROM	  invalidAddress => "invalidAddress"L,	  numberTooLarge => "numberTooLarge"L,	  ENDCASE => "????"L];	END;      ENDCASE;    END;  Init[];  END.   << log.10-Jun-83 16:48:09 - Treadwell - created file13-Jun-83 14:26:07 - Kluger - added remote error 6-Sep-83 16:23:57 - AOF - cleanup error code>> 