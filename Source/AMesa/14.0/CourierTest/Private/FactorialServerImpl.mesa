-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. --FactorialServerImpl.mesa; last edit: AOF 30-Jun-83 13:33:45DIRECTORY  Courier USING [    Arguments, Description, Dispatcher, ExportRemoteProgram, Handle,    SignalRemoteError, NoSuchProcedureNumber, Results],  FactorialInternal USING [    DescribeCardinal, programNumber, versionRange, procNumberFactorial,    factorialError, FactorialErrorReason, DescribeLongCardinal],  Heap USING [systemZone];FactorialServerImpl: PROGRAM IMPORTS Courier, FactorialInternal, Heap =  BEGIN  numberTooBig: ERROR;  z: UNCOUNTED ZONE = Heap.systemZone;  serviceName: LONG STRING = "Factorial";  Init: PROCEDURE =    BEGIN    Courier.ExportRemoteProgram[      FactorialInternal.programNumber, FactorialInternal.versionRange,      Dispatcher, serviceName, z, transactional];    END;  Dispatcher: Courier.Dispatcher =    BEGIN    SELECT procedureNumber FROM      FactorialInternal.procNumberFactorial => Factorial[cH, arguments, results];      ENDCASE => ERROR Courier.NoSuchProcedureNumber;    END;  Factorial: PROCEDURE [    cH: Courier.Handle, arguments: Courier.Arguments, results: Courier.Results] =    BEGIN    number: CARDINAL;    factorial: LONG CARDINAL;    arguments[[@number, FactorialInternal.DescribeCardinal]];    factorial ¬ ComputeFactorial[      number !      numberTooBig =>        GenerateRemoteError[          FactorialInternal.factorialError,          FactorialInternal.FactorialErrorReason.numberTooLarge.ORD]];    [] ¬ results[[@factorial, FactorialInternal.DescribeLongCardinal]];    -- Use Courier.Free if Courier allocated any storage for the args    END;  ComputeFactorial: PROCEDURE [num: CARDINAL] RETURNS [fact: LONG CARDINAL] =    BEGIN    temp: LONG CARDINAL;    SELECT TRUE FROM      num = 0, num = 1 => fact ¬ 1;      ENDCASE =>        BEGIN        temp ¬ ComputeFactorial[num - 1].fact;        fact ¬ num*temp;        IF fact/num # temp THEN ERROR numberTooBig;  -- overflow check        END;    END;  -- simple remote error model:  The remote error has one parameter, a Cardinal,  -- which is the error reason  GenerateRemoteError: PUBLIC PROCEDURE [errorNumber: CARDINAL, reason: CARDINAL] =    BEGIN    Courier.SignalRemoteError[      errorNumber, [@reason, FactorialInternal.DescribeCardinal]];    END;  Init[];  END.  << log.10-Jun-83 11:51:00 - Treadwell - created file13-Jun-83 14:20:46 - Kluger - added remote error30-Jun-83 13:33:55 - Kluger - delete MDSZone>>    