-- File: CTCom.mesa - last edit:-- AOF                 27-May-85 14:22:50-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. DIRECTORY  Courier USING [Description, ErrorCode, Arguments],  CTTx USING [MsgOut, StackOverflowArgs, TestType, VariantRecord],  Environment USING [Byte],  String USING [AppendChar, AppendDecimal, AppendString],  System USING [NetworkAddress];CTCom: PROGRAM  IMPORTS CTTx, String  EXPORTS CTTx =  BEGIN  CardinalDescribe: PUBLIC Courier.Description =    BEGIN [] ¬ notes.noteSize[SIZE[CARDINAL]]; END;  LongCardinalDescribe: PUBLIC Courier.Description =    BEGIN notes.noteLongCardinal[notes.noteSize[SIZE[LONG CARDINAL]]]; END;  IntegerDescribe: PUBLIC Courier.Description =    BEGIN [] ¬ notes.noteSize[SIZE[INTEGER]]; END;  LongIntegerDescribe: PUBLIC Courier.Description =    BEGIN notes.noteLongInteger[notes.noteSize[SIZE[LONG INTEGER]]]; END;  ArrayDescribe: PUBLIC Courier.Description =    BEGIN [] ¬ notes.noteSize[SIZE[ARRAY CARDINAL [0..20) OF CARDINAL]]; END;  StringDescribe: PUBLIC Courier.Description =    BEGIN notes.noteString[notes.noteSize[SIZE[LONG STRING]]]; END;  DescriptorDescribe: PUBLIC Courier.Description =    BEGIN    D: TYPE = LONG DESCRIPTOR FOR ARRAY OF CARDINAL;    notes.noteArrayDescriptor[notes.noteSize[SIZE[D]], SIZE[CARDINAL], 20];    END;  ChoiceDescribe: PUBLIC Courier.Description =    BEGIN    sizes: ARRAY [0..3) OF CARDINAL ¬ [      SIZE[short CTTx.VariantRecord], SIZE[medium CTTx.VariantRecord], SIZE[      long CTTx.VariantRecord]];    c: LONG POINTER TO CTTx.VariantRecord =      notes.noteSize[SIZE[CTTx.VariantRecord]];    notes.noteChoice[c, SIZE[CTTx.VariantRecord], DESCRIPTOR[sizes], @c.variant];    END;  ParametersDescribe: PUBLIC Courier.Description =    BEGIN    notes.noteParameters[notes.noteSize[SIZE[CARDINAL]], CardinalDescribe];    END;  DisjointDescribe: PUBLIC Courier.Description =    BEGIN    notes.noteDisjointData[notes.noteSize[SIZE[LONG POINTER]], CardinalDescribe];    END;  SpaceDescribe: PUBLIC Courier.Description =    BEGIN    S: TYPE = ARRAY [0..20) OF CARDINAL;    notes.noteSpace[notes.noteSize[0], SIZE[S]];    END;  DeadSpaceDescribe: PUBLIC Courier.Description =    BEGIN    S: TYPE = ARRAY [0..20) OF CARDINAL;    ds: LONG POINTER TO S = notes.noteSize[SIZE[S]];    notes.noteDeadSpace[ds, SIZE[S]/2];    END;  BlockDescribe: PUBLIC Courier.Description =    BEGIN    null: PACKED ARRAY[0..2) OF Environment.Byte ¬ [0, 0];    length, maxlength: CARDINAL;    s: LONG POINTER TO LONG STRING ¬ notes.noteSize[SIZE[LONG STRING]];    notes.noteDeadSpace[s, SIZE[LONG STRING]];    SELECT notes.operation FROM      fetch =>	BEGIN	IF (s­ = NIL) OR (s­.length = 0) THEN notes.noteSpace[@null, 1]	ELSE	  BEGIN	  length ¬ s­.length; maxlength ¬ length + (length MOD 2);	  notes.noteSpace[@length, 1];	  notes.noteBlock[[LOOPHOLE[@s­.text], 0, length]];	  IF length # maxlength THEN notes.noteBlock[[@null, 1, 2]];	  END;	END;      store =>	BEGIN	notes.noteSpace[@length, 1];	maxlength ¬ length + (length MOD 2);	s­ ¬ notes.zone.NEW[StringBody[length] ¬	  [length: length, maxlength: maxlength, text: ]];	IF length # 0 THEN notes.noteBlock[[LOOPHOLE[@s­.text], 0, length]];	IF length # maxlength THEN notes.noteBlock[[@null, 1, 2]];	END;       free => IF s­ # NIL THEN notes.zone.FREE[s];      ENDCASE;    END;StackOverflowDescribe: PUBLIC Courier.Description =  BEGIN  p: LONG POINTER TO CTTx.StackOverflowArgs =    notes.noteSize[SIZE[CTTx.StackOverflowArgs]];  notes.noteArrayDescriptor[p, SIZE[LONG POINTER], 100];  FOR i: INTEGER IN[0..LENGTH[p­]) DO    notes.noteDisjointData[@p[i], StringDescribe]; ENDLOOP;  END;  --StackOverflowDescribe  EstablishDescribe: PUBLIC Courier.Description =    BEGIN [] ¬ notes.noteSize[SIZE[System.NetworkAddress]]; END;  AppendTestName: PUBLIC PROC [test: CTTx.TestType] =    BEGIN    string: STRING ¬ [40];    String.AppendString[string, " ("L];    String.AppendString[      string,      SELECT test FROM        null => "null"L,        cardinal => "cardinal"L,        longCardinal => "long cardinal"L,        array => "array"L,        longString => "string"L,        longDescriptor => "descriptor"L,        choice => "choice"L,        parameters => "parameters"L,        longDisjoint => "disjoint"L,	dataStream => "data stream 1"L,        noRoute => "no route"L,        tooMany => "too many connections"L,        noProg => "no program"L,        noVers => "no version"L,        returnTMO => "return time out"L,        callerAborted => "caller aborted"L,        parmInconst => "parmInconst"L,        noProc => "no procedure"L,        unknown => "unknown"L,	dataStream2 => "data stream 2"L,	space => "space"L,	deadSpace => "dead space"L,	block => "block"L,	invalidArguments => "invalid arguments"L,	stackOverflow => "stackOverflow"L,        ENDCASE => "UNKNOWN TEST"L];    String.AppendString[string, ") "L];    CTTx.MsgOut[string, FALSE, FALSE];    END;      ProcessCourierError: PUBLIC PROC [error: Courier.ErrorCode] =    BEGIN    string: STRING ¬ [80];    String.AppendString[string, "Courier.Error["L];    String.AppendString[      string,      SELECT error FROM        transmissionMediumHardwareProblem =>          "transmissionMediumHardwareProblem"L,        transmissionMediumUnavailable => "transmissionMediumUnavailable"L,        transmissionMediumNotReady => "transmissionMediumNotReady"L,        noAnswerOrBusy => "noAnswerOrBusy"L,        noRouteToSystemElement => "noRouteToSystemElement"L,        transportTimeout => "transportTimeout"L,        remoteSystemElementNotResponding => "remoteSystemElementNotResponding"L,        noCourierAtRemoteSite => "noCourierAtRemoteSite"L,        tooManyConnections => "tooManyConnections"L,        invalidMessage => "invalidMessage"L,        noSuchProcedureNumber => "noSuchProcedureNumber"L,        returnTimedOut => "returnTimedOut"L,        callerAborted => "callerAborted"L,        unknownErrorInRemoteProcedure => "unknownErrorInRemoteProcedure"L,        streamNotYours => "streamNotYours"L,        invalidHandle => "invalidHandle"L,        parameterInconsistency => "parameterInconsistency"L,        noSuchProgramNumber => "noSuchProgramNumber"L,        duplicateProgramExport => "duplicateProgramExport"L,	noSuchProgramExport => "noSuchProgramExport"L,	protocolMismatch => "protocolMismatch"L,	invalidArguments => "invalidArguments"L,        ENDCASE => "error"L];    String.AppendChar[string, ']];    CTTx.MsgOut[string, FALSE, FALSE];    END;      ProcessUserError: PUBLIC PROC [    number: CARDINAL, arguments: Courier.Arguments] =    BEGIN    string: STRING ¬ [40];    String.AppendString[string, "User error[ "L];    String.AppendDecimal[string, number];    String.AppendChar[string, ']];    CTTx.MsgOut[string, FALSE, FALSE];    arguments[];    END;       END...  