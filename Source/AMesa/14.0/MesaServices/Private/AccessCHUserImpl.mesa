-- File: AccessCHUserImpl.mesa - last edit:-- bjd                 29-Jul-86 17:25:17-- DJW  		 10-Jan-85 10:34:21-- Copyright (C) 1985, 1986 by Xerox Corporation. All rights reserved. DIRECTORY  AccessCH USING [EnumerateProc, PID, ProblemType],  Auth USING [ConversationHandle, IdentityHandle],  CH USING [ConversationHandle, Enumerate, FreeConversationHandle, LookupGroupProperty, MakeConversationHandle, NameStreamProc, Pattern, ReturnCode],  CHPIDs USING [authenticationLevel, members, nsAddress, userData],  NSName USING [Name],  NSString USING [AppendSubString, String, StringFromMesaString, SubStringDescriptor];AccessCHUserImpl: PROGRAM   IMPORTS CH, NSString   EXPORTS AccessCH =  BEGIN  OPEN AccessCH;  -- Generic Property IDs ... these are type-independent properties   groupPID:      PID = CHPIDs.members;  netAddressPID: PID = CHPIDs.nsAddress;  authLevelPID:  PID = CHPIDs.authenticationLevel;    -- Secondary Property IDs ... these are type-dependent properties  dataPID: PID = CHPIDs.userData;  -- Signal stuff  Problem: PUBLIC SIGNAL [type: ProblemType] = CODE;  AppendProblem: PUBLIC PROC [type: ProblemType, s: NSString.String]    RETURNS [NSString.String] = {    prob: NSString.String ¬ NSString.StringFromMesaString[      s:      SELECT type FROM        entryExisted    => "CH entry already existed"L,        noClearinghouse => "no Clearinghouse available"L,        alreadyAlias    => "name is already in use as alias"L,        inUse           => "name is already in use"L,        badServiceName  => "bad service name"L,        badDatabaseName => "bad database name"L,        noOperator      => "no operator"L,        authProblem     => "authentication problem"L,        accessProblem   => "access problem"L,        userAbort       => "user initiated abort"L,        noStableData    => "no stable data found"L,        noCHData        => "no Clearinghouse data found"L,        other           => "other: pretty lousy message, huh?"L,        ENDCASE         => "ENDCASE: if you see this, it's Adobe Submit time!"L];    probSS: NSString.SubStringDescriptor ¬ [      base: prob, offset: 0, length: s.maxlength - s.length];    RETURN[NSString.AppendSubString[to: s, from: @probSS]]};  -- end of AppendProblem      Quit: ERROR = CODE;  EnumerateGroup: PUBLIC PROC [    name: NSName.Name, enumProc: EnumerateProc,    identity: Auth.IdentityHandle, z: UNCOUNTED ZONE] = {    convHandle: CH.ConversationHandle;    ok, found: BOOLEAN ¬ FALSE;    rc: CH.ReturnCode ¬ [done, first];    myProc: CH.NameStreamProc -- PROC [currentName: CH.Element] -- = {      found ¬ TRUE;      IF ~enumProc[currentName] THEN ERROR Quit};    [conversation: convHandle, ok: ok] ¬ CH.MakeConversationHandle[identity];    IF ~ ok THEN ERROR Problem[authProblem];    rc ¬ CH.LookupGroupProperty[conversation: convHandle, name: name,       pn: groupPID, eachElement: myProc, distingName: NIL ! Quit => CONTINUE];    CH.FreeConversationHandle[conversation: @convHandle];    IF (rc.code = done) AND ~found THEN ERROR Problem[badDatabaseName]    ELSE HandleCHCode[rc]};  EnumerateEntriesWithinDomain: PUBLIC PROC [    pid: PID, domainPattern: CH.Pattern, enumProc: EnumerateProc,    identity: Auth.IdentityHandle, z: UNCOUNTED ZONE] = {    convHandle: CH.ConversationHandle;    ok: BOOLEAN ¬ FALSE;    rc: CH.ReturnCode ¬ [done, first];    myProc: CH.NameStreamProc = {IF ~enumProc[currentName] THEN ERROR Quit};    [conversation: convHandle, ok: ok] ¬ CH.MakeConversationHandle[identity];    IF ~ ok THEN ERROR Problem[authProblem];    rc ¬ CH.Enumerate[conversation: convHandle,       name: domainPattern, pn: pid, eachName: myProc ! Quit => CONTINUE];    HandleCHCode[rc];    CH.FreeConversationHandle[conversation: @convHandle]};  HandleCHCode: PROC [rc: CH.ReturnCode] = {    type: AccessCH.ProblemType;    IF rc.code = done THEN RETURN;    type ¬ SELECT rc.code FROM      rejectedTooBusy, allDown, wasUpNowDown => noClearinghouse,      IN [credentialsInvalid..credentialsTooWeak] => authProblem,      badProtocol, illegalPropertyID,      propertyIDNotFound, wrongPropertyType,      outOfDate, overflowOfName,      overflowOfDataBase		 => noCHData,      IN [illegalOrgName..noSuchLocal]	 => badDatabaseName,      notAllowed			 => accessProblem,      ENDCASE => other;    ERROR Problem[type]};  END.