-- File: AccessCH.mesa - created by DJW. Last edit:-- bjd                  6-May-85 17:22:53--   DJW  		  4-Dec-84 16:14:10-- Copyright (C) 1985 by Xerox Corporation. All rights reserved.DIRECTORY  Auth, CH, CHPIDs, NSExec, NSName, NSString, SelfReg;  AccessCH: DEFINITIONS = {  -- Property ID types  PID:     TYPE = CH.PropertyID;  PIDList: TYPE = CH.Properties;    -- Primary Property IDs ... these determine "type" of CH entry  adobeServicePID:      PID = CHPIDs.adobeService;  adobeSystemPID:       PID = 10027;   -- = CHPIDs.adobeSystem;  librarianServicePID:  PID = CHPIDs.librarianService;  librarianDatabasePID: PID = 10025;   -- = CHPIDs.librarianDatabase;-- Predefined PID lists  nullPIDList: PIDList = SelfReg.nullProperties;  adobeGenericPIDs:     READONLY PIDList;  librarianGenericPIDs:     READONLY PIDList;  databaseGenericPIDs:     READONLY PIDList;  adobeSecondaryPIDs:     PIDList = nullPIDList;  librarianSecondaryPIDs: PIDList = nullPIDList;  databaseSecondaryPIDs:  PIDList = nullPIDList; -- Authentication type  AuthLevelSupported: TYPE = {simple, strong, both, neither};-- Service registration procs  RegisterService: PROC [    primaryPID:    PID,    genericPIDs:   PIDList,    secondaryPIDs: PIDList,    authLevel:     AuthLevelSupported ¬ neither,    execHandle:    NSExec.Handle,    clientID:      NSExec.ClientID,    z:             UNCOUNTED ZONE]    RETURNS [      name:     NSName.Name,       desc:     NSString.String,        key:      Auth.Key,       identity: Auth.IdentityHandle];  -- Registers Service with Clearinghouse. CH entry contains the properties that are provided by the client in the "primaryPID", "genericPIDs", and "secondaryPIDs" parameters. The client must also indicate the level of authentication "authLevel" supported by the service (probably defaulted to "neither" for right now). The parameters "execHandle" and "clientID" are gotten from NSExec. The distinguished Clearinghouse name of the entry and the string value of its primary property are automatically provided by the Services interface SelfReg that is used by AccessCH.  -- The return parameter "name" is the distinguished Clearinghouse name for the service, and the return parameter "desc" is the string description stored as the value of the Clearinghouse primary property ID for the service. Storage for "name" and "desc" are allocated from the zone parameter "z" and so the client is responsible for deallocating "name" and "desc".   -- Can raise the signal Problem with types {entryExisted, noClearinghouse, alreadyAlias, inUse, badServiceName, noOperator, authProblem, accessProblem, userAbort, other}.  UnRegisterService: PROC [    primaryPID:    PID,    genericPIDs:   PIDList,    secondaryPIDs: PIDList,    execHandle:    NSExec.Handle,    clientID:      NSExec.ClientID];  -- Deletes the entire Clearinghouse entry for this service. The client must supply genericPIDs and secondaryPIDs because of mumble (these should be the same as when the Service is registered). This is the procedure to call when the client is destroying a service, or when for some other reason the client wishes to remove its Clearinghouse entry.   -- NOTE: it is a good idea to call UnregisterDatabase[] for each database in the service's database group BEFORE calling UnregisterService[]. This so that after the service is unregistered the service won't still appear in its databases' service groups. This is necessary because UnregisterService[] does NOT remove the service from any database's service group.  -- Returns the distiguished Clearinghouse name of the unregistered service.   -- Can raise the signal Problem with types {noClearinghouse, alreadyAlias, inUse, badServiceName, noStableData, noCHData, authProblem, accessProblem, userAbort, other}.      -- Database registration procs  RegisterDatabase: PROC [    database:      NSName.Name,    service:       NSName.Name,    primaryPID:    PID,    genericPIDs:   PIDList,    secondaryPIDs: PIDList,    desc:	   NSString.String ¬ NSString.nullString,    execHandle:    NSExec.Handle,    z:		   UNCOUNTED ZONE]    RETURNS [ok: BOOLEAN];  -- Creates a Clearinghouse entry (if one does not already exist) with name  "database".  The "service" name is entered in the database's service group entry. The database name is also entered into the service's database group entry. The database Clearinghouse entry will have the properties that are provided by the client in the "primaryPID", "genericPIDs", and "secondaryPIDs" parameters. The descriptive string will be installed as the value of the database entry's primary property.   -- returns whether or not the registration succeeded;  -- posts any problems encountered to execHandle;  no errors are raised.       UnRegisterDatabase: PROC [    database: NSName.Name,    service:       NSName.Name,    execHandle:    NSExec.Handle,    z:        UNCOUNTED ZONE]    RETURNS [ok: BOOLEAN];  -- This is the procedure to call when the client is destroying a database. UnRegisterDatabase[] removes the service from the database's group entry. It also removes the database from the service's group entry. If this was the last service in the database's service group, then the CH entry for the database is destroyed. UnRegisterDatabase[] returns whether or not the destroy operation succeeded; posts any problems encountered to execHandle; no errors are raised.         EnumerateProc: TYPE = PROCEDURE [    currentName: CH.Element] RETURNS [continue: BOOLEAN];-- Clearinghouse query procs  EnumerateGroup: PROC [    name:	NSName.Name,    enumProc:	EnumerateProc,    identity:	Auth.IdentityHandle,    z:		UNCOUNTED ZONE];  -- If name is a service name, then enumProc is called for each database in its database group.  If name is a database, then enumProc is called for each  service in its service group.  CH.NameStreamProc is defined as:  CH.NameStreamProc: TYPE = PROCEDURE [currentName: CH.Element]; CH.Element is a LONG POINTER TO CH.ThreePartName; CH.ThreePartName is a NSName.NameRecord.  -- Nothing is returned  -- Can raise the signal Problem with types {noClearinghouse, authProblem, noCHData, badDatabaseName, accessProblem}.           EnumerateEntriesWithinDomain: PROC [    pid:		PID,    domainPattern:	CH.Pattern,    enumProc:		EnumerateProc,    identity:		Auth.IdentityHandle,    z:			UNCOUNTED ZONE];  -- Since the Clearinghouse only allows one to enumerate entries within a domain, the client can only enumerate the services and/or databases relative to a given domain.  EnumerateEntriesWithinDomain[] takes a PID which determines the type of entry to be enumerated (e.g. adobe service or librarian database). The domain pattern cannot have any wildcards in the domain or organization  fields. If the domain and/or organization fields are empty, then field will be filled in with a value extracted from the Auth.IdentityHandle. The local field CAN contain wildcard characters, and can be used to filter the  enumeration. The enumProc will be called for each entry that matches the  pattern within the given domain.   -- Nothing is returned  -- Can raise the signal Problem with types {noClearinghouse, authProblem, noCHData, badDatabaseName, accessProblem}.     -- Signal stuff  ProblemType: TYPE = {entryExisted, noClearinghouse, alreadyAlias, inUse,    badServiceName, badDatabaseName, noOperator, authProblem, accessProblem,    userAbort, noStableData, noCHData, other};  Problem: SIGNAL [type: ProblemType];    AppendProblem: PROC [    type: ProblemType,     s: NSString.String]    RETURNS      [NSString.String];  -- Translates the signal into a more readable string and appends it to the input string. The message will be truncated if there is not enough room in the string.             }... end of AccessCH