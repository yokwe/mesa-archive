-- File: SwatSenderImpl.mesa - last edit:-- AOF                  9-Oct-87 10:25:00-- Copyright (C) 1984, 1986, 1987 by Xerox Corporation. All rights reserved. -- SwatSenderImpl.mesa  (last edited by AOF 15-Apr-85 14:20:50)DIRECTORY  AddressTranslation USING [Error, StringToNetworkAddress, PrintError],   Exec USING [    AddCommand, ExecProc, CheckForAbort, OutputProc, GetToken, FreeTokenString,    RemoveCommand],  Format USING [StringProc],  NSBuffer USING [Body, Buffer],  NSConstants USING [teleDebugSocket],  NSTypes USING [PacketType],  Process USING [Abort, GetCurrent, Pause],  Router USING [GetDelayToNet, NoTableEntryForNet],  Socket USING [    ChannelHandle, Create, Delete, PutPacket, SetPacketBytes, GetSendBuffer,    WaitTime, GetPacket, TimeOut, SetWaitTime, ReturnBuffer],  System USING [NetworkAddress, SocketNumber];SwatSenderImpl: PROGRAM  IMPORTS AddressTranslation, Exec, Process, Router, Socket =  BEGIN  swatRequest: WORD = 17;  swatPacketBytes: CARDINAL = SIZE[CARDINAL];   swatterSocket: System.SocketNumber = LOOPHOLE[27];  --Action Request 7176  CallSwat: Exec.ExecProc =    BEGIN    Watcher: PROC[] =      BEGIN      ENABLE ABORTED => CONTINUE;      UNTIL Exec.CheckForAbort[h] DO        Process.Pause[2]; ENDLOOP;      userAbort ¬ TRUE; Process.Abort[parent];      out[abort];  --user requested abort      END;  --Watcher    hops: CARDINAL;    body: NSBuffer.Body;    b: NSBuffer.Buffer ¬ NIL;    parent, watcher: PROCESS;    type: NSTypes.PacketType;    cH: Socket.ChannelHandle;    userAbort: BOOLEAN ¬ FALSE;    destination: System.NetworkAddress;    remote, switches: LONG STRING ¬ NIL;    dots: STRING = ".... "L;    done: STRING = "done"L;    swatter: STRING = "Swat"L;    abort: STRING = "aborted"L;    scan: STRING = "scan error"L;    host: STRING = "no host name"L;    syntax: STRING = "bad syntax"L;    other: STRING = "other error"L;    send: STRING = "sending request"L;    wild: STRING = "can't broadcast"L;    at: STRING = "converting address"L;    net: STRING = "no route to network"L;    failed: STRING = "target not enabled"L;    out: Format.StringProc = Exec.OutputProc[h];    BEGIN    out[swatter]; out[dots];    [remote, switches] ¬ Exec.GetToken[h];    IF (remote = NIL) AND (switches = NIL) THEN {out[host]; GOTO error};    IF (remote.length = 1) AND (remote[0] = '*) THEN {out[wild]; GOTO error};    parent ¬ Process.GetCurrent[];  --so watcher can abort us    watcher ¬ FORK Watcher;  --to see that we don't get in trouble    cH ¬ Socket.Create[NSConstants.teleDebugSocket];    BEGIN    <<    Anything from here on out must delete the socket, free the token strings,    abort and join the watcher.    >>    ENABLE ABORTED => GOTO join;    out[at]; out[dots];    [destination, ] ¬ AddressTranslation.StringToNetworkAddress[remote !      AddressTranslation.Error =>        BEGIN	WITH e: errorRecord SELECT FROM	  scanError => out[scan];          badSyntax => out[syntax];          otherCHProblem => out[other];          chLookupProblem => AddressTranslation.PrintError[e, out]; 	  ENDCASE;	GOTO join;	END];    hops ¬ Router.GetDelayToNet[destination.net !      Router.NoTableEntryForNet => {out[net]; GOTO join}];    Socket.SetWaitTime[cH, (2 + (2 * hops)) * 1000];    IF userAbort THEN GOTO join;    out[send]; out[dots];    body ¬ (b ¬ Socket.GetSendBuffer[cH]).ns;    destination.socket ¬ swatterSocket;    body.destination ¬ destination;    body.packetType ¬ private;    body.nsWords[0] ¬ swatRequest;    Socket.SetPacketBytes[b, swatPacketBytes];    Socket.PutPacket[cH, b];  --send the packet - b not ours any more    body ¬ (b ¬ Socket.GetPacket[cH ! Socket.TimeOut => GOTO timeout]).ns;    type ¬ body.packetType;  --watch out for error packets     Socket.ReturnBuffer[b];  --return the buffer before we forget    IF type = error THEN GOTO failed;    EXITS      join, timeout => NULL;      failed => out[failed];    END;    Socket.Delete[cH];    Process.Abort[watcher]; JOIN watcher;    EXITS error => NULL;    END;    remote ¬ Exec.FreeTokenString[remote];    switches ¬ Exec.FreeTokenString[switches];    out[dots]; out[done];    END; -- CallSwat  HelpSwat: Exec.ExecProc =    BEGIN    Exec.OutputProc[h]["Swat <clearinghouse name> | <network address>    	Sends packet to remote requesting a 'CallDebugger'"L];    END; -- HelpSwat  Unload: Exec.ExecProc = {Exec.RemoveCommand[h, "Swat.~"L]};  Exec.AddCommand[    name: "Swat.~"L, proc: CallSwat, help: HelpSwat, unload: Unload]  END.Log 6-Mar-84  9:19:01: AOF  Created file10-Oct-84 10:27:47  SMA  Post Klamath communications. 9-Oct-87 10:16:38  AOF  Fix process/space leaks and all around bad code.  