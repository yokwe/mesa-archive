-- File: MayDayImpl.mesa - last edit:-- AOF                 25-Nov-86 15:49:54-- Copyright (C) 1985, 1986 by Xerox Corporation. All rights reserved. DIRECTORY  Exec USING [    AddCommand, ExecProc, FreeTokenString, GetToken, OutputProc, RemoveCommand],  Format USING [Decimal, StringProc, HostNumber],  HostNumbers USING [IsMulticastID],  NSBuffer USING [Body, Buffer],  NSConstants USING [teleDebugSocket],  Process USING [Detach],  SpecialCommunication USING [SetSpyProc, SpyProc],  String USING [SubStringDescriptor, SubString],  System USING [HostNumber, nullHostNumber],  UserTerminal USING [Beep];    MaydayImpl: MONITOR    IMPORTS      Exec, Format, HostNumbers, Process, SpecialCommunication, UserTerminal =  BEGIN  beep: CARDINAL ¬ 0;  beeps: CARDINAL ¬ 0;  logging: BOOLEAN ¬ FALSE;  spy: SpecialCommunication.SpyProc;  host: System.HostNumber ¬ System.nullHostNumber;    --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Initialization:  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Bleep: PROC =    BEGIN    Decrement: ENTRY PROC RETURNS[BOOLEAN] = INLINE      {RETURN[(beep ¬ beep - 1) = 0]};    DO      UserTerminal.Beep[200 + ((beep * 100) MOD 5000), 100];      beeps ¬ beeps + 1;  --keep total      IF Decrement[] THEN EXIT; ENDLOOP;    END;  --Bleep    Initialize: PROCEDURE =    BEGIN    Exec.AddCommand["Mayday.~"L, ExecEntry, , Unload];    spy ¬ SpecialCommunication.SetSpyProc[Watcher, ns];    END;  --Initialize  Unload: Exec.ExecProc =    BEGIN    [] ¬ SpecialCommunication.SetSpyProc[NIL, ns];    Exec.RemoveCommand[h, "Mayday.~"L];    END;  --Unload  ExecEntry: Exec.ExecProc =    BEGIN    token, switch: LONG STRING ¬ NIL;    out: Format.StringProc ¬ Exec.OutputProc[h];    [token, switch] ¬ Exec.GetToken[h];    IF switch # NIL THEN  switch ¬ Exec.FreeTokenString[switch];    Format.Decimal[out, beeps]; out[" have been heard."L];    IF token # NIL THEN      BEGIN      ss: String.SubStringDescriptor ¬ [token, 0, token.length];      IF EquivalentSubString[@ss, "LOG"L, 15C] THEN        {out["  Last mayday was from "L]; Format.HostNumber[out, host, octal]};      token ¬ Exec.FreeTokenString[token];       END;    out["\n"];    END;  EquivalentSubString: PROC[    tag: String.SubString, match: STRING, stop: CHARACTER]    RETURNS[BOOLEAN] =    BEGIN    <<    a) tag­ cannot describe a NIL STRING | SubString.    b) match is all upper case.    c) tag.offset will point to the character following the stop character       if the test returns TRUE. Else the substring is unmodified.    >>    FOR i: CARDINAL IN[tag.offset..tag.length) DO      c: CHARACTER = tag.base[i];      SELECT TRUE FROM        (c = match[i]) => LOOP;  --upper case	((c - 40B) = match[i]) => LOOP;  --lower case	(i = tag.offset) => RETURN[FALSE];  --nope, not this time	(c = stop) => {tag.offset ¬ i + 1; RETURN[TRUE]};	ENDCASE => RETURN[FALSE];      ENDLOOP;    tag.offset ¬ tag.length;  --the string is empty    RETURN[TRUE];  --but the match was made    END;  --EquivalentSubString  Watcher: ENTRY SpecialCommunication.SpyProc =    BEGIN    body: NSBuffer.Body = LOOPHOLE[b, NSBuffer.Buffer].ns;    SELECT TRUE FROM      (function # receive) => NULL;  --not coming in from net      (~HostNumbers.IsMulticastID[LOOPHOLE[@body.destination.host]]) => NULL;      (body.destination.socket # NSConstants.teleDebugSocket) => NULL;      (body.source.socket = NSConstants.teleDebugSocket) =>        BEGIN	host ¬ body.source.host;	IF (beep ¬ beep + 1) = 1 THEN Process.Detach[FORK Bleep[]];	END;      ENDCASE;    RETURN[b];  --always - we aren't promiscious    END;  --Watcher      -- Mainline code:    Initialize[];    END.  LOG 5-Apr-85 16:52:09  AOF  Created file