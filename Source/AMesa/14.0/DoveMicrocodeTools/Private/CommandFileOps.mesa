-- File: CommandFileOps.mesa - last edit:-- Bowers.PA           30-Sep-86 13:08:37-- FHB   .PA            9-May-85 15:44:45-- Copyright (C) 1984, 1985, 1986 by Xerox Corporation. All rights reserved. -- CommandFileOps.mesa - created 10-Oct-84 11:06:42 by FHB   -- FHB   , 	 4-Feb-85 10:33:22	added loadPC-- AYC   ,	20-Nov-84 17:35:07	add more CP command KeyDomain-- DEG   ,	27-Jan-85 10:27:04	make compatible with pre-11.1 arrows-- FHB   , 	 7-Mar-85 10:21:13	add wait, readIO, copyIOPPanelDIRECTORY  CommandFile,  Format,  Ascii,  PanelSW,  Stream,  String,  SymbolHash;CommandFileOps: DEFINITIONS =  {  Type: TYPE = {Null, Loc, Break, String, Tag, Function, StringConstant};  KeyRec: TYPE = RECORD [s: LONG STRING, t: Type, function: PROCEDURE ¬ NIL];  KeyDomain: TYPE = {    alterAddress, arm, autopollsirius, boot, bootIOP, break, breakIOP, breakPC,    buffer, clearCPPanel, clearIOPPanel, clearPCPanel, close, compare, continue,    continueIOP, copyIOPPanel, copyPCPanel, cp, copypanel, goTo, initIOPPanel,    initPCPanel, if, iop, load, loadBoot, loadMore, loadNoSymbols, loadIOP,    loadIOPCodeOnly, loadIOPSymbols, loadPC, loadPCCodeOnly, loadPCSymbols,    loadGerm, loadReal, loadRaw, loadSymbols, openToAppend, openToWrite,    pollsirius, popib, pc, readIO, reset, resetIOPSymbols, resetPCSymbols,    setBank, setIOPAddressType, setPCAddressType, setDataType, setPCDataType,    setMP, start, startIOP, stepIOP, stop, stopIOP, stopPC, unbreak, unbreakIOP,    unbreakPC, wait, write, writeIO, writeLine, writeLoc, writeTime};  KeyArray: TYPE = ARRAY KeyDomain OF KeyRec;  BreakRec: TYPE = RECORD [c: CHARACTER, r: PROCEDURE];  BreakDomain: TYPE = {    colon, semi, shriek, arrow, oldArrow, quote, less, equal, notEqual, greater,    openBrace, openBracket, closeBracket, closeBrace, comment};  BreakArray: TYPE = ARRAY BreakDomain OF BreakRec;  RelationDomain: TYPE = BreakDomain [less..openBrace];  Relation: TYPE = {x, gt, eq, ne, lt, le, ge};  RelationArray: TYPE = ARRAY RelationDomain OF ARRAY RelationDomain OF Relation;  SymbolValue: TYPE = RECORD [    SELECT type: Type FROM    Tag => [si: Stream.Position],    String => [s: LONG STRING],    Loc => [panel: Panel, x, y: CARDINAL],    Function => [apply: PROCEDURE],    Null, Break => NULL,    ENDCASE];  StackCell: TYPE = RECORD [    type: Type,    p: LONG POINTER,    v: UNSPECIFIED,    previous: LONG POINTER TO StackCell];  Trouble: ERROR [message: LONG STRING];  Panel: TYPE = {CP, IOP, PC};  DataHandle: TYPE = LONG POINTER TO Data;  Data: TYPE = MACHINE DEPENDENT RECORD [    stack(0): LONG POINTER TO StackCell ¬ NIL,    output(2): Stream.Handle ¬ NIL,    limbo(4): CHARACTER ¬ Ascii.NUL,    symbols(5): SymbolHash.Handle ¬ TRASH,    in(7): LONG STRING ¬ NIL,  --input buffer--    sc(9): LONG STRING ¬ NIL,  --string constant--    lastBreak(11): BreakDomain ¬ less,    rssd(12): String.SubStringDescriptor ¬ [NIL, 0, 0],    tssd(16): String.SubStringDescriptor ¬ [NIL, 0, 0],    rest(20): String.SubString ¬ NIL,    token(22): String.SubString ¬ NIL,    braces(24): INTEGER ¬ 0,    stopCommands(25): BOOLEAN ¬ FALSE,    cpHandle(26): PanelSW.Handle ¬ NIL,    iopPanel(28): PanelSW.Handle ¬ NIL,    pcPanel(30): PanelSW.Handle ¬ NIL,    keys(32): LONG POINTER TO KeyArray ¬ NIL,    breaks(34): LONG POINTER TO BreakArray ¬ NIL,    relations(36): LONG POINTER TO RelationArray ¬ NIL,    log(38): Format.StringProc ¬ NIL,    arg(40): LONG POINTER ¬ NIL,    abort(42): CommandFile.AbortProc ¬ NIL,    stream(44): Stream.Handle ¬ NIL];  cd: DataHandle;  heap: UNCOUNTED ZONE;  -- common procedures  GarbagedConditional: PROCEDURE;  GetParameters: PROCEDURE RETURNS [n: CARDINAL];  Pop: PROCEDURE RETURNS [p: LONG POINTER TO StackCell];  EvaluateLoc: PROCEDURE RETURNS [v: LONG INTEGER];  FreeStackCell: PROCEDURE [p: LONG POINTER TO StackCell];  IDBreaks: PROCEDURE [c: CHARACTER] RETURNS [BOOLEAN];  LookupSubString: PROCEDURE [ss: String.SubString, insert: BOOLEAN]    RETURNS [old: BOOLEAN, h: SymbolHash.Hash, sv: LONG POINTER TO SymbolValue];  RetireTop: PROCEDURE;  DoQuote: PROCEDURE;  MustBeLocation: PROCEDURE;  NextID: PROCEDURE RETURNS [BOOLEAN];  PushString: PROCEDURE [s: LONG STRING];  ReadPhrase: PROCEDURE;  StringFromSubString: PROCEDURE [ss: String.SubString] RETURNS [s: LONG STRING];  -- PanelSW operations  WriteContents, Assign: PROCEDURE [    target, value: LONG POINTER TO CommandFileOps.StackCell];  DisplayContents: PROCEDURE [    target, value: LONG POINTER TO CommandFileOps.StackCell];  EvaluateTile: PROCEDURE [h: PanelSW.Handle, x, y: CARDINAL];  VisibleTile: PROCEDURE [h: PanelSW.Handle, x, y: CARDINAL] RETURNS [BOOLEAN];  CreateStructures: PROCEDURE;  InitBreaks: PROCEDURE;  PanelFromName: PROCEDURE [panelName: LONG STRING]    RETURNS [CommandFileOps.Panel];  }.