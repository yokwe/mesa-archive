-- File: PanelSWOps.mesa - last edit:-- FXB   .PA           21-May-85 10:25:12-- PanelSWOps.mesa -- Copyright (C) 1985 by Xerox Corporation. All rights reserved.-- FXB   ,  5-Sep-84 12:53:45-- HGM, 10-Feb-83 23:46:19-- AMD,  5-Jan-83 12:10:51-- Mark: Aug 21, 1980 10:07 PMDIRECTORY  Context: TYPE USING [Find, Type],  PanelSW: TYPE USING [    ClientProcs, FreeRSProcType, nilTileIndex, RegisterSpec, TileField, TileIndex,    TileLayout, TileSpec, TileState],  TIP: TYPE USING [NotifyProc, Table],  ToolWindow: TYPE USING [DisplayProcType],  Window: TYPE USING [Handle, Place],  WindowFont: TYPE USING [Handle];PanelSWOps: DEFINITIONS IMPORTS Context =  BEGIN  -- Data TYPEs  Handle: TYPE = LONG POINTER TO Object;  Object: TYPE = RECORD [    lock: MONITORLOCK,    sw: Window.Handle,    font: WindowFont.Handle,    lineHeight: CARDINAL,    numCols: CARDINAL,    rowDesc, rowPlaceDesc: RowDesc,    typeIn: LONG POINTER TO LONG STRING,    err: Window.Handle,    cProcs: PanelSW.ClientProcs,    tiles: LONG POINTER TO TileSeq,    -- State of "current tile"    lastPlace: Window.Place,    current: PanelSW.TileSpec,    marked: BOOLEAN,    increment: LONG POINTER TO CARDINAL,    rows: LONG POINTER TO LONG STRING];  BitFieldSpec: TYPE = PACKED ARRAY PanelSW.TileField OF BOOLEAN;  PaintOp: TYPE = {whiten, blacken, invert};  RowDesc: TYPE = LONG POINTER TO RowSeq;  RowSeq: TYPE = RECORD [SEQUENCE COMPUTED CARDINAL OF PanelSW.TileLayout];  Tile: TYPE = LONG POINTER TO TileObject;  TileObject: TYPE = RECORD [    state: PanelSW.TileState _ old,    lh, rh: LONG STRING _ NIL,    regSpec: PanelSW.RegisterSpec _ NIL];  TileSeq: TYPE = RECORD [SEQUENCE length: CARDINAL OF Tile];  -- PROCEDURE TYPEs  -- Copied from PanelSW to match up EXPORTed Object  ActOnTileProcType: TYPE = PROC [h: Handle, ts: PanelSW.TileSpec];  ActOnPanelProcType: TYPE = PROC [h: Handle];  LockProcType: TYPE = ActOnPanelProcType;  -- Constants  nilTileSpec: PanelSW.TileSpec = [field: flag, index: PanelSW.nilTileIndex];  -- EXPORTed variables  context: Context.Type;  -- PROCs  DisplayProc: ToolWindow.DisplayProcType;  FindContext: PROC [sw: Window.Handle] RETURNS [Handle] = INLINE    BEGIN RETURN[Context.Find[context, sw]]; END;  TileFromSpec: PROC [h: Handle, ts: PanelSW.TileSpec] RETURNS [Tile] = INLINE {    RETURN[      IF h # NIL AND ts.index < h.tiles.length THEN h.tiles[ts.index] ELSE NIL]};  DoSomethingToCurrent: PROC [h: Handle, op: PaintOp];  InvertCurrent: ActOnPanelProcType;  MarkCurrent: ActOnPanelProcType;  DoSomethingToFields: PROC [    h: Handle, col, row: PanelSW.TileIndex, fields: BitFieldSpec, op: PaintOp];  PaintTile: PROC [h: Handle, tile: PanelSW.TileIndex];  UnmarkCurrent: ActOnPanelProcType;  GetTable: PROC RETURNS [TIP.Table];  TIPMe: TIP.NotifyProc;  FreeTile: PROC [tile: Tile, freeRS: PanelSW.FreeRSProcType];  TileWidth: PROC [h: Handle, tile: PanelSW.TileIndex] RETURNS [w: CARDINAL];  ValidateHandle: PanelSWOps.ActOnPanelProcType;  -- Invalid => PanelSW.Error[notAPanelSW]  END.  -- of PanelSWOps.mesa