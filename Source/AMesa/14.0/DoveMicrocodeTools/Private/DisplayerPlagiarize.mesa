-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. -- DisplayerPlagiarize.mesa-- DEG      	20-Feb-84  5:49:37DIRECTORY  FormSW USING [ItemHandle, ItemObject],  FormSWOps USING [context, FindContext, PContext],  Put USING [Line],  String USING [AppendChar, AppendString, CopyToNewString],  SimpleDisplayer USING [    AddItem, CreateItem, DataHandle, ItemHandle, ItemObject, OK, Paint, Share,    zone],  UserTerminal USING [BlinkDisplay],  Window USING [Handle, Place];DisplayerPlagiarize: PROGRAM  IMPORTS FormSWOps, Put, String, SimpleDisplayer, UserTerminal  EXPORTS SimpleDisplayer =  {  tempBuf: LONG STRING ¬ SimpleDisplayer.zone.NEW[StringBody [200]];  Plagiarize: PUBLIC PROC [sw: Window.Handle, myWindow: Window.Handle] = {    instance: SimpleDisplayer.DataHandle = SimpleDisplayer.Share[wh: myWindow];    context: FormSWOps.PContext ¬ FormSWOps.FindContext[sw];    IF context = NIL THEN {      UserTerminal.BlinkDisplay[];      Put.Line[instance.msgSW, "Not a form subwindow!"L];      RETURN};    FOR i: CARDINAL IN [0..LENGTH[context.items]) DO      TakeItem[context.items[i], context.dijects[i].box.place, instance]; ENDLOOP;    };  TakeItem: PROC [    fi: FormSW.ItemHandle, place: Window.Place,    instance: SimpleDisplayer.DataHandle] = {    item: SimpleDisplayer.ItemHandle ¬ NIL;    IF place.x < 0 THEN place.x ¬ 0;    IF place.y < 0 THEN place.y ¬ 0 ELSE place.y ¬ place.y + 2;  -- offset from top of window    item ¬ SimpleDisplayer.CreateItem[fi.tag, [place, [0, 0]], fi.type, instance];    item.readOnly ¬ fi.flags.readOnly;    item.invisible ¬ fi.flags.invisible;    item.drawBox ¬ fi.flags.drawBox;    item.hasContext ¬ fi.flags.hasContext;    WITH vi: item­ SELECT FROM      enumerated => CopyEnumerated[@vi, fi, instance];      longNumber => CopyLongNumber[@vi, fi];      number => CopyNumber[@vi, fi];      source => CopySource[@vi, fi];      string => CopyString[@vi, fi];      tagOnly => CopyTagOnly[@vi, fi];      ENDCASE;    SimpleDisplayer.Paint[item, instance];    SimpleDisplayer.AddItem[item, instance];    };  CopyEnumerated: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.enumerated,    fi: FormSW.ItemHandle, instance: SimpleDisplayer.DataHandle] = {    WITH vfi: fi­ SELECT FROM      enumerated => {        item.feedback ¬ vfi.feedback;        item.copyChoices ¬ vfi.copyChoices;        tempBuf.length ¬ 0;        FOR i: CARDINAL IN [0..vfi.choices.LENGTH) DO          IF vfi.choices[i].string = NIL THEN LOOP;          IF HasSpaces[vfi.choices[i].string] THEN {            String.AppendChar[tempBuf, '"];            String.AppendString[tempBuf, vfi.choices[i].string];            String.AppendChar[tempBuf, '"]}          ELSE String.AppendString[tempBuf, vfi.choices[i].string];          String.AppendChar[tempBuf, ' ];          ENDLOOP;        item.choices ¬ String.CopyToNewString[tempBuf, SimpleDisplayer.zone];        [] ¬ SimpleDisplayer.OK[item, instance, FALSE];        };      ENDCASE;    };  CopyLongNumber: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.longNumber,    fi: FormSW.ItemHandle] = {    WITH vfi: fi­ SELECT FROM      longNumber => {        item.signed ¬ vfi.signed;        item.notNegative ¬ vfi.notNegative;        item.radix ¬ vfi.radix;        item.boxWidth ¬ vfi.boxWidth;        item.default ¬ vfi.default;        item.bias ¬ vfi.bias;        };      ENDCASE;    };  CopyNumber: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.number,    fi: FormSW.ItemHandle] = {    WITH vfi: fi­ SELECT FROM      number => {        item.signed ¬ vfi.signed;        item.notNegative ¬ vfi.notNegative;        item.radix ¬ vfi.radix;        item.boxWidth ¬ vfi.boxWidth;        item.default ¬ vfi.default;        item.bias ¬ vfi.bias;        };      ENDCASE;    };  CopySource: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.source,    fi: FormSW.ItemHandle] = {    WITH vfi: fi­ SELECT FROM source => {item.boxWidth ¬ vfi.boxWidth; }; ENDCASE;    };  CopyString: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.string,    fi: FormSW.ItemHandle] = {    WITH vfi: fi­ SELECT FROM      string => {        item.feedback ¬ vfi.feedback;        item.inHeap ¬ vfi.inHeap;        item.boxWidth ¬ vfi.boxWidth;        };      ENDCASE;    };  CopyTagOnly: PROC [    item: LONG POINTER TO SimpleDisplayer.ItemObject.tagOnly,    fi: FormSW.ItemHandle] = {    WITH vfi: fi­ SELECT FROM tagOnly => {item.other ¬ vfi.otherItem; }; ENDCASE;    };  HasSpaces: PROC [s: LONG STRING] RETURNS [hasThem: BOOLEAN ¬ FALSE] = {    FOR i: CARDINAL IN [0..s.length) DO IF s[i] = '  THEN {RETURN[TRUE]}; ENDLOOP;    };  }...    