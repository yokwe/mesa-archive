$	DEBUG MOD186; FXB   		28-Nov-84 19:20:23	:creation; FXB   		 3-Dec-84 13:54:36	:added RemotememoryHandlerInit label; FXB   		 4-Dec-84  9:52:01	:; FXB   		 5-Dec-84 10:59:48	:made data PUBLIC; FXB   		 5-Dec-84 13:43:38	:fixed commented out org statements; FXB   		 3-Jan-85 17:19:34	:fixed ref to data where should be mask; FXB   		  1-Feb-85 10:15:41	:added recovery from RemoteMemoryError	NAME	RMHndlr$	TITLE(Remote Memory Handler)$	NOLIST			$	INCLUDE(IOPDefs.asm)$	INCLUDE(IOPMacro.asm)$	INCLUDE(IORegion.asm)	;umbilical data in IORegion$	INCLUDE(IOPLRam.asm)$	LIST		IORegion		SEGMENT		COMMON 			Assume DS:IORegion			PUBLIC RemoteMemoryStartCond, RemoteMemoryDoneCond, RemoteMemoryAddressPUBLIC wordCount, startOfMaskAndNewDataArray						ORG OFFSET RemoteMemoryIORRemoteMemoryHandlerFCB		LABEL	WORDRemoteMemoryTask		TaskContextBlock	<>RemoteMemoryStartCond		Condition		<>RemoteMemoryDoneCond		Condition		<>RemoteMemoryAddress		DD	?wordCount			DW	?startOfMaskAndNewDataArray	DW	122	DUP	(?)			%ENDIOR(RemoteMemory)IORegion		ENDSIOPEInROM 	SEGMENT	PUBLIC	ASSUME CS: IOPEInROM	PUBLIC RemoteMemoryInit	RemoteMemoryInit	PROC 	FAR	%InitializeTask(OFFSET RemoteMemoryTask, RemoteMemoryHandler)	RETRemoteMemoryInit	ENDP	RemoteMemoryHandler:	%WaitForCondition (OFFSET RemoteMemoryStartCond,noTimeout)	        LES	DI, RemoteMemoryAddress ;load pointer to memory block	MOV	BX, OFFSET startOfMaskAndNewDataArray	MOV	CX, wordCount 		RemoteMemoryLoop:	;DI points to oldData, BX points to newData, BX + 2 points to mask	CLI	;Disable Interrupts	MOV	AX, ES:[DI]	;AX ¬ oldData	XOR	AX, [BX]	;AX ¬ oldData XOR newData	;changedBits ¬ oldData XOR newData	;-- are all bits indicated in mask still changed?	XOR	AX, [BX + 2]	;changedBits XOR mask	AND	AX, [BX + 2]	;(changedBits XOR mask) AND mask	JNZ	RemoteMemoryError	MOV	AX, ES:[DI]	XOR	AX, [BX+2]	;oldData XOR mask	MOV	ES:[DI], AX	;oldData ¬ oldData XOR mask	;IF ((changedBits XOR mask) AND mask) = 0 THEN oldData ¬ oldData XOR mask	;ELSE ERROR	ADD	BX, 4	ADD	DI, 2	STI	;Enable Interrupts	LOOP RemoteMemoryLoop	%NotifyCondition (OFFSET RemoteMemoryDoneCond)	JMP	RemoteMemoryHandler	  RemoteMemoryError:	INT	3	;BREAK POINT to let debugger know there is a problem	STI	JMP	RemoteMemoryHandler	  	IOPEInROM ENDS 	END