$MOD186$PAGELENGTH (95)$PAGEWIDTH  (136);Copyright (C) 1984 by Xerox 	Corporation. All rights reserved.;-- stored as [Idun]<WDLion>Dove>FakeDisk.asm;-- created on  27-Feb-84 11:15:44;;-- last edited by:;-- 	FXB   .PA		 4-Dec-84  8:56:07	:included RHTask init;--	FXB   .PA		 3-Dec-84 18:17:28	:moved task initialization;--	FXB   .PA		30-Nov-84  9:55:32	:included harddefs.asm for OPIE!16;--	FXB   .PA		26-Sep-84 20:02:32;--	VXS  .pa		25-Jul-84 12:31:54	:Include listing of IOPMacro.asm;--	VXS  .pa		24-Jul-84 17:46:04	:Added PUBLIC of WorkNotifierInit;--	VXS  .pa		17-Jul-84 19:58:18	:Moved EXTRNs to be outside any defined seg;--	VXS  .pa		16-Jul-84 14:46:46	:Added EXTRNs that used to be from IOImport;							 Eliminate INCLUDE of IOImport;--	BKI   .pa		27-Jun-84 15:07:10	:Runs on Opie Version 1 release.;--	JMM   .pa		21-Jun-84 13:55:39;--	ETN  .pa		20-Jun-84 11:32:01NAME			FakeDisk;--------------------------------------------------------------------------------$NOLIST$INCLUDE		(IOPDefs.asm)$INCLUDE		(HARDDEFS.ASM)$INCLUDE		(IOPMacro.asm)$LIST;--------------------------------------------------------------------------------;EXTRNs necessary (normally these are in the individual handler, but this is a file; containing many handlers)IORegion		SEGMENT		COMMON 			Assume DS:IORegionEXTRN diskTask:TaskContextBlockEXTRN diskClientMask :WORDEXTRN diskControllerTask:TaskContextBlockEXTRN diskDMATask:TaskContextBlockEXTRN diskWork:ConditionEXTRN diskDone:ConditionEXTRN diskDMAWork:ConditionEXTRN diskDMADone:ConditionEXTRN diskClient:ClientConditionEXTRN floppyTask:TaskContextBlockEXTRN bootStrapTask:TaskContextBlockEXTRN neverHappen:ConditionEXTRN unServicedTask:TaskContextBlockEXTRN timeOfDay :DWordEXTRN displayInterrupt :InterruptContextBlockEXTRN diskControllerInterrupt :InterruptContextBlockEXTRN diskDMAInterrupt :InterruptContextBlockEXTRN floppyControllerInterrupt :InterruptContextBlock; for initialization of RemoteHeadsTestHandlerEXTRN remHeadsTestTask: TaskContextBlock timeOfDayFormat	STRUClowWord		DW	?highWord		DW	?timeOfDayFormat	ENDSIORegion		 ENDS;--------------------------------------------------------------------------------;;			IOPEInROM		SEGMENT	PUBLIC			Assume	CS:IOPEInROM;--------------------------------------------------------------------------------;;ROM-based task entry points: PUBLIC			 DiskInit EXTRN RemHeadsTestHandler: NEAR;--------------------------------------------------------------------------------;All the entry points below have to be in ROM so there is no need;to save the CS!	;DiskHandlerDiskInit	PROC	FAR		%InitializeTask		(OFFSET diskTask, DiskTaskInit)			%InitializeTask		(OFFSET diskControllerTask, DiskControllerTaskInit)		%InitializeTask		(OFFSET diskDMATask, DiskDMATaskInit)		%InitializeTask(OFFSET remHeadsTestTask, RemHeadsTestHandler)		RETDiskInit	ENDPDiskTaskInit: ;For testing use diskTask as a fake Head.		MOV	AX, OFFSET diskDone 		MOV	diskClient.conditionPtr, AX 		MOV	AX, OFFSET diskClientMask ;disk mask Ptr 		MOV	diskClient.clientMaskPtr, AX 		MOV	AX, 40H			;disk mask value 		MOV	diskClient.clientMask, AX 		%NotifyCondition	(OFFSET diskWork)		%WaitForCondition	(OFFSET diskDone, 0)DiskHeadLoop: 		%WaitForSystem			%WaitForTime		(30); Let's output the low order byte of the 32-bit time-of-day counter to the LEDs		MOV	AX, timeOfDay.lowWord		OUT	90H, AX		MOV	BX, diskClient.clientMaskPtr		MOV	WORD PTR [BX], 0 		%NotifyCondition	(OFFSET diskWork)		%WaitForCondition	(OFFSET diskDone, 10)		%WaitForCondition	(OFFSET diskDone, 500)		JMP			DiskHeadLoop	DiskControllerTaskInit: 		%ThisTaskServices (OFFSET diskControllerInterrupt,DiskBadIntr,watchDog) 	DiskWorkLoop:		%WaitForCondition	(OFFSET diskwork, 0)		%NotifyCondition	(OFFSET diskDMAWork)		%WaitForCondition	(OFFSET diskDMADone, 70)			%NotifyClientCondition	(diskClient)		JMP			DiskWorkLoopDiskBadIntr	PROC	FAR		JMP			$	;should never happenDiskBadIntr	ENDP DiskDMATaskInit: 		%ThisTaskServices	(OFFSET diskDMAInterrupt,DiskBadIntr,watchDog)DiskDMAWorkLoop:		%WaitForCondition	(OFFSET diskDMAwork, 0)DiskDMALoop:		%WaitForSystem			%WaitForTime		(10)			%WaitForSystem			%WaitForTime		(10)			%WaitForSystem			%WaitForTime		(10)			%NotifyCondition	(OFFSET diskDMADone)		JMP			DiskDMAWorkLoopDynamicDebugging:				;using LED's and DIP switch.		RETIOPEInROM	ENDS;********************************************************************************			END