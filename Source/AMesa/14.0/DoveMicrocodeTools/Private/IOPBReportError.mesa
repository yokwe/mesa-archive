-- File: IOPBReportError.mesa - last edit:-- FXB   .PA           20-May-85 11:31:06-- Copyright (C) 1985 by Xerox Corporation. All rights reserved.DIRECTORY  Bindweed,  IOPB,  IOPBCommand,  Put,  Process,  String,  Window;IOPBReportError: PROGRAM IMPORTS IOPBCommand, Put, Process, String  EXPORTS IOPB = {    AppendError: PUBLIC PROC [    code: IOPB.ErrorCode, errS, s: LONG STRING] = {        String.AppendString[s, SELECT code FROM      breakAlreadySet => "There's already a break set there."L,       breakNotFound => "Break not found."L,      cantAdjustBreaks => "cantAdjustBreaks"L,      stringEvalError => "stringEvalError"L,      symbolTableOverflow => "symbolTableOverflow"L,      dead => "The IOP is dead"L,      running => "You can't do that because the IOP is running"L,      notRunning => "You can't do that because the IOP isn't running"L,      panelError => "Panel Error: "L,      runningOrDead => "You can't do that because the IOP is running or dead"L,      invalidAddress => "Invalid Address"L,      aborted => "Aborted"L,      didntStop => "80186 didn't stop"L,      illegalStartAddr => "Illegal Start Address Found"L,      notLocatedModule => "This module hasn't been located"L,      undefinedSymbol => "Undefined Symbol: "L,      addressOutOfRange => "Address Out Of Range."L,      pcNotInitialized => "The PC Debugger is not initialized."L,      ENDCASE => ERROR];    SELECT code FROM      panelError, undefinedSymbol => String.AppendString[s, errS];      ENDCASE => NULL;    };      AppendBWError: PUBLIC PROC [code: Bindweed.ErrorCode, s: LONG STRING] = {    String.AppendString[s, "Error: "L];    String.AppendString[s, SELECT code FROM      timeout => "Timeout"L,      badCheckSum => "Bad Checksum"L,      umbilicalNotWorking => "Umbilical Not Working"L,      ENDCASE => ERROR];    Process.Detach[FORK IOPBCommand.SetNewState[dead]]    };           PutError: PUBLIC PROC [    code: IOPB.ErrorCode, errS: LONG STRING, sw: Window.Handle] = {    str: LONG STRING = [100];    h: Window.Handle ¬ NIL;    AppendError[code, errS, str];    h ¬ IOPBCommand.LogForSW[sw];    Put.Line[h, str];    };      PutBWError: PUBLIC PROC [    code: Bindweed.ErrorCode, sw: Window.Handle] = {    str: LONG STRING = [100];    h: Window.Handle ¬ NIL;    AppendBWError[code, str];    h ¬ IOPBCommand.LogForSW[sw];    Put.Line[h, str];    };        }.                