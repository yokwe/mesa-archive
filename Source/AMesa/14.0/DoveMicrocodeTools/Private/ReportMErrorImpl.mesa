-- File: ReportMErrorImpl.mesa - last edit:-- FXB   .PA            4-Jun-85 10:33:31-- Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved.-- ReportMErrorImpl.mesa created by Dennis E. DEG      @  9-Jul-83 12:24:45-- Last edited by Dennis E. DEG      @  9-Jul-83 16:52:30-- Last edited by Frank FXB    @  3-Dec-84 10:20:55DIRECTORY  Heap USING [ErrorType],  MFile USING [ErrorCode],  MSegment USING [ErrorCode],  MStream USING [ErrorCode],  Put,  ReportMError,  Window USING [Handle];  ReportMErrorImpl: PROGRAM  IMPORTS Put  EXPORTS ReportMError =  BEGIN    HeapError: PUBLIC PROCEDURE[type: Heap.ErrorType, h: Window.Handle] =    BEGIN      SELECT type FROM        insufficientSpace =>  Put.Text[h, "Heap: insufficient space.\n"L];	invalidHeap => Put.Text[h, "Heap: invalid heap.\n"L];	invalidNode => Put.Text[h, "Heap: invalid node.\n"L];	invalidZone => Put.Text[h, "Heap: invalid zone.\n"L];	invalidOwner => Put.Text[h, "Heap: invalid owner.\n"L];	invalidSize => Put.Text[h, "Heap: invalid size.\n"L];	invalidParameters => Put.Text[h, "Heap: invalid parameters.\n"L];	maxSizeExceeded => Put.Text[h, "Heap: exceeds maximum requested size.\n"L];      ENDCASE => Put.Text[h, "Heap: unexpected error.\n"L];    END;    MFileError: PUBLIC PROCEDURE[code: MFile.ErrorCode, h: Window.Handle, fileName: LONG STRING] =    BEGIN      SELECT code FROM	noSuchFile => {Put.Text[h, "No such file: "L];		Put.Text[h, fileName]};	conflictingAccess => Put.Text[h, "MFile conflicting access.\n"L];	insufficientAccess => Put.Text[h, "Insufficient access.\n"L];	directoryFull => {Put.Text[h, "Directory: "L];		Put.Text[h, fileName];		Put.Text[h, " is full.\n"L]};	directoryNotEmpty => {Put.Text[h, "Directory: "L];		Put.Text[h, fileName];		Put.Text[h, " is not empty.\n"L]};	illegalName => {Put.Text[h, "Illegal name: "L];		Put.Text[h, fileName];		Put.Text[h, " passed to MFile operation.\n"L]};	noSuchDirectory => {Put.Text[h, "Directory: "L];		Put.Text[h, fileName];		Put.Text[h, " does not exist.\n"L]};	noRootDirectory => {Put.Text[h, "Root directory: "L];		Put.Text[h, fileName];		Put.Text[h, " does not exist.\n"L]};	nullAccess => Put.Text[h, "MFile: Null access not allowed.\n"L];	protectionFault => {Put.Text[h, fileName];		Put.Text[h, " is protected.\n"L]};	directoryOnSearchPath => {Put.Text[h, "Directory: "L];		Put.Text[h, fileName];		Put.Text[h, " is on search path.\n"L]};	illegalSearchPath => Put.Text[h, "MFile: Illegal search path.\n"L];	volumeNotOpen => {Put.Text[h, "Volume: "L];		Put.Text[h, fileName];		Put.Text[h, " not opened.\n"L]};	noRoomOnVolume => {Put.Text[h, "Volume: "L];		Put.Text[h, fileName];		Put.Text[h, " full.\n"L]};	noSuchVolume => {Put.Text[h, "Volume: "L];		Put.Text[h, fileName];		Put.Text[h, " does not exist.\n"L]};	crossingVolumes => Put.Text[h, "MFile: crossing volumes.\n"L];	fileAlreadyExists => {Put.Text[h, "MFile: "L];		Put.Text[h, fileName];		Put.Text[h, " already exists.\n"L]};	fileIsDirectory => Put.Text[h, "MFile: Operation not allowed on directories.\n"L];	invalidHandle => Put.Text[h, "Invalid MFile handle.\n"L];	fileIsRemote => Put.Text[h, "MFile: Operation not allowed on a remote file.\n"L];	courierError => Put.Text[h, "MFile: Courier error.\n"L];	addressTranslationError => Put.Text[h, "MFile: Address Translation problems trying to access remote file.\n"L];	connectionSuspended => Put.Text[h, "MFile: Connection suspended.\n"L];      ENDCASE => Put.Text[h, "An unexpected MFile Error has occured.\n"L];    END;    MSegmentError: PUBLIC PROCEDURE[code: MSegment.ErrorCode, h: Window.Handle] =    BEGIN      SELECT code FROM	zeroLength => Put.Text[h, "MSegment: Zero length segments are not allowed.\n"L];	insufficientVM => Put.Text[h, "MSegment: Insufficient VM to create segment.\n"L];	noSuchSegment => Put.Text[h, "MSegment: No such segment.\n"L];	sharedSegment => Put.Text[h, "MSegment: Operation not allowed on a shared segment.\n"L];	baseOutOfRange => Put.Text[h, "MSegment: Invalid base supplied to MSegment operation.\n"L];	conflictingAccess => Put.Text[h, "MSegment: conflicting access.\n"L];	illegalAccess => Put.Text[h, "MSegment: illegal access.\n"L];	invalidFile =>  Put.Text[h, "Invalid MFile.Handle passed to MSegment operation.\n"L];	dataSegmentNeedsPages => Put.Text[h, "MSegment: Segment needs pages for data.\n"L];	noRoomOnVolume => Put.Text[h, "MSegment: Volume is full.\n"L];      ENDCASE => Put.Text[h, "MSegment: An unexpected MSegment Error has occured.\n"L];    END;    MStreamError: PUBLIC PROCEDURE[code: MStream.ErrorCode, h: Window.Handle, fileName: LONG STRING] =    BEGIN      SELECT code FROM	invalidHandle => Put.Text[h, "MStream: invalid handle.\n"L];	indexOutOfRange => Put.Text[h, "MStream: index out of range.\n"L];	invalidOperation => Put.Text[h, "MStream: invalid operation.\n"L];	fileTooLong => {Put.Text[h, "MStream: "L];		Put.Text[h, fileName];		Put.Text[h, " is too long.\n"L]};	fileNotAvailable => {Put.Text[h, "MStream: "L];		Put.Text[h, fileName];		Put.Text[h, " is not available.\n"L]};	invalidFile => Put.Text[h, "MStream: invalid MFile.Handle used.\n"L];      ENDCASE => Put.Text[h, "An unexpected MStream Error has occured.\n"L];    END;    END...    LOG  created by Dennis E. DEG      @  9-Jul-83 12:24:45