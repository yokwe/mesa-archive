-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. --DiagTestDisplayImpl.mesa - last edited by SMA 28-Jan-85 17:59:50DIRECTORY  CommOnlineDiagnostics USING [CountType, EchoResults, EventReporter,    Histogram,  ModemChange, SetDiagnosticLine, WriteMsg],   DiagTestInternal,  Put USING [Char, Decimal, Line, LongDecimal, Text];DiagTestDisplayImpl: PROGRAM   IMPORTS DiagTestInternal, Put  EXPORTS DiagTestInternal =    BEGIN    MyEventRep: PUBLIC CommOnlineDiagnostics.EventReporter =    BEGIN    Put.Char[DiagTestInternal.data.fileSW, SELECT event FROM      success => '!,      late => 'l,      timeout => 't,      badDataGoodCRC => 'b,      sizeChange => 's,      ENDCASE => '?];    END;  -- MyEventRep        MyModemChange: PUBLIC CommOnlineDiagnostics.ModemChange =    BEGIN    Put.Text[DiagTestInternal.data.fileSW, SELECT modemSignal FROM      dataSetReady => "DSR "L,      clearToSend => "CTS "L,      carrierDetect => "CD "L,      ringIndicator => "RI "L,      ringHeard => "RH "L,      ENDCASE => "??? "L];    Put.Line[DiagTestInternal.data.fileSW, SELECT state FROM      TRUE => "on"L,      FALSE => "off"L,      ENDCASE => "???"L];    END;  -- MyModemChange          MySetDiagLine: PUBLIC CommOnlineDiagnostics.SetDiagnosticLine =    BEGIN    Put.Line[DiagTestInternal.data.fileSW, "SetDiagnosticLine[]"L];    END;  -- MySetDiagLine          MyWriteMsg: PUBLIC CommOnlineDiagnostics.WriteMsg =    BEGIN    Put.Text[DiagTestInternal.data.fileSW, SELECT msg FROM      looped => "l"L,      recError => "rE "L,      sendError => "sE "L,      ENDCASE => "? "L];    END;  -- MyWriteMsg          PrintRS232CTotals: PUBLIC PROC [c: CommOnlineDiagnostics.CountType] =    BEGIN OPEN DiagTestInternal;  --for data.    Put.Line[data.fileSW, "  totals: "L];    Put.Text[data.fileSW, "  sendOk ="L];    Put.LongDecimal[data.fileSW, c.sendOk];    Put.Text[data.fileSW, "  bytesSent ="L];    Put.LongDecimal[data.fileSW, c.bytesSent];    Put.Text[data.fileSW, "  recOk ="L];    Put.LongDecimal[data.fileSW, c.recOk];    Put.Text[data.fileSW, "  bytesRec ="L];    Put.LongDecimal[data.fileSW, c.bytesRec];    Put.Text[data.fileSW, "  deviceError ="L];    Put.LongDecimal[data.fileSW, c.deviceError];    Put.Text[data.fileSW, "  dataLost ="L];    Put.LongDecimal[data.fileSW, c.dataLost];    Put.Text[data.fileSW, "  checkSum ="L];    Put.LongDecimal[data.fileSW, c.checkSum];    Put.Text[data.fileSW, "  parity ="L];    Put.LongDecimal[data.fileSW, c.parity];    Put.Text[data.fileSW, "  invalidChar ="L];    Put.LongDecimal[data.fileSW, c.invalidChar];    Put.Text[data.fileSW, "  invalidFrame ="L];    Put.LongDecimal[data.fileSW, c.invalidFrame];    Put.Text[data.fileSW, "  asynchFrame ="L];    Put.LongDecimal[data.fileSW, c.asynchFrame];    Put.Text[data.fileSW, "  breakDetected ="L];    Put.LongDecimal[data.fileSW, c.breakDetected];    Put.Text[data.fileSW, "  frameTimeout ="L];    Put.LongDecimal[data.fileSW, c.frameTimeout];    Put.Text[data.fileSW, "  badSeq ="L];    Put.LongDecimal[data.fileSW, c.badSeq];    Put.Text[data.fileSW, "  missing ="L];    Put.LongDecimal[data.fileSW, c.missing];    Put.Text[data.fileSW, "  sendErrors ="L];    Put.LongDecimal[data.fileSW, c.sendErrors];    END;  -- PrintRS232CTotals                  PrintEchoTotals: PUBLIC PROC [t: CommOnlineDiagnostics.EchoResults,    h: CommOnlineDiagnostics.Histogram] =    BEGIN OPEN DiagTestInternal;  --for data.    Put.Line[data.fileSW, "  totals: "L];    Put.Text[data.fileSW, "  totalTime = "L];    Put.LongDecimal[data.fileSW, t.totalTime];    Put.Text[data.fileSW, ", totalAttempts = "L];    Put.LongDecimal[data.fileSW, t.totalAttempts];    Put.Text[data.fileSW, ", successes = "L];    Put.LongDecimal[data.fileSW, t.successes];    Put.Text[data.fileSW, ", timeouts = "L];    Put.LongDecimal[data.fileSW, t.timeouts];    Put.Text[data.fileSW, ", late = "L];    Put.LongDecimal[data.fileSW, t.late];    Put.Text[data.fileSW, ", unexpected = "L];    Put.LongDecimal[data.fileSW, t.unexpected];    Put.Text[data.fileSW, ", bad = "L];    Put.LongDecimal[data.fileSW, t.bad];    Put.Text[data.fileSW, ", avgDelayInMsecs = "L];    Put.LongDecimal[data.fileSW, t.avgDelayInMsecs];    Put.Text[data.fileSW, ", okButDribble = "L];    Put.LongDecimal[data.fileSW, t.okButDribble];    Put.Text[data.fileSW, ", badAlignmentButOkCrc = "L];    Put.LongDecimal[data.fileSW, t.badAlignmentButOkCrc];    Put.Text[data.fileSW, ", packetTooLong = "L];    Put.LongDecimal[data.fileSW, t.packetTooLong];    Put.Text[data.fileSW, ", overrun = "L];    Put.LongDecimal[data.fileSW, t.overrun];    Put.Text[data.fileSW, ", idleInput = "L];    Put.LongDecimal[data.fileSW, t.idleInput];    Put.Text[data.fileSW, ", tooManyCollisions = "L];    Put.LongDecimal[data.fileSW, t.tooManyCollisions];    Put.Text[data.fileSW, ", lateCollisions = "L];    Put.LongDecimal[data.fileSW, t.lateCollisions];    Put.Text[data.fileSW, ", underrun = "L];    Put.LongDecimal[data.fileSW, t.underrun];    Put.Text[data.fileSW, ", stuckOutput = "L];    Put.LongDecimal[data.fileSW, t.stuckOutput];    Put.Line[data.fileSW, ", spare = "L];    Put.Line[data.fileSW, ""];    Put.Text[data.fileSW, "  hist: "L];    FOR i: CARDINAL IN [0..LENGTH[h]) DO      Put.Text[data.fileSW, " ["L];      Put.Decimal[data.fileSW, h[i].msec];      Put.Text[data.fileSW, ", "L];      Put.Decimal[data.fileSW, h[i].count];      Put.Text[data.fileSW, "] "L];      ENDLOOP;    END;  -- PrintEchoTotals        END..