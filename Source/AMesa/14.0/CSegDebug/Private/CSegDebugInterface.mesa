-- Copyright (C) 1981, 1982, 1983, 1986  by Xerox Corporation. All rights reserved. -- CSegDebugInterface.mesa --   Sweet,	 9-Sep-83 10:43:08--   Bruce,	15-Sep-81 12:54:17--   Haynes,	29-Nov-82 15:30:57--   MEW	17-Jun-86 17:27:57    DIRECTORY  FormSW,  CSegDebugCommandDefs,  CSegDebugDefs,  RESOut USING [WindowsObject],  Runtime,  String,  Time,  Tool,  ToolWindow USING [TransitionProcType],  Version USING [Append],  Window USING [Handle, Place],  WindowFont USING [CharWidth];      CSegDebugInterface: PROGRAM   IMPORTS     FormSW, CSegDebugDefs, Runtime, String, Time, Tool,    Version, WindowFont  EXPORTS CSegDebugDefs =  BEGIN  OPEN FormSW, CSegDebugDefs;        MakeMySWs: Tool.MakeSWsProc =    BEGIN    log: STRING = [20];    Tool.UnusedLogName[log, "CSegDebug.log"L];    windows.msgSW ¬ Tool.MakeMsgSW[window: window];    windows.formSW ¬ Tool.MakeFormSW[window: window, formProc: MakeParameterArray];    windows.fileSW ¬ Tool.MakeFileSW[window: window, name: log];    END;  Init: PRIVATE PROCEDURE =    BEGIN    title: STRING = "CSegDebug"L;    herald: STRING ¬ [60];    String.AppendString[to: herald, from: title];    String.AppendChar[herald, ' ];    Version.Append[herald];    String.AppendString[herald, " of "];    Time.Append[herald, Time.Unpack[Runtime.GetBcdTime[]]];    herald.length ¬ herald.length - 3;    windows.main ¬ Tool.Create[      name: herald, makeSWsProc: MakeMySWs, clientTransition: StateChanged,      cmSection: title];    CSegDebugDefs.handle ¬ @windows;    END;  StateChanged: ToolWindow.TransitionProcType =    BEGIN    IF new = inactive THEN      windows.msgSW ¬ windows.formSW ¬ windows.fileSW ¬ NIL;    END;  windows: RESOut.WindowsObject ¬ [NIL, NIL, NIL, NIL];    charWidth: CARDINAL = WindowFont.CharWidth['0];  CharPos: PROC[char: CARDINAL] RETURNS [x: INTEGER] = {    x ¬ charWidth * char};  itemPlace: ARRAY CSegDebugCommandDefs.ParamIndex OF Window.Place = [    gfCmd: [x: CharPos[1], y: line0],    gfVal: [x: CharPos[4], y: line0],    bpcCmd: [x: CharPos[24], y: line0],    bpcVal: [x: CharPos[28], y: line0],    nCmd: [x: CharPos[42], y: line0],    nVal: [x: CharPos[43], y: line0],    code: [x: CharPos[56], y: line0],    octal: [x: CharPos[64], y: line0],    prefix: [x: CharPos[71], y: line0],    localFr: [x: CharPos[79], y: line0],      gfiCmd: [x: CharPos[1], y: line1],    gfiVal: [x: CharPos[4], y: line1],    nextGFI: [x: CharPos[24], y: line1],    plus1: [x: CharPos[34], y: line1],    auto: [x: CharPos[42], y: line1],    next: [x: CharPos[47], y: line1],    bytes: [x: CharPos[56], y: line1],    ascii: [x: CharPos[64], y: line1],    catch: [x: CharPos[71], y: line1],    enables: [x: CharPos[79], y: line1],      absFlag: [x: CharPos[1], y: line2],    absVal: [x: CharPos[4], y: line2],    wpc: [x: CharPos[24], y: line2],    backup: [x: CharPos[34], y: line2],    findEna: [x: CharPos[42], y: line2],    cevi: [x: CharPos[48], y: line2],    link: [x: CharPos[56], y: line2],    allLinks: [x: CharPos[64], y: line2],    goCEp: [x: CharPos[71], y: line2],    findCEp: [x: CharPos[79], y: line2],      find: [x: CharPos[1], y: line3],    key: [x: CharPos[9], y: line3],     rangeCmd: [x: CharPos[42], y: line3],    rangeVal: [x: CharPos[45], y: line3],    numMop: [x: CharPos[56], y: line3],    mopNum: [x: CharPos[71], y: line3]];  MakeParameterArray: FormSW.ClientItemsProcType =    BEGIN OPEN CSegDebugCommandDefs;     nParams: CARDINAL =       LOOPHOLE[LAST[CSegDebugCommandDefs.ParamIndex], CARDINAL] + 1;    params: CSegDebugCommandDefs.Params ¬ LOOPHOLE[      AllocateItemDescriptor[nParams]];    paramArray: LONG POINTER TO ParamArray = BASE[params];    paramArray­ ¬ [      gfCmd: CommandItem[        tag: "gf"L, place: itemPlace[gfCmd], proc: ParamNotify],      gfVal: LongNumberItem[signed: FALSE, radix: octal,        tag: " "L, place: itemPlace[gfVal], value: @gFrame],      gfiCmd: CommandItem[        tag: "gfi"L, place: itemPlace[gfiCmd], proc: ParamNotify],      gfiVal: NumberItem[signed: FALSE, radix: octal,        tag: " "L, place: itemPlace[gfiVal], value: @gfi],      nextGFI: CommandItem[        tag: "NextGFI"L, place: itemPlace[nextGFI], proc: ParamNotify],      absFlag: BooleanItem[        tag: "abs"L, place: itemPlace[absFlag], switch: @absMode],      absVal: LongNumberItem[signed: FALSE, radix: octal,        tag: " "L, place: itemPlace[absVal], value: @absAddr],      goCEp: CommandItem[        tag: "->cep"L, place: itemPlace[goCEp], proc: ParamNotify],      findCEp: CommandItem[        tag: "?cep"L, place: itemPlace[findCEp], proc: ParamNotify],      find: CommandItem[        tag: "find"L, place: itemPlace[find], proc: ParamNotify],      key: StringItem[        tag: "key"L, place: itemPlace[key], string: @keyString, inHeap: TRUE],      bpcCmd: CommandItem[        tag: "bpc"L, place: itemPlace[bpcCmd], proc: ParamNotify],      bpcVal: NumberItem[signed: FALSE, radix: octal,        tag: " "L, place: itemPlace[bpcVal], value: @bytePC],      plus1: CommandItem[        tag: "+1"L, place: itemPlace[plus1], proc: ParamNotify],      backup: CommandItem[        tag: "backup"L, place: itemPlace[backup], proc: ParamNotify],      wpc: CommandItem[        tag: "wpc"L, place: itemPlace[wpc], proc: ParamNotify],      nCmd: CommandItem[        tag: "n"L, place: itemPlace[nCmd], proc: ParamNotify],      nVal: NumberItem[signed: FALSE, radix: decimal,        tag: " "L, place: itemPlace[nVal], value: @nBytes],      auto: BooleanItem[        tag: "auto"L, place: itemPlace[auto], switch: @autoNext],      next: CommandItem[        tag: "next"L, place: itemPlace[next], proc: ParamNotify],      findEna: CommandItem[        tag: "?ena"L, place: itemPlace[findEna], proc: ParamNotify],      rangeCmd: CommandItem[        tag: "rng"L, place: itemPlace[rangeCmd], proc: ParamNotify],      rangeVal: NumberItem[signed: FALSE, radix: decimal,        tag: " "L, place: itemPlace[rangeVal],        value: @searchRange],      code: CommandItem[        tag: "code"L, place: itemPlace[code], proc: ParamNotify],      octal: CommandItem[        tag: "oct"L, place: itemPlace[octal], proc: ParamNotify],      bytes: CommandItem[        tag: "bytes"L, place: itemPlace[bytes], proc: ParamNotify],      ascii: CommandItem[        tag: "asc"L, place: itemPlace[ascii], proc: ParamNotify],      link: CommandItem[        tag: "link"L, place: itemPlace[link], proc: ParamNotify],      allLinks: CommandItem[        tag: "all"L, place: itemPlace[allLinks], proc: ParamNotify],      numMop: CommandItem[        tag: "num->mop"L, place: itemPlace[numMop], proc: ParamNotify],      prefix: CommandItem[        tag: "prefix"L, place: itemPlace[prefix], proc: ParamNotify],      localFr: CommandItem[        tag: "localFr"L, place: itemPlace[localFr], proc: ParamNotify],      catch: CommandItem[        tag: "catch"L, place: itemPlace[catch], proc: ParamNotify],      enables: CommandItem[        tag: "enables"L, place: itemPlace[enables], proc: ParamNotify],      cevi: CommandItem[        tag: "cevi"L, place: itemPlace[cevi], proc: ParamNotify],      mopNum: CommandItem[        tag: "mop->num"L, place: itemPlace[mopNum], proc: ParamNotify]];        RETURN[items: LOOPHOLE[params], freeDesc: TRUE];    END;  Init[];    END.