-- Copyright (C) 1985  by Xerox Corporation. All rights reserved. -- HBActionImpl.mesa, RDH       , 22-Feb-85 10:23:32-- Last edited by --  RDH      	12-Jun-85 12:17:49 Change signal catching for FB's changes to Bindweed.--  RDH      	14-Mar-85 11:21:11 Catch Bindweed.BadCheckSum in ReadWholeBuffer.--  RDH      	22-Feb-85 10:23:35 Create.DIRECTORY  Bindweed,  Exec,  HBAction,  MFile,  MLoader,  Runtime,  String,  TTY;HBActionImpl: PROGRAM IMPORTS Bindweed, Exec, MFile, MLoader, Runtime, String, TTY   EXPORTS HBAction = BEGIN    --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  --Drop 2 words from the history buffer on the floor.  --Reading the low data register advances the buffer 2 words.  DiscardDblWord: PUBLIC PROC = BEGIN    [] ¬ Bindweed.ReadIOWord[HBAction.DataLoReg !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];     END;--DiscardDblWord--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  --Drop 4 words from the history buffer on the floor.  DiscardQuadWord: PUBLIC PROC = BEGIN    DiscardDblWord[];    DiscardDblWord[];   END;--DiscardQuadWord--     --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  --Load BindweedConfig if it is not already loaded.  Complain and return false if it is not around.  InitConnectionToHB: PUBLIC PROC[exec: Exec.Handle] RETURNS     [ready: BOOLEAN ¬ TRUE]    = BEGIN    bindweedFile: STRING = "BindweedConfig.bcd"L;    tty: TTY.Handle ¬ Exec.GetTTY[exec];    msg: STRING ¬ [80];    mfH: MFile.Handle;    IF  ~Runtime.IsBound[LOOPHOLE[Bindweed.ReadMemoryBlock, Runtime.ControlLink]]      THEN BEGIN      mfH ¬ MFile.Acquire[name: bindweedFile, access: readOnly, release: []!        MFile.Error => IF code = noSuchFile THEN GOTO noFile ELSE REJECT];      TTY.PutString[h: tty, s: "  ... loading "L];      TTY.PutString[h: tty, s: bindweedFile];      TTY.PutString[h: tty, s: "..."L];      [] ¬ MLoader.Load[file: mfH];      TTY.PutLine[h: tty, s: "done."L];      -- start asynchronous notifier      Exec.PrependCommands[exec, "BindweedConfig.~"L];       EXITS        noFile => BEGIN          String.AppendString[to: msg, from: "  Please retrieve file "L];          String.AppendString[to: msg, from: bindweedFile];          String.AppendString[to: msg, from: " before trying again."L];          TTY.PutLine[h: tty, s: msg];          RETURN[FALSE];          END;      END;    Exec.ReleaseTTY[tty];    END;--InitConnectionToHB--     --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  ManualStop: PUBLIC PROC = BEGIN  --Writing to the Manual stop register forces the history buffer into the idle state ending sampling or reading.    [] ¬ Bindweed.WriteIOWord[HBAction.ManStop, 0 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];     END;--ManualStop--    --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  ManualTrig: PUBLIC PROC = BEGIN  --Writing to the manual trigger register forces the history buffer into the delay state from sampling state simulating a trigger.    [] ¬ Bindweed.WriteIOWord[HBAction.ManTrig, 0 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];     END;--ManualTrig--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  ReadHistoryBufferBlock: PUBLIC PROC[block: LONG POINTER TO    HBAction.HistoryBufferBlock] = BEGIN    --Copy from history buffer memory into the given block of words.    IF block = NIL THEN SIGNAL HBProb[badBufferBlock];    Bindweed.ReadHistoryBuffer[block !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];     END;--ReadHistoryBufferBlock--     --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  ReadStatus: PUBLIC PROC RETURNS[status: HBAction.HBStatus] = BEGIN    --Read the status register of the history buffer.    word: WORD;    word ¬ Bindweed.ReadIOWord[HBAction.StatReg !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    status ¬ LOOPHOLE[word, HBAction.HBStatus];     END;--ReadStatus--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  ReadWholeBuffer: PUBLIC PROC[buffer: LONG POINTER TO HBAction.SWBuffer] = BEGIN    --Fill the entire array from the history buffer memory.    IF buffer = NIL THEN SIGNAL HBProb[badBuffer];    StartReadCSForw[];    DiscardDblWord[];--History buffer is pointing at the double word just before the trigger's double or quad word.  Drop it on the floor.  We will pick it up at the end.    FOR i: HBAction.HBBlockIndex IN HBAction.HBBlockIndex DO      ReadHistoryBufferBlock[@buffer[i] !         Bindweed.Error => IF code = badCheckSum THEN        SIGNAL HBProb[bindweedBadCheckSum]];      ENDLOOP;    ManualStop[];    END;--ReadWholeBuffer--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  Start: PUBLIC PROC = BEGIN    --Write the start register of the history buffer thus beginning a sample or a read session.    Bindweed.WriteIOWord[HBAction.StartReg, 0 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];     END;--Start--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  StartReadCSForw: PUBLIC PROC = BEGIN    --Write the control register of the history buffer to set it up for reading the buffer forward, then start it.    readForwCntlReg: HBAction.HBControl = [target: cs, mode: read];    WriteControlReg[readForwCntlReg];    Start[];    END;--StartReadCSForw--       --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  StartReadIOPForw: PUBLIC PROC = BEGIN    --Write the control register of the history buffer to set it up for reading the buffer forward, then start it.    readForwCntlReg: HBAction.HBControl = [target: iop, mode: read];    WriteControlReg[readForwCntlReg];    Start[];    END;--StartReadIOPForw--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  StartSample: PUBLIC PROC[delay: HBAction.DelayRange,     target: HBAction.TargetDevice] = BEGIN    --Stop the history buffer in case it isn't already, write the control register of the history buffer to set it up for sampling the target device with the given delay, then start it.    sampleCntlReg: HBAction.HBControl = [delayOption: delay, target: target,      mode: sample];    ManualStop[];    WriteControlReg[sampleCntlReg];    Start[];    END;--StartSample--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  WriteTriggerRegs: PUBLIC PROC[trigReg0, trigReg1, trigReg2, trigReg3:    UNSPECIFIED] = BEGIN    --Write the trigger registers of the history buffer with the given data.    Bindweed.WriteIOWord[HBAction.TrigReg3, trigReg3 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.TrigReg2, trigReg2 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.TrigReg1, trigReg1 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.TrigReg0, trigReg0 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    END;--WriteTriggerRegs--    --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  WriteMaskRegs: PUBLIC PROC[maskReg0, maskReg1, maskReg2, maskReg3: UNSPECIFIED]    = BEGIN    --Write the mask registers of the history buffer with the given data.    Bindweed.WriteIOWord[HBAction.MaskReg3, maskReg3 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.MaskReg2, maskReg2 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.MaskReg1, maskReg1 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    Bindweed.WriteIOWord[HBAction.MaskReg0, maskReg0 !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    END;--WriteMaskRegs--      --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  WriteControlReg: PUBLIC PROC[cntlReg: HBAction.HBControl] = BEGIN    --Write the control register of the history buffer with the given data.    Bindweed.WriteIOWord[HBAction.CntrlReg, LOOPHOLE[cntlReg, WORD] !      Bindweed.Error => IF code = timeout THEN SIGNAL HBProb[bindweedTimeout]];    END;--WriteControlReg--    --$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--  HBProb: PUBLIC SIGNAL[probType: HBAction.HBProbType] = CODE;      END.                           