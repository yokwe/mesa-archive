-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. --Last edit by JAC     5-Nov-84 14:23:08DIRECTORY  DsyAssembler USING [cycle0],  DsyuFormat USING [LabelSeqNum],  Stream USING [Position],  Time USING [defaultTime, Packed],  DsyLabel USING [ConstraintChain, Cycle, Empty, MemStatus, MiSeqNum];DsyP2Hash: DEFINITIONS =  BEGIN  -- Types  ConstraintArray: TYPE = ARRAY [0..5120) OF LONG POINTER TO    DsyLabel.ConstraintChain;  ExportDataRec: TYPE = RECORD [    id: ExportID ¬ nullID,    addr: [0..4096) ¬ 0,    miIndex: DsyLabel.MiSeqNum ¬ DsyLabel.Empty,    s: LONG STRING ¬ NIL,    next: ExportDataRecPtr ¬ NIL];  ExportDataRecPtr: TYPE = LONG POINTER TO ExportDataRec;  ExportID: TYPE = Time.Packed;  ExportRec: TYPE = RECORD [    id: ExportID ¬ nullID, addr: [0..4096) ¬ 0, length: [0..256) ¬ 0];  ExportRecPtr: TYPE = LONG POINTER TO ExportRec;  MiLtoV: TYPE = ARRAY [0..maxLabels) OF CARDINAL [0..5120);  MiVtoLtxt: TYPE = ARRAY [0..5120) OF Stream.Position;  MiRtoV: TYPE = ARRAY [0..4096) OF DsyLabel.MiSeqNum;  MiVtoR: TYPE = ARRAY [0..5120) OF CARDINAL;  Mi2Res: TYPE = PACKED ARRAY [0..4096) OF BOOLEAN;  nullID: ExportID = Time.defaultTime;  Pass2HashEntry: TYPE = RECORD [    key: LONG STRING ¬ NIL,    ptr: Pass2EntryPtr ¬ NIL,    next: Pass2HashEntryPtr ¬ NIL];  -- end Pass2HashEntry  Pass2HashEntryPtr: TYPE = LONG POINTER TO Pass2HashEntry;  Pass2Entry: TYPE = RECORD [    export: BOOLEAN ¬ FALSE,    import: BOOLEAN ¬ FALSE,    incons: BOOLEAN ¬ FALSE,    target: BOOLEAN ¬ FALSE,    isCycle: DsyLabel.Cycle ¬ DsyAssembler.cycle0,    needsCycle: DsyLabel.Cycle ¬ DsyAssembler.cycle0,    cycleOK: BOOLEAN ¬ FALSE,    memStatus: DsyLabel.MemStatus ¬ none,    entry: SELECT type: * FROM      found => [  -- implies at least one found seen        miIndex: DsyLabel.MiSeqNum],      notFound => [  -- implies no founds seen        refChain: RefChainPtr],      impVal => [  -- satisfied import   only exists after pass2 externals read        expPtr: ExportRecPtr],      ENDCASE];  -- end Pass2Entry  Pass2EntryPtr: TYPE = LONG POINTER TO Pass2Entry;  RefChain: TYPE = RECORD [    labIndex: DsyuFormat.LabelSeqNum  -- used during si reads    ,    next: RefChainPtr];  -- end RefChain  RefChainPtr: TYPE = LONG POINTER TO RefChain;  -- Constants  bad: PUBLIC CARDINAL = 100;  maxLabels: CARDINAL = 3072;  maxMI: CARDINAL = 4096;  maxSrcFiles: CARDINAL = 32;  Not: CARDINAL = 4096;  NoTxt: Stream.Position = LONG[-1];  Reserved: CARDINAL = 4097;  -- Variables  constraintArray: LONG POINTER TO ConstraintArray;  curID: ExportID;  curMI: CARDINAL [0..5120);  errorLevel: CARDINAL;  exportRecList: ExportDataRecPtr;  miLtoV: LONG POINTER TO MiLtoV;  miVtoLtxt: LONG POINTER TO MiVtoLtxt;  labIoff: ARRAY [0..maxSrcFiles) OF CARDINAL;  miRtoV: LONG POINTER TO MiRtoV;  miVtoR: LONG POINTER TO MiVtoR;  mi2Res: LONG POINTER TO Mi2Res;  miIoff: ARRAY [0..maxSrcFiles) OF CARDINAL;  realMI: DsyLabel.MiSeqNum;  -- PROCEDURES  DisplayPass2Hash: PROCEDURE [proc: PROCEDURE [Pass2HashEntryPtr]];  ErasePass2Hash: PROCEDURE;  EraseMiSpace: PROCEDURE;  EraseXSpace: PROCEDURE;  FindPass2Label: PROCEDURE [str: LONG STRING] RETURNS [h: Pass2HashEntryPtr];  GetMiSpace: PROCEDURE [nwords: CARDINAL] RETURNS [p: LONG POINTER];  GetPass2Space: PROCEDURE [nwords: CARDINAL] RETURNS [p: LONG POINTER];  GetXSpace: PROCEDURE [nwords: CARDINAL] RETURNS [p: LONG POINTER];  GetXString: PROCEDURE [nchars: CARDINAL] RETURNS [s: LONG STRING];  InitPass2Space: PROCEDURE;  InsertPass2Hash: PROCEDURE [h: Pass2HashEntryPtr];  END...  --Log--JAC   	17-Aug-84 11:09:49	added cycleOK to Pass2Entry to retain info if jump between modules using LOOPHOLE[CycleOK] --JAC   	 5-Nov-84 14:23:19	fixed arrows for Mesa 11.1