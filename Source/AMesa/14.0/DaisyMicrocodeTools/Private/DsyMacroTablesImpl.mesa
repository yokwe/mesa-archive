-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. --Last edit by JAC       19-Dec-84 11:21:38DIRECTORY  Heap USING [MakeNode],  String USING [AppendString, WordsForString],  DsyModule USING [InsertM, MTtempHeap],  DsyAssembler;DsyMacroTablesImpl: PROGRAM   IMPORTS Heap, String, DsyModule   EXPORTS DsyAssembler, DsyModule =  BEGIN OPEN DsyAssembler;  -- In the following table, if a macro has more than one encoding, they will follow each other sequentially.  A macroIndex always indexes the first occurance of the macro.  By looking at macroTable[index+1], it will thus be possible to see if there is another encoding for a given macro.  macroTable: PUBLIC LONG POINTER TO ARRAY [0..macroTableSize) OF MacroPattern;  InitGlobalMacroTables: PUBLIC PROCEDURE =     BEGIN    macroTable ¬      Heap.MakeNode[DsyModule.MTtempHeap, macroTableSize*SIZE[MacroPattern]];    InitMacroTables[];    END;  --  of Procedure InitGlobalMacroTables  AddMTEntry: PROCEDURE [    --add an entry to the macro table    mp: LONG POINTER TO MacroPattern, er: ElementRec, erSize: CARDINAL] =     BEGIN    s: LONG STRING;    erptr: LONG POINTER TO ElementRec ¬ Heap.MakeNode[DsyModule.MTtempHeap,      erSize + SIZE[MEntry] + String.WordsForString[mp.macro.length]];    mptr: MEntryPtr;    erptr­ ¬ er;    mptr ¬ LOOPHOLE[erptr + erSize];    s ¬ LOOPHOLE[mptr + SIZE[MEntry]];    s­ ¬ StringBody[maxlength: mp.macro.length, length: 0, text:];    String.AppendString[s, mp.macro];    mptr­ ¬ MEntry[s, erptr, NIL];    mp.macro ¬ s;    [] ¬ DsyModule.InsertM[mptr]    END;  --end of procedure AddMTEntry          InitMacroTables: PROCEDURE =     BEGIN    macroTable­ ¬ [ --positioning is very important within this table!          --link gets      ["L0¬", [sp1: link0]],      ["L1¬", [sp1: link1]],      ["L2¬", [sp1: link2]],      ["L3¬", [sp1: link3]],           --macroArrows      ["MAR¬",		 [op: two,  mo: A]],      ["MAR¬MD",	 [op: two, mo: U]],      ["MAR¬MDu",	 [op: two, mo: U]],      ["Map¬", 	 	 [op: two, mo: map]],      ["MDR¬",		 []],      ["Abus¬", 	 []],      ["Bbus¬",		 []],      ["ALU¬", 		 []],      ["Rbus¬",	 	[]],          --macros valid as right hand sides of eqns (only during op = 2)         ["ib.high",	 [op: two, om: value]],      ["ib.low",	 [op: two, om: value]],      ["MD",		 [op: zero, sp2: uSource]],      ["MD",		 [op: one, sp2: uSource]],      ["MDu",		 [op: zero, sp2: uSource]],      ["MDu",		 [op: one, sp2: uSource]],      ["MDv",		 [op: zero, sp2: vSource]],      ["MDv",		 [op: one, sp2: vSource]],      -- misc gets      ["ib¬MD",		 [op: two, ib: uReg]],      ["ib¬MDu",	 [op: two, ib: uReg]],      ["ib¬MDv",	 [op: two, ib: vReg]],          -- misc macros      ["ClrIB",		 [op: two, ib: clear]],      ["PopIB",		 [op: zero, sp2: popIB]],      ["PopIB",	 	 [op: one, sp2: popIB]],      ["PopIB",		 [op: two, ib: pop]],      ["EOPTrapRq",	 [op: zero, sp2: eopTrapRq]],      ["EOPTrapRq",	 [op: one, sp2: eopTrapRq]],      ["ClrMInt",	 [op: zero, sp2: clrMInt]],      ["ClrMInt",	 [op: one, sp2: clrMInt]],      ["IncCIP",	 [sp1: incCIP]],      ["DIncCIP",	 [sp1: dincCIP]],      ["OffsetAdder",	 [op: two]],      ["EXTRACT",	 [op: one, rA: arg1, rB: arg2, shift: value]],      ["Noop",		 [op: zero]],      ["Noop",		 [op: two]],      ["c1",		 [cycle: c1]],      ["c2",		 [cycle: c2]],      ["c3",		 [cycle: c3]],      ["c4",		 [cycle: c4]],           -- pCall and pRet      ["pCall0", 	 [sp1: link0]],      ["pCall1",	 [sp1: link1]],      ["pCall2",	 [sp1: link2]],      ["pCall3",	 [sp1: link3]],      ["pRet0",		 [dspB: L0Disp]],      ["L0Disp",	 [dspB: L0Disp]],      ["pRet1",	 	 [dspB: L1Disp]],      ["L1Disp",	 [dspB: L1Disp]],      ["pRet2",	 	 [dspB: L2Disp]],      ["L2Disp",	 [dspB: L2Disp]],      ["pRet3",	 	 [dspB: L3Disp]],      ["L3Disp",	 [dspB: L3Disp]],          -- Mem ops      ["Read",		 [op: two, mo: read, it: f]],      ["DoubleRead",	 [op: two, mo: doubleRead, it: f]],      ["Write",	 	 [op: two, mo: write, it: t]],      ["DoubleWrite",	 [op: two, mo: doubleWrite, it: t]],    -- carry       ["Cin¬1",	 [op: one, ci: one]],      ["Cin¬1",	 [op: three, ci: one]],      ["Cin¬0",	 [op: one, ci: zero]],      ["Cin¬0",	 [op: three, ci: zero]],           -- pop and push      ["push",		 [op: zero, rA: arg1]],      ["push",		 [op: zero, rA: arg2]],      ["push",		 [op: one, rA: arg1]],      ["push",		 [op: one, rA: arg2]],      ["push",		 [op: three, rA: arg1]],      ["push",		 [op: three, rA: arg2]],      ["pop",		 [op: zero, rA: arg1]],      ["pop",		 [op: zero, rA: arg2]],      ["pop",		 [op: one, rA: arg1]],      ["pop",		 [op: one, rA: arg2]],      ["pop",		 [op: three, rA: arg1]],      ["pop",		 [op: three, rA: arg2]],               -- dispatches and branches      ["ADisp",	 	 [dspB: aDisp]],      ["ALUDisp",	 [dspB: aluDisp]],      ["PCDisp",	 [dspB: pcDisp]],      ["ZeroBr",	 [dspB: zeroBr]],      ["BDisp",	 	 [dspB: bDisp]],      ["RDisp",		 [dspB: rDisp]],      ["MIntDisp",	 [dspB: mintDisp]],      ["AHiDisp",	 [dspB: aHighDisp]],      ["ReadOKBr",	 [dspB: readOKBr]],      ["WriteOKBr",	 [dspB: writeOKBr]],      ["IBDisp",	 [dspB: ibDisp]],      ["AlwaysIBDisp",  [op: two, it: t, dspB: alwaysIBDisp]],            ["unused", 	 []],      ["unused",  	 []],      ["unused",  	 []],      ["unused", 	 []]];    FOR i: CARDINAL IN [0..linkSize) DO      AddMTEntry[@macroTable[i], ElementRec[link[i]], SIZE[link ElementRec]];      ENDLOOP;          FOR i: CARDINAL IN [linkSize..macroArrowSize) DO      AddMTEntry[@macroTable[i], ElementRec[macroArrow[i]], SIZE[macroArrow ElementRec]];                ENDLOOP;          FOR i: CARDINAL IN [macroArrowSize..macroRHSSize) DO      AddMTEntry[@macroTable[i], ElementRec[macroRHS[i]], SIZE[macroRHS ElementRec]];                ENDLOOP;    FOR i: CARDINAL IN [macroArrowSize..macroTableSize) DO      AddMTEntry[@macroTable[i], ElementRec[macro[i]], SIZE[macro ElementRec]];      ENDLOOP;    END;  --end of procedure InitMacroTables  END...----Log of last edits:--JAC   	 5-Nov-84 14:21:19	fixed arrows for Mesa 11.1--JAC   	17-Dec-84 16:02:52	macroTable strings from global frame instead of local--JAC   	19-Dec-84 11:21:49	make Noop available in cycle 2