-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. --Last edit by JAC          5-Nov-84 14:30:48DIRECTORY  Exec USING [CheckForAbort],  String USING [AppendLongNumber,AppendString],  System USING [GetGreenwichMeanTime],  DsyAssembler,  DsyControl USING [assemblerDirective, BeginTime, errorsInThisFile, execHandle, FinishTime, statement, TtyLine, UserAbort],    DsyFile USING [OpenNextDf, OpenNextMc],  DsyLabel USING [BuildEarlyBinary, CheckDfnForLabels, ClearHashTable, EndOfStatementProc, InitLTHeap, McFileEndProc, ReleaseLTSpace],  DsyModule USING [BreakPhraseMain, CheckSourceLine, InterpretMain];DsyPass1Impl: PROGRAM  IMPORTS Exec, String, System, DsyAssembler, DsyControl, DsyFile, DsyLabel, DsyModule EXPORTS DsyModule  =  BEGIN OPEN DsyAssembler, DsyLabel, DsyModule;  Pass1: PUBLIC PROC[] =    BEGIN    Flags: Flagword;    str: LONG STRING ¬ [30];        TotalTime: LONG CARDINAL;            CreateStmtSegment;    InitLTHeap[16,8];    UNTIL DsyFile.OpenNextDf[] DO  -- for each .dfn file            str.length ¬ 0;                        DO  -- for each statement        IF Exec.CheckForAbort[DsyControl.execHandle] THEN          ERROR DsyControl.UserAbort;                DsyControl.statement ¬ Statement[];        DO  -- for each phrase          Flags ¬ BreakPhraseMain[NIL];          IF NOT Flags.Error THEN InterpretMain[Flags];          IF Flags.Semi OR Flags.Eof THEN EXIT;          ENDLOOP;  -- end for each phrase        IF Flags.Eof THEN EXIT;	CheckSourceLine[];	FreeStmtSpace;        ENDLOOP;  -- end each statement       DsyControl.FinishTime ¬ System.GetGreenwichMeanTime[];      TotalTime ¬ DsyControl.FinishTime - DsyControl.BeginTime;      String.AppendLongNumber[str,TotalTime,10];      String.AppendString[str," second(s)"L];      IF DsyControl.errorsInThisFile THEN         String.AppendString[str, "     Errors ..."];      DsyControl.TtyLine[str];      CheckDfnForLabels[];           ENDLOOP;  -- end each .dfn file            UNTIL DsyFile.OpenNextMc[] DO  -- for each .mc file      ClearHashTable;                  str.length ¬ 0;                  DO  -- for each statement        IF Exec.CheckForAbort[DsyControl.execHandle] THEN          ERROR DsyControl.UserAbort;                DsyControl.statement ¬ Statement[];	DsyControl.assemblerDirective ¬ 0;        DO  -- for each phrase          Flags ¬ BreakPhraseMain[NIL];          IF NOT Flags.Error THEN InterpretMain[Flags];          IF Flags.Semi OR Flags.Eof THEN EXIT;          ENDLOOP;  -- end for each phrase  	IF DsyControl.statement.firstPhrase # NIL THEN {                ProcessStatement[];          FreeStmtSpace}	ELSE IF NOT (Flags.Eof OR DsyControl.assemblerDirective > 0) THEN {	  BuildEarlyBinary[DsyControl.statement.encoding];	  EndOfStatementProc[]}	ELSE IF DsyControl.assemblerDirective > 0 THEN CheckSourceLine[];        IF Flags.Eof THEN EXIT;        ENDLOOP;  -- end each statement      McFileEndProc[];      DsyControl.FinishTime ¬ System.GetGreenwichMeanTime[];      TotalTime ¬ DsyControl.FinishTime - DsyControl.BeginTime;      String.AppendLongNumber[str,TotalTime,10];      String.AppendString[str," second(s)"L];      IF DsyControl.errorsInThisFile THEN         String.AppendString[str, "     Errors ..."];      DsyControl.TtyLine[str];      ENDLOOP;  -- end each .mc file    ReleaseLTSpace;            DeleteStmtSegment;    END;  -- of procedure Pass1       ProcessStatement: PUBLIC PROC =    BEGIN    -- Create Encoding records for each Phrase in the statement.    IF EncodeStatement[@DsyControl.statement] THEN {      -- Phrases were successfully encoded.      -- Merge the Encoding records for the statement into a single       -- encoding record. This encoding record is allocated by Merge,       -- and it is pointed to by statement.encoding.      IF ~MergeStatementEncoding[@DsyControl.statement] THEN         -- Merge was not  successful.        PrintStatementErrorMsgs[@DsyControl.statement];              }  -- of Phrases were successfully encoded.    ELSE   -- Phrases were not successfully encoded.      PrintStatementErrorMsgs[@DsyControl.statement];    BuildEarlyBinary[DsyControl.statement.encoding];    EndOfStatementProc[];        END;  -- of ProcessStatement proc  END...  --Log of last edit:--JAC   	23-Aug-84 15:05:02	since assemblerDirective is now an INTEGER the check is for > 0.--JAC   	 5-Nov-84 14:31:06	fixed arrows for Mesa 11.1