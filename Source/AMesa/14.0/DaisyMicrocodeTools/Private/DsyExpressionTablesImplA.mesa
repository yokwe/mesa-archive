-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- Last edit by JAC     29-Nov-84 18:26:00DIRECTORY  DsyAssembler,  DsyModule;DsyExpressionTablesImplA: PROGRAM EXPORTS DsyModule =   BEGIN OPEN DsyAssembler;    -- operation = x  patternOpx: PUBLIC ARRAY [0..17) OF ExpressionPattern;  -- operation = or  patternOpor: PUBLIC ARRAY [0..14) OF ExpressionPattern;  -- operation = Nor  patternOpNor: PUBLIC ARRAY [0..14) OF ExpressionPattern;  -- operation = and  patternOpand: PUBLIC ARRAY [0..14) OF ExpressionPattern;  -- operation = Nand  patternOpNand: PUBLIC ARRAY [0..14) OF ExpressionPattern;  -- operation = xor  patternOpxor: PUBLIC ARRAY [0..14) OF ExpressionPattern;  -- operation = Nxor  patternOpNxor: PUBLIC ARRAY [0..14) OF ExpressionPattern;   InitGlobalExpTablesA: PUBLIC PROCEDURE =     BEGIN  -- operation = x  patternOpx ¬ [    --encodes BBus ¬     [[bBus, zero], [op: zero, rB: arg1, alu: x]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: x]],    [[bBus, zero], [op: one, rB: arg1, alu: x]],    -- encodes ABus¬, MAR¬, Map¬    [[aBus, zero], [op: zero, rA: arg1, alu: x]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: x]],     [[aBus, zero], [op: two, mo: A, aAdr: value, aiu: value, ail: value, ac: value, om: value]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: x]],  --kludge    [[aBus, zero], [op: one, rA: arg1, alu: x]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: x]],  --kludge    [[aBus, zero], [op: three, rA: arg1, alu: x]],    [[zero, zero], [op: zero, rA: arg1]],    [[zero, zero], [op: zero, rB: arg1]],    [[zero, zero], [op: one, rA: arg1]],    [[zero, zero], [op: one, rB: arg1]],    [[zero, zero], [op: three, rA: arg1]],    [[zero, zero], [op: three, imu: value, iml: value, hiByte: value]],    [[zero, zero], [op: two, mo: A, aAdr: value]]];  -- operation = Nor  patternOpNor ¬ [    [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNorB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNorB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNorB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNorB]],    --encodes bBusSource NOR 0    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aNorB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNorB]],    --encodes 0 NOR aBusSource    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNorB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNorB]],    --encodes aBusSource NOR 0    [[aBus, zero], [op: zero, rA: arg1, rB: arg2, alu: aNorB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNorB]],    --encodes 0 NOR bBusSource    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNorB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNorB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aNorB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNorB]]];    --operation = Or    patternOpor ¬ [      [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aOrB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aOrB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aOrB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aOrB]],    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aOrB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aOrB]],    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aOrB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aOrB]],    [[aBus, zero], [op: zero, rA: arg1, rB: arg2, alu: aOrB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aOrB]],    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aOrB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aOrB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aOrB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aOrB]]];  -- operation = and  patternOpand ¬ [    [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aAndB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aAndB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aAndB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aAndB]],    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aAndB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aAndB]],    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aAndB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aAndB]],    [[aBus, zero], [op: zero, rA: arg1, rB: arg2, alu: aAndB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aAndB]],    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aAndB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aAndB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aAndB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aAndB]]];  -- operation = Nand  patternOpNand ¬ [    [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNandB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNandB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNandB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNandB]],    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aNandB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNandB]],    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNandB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNandB]],    [[aBus, zero], [op: zero, rA: arg1, rB: arg2, alu: aNandB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNandB]],    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNandB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNandB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aNandB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNandB]]];  -- operation = xor  patternOpxor ¬ [    [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aXorB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aXorB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aXorB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aXorB]],    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aXorB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aXorB]],    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aXorB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aXorB]],    [[aBus, zero], [op: zero, rA: arg1, rB: arg2, alu: aXorB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aXorB]],    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aXorB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aXorB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aXorB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aXorB]]];  -- operation = Nxor  patternOpNxor ¬ [    [[bBus, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNxorB]],    [[bBus, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNxorB]],     [[aBus, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNxorB]],     [[aBus, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNxorB]],    [[bBus, zero], [op: zero, rB: arg1, rA: arg2, alu: aNxorB]],    [[bBus, zero], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNxorB]],    [[zero, aBus], [op: three, imu: value, iml: value, hiByte: value, rA: arg2, alu: aNxorB]],    [[zero, aBus], [op: zero, rB: arg1, rA: arg2, alu: aNxorB]],    [[aBus, zero], [op: zero, rA: arg1,  rB: arg2, alu: aNxorB]],    [[aBus, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNxorB]],    [[zero, bBus], [op: zero, rA: arg1, rB: arg2, alu: aNxorB]],    [[zero, bBus], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNxorB]],    [[zero, zero], [op: zero, rA: arg1, rB: arg2, alu: aNxorB]],    [[zero, zero], [op: three, rA: arg1, imu: value, iml: value, hiByte: value, alu: aNxorB]]];    END;  --  of Procedure InitGlobalExpTables  END...--Log of last edits:--JAC   	 5-Nov-84 14:18:29	fixed arrows for Mesa 11.1--JAC   	29-Nov-84 18:26:14	assign both operands of a nor when they are zero