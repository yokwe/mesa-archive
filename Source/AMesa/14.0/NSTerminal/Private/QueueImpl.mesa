-- QueueImpl.mesa-- Copyright (C) 1984 by Xerox Corporation. All rights reserved.DIRECTORY  Heap,  Queue,  Process;QueueImpl: MONITOR  IMPORTS Heap, Process EXPORTS Queue = {  zone: UNCOUNTED ZONE = Heap.systemZone;  wait: CONDITION;  Handle: PUBLIC TYPE = LONG POINTER TO QueueHandle;  QueueHandle: TYPE =  LONG POINTER TO QueueObject;  QueueObject: TYPE = MACHINE DEPENDENT RECORD[    next(0): QueueHandle ¬ NIL,    buffer(2): LONG POINTER];        Create: PUBLIC PROC RETURNS [q: Handle] = {q ¬ zone.NEW[QueueHandle ¬ NIL]};    PutToQueue: PUBLIC ENTRY PROC [q: Handle, lp: LONG POINTER] = {    i: LONG POINTER TO QueueHandle _ NIL;    buf: QueueHandle ¬ zone.NEW[QueueObject ¬ [next: NIL, buffer: lp]];    FOR i _ q, @i.next UNTIL i^ = NIL DO ENDLOOP;    i^ _ buf;    BROADCAST wait;    };  GetFromQueue: PUBLIC ENTRY PROC[q: Handle] RETURNS [lp: LONG POINTER ¬ NIL] = {    ENABLE UNWIND => NULL;    WHILE q­ = NIL DO WAIT wait ENDLOOP;    lp ¬ RealGet[q];    };      RealGet: INTERNAL PROC[q: Handle] RETURNS [lp: LONG POINTER ¬ NIL] = {    ENABLE UNWIND => NULL;    buf: QueueHandle _ q­;    IF buf # NIL THEN {      q­ _ buf.next;      lp ¬ buf.buffer;      zone.FREE[@buf]};    };      Destroy: PUBLIC ENTRY PROC[q: Handle] = {    lp: LONG POINTER ¬ NIL;    FOR lp ¬ RealGet[q], RealGet[q] UNTIL lp = NIL DO zone.FREE[@lp] ENDLOOP;    zone.FREE[q];    };      Init: PROC = {    Process.EnableAborts[@wait];    Process.DisableTimeout[@wait];    };    Init[];  }.