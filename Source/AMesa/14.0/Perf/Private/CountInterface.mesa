-- Copyright (C) 1982, 1983, 1984  by Xerox Corporation. All rights reserved. -- CountInterface.mesa, edited by -- JGS    	13-Jan-82 15:48:56-- AXD    	 3-Feb-83 14:16:01-- DXG    	29-May-84 13:44:28DIRECTORY  CountDefs: TYPE USING [    CmdIndex, EnumerateNotify, ParamNotify, SortClass],  CountPrivate: TYPE USING [Mode],  FormSW: TYPE USING [    AllocateItemDescriptor, ClientItemsProcType, CommandItem, Enumerated,    EnumeratedItem, ItemHandle, line0, line1, line2, line3, StringItem],  PerfCommonOps: TYPE USING [],  Runtime: TYPE USING [GetBcdTime],  String: TYPE USING [AppendString],  Time: TYPE USING [Append, Unpack],  Tool: TYPE USING [Create, MakeFileSW, MakeFormSW, MakeMsgSW, UnusedLogName],  ToolWindow: TYPE USING [TransitionProcType],  Version: TYPE USING [Append],  Window: TYPE USING [Handle],  WindowFont: TYPE USING [CharWidth];CountInterface: PROGRAM  IMPORTS CountDefs, FormSW, Runtime, String, Time, Tool, Version, WindowFont  EXPORTS CountDefs, PerfCommonOps =    PUBLIC  BEGIN OPEN CountDefs;  window: Window.Handle ¬ NIL;  msgSW: Window.Handle ¬ NIL;  cmdSW: Window.Handle ¬ NIL;  logSW: Window.Handle ¬ NIL;  herald: LONG STRING ¬ [60];  MakeSWs: PROCEDURE [window: Window.Handle] = {    log: STRING = [50];    Tool.UnusedLogName[unused: log, root: "Count.log"L];    msgSW ¬ Tool.MakeMsgSW[window];    cmdSW ¬ Tool.MakeFormSW[window: window, formProc: MakeForm];    logSW ¬ Tool.MakeFileSW[window: window, name: log]};  Init: PROCEDURE = {    title: STRING = "Xfer Counter "L;    String.AppendString[to: herald, from: title];    Version.Append[herald];    String.AppendString[to: herald, from: " of "L];    Time.Append[herald, Time.Unpack[Runtime.GetBcdTime[]]];    herald.length ¬ herald.length - 3;    window ¬ Tool.Create[      makeSWsProc: MakeSWs, name: herald, clientTransition: TransitionProc,      cmSection: "CountTool"L]};  TransitionProc: ToolWindow.TransitionProcType = {    SELECT TRUE FROM old = inactive => msgSW ¬ cmdSW ¬ logSW ¬ NIL; ENDCASE};  monitorOn: BOOLEAN ¬ FALSE;  module: LONG STRING ¬ NIL;  process: LONG STRING ¬ NIL;  sortClass: SortClass ¬ count;  mode: CountPrivate.Mode ¬ plain;  -- 0         1         2         3         4         5         6         7  -- 01234567890123456789012345678901234567890123456789012345678901234567890  -- Monitor: {off, on}    Zero Tables!        Condition Breaks!  -- Print Tables!         Print Sorted!       Sort by: {count, time}  -- Print Module! Module:                  Set Process! Process:  -- Mode: {plain, matrix}     Load Matrix!    Show Group!  MakeForm: FormSW.ClientItemsProcType = {    OPEN FormSW;    w: NAT = WindowFont.CharWidth['0];    sortClassEnumRec: ARRAY SortClass OF Enumerated ¬ [      [string: "count"L, value: SortClass[count]], [      string: "time"L, value: SortClass[time]]];    monitorEnumRec: ARRAY BOOLEAN OF Enumerated ¬ [      [string: "off"L, value: FALSE], [string: "on"L, value: TRUE]];    modeEnumRec: ARRAY CountPrivate.Mode OF Enumerated ¬ [      [string: "plain"L, value: CountPrivate.Mode[plain]], [      string: "matrix"L, value: CountPrivate.Mode[matrix]]];    nParams: CARDINAL = CmdIndex.groups.ORD + 1;    params: LONG DESCRIPTOR FOR ARRAY CmdIndex OF FormSW.ItemHandle =       LOOPHOLE[AllocateItemDescriptor[nParams]];    params[mon] ¬ EnumeratedItem[      tag: "Monitor"L, place: [0*w, line0], feedback: all,      choices: DESCRIPTOR[monitorEnumRec.BASE, monitorEnumRec.LENGTH],      proc: EnumerateNotify, value: @monitorOn];    params[zero] ¬ CommandItem[      tag: "Zero Tables"L, place: [22*w, line0], proc: ParamNotify];    params[condition] ¬ CommandItem[      tag: "Condition Breaks"L, place: [42*w, line0], proc: ParamNotify];    params[printtables] ¬ CommandItem[      tag: "Print Tables"L, place: [0*w, line1], proc: ParamNotify];    params[printsorted] ¬ CommandItem[      tag: "Print Sorted"L, place: [22*w, line1], proc: ParamNotify];    params[sort] ¬ EnumeratedItem[      tag: "Sort by"L, place: [42*w, line1], feedback: all,      choices: DESCRIPTOR[sortClassEnumRec.BASE, sortClassEnumRec.LENGTH],      proc: EnumerateNotify, value: @sortClass];    params[printmodule] ¬ CommandItem[      tag: "Print Module"L, place: [0*w, line2], proc: ParamNotify];    params[modulePos] ¬ StringItem[      tag: "Module"L, place: [14*w, line2], string: @module, drawBox: TRUE,      inHeap: TRUE];    params[setProcess] ¬ CommandItem[      tag: "Set Process"L, place: [39*w, line2], proc: ParamNotify];    params[processPos] ¬ StringItem[      tag: "Process"L, place: [52*w, line2], string: @process, drawBox: TRUE,      inHeap: TRUE];    params[modePos] ¬ EnumeratedItem[      tag: "Mode"L, place: [0*w, line3], feedback: all,      choices: DESCRIPTOR[modeEnumRec.BASE, modeEnumRec.LENGTH],      proc: EnumerateNotify, value: @mode];    params[loadmatrix] ¬ CommandItem[      tag: "Load Matrix"L, place: [26*w, line3], proc: ParamNotify];    params[groups] ¬ CommandItem[      tag: "Show Group"L, place: [42*w, line3], proc: ParamNotify];    RETURN[LOOPHOLE[params], TRUE]};  Init[];  END.