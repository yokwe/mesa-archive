-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- IOPKernelOps.mesa, HGM,  5-Oct-83  0:06:00DIRECTORY  Environment USING [Block, Byte],  IOPKernel USING [State];IOPKernelOps: DEFINITIONS =  BEGIN    lock: MONITORLOCK;  InitializeLock: PROCEDURE;    BootInternal: PROCEDURE;  StopInternal: PROCEDURE;  GetBootSeqInternal: PROCEDURE RETURNS [CARDINAL];  GetStateInternal: PROCEDURE RETURNS [IOPKernel.State];  ProbeForStateChangeInternal: PROCEDURE;  WriteCommandInternal: PROCEDURE [Command];  WriteByteInternal: PROCEDURE [Environment.Byte];  WriteWordInternal: PROCEDURE [WORD];  WriteBlockInternal: PROCEDURE [Environment.Block];    ReadByteInternal: PROCEDURE RETURNS [Environment.Byte];  ReadWordInternal: PROCEDURE RETURNS [WORD];    IOPRetransmit: PROCEDURE [Environment.Byte];  NeedForCPToRetransmit: PROCEDURE RETURNS [BOOLEAN];  GetCPData: PROCEDURE RETURNS [Environment.Byte];  --IOP commands, numbers in parentheses indicate number of bytes in argument  Command: TYPE = MACHINE DEPENDENT {    memoryWrite(1),  --LSB[addr], MSB[addr], count(1), BYTE    memoryRead(2),  --LSB[addr], MSB[addr], count, returns[BYTE]    iopStart(3),  --returns[haltCode(1)]    interrupt(4),  --returns[haltCode(1)]    getConfig(5),  --returns[EndOfProm, @Ram, EndOfRam, @Stack, @SaveArea, @BreakpointArea]    writeCS(6),  --LSB[addr], MSB[addr], MI(6)    readCS(7),  --LSB[addr], MSB[addr], returns[MI(6)]    writeTPC(8),  --addr(1), data(2)    readTPC(9),  --addr(1), returns[data(2)]    writePort(10),  --data(1)    readPort(11),  --returns[data(1)]    startKernel(12),  --NULL starts CP Kernel    haltCP(13),  --NULL    startCP(14),  --NULL    sendCPBlock(15),  --LSB[count], MSB[count], BYTE(count)    --data intended for CP Kernel    iopColdStart(16),  --returns[AtKernelStart(1)]    getCPBlock(17),  --LSB[count], MSB[count], returns[BYTE(count)]    pollIOP(18),  --returns[BYTE]    cpColdStart(19),  --resets CP/IOP port rather than restores    dataForCP(20),  --LSB[count], MSB[count], BYTE(count)    --data intended for Mesa emulator/IOP    (0FFH) };        Response: TYPE = MACHINE DEPENDENT {    diagnosticsFailed(0F8H),    dataForBurdock(0F9H), -- code, LSB[count], MSB[count], BYTE(2*count)    errorStop(0FAH),    debugStop(0FBH), --Interrupt Acknowledge    cpBreak(0FCH),    iopBreak(0FDH),    atKernelStart(0FEH),    iopGreeting(0FFH)    };      END.