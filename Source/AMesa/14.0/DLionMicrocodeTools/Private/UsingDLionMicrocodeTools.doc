-- Copyright (C) 1982  by Xerox Corporation. All rights reserved.                       Using DLion Microcode Tools    Filed on [Idun]<MicrocodeToolsDLion>Public>UsingDLionMicrocodeTools.docThis document assumes the reader is familiar with the Alto based microcode tools environment.The following tools are currently available on [Idun]<MicrocodeToolsDLion>Public>:  -  Mass.bcd  -  MakeDLionMicroBoot.bcd  -  MakeDLionCpr.bcd  -  I8085AssemblerDLion.bcd  -  I8085BinderDLion.bcdThey are all Exec-type tools and can be invoked via .cm files. They are currently suitable for alpha-testing. Although they have not had sufficient testing of their ability to handle erroneous input, their ability to generate results identical to or equivalent to Alto-based microcode tools(when using released WDlion input files) has been extensively tested. (Exception: I8085AssemblerDLion generates .am and .fm files that were thought, until recently, to be Alto-Burdock compatible but aren't).[Idun]<MicrocodeToolsDLion>Public> also contains many .cm files for using these tools.I. Fetching the tools:Executing [Idun]<MicrocodeToolsDLion>Public>FetchDLionMicrocodeTools.cm fetches the tool .bcd files and the .cm files. It does NOT fetch the WDLion microcode files as there are separate .cm files for fetching the various kinds of microcode.II. Using Mass:1. What Mass does: Mass is used to produce .fb, .st and .ft files from .df and .mc files. 2. Currently available .cm files: [Idun]<MicrocodeToolsDLion>Public> has .cm files for creating all six versions of mesa microcode. These are fetched along with the tool .bcd files by FetchDLionMicrocodeTools.cm. - FetchDLionUCode.cm fetches(from WDLion) the .df and .mc files   needed to generate all six versions of mesa microcode. - Asm.cm executes MagTapeMesa.cm, Mesa.cm, RavenMesa.cm, TridentMagTapeMesa.cm,   TridentMesa.cm and TridentRavenMesa.cm producing .fb and .st files for all   six versions of mesa. Of course, they can be executed individually also.   Currently [Idun]<MicrocodeToolsDLion>Public> does not have command files for generating Initial microcode. One would have to write them or modify WDLion's Alto-based .cm files. Also one would have to add the files needed to FetchDLionUCode.cm. Also there are no command files for saving the results as yet.3. How to invoke Mass: Currently Trinity-Mass command line syntax is similar to Alto's version. It uses switches to indicate file types. Only two changes are necessary to convert from Alto to Trinity: - Trinity-Mass uses the cascade token interface which does not handle constructs    such as /t/a . They must be combined as /ta or separated as /t /a . - Trinity-Mass currently handles the setting of Config via the c switch. Thus,   constructs such as [Config, 5] are replaced with 5/c . Example command line:   Mass TridentMesa/o dandelion/d Mesa/d BBSubs BBInit BBLoops Block CommonSubs   Jump LoadStore Misc Process Read Refill Stack StringField Write Xfer StartMesa   EtherDLion Display Lsep56 IOPMain TridentDLion 2/cta It may be desirable to change this syntax to be more like that used in Trinity MakeDLionMicroBoot below.III. Using MakeDLionMicroBoot:1. What MakeDLionMicroBoot does: MakeDLionMicroBoot reads a wide varity of input files and generates either a .db file or a .bin file. Currently the only use of .bin files generated by MakeDLionMicroBoot is for PROM blowing. The .db file is used for disk, ethernet and floppy booting and for the PIL microcode. .dbs incorporate both CP and IOP oriented input files as the booting and functional system involves both processors.2. Currently available .cm files: [Idun]<MicrocodeToolsDLion>Public> has .cm files for creating .db files for all six versions of mesa microcode. These are fetched along with the tool .bcd files by FetchDLionMicrocodeTools.cm. - FetchDLionUCode.cm fetches(from WDLion) Domino.bin(and other things see Mass   above) which along with the .fb files generated by Mass produces .db files. - Boot.cm executes MagTapeBoot.cm, MesaBoot.cm, RavenBoot.cm, TridentBoot.cm,   TridentMagTapeBoot.cm and TridentRavenBoot.cm producing .db files for all   six versions of mesa. Of course, they can be executed individually also.      Currently [Idun]<MicrocodeToolsDLion>Public> does not have command files for generating Initial microcode. One would have to write them or modify WDLion's Alto-based .cm files. Also there are no command files for saving the results as yet. 3. How to invoke MakeDLionMicroBoot: MakeDLionMicroBoot is an exec-type tool. It is used by presenting a command line to the Executive. Command line syntax:       MakeDLionMicroBoot OutputFile(.ext) _ InputFileList              where: InputFileList is a sequence of InputFile(.ext)              IF the output extension is elided, it is assumed to be .db               IF an input extension is elided, it is assumed to be .fb 4. Allowed inputs: MakeDLionMicroBoot accepts .fb, .bin, .cpr, .uReg and .db files as inputs. If any of the input files are .db then all must be.5. Output modes: MakeDLionMicroBoot generates .db or .bin files as specified or implied by the output extension. Additionally, if all it's inputs are .db files, it generates a special kind of .db file whose first page comprises a set of "pointers" to the set of .dbs.6. Switches: MakeDLionMicroBoot accepts two switches. One for output files and one for .bin input files.  OutputFile/s  Start CP. (/~s Inhibit Start CP). Default is Start CP.       OutputFile.bin/h  where h is a hex number indicating the IOP start address.      Default is 20000B.     Note: Currently only default available.          Examples:          MakeDLionMicroBoot SAx000Initial.db _ DiskBootIOCBs.cpr SAx000Initial.fb InitialProtected.fb          MakeDLionMicroBoot Phase0.bin _ BootKernel.fb Phase0Protected.fb Phase0.fb DiskBoot.uReg          MakeDLionMicroBoot Mesa _ Mesa Domino.bin           IV. Using MakeDLionCpr 1. What it does: MakeDLionCpr is a little special purpose assembler that allows one to generate a page of data as a .cpr file. .cpr files can be combined with other files as part of a .db file or or they can be loaded by burdock. The principle current use of MakeDLionCpr is the generation of initial IOCBs used in TridentInitial.db and SAx000Initial.db.        2. How to invoke MakeDLionCpr: MakeDLionCpr is an exec-type tool. It is used by presenting a command line to the Executive. Command line syntax:       MakeDLionCpr OutputFile(.cpr) _ InputFile(.ext)              where InputFile is a bravo or plain text file.               If the InputFile extension is elided, .bravo is assumed.       3. The language MakeDLionCpr assembles: It is primarily straight hex. There is a limited provision for "symbolic" addresses. Details to be supplied soon.        V. Using 8085 AssembleBinder Tools The present 8085 Assembler and Binder on [Idun]<MicrocodeToolsDLion> is an interim version for AlphaTest. It is a Trinitization of PXO     's Rubicon version with a fix to allow the use of Alto Burdoc. Later versions will have more robust Cascade interfaces.In the description below the word type means: type into the executive window. However, since the Exec treats the right pointing arrow key(at the top left of the keyboard) in a manner similar to the Alto Execs use of ESC, you don't have to type exec commands fully.1. Installing the DLion 8085 Assembler and Binder tools.     Retrieve [Idun]<MicrocodeToolsDLion>InstallABDLion.cm     Type:  @InstallABDLion              InstallABDLion.cm first "Unloads" your current 8085 Assem & Binder. This       is necessary prior to fetching the current Assem & Binder as FTP can       not access "loaded" files. If they aren't currently "Loaded"(e.g. on first       use), the following messages appear in the Exec window:                "Could not find command i8085AssemblerDLion"	       "Could not find command i8085BinderDLion" (but it's ok).               InstallABDLion then fetches and Runs i8085AssemblerDLion.bcd &       i8085BinderDLion.bcd. The explicit Run is a work-around for a Cascade bug.	       It also fetches a set of .cm files for assemembling and binding Domino.	2. Assemembling and Binding Domino(Section 3 below describes general use).  The end product of this process is Domino.bin and Domino.fm plus the .bin,   .am, .sym and .lst files for the component modules. For now these are taken   to an alto environment to complete the integration and for Burdocking.2.1 Fetch Domino files by typing: @GetDominoDLion  This obtains the needed Domino .cfg, .asm, .bin and .am files from WDLion   via a ret/ua.2.2 Access and modify and modify any files you wish to change.2.3 Assembling  To assemble all Domino modules type: @AsmDomino    To assemble a particular module type: I8085AssemblerDLion moduleName   2.4 Binding    Type: @BindDomino  2.5 Saving    To save Domino.bin, Domino.fm and all the individual .bin and .am files on   WDLion - Type: @SaveDominoDLion  3.0 General use of 8085 AssemblerBinder DLion.  After installing the Assembler and Binder as described in step 1 above,    To assemble a module type: I8085AssemblerDLion moduleName    To bind type: I8085BinderDLion cfgName    or build your own .cm files consisting of such components.  		            