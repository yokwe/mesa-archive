-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- File: I8085Asm.mesa-- Last edit JAC 	16-May-85 17:50:22DIRECTORY  AssInputDefs USING [ReInit],  CodeOutputDefs USING [ReInit],  CommandDefs USING [Assem8085, AsmErr, FileNotFound, ReInit],  Exec USING [AddCommand, CheckForAbort, ExecProc, FreeTokenString, GetToken, OutputProc],  ExpressionDefs USING [ReInit],  Format USING [Char, Decimal, LongNumber, StringProc, Text],  Heap USING [Create, Delete],  ListOutputDefs USING [ReInit],  MStream USING [GetLength, Handle, Log, SetLogReadLength],  PrivateStorage USING [],  Runtime USING [CallDebugger],  Stream USING [Delete, PutString],  SymbolTableDefs USING [PrimeTables, ClearSymbolTable, NoOpsFile],  SymTabIODefs USING [ReInit],  System USING [CreateIntervalTimer, GetIntervalTime, Microseconds, TimerHandle];I8085Asm: PROGRAM  IMPORTS    AssInputDefs, CodeOutputDefs, CommandDefs, Exec, ExpressionDefs, Format, Heap,     ListOutputDefs, MStream, Runtime, Stream, SymTabIODefs, SymbolTableDefs, System  EXPORTS PrivateStorage =  BEGIN  heapPointer: PUBLIC UNCOUNTED ZONE;  initialized: BOOLEAN ¬ FALSE;  logHandle: MStream.Handle ¬ NIL;  trouble: BOOLEAN = FALSE;  AsmDriver: Exec.ExecProc =    BEGIN    name, switches: LONG STRING ¬ NIL;    elapsedTime, tempTime: System.Microseconds;    timerHandle: System.TimerHandle;        DisplayElapsedTime: PROCEDURE = {      zeroFillSeconds: BOOLEAN ¬ FALSE;      Format.Text[Write, "  Time: "L];      elapsedTime ¬ System.GetIntervalTime[t: timerHandle];      tempTime ¬ elapsedTime/60000000;      IF tempTime > 0 THEN         BEGIN	  Format.LongNumber[proc: Write, n: tempTime, format: [base: 10, unsigned: TRUE, zerofill: FALSE, columns: 0]];	  elapsedTime ¬ elapsedTime - (tempTime * 60000000);	  Format.Text[Write, ":"];	  zeroFillSeconds ¬ TRUE;	END;       tempTime ¬ elapsedTime/1000000;      Format.LongNumber[proc: Write, n: tempTime, format: [base: 10, unsigned: TRUE, zerofill: zeroFillSeconds, columns: 2]];      elapsedTime ¬ elapsedTime - (tempTime * 1000000);      tempTime ¬ elapsedTime/1000;      Format.Text[Write,"."L];      Format.LongNumber[proc: Write, n: tempTime, format: [base: 10, unsigned: TRUE, zerofill: TRUE, columns: 3]];      Format.Text[Write, "\n"]};          Write: Format.StringProc = {      Stream.PutString[sH: logHandle, string: s];      Exec.OutputProc[h][s]};    logHandle ¬ MStream.Log[name: "Asm8085.log"L, release: [NIL, NIL]];    IF NOT initialized THEN {      Initialize[! SymbolTableDefs.NoOpsFile =>         {Format.Text[Write, "Assembly Failed - Couldn't locate 8085Asm.ops.\n"L];	GOTO quit}];       IF NOT initialized THEN RETURN};    IF trouble THEN Runtime.CallDebugger["Trouble?"L];        DO      timerHandle ¬ System.CreateIntervalTimer[];      IF Exec.CheckForAbort[h: h] THEN         {Stream.Delete[logHandle];	logHandle ¬ NIL; 	RETURN[outcome: abort]};      [name, switches] ¬ Exec.GetToken[h];      IF name = NIL AND switches = NIL THEN EXIT;      IF name = NIL THEN LOOP;      heapPointer ¬ Heap.Create[initial: 1];      Format.Text[Write, "File: "L];      Format.Text[Write, name];      Format.Text[Write, "... "L];       BEGIN        CommandDefs.Assem8085[          name !          CommandDefs.AsmErr =>            BEGIN	      Format.Text[Write, "Assembly Failed - "L];	      Format.Decimal[Write, ErrCt];	      Format.Text[Write, " error"L];	      IF ErrCt > 1 THEN Format.Char[Write, 's];	      Format.Text[Write, " detected."L];	      DisplayElapsedTime[];              GOTO Failed;            END;          CommandDefs.FileNotFound =>            BEGIN	      Format.Text[Write, "File Error - "L];              Format.Text[Write, fname];              Format.Text[Write, " not found."L];	      DisplayElapsedTime[];              GOTO Failed;            END];        Format.Text[Write, "Successful Assembly."L];	DisplayElapsedTime[];        EXITS Failed => outcome ¬ error;      END;      Heap.Delete[z: heapPointer--, checkEmpty: TRUE--];      heapPointer ¬ NIL;      AssInputDefs.ReInit[];      CodeOutputDefs.ReInit[];      ExpressionDefs.ReInit[];      ListOutputDefs.ReInit[];      SymTabIODefs.ReInit[];      CommandDefs.ReInit[];      name ¬ Exec.FreeTokenString[name];      switches ¬ Exec.FreeTokenString[switches];      MStream.SetLogReadLength[stream: logHandle, position: MStream.GetLength[stream: logHandle]];      SymbolTableDefs.ClearSymbolTable[! SymbolTableDefs.NoOpsFile => GOTO quit];      ENDLOOP;      Stream.Delete[logHandle];      logHandle ¬ NIL;      EXITS         quit => {Stream.Delete[logHandle];		  logHandle ¬ NIL;		  outcome ¬ error};    END;    Initialize: PROCEDURE =    BEGIN    heapPointer ¬ NIL;    SymbolTableDefs.PrimeTables[];    initialized ¬ TRUE;    END;  Init: PROC = {Exec.AddCommand[name: "Asm8085.~"L, proc: AsmDriver]};  Init[];  END...  -- LOG  -- ETN      - 12-Apr-82  9:59:49 - Convert to Trinity  -- ETN  	- 29-Sep-82 12:55:29 - Changed name to Asm8085.  -- DEG     	- 12-Jan-83 20:24:55 - Converted to Sierra  -- DEG     	- 31-Jan-83  6:34:51 - Replaced TTY calls with Format & return error when assembly fails.  -- DEG     	- 29-May-83 20:45:24 - Catch SymbolTableDefs.NoOpsFile and check for the stop key being pressed at least once per source file.  Add timing information.  -- Time: 26-Sep-84 23:10:02	By: DEG     	Action: Added copyright notice and rebuild for 11.1 release.  -- JAC     	- 16-May-85 17:50:49 - commented out 'checkEmpty ¬ TRUE' inHeap.Delete of AsmDriver since 12.0 now implements and nodes haven't been returned