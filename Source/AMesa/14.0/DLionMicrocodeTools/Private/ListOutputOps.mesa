-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- ListOutputOps.mesa-- Last edited by DEG      26-Sep-84 23:12:46    See Log at endDIRECTORY  AssInputDefs USING [CurrentChar, NextChar],  CodeOutputDefs USING [CodePut, GetPC, ModifyPC],  Heap USING [systemZone],  ListingStreamDefs USING [WriteString, WriteLine, WriteChar],  ListOutputDefs USING [],  PrivateStringDefs USING [AppendHexNumber],  Stream USING [Handle, PutString],  String USING [AppendChar, AppendString, AppendSubString, SubString, SubStringDescriptor];ListOutputOps: PROGRAM  IMPORTS    AssInputDefs, CodeOutputDefs, Heap, ListingStreamDefs, PrivateStringDefs,    Stream, String  EXPORTS ListOutputDefs =  BEGIN  PAGETHROW: CHARACTER = '\F;  line: LONG STRING;  list: BOOLEAN;  ErrorPending: BOOLEAN;  ErrorMessage: LONG STRING;  ErrorCt: CARDINAL;  TurnOffListing: PUBLIC PROCEDURE RETURNS [BOOLEAN] =    BEGIN l: BOOLEAN ¬ list; list ¬ FALSE; RETURN[l]; END;  TurnOnListing: PUBLIC PROCEDURE RETURNS [BOOLEAN] =    BEGIN l: BOOLEAN ¬ list; list ¬ TRUE; RETURN[l]; END;  ResetListing: PUBLIC PROCEDURE [b: BOOLEAN] RETURNS [BOOLEAN] =    BEGIN    saveb: BOOLEAN ¬ list;    list ¬ b;    RETURN[saveb];    END;  WriteToListing: PUBLIC PROCEDURE [s: LONG STRING] =    BEGIN    IF s.length = 1 AND s[0] = '\N AND line.length = 0 THEN BEGIN IF list THEN ListingStreamDefs.WriteChar[c: '\N] END ELSE      BEGIN      tabs: STRING = "		"L; -- two TAB's      ssd: String.SubStringDescriptor ¬ [base: tabs, offset: 0, length: ];      ss: String.SubString = @ssd;      IF line.length IN [0..15] THEN        BEGIN        ssd.length ¬ 2 - (line.length / 8); -- 8 spaces per TAB        String.AppendSubString[to: line, from: ss];        END;      String.AppendString[line, s];      IF list THEN ListingStreamDefs.WriteString[line];      END;    s.length ¬ line.length ¬ 0;    IF ErrorPending THEN      BEGIN      String.AppendString[line, "**** ERROR **** - "L];      String.AppendString[line, ErrorMessage];      ListingStreamDefs.WriteLine[line];      ErrorPending ¬ FALSE;      line.length ¬ 0;      END;    END;  PutString: PUBLIC PROCEDURE [s: Stream.Handle, str: LONG STRING] =    BEGIN    Stream.PutString[sH: s, string: str, endRecord: FALSE];    END;  PutPC: PUBLIC PROCEDURE =    BEGIN    IF line.length # 0 THEN      BEGIN      String.AppendChar[line, '\N];      IF list THEN ListingStreamDefs.WriteString[line];      line.length ¬ 0;      END;    PrivateStringDefs.AppendHexNumber[line, CodeOutputDefs.GetPC[], 4];    String.AppendString[line, "  "L];    END;  PutCode: PUBLIC PROCEDURE [b: CARDINAL] =    BEGIN    CodeOutputDefs.CodePut[b, 1];    PrivateStringDefs.AppendHexNumber[line, CodeOutputDefs.GetPC[], 4];    String.AppendString[line, "  "L];    PrivateStringDefs.AppendHexNumber[line, b, 2];    CodeOutputDefs.ModifyPC[1];    END;  PutArg: PUBLIC PROCEDURE [b: CARDINAL] =    BEGIN    CodeOutputDefs.CodePut[b, 1];    String.AppendString[line, "  "L];    PrivateStringDefs.AppendHexNumber[line, b, 2];    CodeOutputDefs.ModifyPC[1];    END;  PutArg2: PUBLIC PROCEDURE [w: CARDINAL] =    BEGIN    CodeOutputDefs.CodePut[w, 2];    String.AppendString[line, "  "L];    PrivateStringDefs.AppendHexNumber[line, w, 4];    CodeOutputDefs.ModifyPC[2];    END;  PutTitle: PUBLIC PROCEDURE [s: LONG STRING] =    BEGIN    ListingStreamDefs.WriteChar[PAGETHROW];    ListingStreamDefs.WriteLine[s];    END;  ReportError: PUBLIC PROCEDURE [code: CARDINAL] =    BEGIN    ErrorCt ¬ ErrorCt + 1;    list ¬ ErrorPending ¬ TRUE;    WHILE AssInputDefs.CurrentChar[] # '\N DO      [] ¬ AssInputDefs.NextChar[]; ENDLOOP;    ErrorMessage.length ¬ 0;    String.AppendString[      to: ErrorMessage,      from:      SELECT code FROM        0 => "Invalid Label Terminator"L,        1 => "Multiply Defined Symbol"L,        2 => "Invalid Operation Terminator"L,        3 => "Invalid Operation"L,        4 => "Invalid String"L,        5 => "Invalid Number"L,        6 => "Invalid Register Name"L,        7 => "Invalid Register Pair"L,        8 => "Adjacent Operands Not Allowed"L,        9 => "Invalid Operand"L,        10 => "Adjacent Operators Not Allowed"L,        11 => "Invalid Character In Expression"L,        12 => "Invalid Relocatable Expression"L,        13 => "Operator Required"L,        14 => "RST Operand too big"L,        15 => "Unable To Open 'Get' File"L,        16 => "Unmatched Parentheses in Expression"L,        17 => "Expression Stack Error"L,        18 => "Forward Reference Illegal in 'EQU' Statement"L,        19 => "Cannot Define Imported Symbol"L,        20 => "External Statement must be first mention of Symbol"L,        21 => "Symbol Already External"L,  -- not used        22 => "Imported Symbol not allowed in Expression"L,        23 => "No 'END' detected"L,        ENDCASE => "Unidentified Assembly Error"L];    END;  ReportUndefSymbol: PUBLIC PROCEDURE [s: LONG STRING] =    BEGIN    ErrorCt ¬ ErrorCt + 1;    ListingStreamDefs.WriteString["**** ERROR **** - Internal Symbol '"L];    ListingStreamDefs.WriteString[s];    ListingStreamDefs.WriteLine["' is Undefined"L];    END;  ErrorsDetected: PUBLIC PROCEDURE RETURNS [ec: CARDINAL] =    BEGIN ec ¬ ErrorCt; ErrorCt ¬ 0; RETURN; END;  ReInit: PUBLIC PROC = BEGIN list ¬ TRUE; ErrorPending ¬ FALSE; ErrorCt ¬ 0; END;  Init: PROCEDURE =    BEGIN    line ¬ Heap.systemZone.NEW[StringBody[200]];    list ¬ TRUE;    ErrorPending ¬ FALSE;    ErrorMessage ¬ Heap.systemZone.NEW[StringBody[80]];    ErrorCt ¬ 0;    END;  Init[];  END.-- LOG:-- ETN   - 7-Apr-82 18:29:33 - Convert to Trinity.-- ETN   - 7-Apr-82 18:29:33 - Sierra. Heap.systemZone.NEW => Storage.String-- Dennis DEG      - 30-May-83 15:55:54- Remove references to the Ascii interface.-- Time: 26-Sep-84 23:12:39	By: DEG     	Action: Added copyright notice and rebuild for 11.1 release.