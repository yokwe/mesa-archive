-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- CPKernel.mesa, HGM, 13-Nov-83  0:55:17DIRECTORY  CP USING [    Bank, Cycle, IOReg, Link, Map, OtherReg, RealCS, RealMemory, RReg,    UReg, VirturalMemory, Task],  CPMI USING [MI];CPKernel: DEFINITIONS =  BEGIN    Error: ERROR [reason: LONG STRING];    Nibble: TYPE = [0..0FH];  Byte: TYPE = [0..0FFH];    Machine: TYPE = {dlion, dicentra};  machine: Machine;    maxBreaks: CARDINAL;    State: TYPE = {dead, halted, running, cpBreak, iopStopped};    InKernel: PROCEDURE RETURNS [BOOLEAN];  GetState: PROCEDURE RETURNS [State];    ProbeForStateChange: PROCEDURE;  GetStateSeq: PROCEDURE RETURNS [CARDINAL];  GetBootSeq: PROCEDURE RETURNS [CARDINAL];      Boot: PROCEDURE;  LoadKernel: PROCEDURE;  LoadKernelHigh: PROCEDURE [CP.Bank];  StartKernel: PROCEDURE;  FindBanks: PROCEDURE RETURNS [CP.Bank];  ResetMap: PROCEDURE;  Reset: PROCEDURE;  HalfBoot: PROCEDURE;  Stop: PROCEDURE;  Continue: PROCEDURE;    SetBreak: PROCEDURE [pc: CP.RealCS, cycle: CP.Cycle, id: Byte];  AtBreak: PROCEDURE RETURNS [BOOLEAN];  GetBreakID: PROCEDURE RETURNS [CARDINAL];  ContinueAfterBreak: PROCEDURE [CPMI.MI, CP.Cycle, CP.Task];  ReadTpc: PROCEDURE [CP.Task] RETURNS [CP.RealCS];  WriteTpc: PROCEDURE [CP.Task, CP.RealCS];  ReadTc: PROCEDURE [CP.Task] RETURNS [Nibble];  WriteTc: PROCEDURE [CP.Task, Nibble];  ReadLink: PROCEDURE [CP.Link] RETURNS [Nibble];  WriteLink: PROCEDURE [CP.Link, Nibble];  ReadCS: PROCEDURE [CP.RealCS] RETURNS [data: CPMI.MI];  WriteCS: PROCEDURE [CP.RealCS, CPMI.MI];  WriteCSBad: PROCEDURE [CP.RealCS, CPMI.MI];  ReadBank: PROCEDURE RETURNS [CP.Bank];  WriteBank: PROCEDURE [CP.Bank];  ReadRReg: PROCEDURE [CP.RReg] RETURNS [WORD];  WriteRReg: PROCEDURE [CP.RReg, WORD];  ReadRH: PROCEDURE [CP.RReg] RETURNS [WORD];  WriteRH: PROCEDURE [CP.RReg, WORD];  ReadRAndRH: PROCEDURE [CP.RReg] RETURNS [LONG POINTER];  WriteRAndRH: PROCEDURE [CP.RReg, LONG POINTER];  ReadUReg: PROCEDURE [CP.UReg] RETURNS [WORD];  WriteUReg: PROCEDURE [CP.UReg, WORD];  ReadIOIn: PROCEDURE [CP.IOReg] RETURNS [WORD];  WriteIOOut: PROCEDURE [CP.IOReg, WORD];  ReadMap: PROCEDURE [CP.Map] RETURNS [WORD];  WriteMap: PROCEDURE [CP.Map, WORD];  ReadRealMemory: PROCEDURE [CP.RealMemory] RETURNS [WORD];  WriteRealMemory: PROCEDURE [CP.RealMemory, WORD];  ReadVirturalMemory: PROCEDURE [CP.VirturalMemory] RETURNS[WORD];  WriteVirturalMemory: PROCEDURE [CP.VirturalMemory, WORD];  ReadOther: PROCEDURE [CP.OtherReg] RETURNS [WORD];  WriteOther: PROCEDURE [CP.OtherReg, WORD];  ReadPC: PROCEDURE RETURNS [CARDINAL];  WritePC: PROCEDURE [CARDINAL];  OneMI: TYPE = RECORD [real: CP.RealCS, mi: CPMI.MI];  CSBlock: TYPE = ARRAY [0..0) OF OneMI;  WriteCSBlock: PROCEDURE [CARDINAL, LONG POINTER TO CSBlock];    WriteMemoryBlock: PROCEDURE [to: CP.RealMemory, count: CARDINAL, data: LONG POINTER];  WriteNextMemoryBlock: PROCEDURE [to: CP.RealMemory, count: CARDINAL, data: LONG POINTER];  END.