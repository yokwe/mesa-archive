-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. Burdock has 2 tool windows, one for the CP and the second for the IOP.  It should work correctly (and faster) with either window deactivated in case you are working on a problem that is localized to one half of the machine.----Getting started:If you don't like the default window locations, put a WindowBox entry in your user.cm.  I use the following:  [CP Panel]  WindowBox: [x: 0, y: 30, w: 512, h: 540]  [IOP Panel]  WindowBox: [x: 512, y: 30, w: 512, h: 540]The only file you need is BurdockDLion.bcd.----State:Critical to understanding how Burdock works is the concept of the "State" of the IOP and/or CP.  Each processor can be Dead, Running, Halted, At-A-Breakpoint,  or Stopped/broken-for-the-other-processor.  The IOP has another state of (freshly) Booted.  This lasts only until you store something into the PC.  Attempting to Continue a Dead or Booter IOP should get you an error message.  (The CP doesn't have the corresponding state since loading the Kernel sets the TPCs to something sensible.)There is a periodic notifier used to poll for state changes.  Any state changes prints a message on the log window.  If the state changed to At-A-Breakpoint or Halted, the panel is repainted.----Commands:Boot! boots that processor.  It also forgets all previous symbols and breakpoints and things like that.  Booting the CP also boots the IOP.  Booting the IOP will kill the CP.Load! loads (micro)code using the current selection as the filename.  It also loads new symbols.Start! sets the (T)PC to the current selection and then does a Continue!.  On the CP, the symbol evaluation also determines the task and cycle.  The cycle must be 1.Continue! starts the processor running.  Continuing the CP also continues the IOP automatically.  (This is necessary in case the IOP window is deactivated.)Stop! stops that processor if it is running, it should change state to Halted and the panel will be repainted.  The other panel should change state to Stopped/broken-for-the-other-processor, and NOT repaint the panel.  (The idea was to save time.  We can fix/change this if that works out to be better.)Run! starts running <file>.burdock.  <file> is the string in the "File:" parameter, or the current selection if File: is empty.  (Pitts' old description of command files is still pretty good, but anything having to do with the typein point had been flushed.)(CP)LoadNoSyms: is like Load!, but it doesn't bother to load the symbols.(CP)LoadReal: loads <selection>.cpr into real memory.  (I have only used this for loading a germ.  See bug notes below.)(CP)LoadBoot: loads <selection>.boot.  I have never used this.  It didn't crash when i tried it, but I'm not sure the map ended up right.Refresh! on a panel that it is Stopped/broken-for-the-other-processor will change the state to Halted (as if you had poked Stop on that pannel) and repaint the panel.What! will take the current selection, run it through the evaluater used by the LH of tiles, and then print out everything in hex, decimal, and octal.ListBreaks! and ClearAllBreaks! do the obvious things.Unbreak! removes the break at the current selection.  For the IOP, if the current selection is empty, the current breakpoint (if you are stopped for a break) is removed.Break! sets a break at the current selection.(IOP)Stack! displays the top ClumpSize words on the stack.(IOP)Instructions! Takes the current selection, and prints out ClumpSize instructions.----Panels:Note that there is a separate TypeIn for each panel.If the TypeIn is empty, the current selection is used.Mouse operations (possibly LeftShifted) work as in Alto Burdock.  (I think.)  Point (left mouse button) stores TypeIn into the blackened tile slot.  Adjust appends the current tile slot to TypeIn.  LeftShift+Point bumps the contents of the LH by +1.  LeftShift+Adjust bumps the contents of the LH by -1.  LeftShift+Point+Adjust (Menu) fills the column by adding +1 each step.----Builtin symbols:IOP registers: B, C, D, E, H, L, M, A, PCH, PCL, SPH, SPL, Flags, RIM.Register pairs: BC, DE, HL, SP, PSW, PC.If an expression (in the LH of a tile in the IOP panel) for an address in IOP memory begins with a $ the address will be displayed in word mode.  (The contents of register pairs are automatically displayed in word mode.)  A % displays an instruction.CP: .CR (control store real), .CV (control store virtural), .RH, .R, .U, .TPC, .TC, .LINK, .MAP, .MR (main memory real), .MV, .IOIN, .IOOUT, .Q, .IB, .PC16, .STACKP, .IBPTR, .MINT, .EKERR, .UI.----Bugs:It will probably crash if you get to a breakpoint in the wrong cycle.  (This hasn't happened to me yet.)Burdock automatically appends the "right" extension when it goes to read a file.  This is a pain for loading the germ because it wants PilotDLion.cpr rather than PilotDLion.germRM.   You will have to edit your Germ.burdock and/or rename/copy your PilotDLion.germRM.Occasionally a tile goes into hyperspace.  The symptom is that the RH is blank, and doesn't get fixed up on repaint.  To recover the screen area, delete that tile (store empty into the LH) and start over again.----See also Burdock.restrictions.