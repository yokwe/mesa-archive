// LoadingExtrabanks.doc, HGM, 27-Apr-83 18:00:11The Bank_ function is FYNorm 0D.  (Beware the DLion hardware manual lists it as FZ 04.  The change allows FZ to specify a constant.)  The Bank register is loaded from the Y bus.Mass doesn't yet provide much help for programmers who need to get to another bank.  You have to assemble each bank of microcode separately, and specify the transfer locations by hand.If you want to get to another bank, you need to write code like the following:In Mumble.df:	Set[LandingSpot, nnnn];In the microcode used to build the first bank:	xxx, Bank _ n,			c1;	xxx,				c2;	xxx, GOTOABS[LandingSpot],	c3;	In the microcode used to build the other bank:	xxx,				c1, at [LandingSpot];Yes, there is an extra stage of pipeline delay beyond what you would expect.  (It's not in the Dicentra.)The Bank_ needs to be in c1 to avoid confusion in case an IO task runs while bank switching.  (Actually, you could switch banks on a different cycle if you will are willing to replicate a few instructions in both banks and force them to have the same locations.)Currently, the only way to get code into the second bank is with a DLion Burdock command file.  Try something like:Boot[];SetBank[0];Load[IOStuff];SetBank[1];LoadMore[Emulator];....Internally, Burdock uses 16bit CS addresses.  Since Mass only generates 12 bit addresses, Burdock puts the bank number saved by the Setbank command into the appropiate high order bits when loading microcode and inserting symbols into it's symbol table.  When you Start (or store into a TPC), Burdock will automatically switche banks if necessary.Remember, only the emulator can run outside bank 0.	