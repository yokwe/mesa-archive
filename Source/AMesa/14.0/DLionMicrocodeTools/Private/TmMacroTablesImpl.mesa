-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- File: TmMacroTablesImpl.mesa.-- DEG     , 26-Sep-84 20:49:15 -- HGM, 23-Jan-83 20:59:08, Add DES, move Bank¬ -- Last edit: ETN    16-Jul-82 13:29:09DIRECTORY  Heap USING [MakeNode],  String USING [AppendString, WordsForString],  TmModule USING [InsertM, MTtempHeap],  TmAssembler;TmMacroTablesImpl: PROGRAM   IMPORTS Heap, String, TmModule   EXPORTS TmAssembler, TmModule =  BEGIN OPEN TmAssembler;  -- KEY TO SYMBOLS:  -- a1 	argument 1 of the expression for rA, rB  --       the macro value for aD, fX, fY, fZ  -- a2	argument 2 of the expression  -- t	TRUE (1)  -- f	FALSE (0)  -- A	(in field aD) means put A on the YBus  -- s	(in fX field) means shift  -- c	(in fX or fY field) means cycle  -- r	(in RHref field) means RH is read  -- w	(in RHref field) means RH is written  -- norm	(in fS01  field) means fYnorm  -- norm	(in fS2, fS3  field) means fZnorm  -- Disp	(in fS01  field) means fYDispBr  -- IOut	(in fS01  field) means fYIOOut  -- c1	(in cy field) means cycle 1  -- c2	(in cy field) means cycle 2  -- c3	(in cy field) means cycle 3  -- cX	(in cy field) means any cycle  -- In the following table, if a macro has more than one encoding, they will follow each other sequentially.  A macroIndex always indexes the first occurance of the macro.  By looking at macroTable[index+1], it will thus be possible to see if there is another encoding for a given macro.  macroTable: PUBLIC LONG POINTER TO ARRAY [0..macroTableSize) OF MacroPattern;  InitGlobalMacroTables: PUBLIC PROCEDURE =     BEGIN    macroTable ¬      Heap.MakeNode[TmModule.MTtempHeap, macroTableSize*SIZE[MacroPattern]];    InitIOXIn[];    InitMacroTables[];    END;  --  of Procedure InitGlobalMacroTables  AddIOEntry: PROC [str: LONG STRING, er: ElementRec] = {    s: LONG STRING;    erptr: LONG POINTER TO ElementRec ¬ Heap.MakeNode[TmModule.MTtempHeap,      SIZE[IOXIn ElementRec] + SIZE[MEntry] + String.WordsForString[str.length]];    mptr: MEntryPtr;    erptr­ ¬ er;    mptr ¬ LOOPHOLE[erptr + SIZE[IOXIn ElementRec]];    s ¬ LOOPHOLE[mptr + SIZE[MEntry]];    s­ ¬ StringBody[maxlength: str.length, length: 0, text:];    String.AppendString[s, str];    mptr­ ¬ MEntry[s, erptr, NIL];    [] ¬ TmModule.InsertM[mptr]};  --end AddIOEntry  AddMTEntry: PROC [    mp: LONG POINTER TO MacroPattern, er: ElementRec, erSize: CARDINAL] = {    s: LONG STRING;    erptr: LONG POINTER TO ElementRec ¬ Heap.MakeNode[TmModule.MTtempHeap,      erSize + SIZE[MEntry] + String.WordsForString[mp.macro.name.length]];    mptr: MEntryPtr;    erptr­ ¬ er;    mptr ¬ LOOPHOLE[erptr + erSize];    s ¬ LOOPHOLE[mptr + SIZE[MEntry]];    s­ ¬ StringBody[maxlength: mp.macro.name.length, length: 0, text:];    String.AppendString[s, mp.macro.name];    mptr­ ¬ MEntry[s, erptr, NIL];    mp.macro.name ¬ s;    [] ¬ TmModule.InsertM[mptr]};  --end AddMTEntry  InitIOXIn: PROC = {    AddIOEntry["EIData"L, ElementRec[IOXIn[0, z]]];    AddIOEntry["EStatus"L, ElementRec[IOXIn[1, z]]];    AddIOEntry["KIData"L, ElementRec[IOXIn[2, z]]];    AddIOEntry["KStatus"L, ElementRec[IOXIn[3, z]]];    AddIOEntry["MStatus"L, ElementRec[IOXIn[5, z]]];    AddIOEntry["KTest"L, ElementRec[IOXIn[6, z]]];    AddIOEntry["IOPIData"L, ElementRec[IOXIn[8, z]]];    AddIOEntry["IOPStatus"L, ElementRec[IOXIn[9, z]]];    AddIOEntry["ErrnIBnStkp"L, ElementRec[IOXIn[10, z]]];    AddIOEntry["RH"L, ElementRec[IOXIn[11, z]]];    AddIOEntry["ibNA"L, ElementRec[IOXIn[12, z]]];    AddIOEntry["ib"L, ElementRec[IOXIn[13, z]]];    AddIOEntry["ibLow"L, ElementRec[IOXIn[14, z]]];    AddIOEntry["ibHigh"L, ElementRec[IOXIn[15, z]]];    AddIOEntry["TStatus"L, ElementRec[IOXIn[11, y]]];    AddIOEntry["DESSP"L, ElementRec[IOXIn[14, y]]];  -- %%%%%%%%%%%%    AddIOEntry["TIData"L, ElementRec[IOXIn[14, y]]]; };  -- end InitIOXIn  InitMacroTables: PROC = {    macroTable­ ¬ [      [["LRot0"L,	12], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot4"L,	15], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot8"L,	14], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],      [["LRot12"L,	13], [fS2: norm, fS3: norm, fZ: a1, xOut: t, yIn: t]],    -- LRotSize def'd at 4      [["L0¬"L,		 0], [fX: a1, ia7: f]],      [["L1¬"L,		 1], [fX: a1, ia7: f]],      [["L2¬"L,		 2], [fX: a1, ia7: f]],      [["L3¬"L,		 3], [fX: a1, ia7: f]],      [["L4¬"L,		 4], [fX: a1, ia7: f]],      [["L5¬"L,		 5], [fX: a1, ia7: f]],      [["L6¬"L,		 6], [fX: a1, ia7: f]],      [["L7¬"L,		 7], [fX: a1, ia7: f]],          -- LinkGetsSize def'd at 12          -- Apass def'd at 12      [["Apass"L,	 0], [rA: a2, aD: A, yOut: t]],          -- PC16 def'd at 13      [["Cin¬pc16"L,	12], [fX: a1]],      [["Cin¬pc16"L,	 3], [fS2: norm, fS3: norm, cin: t, fZ: a1]],          -- pCall and pRet      [["pCall0"L,	 0], [fX: a1, ia7: f]],      [["pCall1"L,	 1], [fX: a1, ia7: f]],      [["pCall2"L,	 2], [fX: a1, ia7: f]],      [["pCall3"L,	 3], [fX: a1, ia7: f]],      [["pCall4"L,	 4], [fX: a1, ia7: f]],      [["pCall5"L,	 5], [fX: a1, ia7: f]],      [["pCall6"L,	 6], [fX: a1, ia7: f]],      [["pCall7"L,	 7], [fX: a1, ia7: f]],      [["pRet0"L,	 0], [fX: a1, ia7: t]],      [["L0Disp"L,	 0], [fX: a1, ia7: t]],      [["pRet1"L,	 1], [fX: a1, ia7: t]],      [["L1Disp"L,	 1], [fX: a1, ia7: t]],      [["pRet2"L,	 2], [fX: a1, ia7: t]],      [["L2Disp"L,	 2], [fX: a1, ia7: t]],      [["pRet3"L,	 3], [fX: a1, ia7: t]],      [["L3Disp"L,	 3], [fX: a1, ia7: t]],      [["pRet4"L,	 4], [fX: a1, ia7: t]],      [["L4Disp"L,	 4], [fX: a1, ia7: t]],      [["pRet5"L,	 5], [fX: a1, ia7: t]],      [["L5Disp"L,	 5], [fX: a1, ia7: t]],      [["pRet6"L,	 6], [fX: a1, ia7: t]],      [["L6Disp"L,	 6], [fX: a1, ia7: t]],      [["pRet7"L,	 7], [fX: a1, ia7: t]],      [["L7Disp"L,	 7], [fX: a1, ia7: t]],          -- Mem ops      [["MAR¬"L,	 0], [mem: t, cy: c1, RHref: r, yIn: t, yl: t]],      [["Map¬"L,	13], [fX: a1, cy: c1, RHref: r, yIn: t, yl: t]],      [["Map¬"L,	 9], [fS01: norm, fY: a1, cy: c1, RHref: r, yIn: t, yl: t]],      [["Refresh"L,	 0], [fS2: norm, fS3: norm, fZ: a1, cy: c1]],      [["Refresh"L,	 0], [fS2: norm, fS3: norm, fZ: a1, cy: cX]],      [["Refresh"L,	10], [fS01: norm, fY: a1, cy: c1]],      [["Refresh"L,	10], [fS01: norm, fY: a1, cy: cX]],      [["MDR¬"L,	 0], [mem: t, cy: c2, yIn: t, yl: t]],      -- misc gets      [["Q¬"L,     	 0], [aD: a1, aluIn: t, yIn: t, yl: t]],      [["STK¬"L,	 0], [cin: t, enSU: t, wU: t, fS2: stkP, yIn: t, yl: t]],      [["Xbus¬"L,	 0], [xIn: t, xl: t]],      [["Ybus¬"L,	 0], [yIn: t, yl: t]],      -- shifts and cycles      [["DLShift1"L,	 6], [aD: a1, fX: c, aluIn: t, yl: t]],      [["DLShift1"L,	 6], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["DRShift1"L,	 4], [aD: a1, fX: c, aluIn: t, yl: t]],      [["DRShift1"L,	 4], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["DALShift1"L,	 6], [aD: a1, fX: s, aluIn: t, yl: t]],      [["DARShift1"L,	 4], [aD: a1, fX: s, aluIn: t, yl: t]],      [["LShift1"L,	 7], [aD: a1, fX: s, aluIn: t, yl: t]],      [["RShift1"L,	 5], [aD: a1, fX: s, aluIn: t, yl: t]],      [["RRot1"L,	 5], [aD: a1, fX: c, aluIn: t, yl: t]],      [["RRot1"L,	 5], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      [["LRot1"L,	 7], [aD: a1, fX: c, aluIn: t, yl: t]],      [["LRot1"L,	 7], [aD: a1, fS01: norm, fY: c, aluIn: t, yl: t]],      -- carry and shift-ends      [["Cin¬1"L,	 0], [cin: t]],      [["Cin¬0"L,	 0], [cin: f]],      [["SE¬1"L,	 0], [cin: t]],      [["SE¬0"L,	 0], [cin: f]],      -- fX    -- fX 0-7 are pCall and pRet    -- fX 8 is Noop    -- fX 9 is RH¬    -- fX 10 is shift    -- fX 11 is cycle      [["SE¬pc16"L,	12], [fX: a1]],      [["SE¬pc16"L,	 3], [fS2: norm, fS3: norm, cin: t, fZ: a1]],      [["fXCin¬pc16"L,	12], [fX: a1]],          -- fX 13 is MapRef      [["fXpop"L,	14], [fX: a1]],      [["pop"L,		14], [fX: a1]],      [["pop"L,	 	 5], [fS2: norm, fS3: norm, fZ: a1]],      [["push"L,	15], [fX: a1]],      [["push"L,	 6], [fS2: norm, fS3: norm, fZ: a1]],      [["push"L,	11], [fS01: norm, fY: a1]],          -- fYnorm      [["ExitKernel"L,	 0], [fS01: norm, fY: a1]],      [["EnterKernel"L,	 1], [fS01: norm, fY: a1]],      [["ClrIntErr"L,	 2], [fS01: norm, fY: a1]],      [["IBDisp"L,	 3], [fS01: norm, fY: a1, cy: c2]],      [["MesaIntRq"L,	 4], [fS01: norm, fY: a1]],      [["stackP¬"L,	 5], [fS01: norm, fY: a1, yIn: t, yl: t]],      [["IB¬"L,     	 6], [fS01: norm, fY: a1, xIn: t, xl: t]],          --fY = 7 is cycle    --fY = 8 is Noop    --fY = 9 is Map¬    -- fY 10 is Refresh    -- fY 11 is push      [["TAddr¬"L,	12], [fS01: norm, fY: a1, xIn: t, xl: t]],      [["ClrDPRq"L,	12], [fS01: norm, fY: a1]],      [["Bank¬"L,	13], [fS01: norm, fY: a1, yIn: t, yl: t]],      [["ClrIOPRq"L,	13], [fS01: norm, fY: a1]],      [["ClrRefRq"L,	14], [fS01: norm, fY: a1]],      [["ClrKFlags"L,	15], [fS01: norm, fY: a1]],      -- fYDispBr      [["NegBr"L,	 0], [fS01: Disp, fY: a1, aluIn: t]],      [["ZeroBr"L,	 1], [fS01: Disp, fY: a1, aluIn: t]],      [["NZeroBr"L,	 2], [fS01: Disp, fY: a1, yIn: t]],      [["MesaIntBr"L,	 3], [fS01: Disp, fY: a1]],      [["PgCarryBr"L,	 4], [fS01: Disp, fY: a1, aluIn: t]],      [["CarryBr"L,	 5], [fS01: Disp, fY: a1, aluIn: t]],      [["XRefBr"L,	 6], [fS01: Disp, fY: a1, xIn: t]],      [["NibCarryBr"L,	 7], [fS01: Disp, fY: a1, aluIn: t]],      [["XDisp"L,	 8], [fS01: Disp, fY: a1, xIn: t]],      [["YDisp"L,	 9], [fS01: Disp, fY: a1, yIn: t]],      [["XC2npcDisp"L,	10], [fS01: Disp, fY: a1]],      [["YIODisp"L,	11], [fS01: Disp, fY: a1]],      [["EtherDisp"L,	11], [fS01: Disp, fY: a1]],      [["XwdDisp"L,	12], [fS01: Disp, fY: a1, xIn: t]],      [["XHDisp"L,	13], [fS01: Disp, fY: a1, xIn: t]],      [["XLDisp"L,	14], [fS01: Disp, fY: a1, xIn: t]],      [["XDirtyDisp"L,	14], [fS01: Disp, fY: a1, xIn: t]],      [["PgCrOvDisp"L,	15], [fS01: Disp, fY: a1, aluIn: t]],      -- fYIOOut      [["IOPOData¬"L,	 0], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["IOPCtl¬"L,	 1], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["KOData¬"L,	 2], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["KCtl¬"L,	 3], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["EOData¬"L,	 4], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["EICtl¬"L,	 5], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["DCtlFifo¬"L,	 6], [fS01: IOut, fY: a1, yIn: t, yl: t]],      [["DCtl¬"L,	 7], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["DBorder¬"L,	 8], [fS01: IOut, fY: a1, yIn: t, yl: t]],      [["PCtl¬"L,	 9], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["TCtl¬"L,	 9], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["MCtl¬"L,	10], [fS01: IOut, fY: a1, yIn: t, yl: t]],      -- fY 11 is unused      [["EOCtl¬"L,	12], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["KCmd¬"L,	13], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- fY 14 is unused      [["POData¬"L,	15], [fS01: IOut, fY: a1, xIn: t, xl: t]],      [["TOData¬"L,	15], [fS01: IOut, fY: a1, xIn: t, xl: t]],      -- fZnorm      -- fZ 0 is Refresh      [["IBPtr¬1"L,	 1], [fS2: norm, fS3: norm, fZ: a1]],      [["IBPtr¬0"L,	 2], [fS2: norm, fS3: norm, fZ: a1]],      -- fZ 3 is Cin¬pc16      -- fZ 4 is unused      -- fZ 5 is pop and fZpop      [["fZpop"L,	 5], [fS2: norm, fS3: norm, fZ: a1]],      -- fZ 6 is push      [["AltUaddr"L,	 7], [fS2: norm, fS3: norm, fZ: a1, yIn: t, cy: c1]],      [["AltUaddr"L,	 7], [fS2: norm, fS3: norm, fZ: a1, yIn: t, cy: c2]],      -- fZ 8 is Noop      -- fZ 12-15 are LRots      -- fZIOXin      [["KStrobe"L,	 4], [fS2: IOIn, fS3: IOIn, fZ: a1]],      [["EStrobe"L,	 7], [fS2: IOIn, fS3: IOIn, fZ: a1]],      [["Noop"L,	 8], [fS01: norm, fS2: norm, fS3: norm, fX: a1, fY: a1, fZ: a1]],      [["DESCtl¬"L,	 9], [fS2: norm, fS3: norm, fZ: a1, yIn: t, yl: t, cy: c1]],      [["DESMP¬"L,	 9], [fS2: norm, fS3: norm, fZ: a1, yIn: t, yl: t, cy: c2]],      [["DESMP¬"L,	 9], [fS2: norm, fS3: norm, fZ: a1, yIn: t, yl: t, cy: c3]],      -- cycles      [["c1"L,   	 0], [cy: c1]],      [["c2"L,   	 0], [cy: c2]],      [["c3"L,   	 0], [cy: c3]],      [["c*"L,   	 0], [cy: cX]],      -- spares       [["spare"L,   	 0], []],     [["spare"L,   	 0], []],      [["spare"L,   	 0], []],      [["spare"L,   	 0], []],      [["spare"L,   	 0], []],      [["spare"L,   	 0], []],      [["unused"L,   	 0], []] ];      FOR i: CARDINAL IN [0..lrotSize) DO      AddMTEntry[@macroTable[i], ElementRec[LRot[i]], SIZE[LRot ElementRec]];      ENDLOOP;    FOR i: CARDINAL IN [lrotSize..linkSize) DO      AddMTEntry[@macroTable[i], ElementRec[link[i]], SIZE[link ElementRec]];      ENDLOOP;    FOR i: CARDINAL IN [linkSize..macroTableSize) DO      AddMTEntry[@macroTable[i], ElementRec[macro[i]], SIZE[macro ElementRec]];      ENDLOOP;    };  --end InitMacroTables  END...    -- Log  -- 16-Jul-82 13:30:02 - ETN        - TrinityMass Version 1  -- HGM, 23-Jan-83 20:59:08, Add DES, move Bank¬  -- Time: 26-Sep-84 20:49:06	By: DEG     	Action: Added copyright notice and rebuild for 11.1 release.