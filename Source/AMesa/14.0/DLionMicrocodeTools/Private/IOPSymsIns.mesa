-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- IOPSymsIns.mesa, HGM,  8-Nov-83 19:48:06DIRECTORY  Inline USING [BITAND],  String USING [AppendChar, AppendNumber, AppendString],    IOP USING [Instruction],  IOPSyms USING [AppendMemoryAddress];IOPSymsIns: PROGRAM  IMPORTS Inline, String, IOPSyms  EXPORTS IOPSyms =  BEGIN    AppendInstruction: PUBLIC PROCEDURE [s: LONG STRING, instruction: IOP.Instruction] =    BEGIN        One: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      END;          Dest: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      SELECT Inline.BITAND[instruction.operation, 70B] FROM        00B => String.AppendChar[s, 'B];        10B => String.AppendChar[s, 'C];        20B => String.AppendChar[s, 'D];        30B => String.AppendChar[s, 'E];        40B => String.AppendChar[s, 'H];        50B => String.AppendChar[s, 'L];        60B => String.AppendChar[s, 'M];        70B => String.AppendChar[s, 'A];        ENDCASE => ERROR;      END;          Source: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      SELECT Inline.BITAND[instruction.operation, 7B] FROM        0 => String.AppendChar[s, 'B];        1 => String.AppendChar[s, 'C];        2 => String.AppendChar[s, 'D];        3 => String.AppendChar[s, 'E];        4 => String.AppendChar[s, 'H];        5 => String.AppendChar[s, 'L];        6 => String.AppendChar[s, 'M];        7 => String.AppendChar[s, 'A];        ENDCASE => ERROR;      END;          Byte: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      String.AppendNumber[s, instruction.byte2, 16];      END;          Word: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      AppendAddressInfo[];      END;          AppendAddressInfo: PROCEDURE =      BEGIN      IOPSyms. AppendMemoryAddress[s, instruction.byte3 * 256 + instruction.byte2];      END;    Pair: PROCEDURE [arg: STRING] =      BEGIN      String.AppendString[s, arg];      SELECT Inline.BITAND[instruction.operation, 60B] FROM        00B => String.AppendString[s, "BC"L];        20B => String.AppendString[s, "DE"L];        40B => String.AppendString[s, "HL"L];        60B => String.AppendString[s, "SP"L];        ENDCASE => ERROR;      END;          Cond: PROCEDURE [arg: STRING, word: BOOLEAN] =      BEGIN      String.AppendString[s, arg];      SELECT Inline.BITAND[instruction.operation, 70B] FROM        00B => String.AppendString[s, "NZ"L];        10B => String.AppendString[s, "Z"L];        20B => String.AppendString[s, "NC"L];        30B => String.AppendString[s, "C"L];        40B => String.AppendString[s, "PO"L];        50B => String.AppendString[s, "PE"L];        60B => String.AppendString[s, "P"L];        70B => String.AppendString[s, "M"L];        ENDCASE => ERROR;      String.AppendChar[s, ' ];      IF word THEN AppendAddressInfo[];      END;          SELECT instruction.operation FROM  -- Sorted by occurrence in MCS-85 Users Guide      -- Data Transfer Group          100B, 101B, 102B, 103B, 104B, 105B, 107B => Source["MOV B,"L];      110B, 111B, 112B, 113B, 114B, 115B, 117B => Source["MOV C,"L];      120B, 121B, 122B, 123B, 124B, 125B, 127B => Source["MOV D,"L];      130B, 131B, 132B, 133B, 134B, 135B, 137B => Source["MOV E,"L];      140B, 141B, 142B, 143B, 144B, 145B, 147B => Source["MOV H,"L];      150B, 151B, 152B, 153B, 154B, 155B, 157B => Source["MOV L,"L];      170B, 171B, 172B, 173B, 174B, 175B, 177B => Source["MOV A,"L];            106B => One["MOV B,M"L];      116B => One["MOV C,M"L];      126B => One["MOV D,M"L];      136B => One["MOV E,M"L];      146B => One["MOV H,M"L];      156B => One["MOV L,M"L];      176B => One["MOV A,M"L];            160B, 161B, 162B, 163B, 164B, 165B, 167B => Source["MOV M,"L];            006B => Byte["MVI B,"L];      016B => Byte["MVI C,"L];      026B => Byte["MVI D,"L];      036B => Byte["MVI E,"L];      046B => Byte["MVI H,"L];      056B => Byte["MVI L,"L];      066B => Byte["MVI M,"L];      076B => Byte["MVI A,"L];            001B => Word["LXI BC,"L];      021B => Word["LXI DE,"L];      041B => Word["LXI HL,"L];      061B => Word["LXI SP,"L];            072B => Word["LDA "L];      062B => Word["STA "L];      052B => Word["LHLD "L];      042B => Word["SHLD "L];      012B, 032B => Pair["LDAX "L];      002B, 022B => Pair["STAX "L];      353B => One["XCHG"L];            -- Arithmetic Group            200B, 201B, 202B, 203B, 204B, 205B, 207B => Source["ADD "L];      206B => One["ADD M"L];      306B => Byte["ADI "L];            210B, 211B, 212B, 213B, 214B, 215B, 217B => Source["ADC "L];      216B => One["ADC M"L];      316B => Byte["ACI "L];      220B, 221B, 222B, 223B, 224B, 225B, 227B => Source["SUB "L];      226B => One["SUB M"L];      326B => Byte["SUI "L];            230B, 231B, 232B, 233B, 234B, 235B, 237B => Source["SBB "L];      236B => One["SBB M"L];      336B => Byte["SBI "L];       004B, 014B, 024B, 034B, 044B, 054B, 074B => Dest["INR "L];      064B => One["INR M"L];      005B, 015B, 025B, 035B, 045B, 055B, 075B => Dest["DCR "L];      065B => One["DCR M"L];      003B, 023B, 043B, 063B => Pair["INX "L];      013B, 033B, 053B, 073B => Pair["DCX "L];      011B, 031B, 051B, 071B => Pair["DAD "L];      047B => One["DAA"L];            -- Logical Group            240B, 241B, 242B, 243B, 244B, 245B, 247B => Source["ANA "L];      246B => One["ANA M"L];      346B => Byte["ANI "L];      250B, 251B, 252B, 253B, 254B, 255B, 257B => Source["XRA "L];      256B => One["XRA M"L];      356B => Byte["XRI "L];      260B, 261B, 262B, 263B, 264B, 265B, 267B => Source["ORA "L];      266B => One["ORA M"L];      366B => Byte["ORI "L];      270B, 271B, 272B, 273B, 274B, 275B, 277B => Source["CMP "L];      276B => One["CMP M"L];      376B => Byte["CPI "L];            007B => One["RLC"L];      017B => One["RRC"L];      027B => One["RAL"L];      037B => One["RAR"L];      057B => One["CMA"L];      077B => One["CMC"L];      067B => One["STC"L];            -- Branch Group      303B => Word["JMP "L];      302B, 312B, 322B, 332B, 342B, 352B, 362B, 372B => Cond["J"L, TRUE];            315B => Word["CALL "L];      304B, 314B, 324B, 334B, 344B, 354B, 364B, 374B => Cond["C"L, TRUE];            311B => One["RET"L];      300B, 310B, 320B, 330B, 340B, 350B, 360B, 370B => Cond["R"L, FALSE];            327B => One["BREAK"L];            307B, 317B, 337B, 347B, 357B, 367B, 377B =>        BEGIN	String.AppendString[s, "RST "L];	String.AppendNumber[s, Inline.BITAND[instruction.operation, 70B] / 10B, 10];	END;            351B => One["PCHL"L];            -- Stack, I/O, and Machine Control Group            305B, 325B, 345B => Pair["PUSH "L];      365B => One["PUSH PSW"L];            301B, 321B, 341B => Pair["POP "L];      361B => One["POP PSW"L];             343B => One["XTHL"L];      371B => One["SPHL"L];             333B => Byte["IN "L];      323B => Byte["OUT "L];            373B => One["EI"L];      363B => One["DI"L];            166B => One["HLT"L];            000B => One["NOP"L];            040B => One["RIM"L];      060B => One["SIM"L];            010B, 020B, 030B, 050B, 070B,      313B, 331B, 335B, 355B, 375B =>        BEGIN	String.AppendString[s, "??"L];	String.AppendNumber[s, instruction.operation, 16];	END;	      ENDCASE => ERROR;    END;       END.