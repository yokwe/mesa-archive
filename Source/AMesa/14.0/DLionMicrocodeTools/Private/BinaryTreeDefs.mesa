-- Copyright (C) 1981  by Xerox Corporation. All rights reserved. --  Binary Tree builder and searcher--  for use in Symbol Table handling--  last edited by CRS: August 14, 1979  3:59 PM--  last edited by PXO      on October 21, 1981  3:55 PM - Changed some procs to deal in longs.--  last edited by PXO      on October 8, 1981  8:29 PM - Added proc ReInit.-- Time: 26-Sep-84 22:56:01	By: DEG     	Action: Added copyright notice and rebuild for 11.1 release.BinaryTreeDefs: DEFINITIONS =  BEGIN  -- This module provides the necessary definitions for the construction  -- of a symbol table. The user is required to provide records of TYPE Item  -- where the STRING is to be the name by which the Item is known, and the  -- POINTER refers to the data (of any arbitrary type) to be associated   -- that name. The routines will build a binary tree sorted on the keys  -- of the Items supplied. The storage management for the nodes of the tree  -- is handled by this module's implementation, but the user is expected  -- to provide storage for the items themselves.  Item: PUBLIC TYPE = RECORD [key: LONG STRING, ptr: LONG POINTER];  Node: PUBLIC TYPE = RECORD [    data: LONG POINTER TO Item, left, right: LONG POINTER TO Node];  -- SIGNAL raised when an attempt is made to insert an item whose key   -- is already in the tree.  SymbolAlreadyDefined: PUBLIC SIGNAL [Ent: LONG POINTER TO Item];  -- SIGNAL raised when an attempt is made to redefine an item which is  -- not in the tree.  SymbolNotDefined: PUBLIC SIGNAL;  -- This procedure inserts a new item in the tree.  InsertItemInTree: PUBLIC PROCEDURE [LONG POINTER TO Item, LONG POINTER TO Node]    RETURNS [LONG POINTER TO Node];  -- Procedure to search for an item in the tree. The valu NIL is returned  -- if the item is not in the tree.  FindItemInTree: PUBLIC PROCEDURE [LONG STRING, LONG POINTER TO Node]    RETURNS [LONG POINTER TO Item];  -- This procedure will cause the procedure provided (the second parameter)  -- to be executed on each item in turn in key order.  DisplayTree: PUBLIC PROCEDURE [LONG POINTER TO Node, PROCEDURE [LONG POINTER TO Item]];  -- This procedure locates an item in the tree, and changes the data  -- associated with that item.  RedefineItemInTree: PUBLIC PROCEDURE [POINTER TO Item, POINTER TO Node]    RETURNS [LONG POINTER TO Item];  -- Procedure to initialize the tree and the the storage management  -- for the tree routines. Must be called before any Item may be inserted  -- Can also be used to begin a new tree.  InitializeTree: PUBLIC PROCEDURE RETURNS [POINTER TO Node];  -- This procedure destroys the tree, and returns any storage used by the tree  -- to the system.  DestroyTree: PUBLIC PROCEDURE [tree: LONG POINTER TO Node];  ReInit: PROC;  END.