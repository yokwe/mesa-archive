-- File: SppOps.mesa - last edit:-- AOF                  8-Jan-87 18:42:57-- SMA                 21-May-86 17:41:30-- Copyright (C) 1984, 1985, 1986, 1987 by Xerox Corporation. All rights reserved. DIRECTORY  NSBuffer USING [Buffer],  Environment USING [Byte],  FrameExtras USING [LongGFToGFTHandle],  NSTypes USING [ConnectionID, WaitTime],  PacketStream USING [ClassOfService, Handle],  PrincOpsExtras2 USING [ProcDesc],  SpecialRuntimeExtras USING [GlobalFrameFromProgram],  Stream USING [Handle],  System USING [NetworkAddress];SppOps: DEFINITIONS  IMPORTS FrameExtras, SpecialRuntimeExtras =  BEGIN  sppWindowSize: READONLY <<PacketStreamMgr>> CARDINAL[0..12];  BufferTable: TYPE = LONG POINTER TO BufferTableObject;  BufferTableObject: TYPE = RECORD [    index, length: CARDINAL, condition: CONDITION,    slot: ARRAY CARDINAL[0..16) OF NSBuffer.Buffer];    AttentionTableObject: TYPE = RECORD[    index, length: CARDINAL, condition: CONDITION,    slot: ARRAY CARDINAL[0..8) OF Attention];  nullAttention: Attention = [0B, 0B, 0B];  Attention: TYPE = RECORD[sequence: CARDINAL, mask, attn: Environment.Byte];  StartByteStreamProc: TYPE = PROC[    psH: PacketStream.Handle] RETURNS [Stream.Handle];  StopByteStreamProc: TYPE = PROC;  StartPacketStreamProc: TYPE = PROC[    local, remote: System.NetworkAddress,    localID, remoteID: NSTypes.ConnectionID,    timeout: NSTypes.WaitTime, class: PacketStream.ClassOfService,    establish: BOOLEAN] RETURNS [    PacketStream.Handle, System.NetworkAddress, NSTypes.ConnectionID];  StopPacketStreamProc: TYPE = PROC;  --USED TO HELP FIND LOST PROCESSES IN Process.End  PSProc: TYPE = PROC [] RETURNS [PROC];  PSProcess: TYPE = PROCESS [] RETURNS [PSProc];  --ACCESS TO INSTANCES  NthProc: PROC[zeroth: PrincOpsExtras2.ProcDesc, psi: PROGRAM]    RETURNS[PrincOpsExtras2.ProcDesc] = INLINE    BEGIN    zeroth.gfi ¬ FrameExtras.LongGFToGFTHandle[      SpecialRuntimeExtras.GlobalFrameFromProgram[psi]] + 3;    RETURN[zeroth];    END;  --NthProc  GlobalFrameFromByteStream: PROC[sH: Stream.Handle]    RETURNS[LONG POINTER --TO FRAME[NetworkStreamImpl]--];  GlobalFrameFromPacketStream: PROC[psH: PacketStream.Handle]    RETURNS[LONG POINTER --TO FRAME[NetworkStreamImpl]--];  PacketStreamFromByteStream: PROC[Stream.Handle]    RETURNS[PacketStream.Handle];  ByteStreamFromPacketStream: PROC[PacketStream.Handle]    RETURNS[Stream.Handle];  --MODIFYING STREAM INSTANCE BEHAVIOR  DisableChecksums: PROC[psH: PacketStream.Handle];  EnableChecksums: PROC[psH: PacketStream.Handle];  DisableProbes: PROC[psH: PacketStream.Handle];  EnableProbes: PROC[psH: PacketStream.Handle];  SetWindow: PROC[window: CARDINAL[0..12]];  --SOME POPULAR PROCEDURES (MUST FABRICATE INSTANCE USING NthProc)    RcvdErrorPacket: PROCEDURE [b: NSBuffer.Buffer];  RcvdSppPacket: PROC [b: NSBuffer.Buffer];  SendSystemPacket: PROC [sendAck: BOOLEAN];  StopByteStream: StopByteStreamProc;  StartByteStream: StartByteStreamProc;  StopPacketStream: StopPacketStreamProc;  StartPacketStream: StartPacketStreamProc;  --SPYING    <<  This SPY PROC permits a client to register itself to be notified whenever a  new SPP connection is created or destroyed.  When the client registers a  spy proc, it will be returned the value of a current SPY PROC.  If that  value is not NIL, the client should call the returned procedure whenever  it is called, thus completing the chain.  The link argument of SppSpyProc is assumed to be a global frame.  >>  SetSppSpy: PROCEDURE [spy: SppSpyProc ¬ NIL] RETURNS [SppSpyProc];  SppSpyProc: TYPE = PROCEDURE [link: PROGRAM, action: {create, delete}];    END....  LOG  21-May-86 17:38:41  SMA  No more dependencies on Buffer.15-Aug-86  9:25:47  AOF  Remove short POINTERs. 9-Nov-86 11:20:24  AOF  Getting psH from sH and visa-versa. 8-Jan-87 18:39:38  AOF  MDS Relief stuff (NthProc).