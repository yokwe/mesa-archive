-- File: NSTypesExtra.mesa - last edit:-- SMA                 27-May-86 13:46:44-- Copyright (C) 1984, 1986 by Xerox Corporation. All rights reserved. DIRECTORY  NSConstants USING [protocolCertificationControl, protocolCertificationTest],  NSTypes USING [maxIDPBytesPerPacket, PacketType, TransportControl],  PacketExchange USING [ExchangeClientType],  System USING [NetworkAddress, SocketNumber];NSTypesExtra: DEFINITIONS =  BEGIN  --Definitions for Protocol Certification  --TYPES AND CONSTANTS  Control: TYPE = LONG POINTER TO ControlPacket;  ControlPacket: TYPE = MACHINE DEPENDENT RECORD[    checksum(0): CARDINAL,    pktLength(1): CARDINAL, -- in bytes, includes header    transportControl(2: 0..7): NSTypes.TransportControl,    packetType(2: 8..15): NSTypes.PacketType,    destination(3), source(9): System.NetworkAddress,    operation(15): OperationType,    stage(16): Stage, results(18): CARDINAL];      OperationType: TYPE = {request, reply, reject, end};    minWordsPerEthernetPacket: CARDINAL = (64/2)-2;  --from the Ethernet spec    Stage: TYPE = MACHINE DEPENDENT RECORD[    mediumType(0: 0..7): MediumType,    protocolLevel(0: 8..15): ProtocolLevel,    protocolName(1: 0..7): ProtocolName,    stageNumber(1: 8..15): StageNumber];  MediumType: TYPE = MACHINE DEPENDENT{ether(0), unspecified(15)};  ProtocolLevel: TYPE = CARDINAL[0..16);  ProtocolName: TYPE = MACHINE DEPENDENT      {echo(0), routing(1), error(2), spp(3), pex(4), unspecified(15)};  StageNumber: TYPE = CARDINAL[0..16);  pcControlType: NSTypes.PacketType = pccPacket;  pcClientType: PacketExchange.ExchangeClientType = protocolCertification;  pcTestSocket: System.SocketNumber = NSConstants.protocolCertificationTest;  pcRoutingSocket: System.SocketNumber = LOOPHOLE[257];  pcControlSocket: System.SocketNumber = NSConstants.protocolCertificationControl;    minPkt: CARDINAL = minWordsPerEthernetPacket;  --words  maxPkt: CARDINAL = NSTypes.maxIDPBytesPerPacket;  --bytes    --WELL KNOWN STAGE NAMES  finishStage: Stage = [      unspecified, LAST[ProtocolLevel], unspecified, LAST[StageNumber]];  pauseStage: Stage = [      unspecified, LAST[ProtocolLevel], unspecified, LAST[StageNumber] - 1];  resetStage: Stage = [      ether, FIRST[ProtocolLevel], unspecified, FIRST[StageNumber]];  xmtL0: Stage = [ether, 0, unspecified, 0];  rcvL0: Stage = [ether, 0, unspecified, 1];  altL0: Stage = [ether, 0, unspecified, 2];  xmtL1: Stage = [unspecified, 1, unspecified, 0];  rcvL1: Stage = [unspecified, 1, unspecified, 1];  altL1: Stage = [unspecified, 1, unspecified, 2];  errL1: Stage = [unspecified, 1, unspecified, 3];  multiL1: Stage = [unspecified, 1, unspecified, 4];  echoUser: Stage = [unspecified, 2, echo, 0];  echoServer: Stage = [unspecified, 2, echo, 1];  routingUser: Stage = [unspecified, 2, routing, 0];  routingServer: Stage = [unspecified, 2, routing, 1];  errorUser: Stage = [unspecified, 2, error, 0];  errorServer: Stage = [unspecified, 2, error, 1];  sppConnect: Stage = [unspecified, 2, spp, 0];  sppListen: Stage = [unspecified, 2, spp, 1];  sppSource: Stage = [unspecified, 2, spp, 2];  sppSink: Stage = [unspecified, 2, spp, 3];  sppSst: Stage = [unspecified, 2, spp, 4];  sppAttn: Stage = [unspecified, 2, spp, 5];  sppDuplex: Stage = [unspecified, 2, spp, 6];  sppRetrans: Stage = [unspecified, 2, spp, 7];  sppOutOfSeq: Stage = [unspecified, 2, spp, 8];  sppProbing: Stage = [unspecified, 2, spp, 9];  sppMulti: Stage = [unspecified, 2, spp, 10];  sppThruput: Stage = [unspecified, 2, spp, 11];  pexRequestor: Stage = [unspecified, 2, pex, 0];  pexReplier: Stage = [unspecified, 2, pex, 1];  pexRequestorThruput: Stage = [unspecified, 2, pex, 2];  pexReplierThruput: Stage = [unspecified, 2, pex, 3];    END....  LOG25-Apr-84 11:06:29  SMA  Added pcRoutingSocket. 3-Oct-84 10:51:02  SMA  Changed name from ProtocolCertification27-May-86 13:46:27  SMA  No more dependencies on DriverTypes.