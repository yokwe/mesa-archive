-- File: NSTypes.mesa - last edit:-- AOF                 18-Aug-86 17:34:04-- Copyright (C) 1984, 1986 by Xerox Corporation. All rights reserved. DIRECTORY  Environment USING [Byte],  PacketExchange USING [ExchangeID, ExchangeClientType],  System USING [NetworkAddress, NetworkNumber];NSTypes: DEFINITIONS =  BEGIN  -- TYPEs and definitions  Byte: TYPE = Environment.Byte;  WaitTime: TYPE = LONG CARDINAL;  -- in milliseconds  ConnectionID: TYPE = RECORD [WORD];  PacketType: TYPE = MACHINE DEPENDENT {    private(0), routingInformation(1), echo(2), error(3), packetExchange(4),    sequencedPacket(5), pupAddrTransPacket(6), ubBootPacket(7),    ubIPCPacket(8), bootServerPacket(9), electronicMailCacheFlushPacket(10),    ubDiagnosticPacket(11), pccPacket(12), oldTimeServer(123), (LAST[Byte])};  RoutingInfoType: TYPE = MACHINE DEPENDENT {    routingInfoRequest(1), routingInfoResponse(2), (LAST[CARDINAL])};  EchoType: TYPE = MACHINE DEPENDENT {echoRequest(1), echoResponse(2)};      ErrorCode: TYPE = MACHINE DEPENDENT{    -- packet got to the destination machine, but wasn't processed    unspecified(0B), badChecksum(1B), noSocket(2B), resourceLimits(3B),    listenerReject(4B), invalidPacketType(5B), protocolViolation(6B),    -- packet didn't get to the destination machine    unspecifiedInRoute(1000B), inconsistent(1001B),    cantGetThere(1002B), excessHops(1003B),    tooBig(1004B), congestionWarning(1005B), congestionDiscard(1006B),    -- used by ForwardBuffer for various hacks    noError(10000), connectionLimit(10001),    (LAST[CARDINAL])};  TransportControl: TYPE = MACHINE DEPENDENT RECORD [    trace: BOOLEAN,    filler: [0 .. 7],    hopCount: [0 .. 17B]];  RoutingInfoTuple: TYPE = MACHINE DEPENDENT RECORD [    objectNetID: System.NetworkNumber, interrouterDelay: CARDINAL];  --Copy types from PacketExchange  ExchangeClientType: TYPE = PacketExchange.ExchangeClientType;  ExchangeID: TYPE = PacketExchange.ExchangeID;    BufferBody: TYPE = MACHINE DEPENDENT RECORD [    checksum(0): CARDINAL,    pktLength(1): CARDINAL, -- in bytes, includes header    transportControl(2: 0..7): TransportControl,    packetType(2: 8..15): PacketType,    destination(3), source(9): System.NetworkAddress,    nsBody(15): SELECT OVERLAID * FROM      nsWords => [nsWords(15): ARRAY [0..0) OF WORD],      nsBytes => [nsBytes(15): PACKED ARRAY [0..0) OF Byte],      nsChars => [nsChars(15): PACKED ARRAY [0..0) OF CHARACTER],      routingInformation => [        routingType(15): RoutingInfoType,        routingTuple(16): ARRAY [0..0) OF RoutingInfoTuple],      error => [        errorType(15): ErrorCode,        errorParameter(16): CARDINAL,        errorBody(17): ARRAY [0..0) OF WORD],      echo => [        echoType(15): EchoType,        echoBody(16): SELECT OVERLAID * FROM          echoWords => [echoWords(16): ARRAY [0..0) OF WORD],          echoBytes => [echoBytes(16): PACKED ARRAY [0..0) OF Byte],          ENDCASE],        spp => [   	-- first word of level 2 Sequenced Protocol          systemPacket(15: 0..0): BOOLEAN,          sendAck(15: 1..1): BOOLEAN,          attention(15: 2..2): BOOLEAN,          endOfMessage(15: 3..3): BOOLEAN,          unusedType(15: 4..7): [0B..17B],          subtype(15: 8..15): Byte,          sourceConnectionID(16): ConnectionID,          destinationConnectionID(17): ConnectionID,          sequenceNumber(18): CARDINAL,          acknowledgeNumber(19): CARDINAL,          allocationNumber(20): CARDINAL,          sppBody(21): SELECT OVERLAID * FROM            sppWords => [sppWords(21): ARRAY [0..0) OF WORD],            sppBytes => [sppBytes(21): PACKED ARRAY [0..0) OF Byte],            sppChars => [sppChars(21): PACKED ARRAY [0..0) OF CHARACTER],            sppString => [sppString(21): StringBody],            ENDCASE],        packetExchange => [          exchangeID(15): ExchangeID,          exchangeType(17): ExchangeClientType,          exchangeBody(18): SELECT OVERLAID * FROM            exchangeWords => [exchangeWords(18): ARRAY [0..0) OF WORD],            exchangeBytes => [exchangeBytes(18): PACKED ARRAY [0..0) OF Byte],            exchangeChars => [exchangeChars(18): PACKED ARRAY [0..0) OF CHARACTER],            exchangeString => [exchangeString(18): StringBody],            ENDCASE],          ENDCASE];  -- MAGIC NUMBERS FOR THE NS COMMUNICATION (TRANSPORT) PROTOCOLS.  base: PRIVATE POINTER TO BufferBody = NIL;  --IDP (LEVEL 1)  maxIDPWordsPerPacket: CARDINAL = 288;  maxIDPBytesPerPacket: CARDINAL = 576;  wordsPerIDPHeader: CARDINAL =    LOOPHOLE[@base.nsBody, CARDINAL] - LOOPHOLE[base, CARDINAL];  bytesPerIDPHeader: CARDINAL = wordsPerIDPHeader*2;  maxIDPDataWords: CARDINAL = maxIDPWordsPerPacket - wordsPerIDPHeader;  maxIDPDataBytes: CARDINAL = maxIDPBytesPerPacket - bytesPerIDPHeader;  --SPP (LEVEL 2)  wordsPerSppHeader: CARDINAL =    LOOPHOLE[@base.sppBody, CARDINAL] - LOOPHOLE[@base.nsBody, CARDINAL];  bytesPerSppHeader: CARDINAL = wordsPerSppHeader*2;  maxDataWordsPerSpp: CARDINAL =    maxIDPWordsPerPacket - wordsPerSppHeader - wordsPerIDPHeader;  maxDataBytesPerSpp: CARDINAL =    maxIDPBytesPerPacket - bytesPerSppHeader - bytesPerIDPHeader;  --PACKET EXCHANGE (LEVEL 2)  wordsPerExchangeHeader: CARDINAL =    LOOPHOLE[@base.exchangeBody, CARDINAL] - LOOPHOLE[@base.nsBody, CARDINAL];  bytesPerExchangeHeader: CARDINAL = wordsPerExchangeHeader*2;  maxDataWordsPerExchange: CARDINAL =    maxIDPWordsPerPacket - wordsPerExchangeHeader - wordsPerIDPHeader;  maxDataBytesPerExchange: CARDINAL =    maxIDPBytesPerPacket - bytesPerExchangeHeader - bytesPerIDPHeader;  --ECHO (LEVEL 2)  wordsPerEchoHeader: CARDINAL =    LOOPHOLE[@base.echoBody, CARDINAL] - LOOPHOLE[@base.nsBody, CARDINAL];  bytesPerEchoHeader: CARDINAL = wordsPerEchoHeader*2;  maxDataWordsPerEcho: CARDINAL =    maxIDPWordsPerPacket - wordsPerEchoHeader - wordsPerIDPHeader;  maxDataBytesPerEcho: CARDINAL =    maxIDPBytesPerPacket - bytesPerEchoHeader - bytesPerIDPHeader;  --ERROR (LEVEL 2)  wordsPerErrorHeader: CARDINAL =    LOOPHOLE[@base.errorBody, CARDINAL] - LOOPHOLE[@base.nsBody, CARDINAL];  bytesPerErrorHeader: CARDINAL = wordsPerErrorHeader*2;  maxDataWordsPerError: CARDINAL =    maxIDPWordsPerPacket - wordsPerErrorHeader - wordsPerIDPHeader;  maxDataBytesPerError: CARDINAL =    maxIDPBytesPerPacket - bytesPerErrorHeader - bytesPerIDPHeader;  --ROUTING (LEVEL 2)  wordsPerRoutingHeader: CARDINAL =    LOOPHOLE[@base.routingTuple, CARDINAL] - LOOPHOLE[@base.nsBody, CARDINAL];  bytesPerRoutingHeader: CARDINAL = wordsPerRoutingHeader*2;  maxDataWordsPerRouting: CARDINAL =    maxIDPWordsPerPacket - wordsPerRoutingHeader - wordsPerIDPHeader;  maxDataBytesPerRouting: CARDINAL =    maxIDPBytesPerPacket - bytesPerRoutingHeader - bytesPerIDPHeader;  maxRoutingTuplesPerPacket: CARDINAL =    maxDataWordsPerRouting / SIZE[RoutingInfoTuple];END..LOG23-May-84 15:25:40  AOF  Post Klamath18-Aug-86 17:28:19  AOF  Added LSK's two new error codes