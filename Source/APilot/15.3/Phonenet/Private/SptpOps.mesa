-- File: SptpOps.mesa - last edit:-- AOF                 17-Jan-88 15:48:17-- Copyright (C) 1987, 1988 by Xerox Corporation. All rights reserved. DIRECTORY  Buffer USING [Device, Queue],  Environment USING [Block],  NewRS232CFace USING [DeviceStatus],  PhoneNet USING [EntityClass],  RS232CEnvironment USING [Duplexity, LineSpeed],  SptpProtocol USING [ProtocolInfo, ProtocolVersion];SptpOps: DEFINITIONS =  BEGIN  maxRS232CBytes, minRS232CBytes: <<PUBLIC SptptDriver>> CARDINAL;  defaultMaxRS232CBytes: CARDINAL = 600;  --bytes of largest buffer  defaultMinRS232CBytes: CARDINAL = 40;  --that we should ask for  point5Duplex: BOOLEAN = TRUE;  --control code/feature expansion  siuSupport: BOOLEAN = TRUE;  --control code/feature expansion  Reservation: TYPE = LONG POINTER TO ReservationObject;  ReservationObject: TYPE = RECORD[    lineSpeed: RS232CEnvironment.LineSpeed,    duplex: RS232CEnvironment.Duplexity,    lineNumber: CARDINAL,    entity: PhoneNet.EntityClass];      StatsRecord: TYPE = RECORD[    pktsReceived, bytesReceived: LONG CARDINAL ¬ 0,    packetsSent, bytesSent: LONG CARDINAL ¬ 0,    controlPktReceived, controlPktSent: LONG CARDINAL ¬ 0,    sendAborted, receiveAborted: LONG CARDINAL ¬ 0,    checksumError, dataLost, deviceError: LONG CARDINAL ¬ 0,    disaster, invalidFrame: LONG CARDINAL ¬ 0,    protocolDown, protocolUp, masterTmo: LONG CARDINAL ¬ 0,    commandInitiated, commandLost: LONG CARDINAL ¬ 0];    CreateDriver: PROC[reservation: Reservation];  GetDevice: PROC[lineNumber: CARDINAL] RETURNS[Buffer.Device];  GetEntityClass: PROC[device: Buffer.Device] RETURNS[PhoneNet.EntityClass];  GetProtocolInfo: PROC[device: Buffer.Device, info: SptpProtocol.ProtocolInfo];  GetVersion: PROC[device: Buffer.Device] RETURNS[SptpProtocol.ProtocolVersion];  GetXmtQueue: PROC[device: Buffer.Device]    RETURNS[queue: Buffer.Queue, notify: LONG POINTER TO CONDITION];  SetCollectGarbageToo: PROC[device: Buffer.Device, collectGarbage: BOOLEAN];  SetTrace: PROC[device: Buffer.Device, proc: TraceProc] RETURNS[TraceProc];  TraceProc: TYPE = PROC[    frame: Environment.Block, direction: {tx, rx},    dte: NewRS232CFace.DeviceStatus];  END.