-- File: ImageRotationImpl.mesa - last edit:-- JPM			 30-Oct-86 8:56:11-- Copyright (C) 1986 by Xerox Corporation. All rights reserved.DIRECTORY  Environment USING [Long],  ESCAlphaExtras USING [aROTATEBITS],  Frame USING [GetReturnFrame, ReadPC, WritePC],  ImageRotation,  Inline USING [DBITSHIFT],  PrincOps USING [ESCTrapTable];ImageRotationImpl: PROGRAM  IMPORTS Frame, Inline  EXPORTS ImageRotation =  BEGIN  -- PUBLIC PROCs  SoftwareRotateBits: PUBLIC PROCEDURE [srcPtr: LONG POINTER, srcWPL: INTEGER, dstPtr: LONG POINTER, dstWPL: INTEGER] =    BEGIN    temp: ARRAY [0..16) OF CARDINAL;    work: Environment.Long;    dstPtr ¬ dstPtr + 16 * LONG[dstWPL];    FOR i: CARDINAL IN [0..16) DO      temp[i] ¬ srcPtr­;      srcPtr ¬ srcPtr + LONG[srcWPL]      ENDLOOP;    THROUGH [0..16) DO      dstPtr ¬ dstPtr - LONG[dstWPL];      FOR i: CARDINAL IN [0..16) DO        work.high ¬ temp[i];	work.lu ¬ Inline.DBITSHIFT[work.lu, -1];	temp[i] ¬ work.high	ENDLOOP;      dstPtr­ ¬ work.low      ENDLOOP    END;  -- PRIVATE PROC (for trap table)    -- since this is called as trap instruction, we gotta    -- bump the pc.  Note that it is minimal stack, which    -- means we don't have to bother dumping state.  ROTATEBITS: PROC [srcPtr: LONG POINTER, srcWPL: INTEGER, dstPtr: LONG POINTER, dstWPL: INTEGER] =    BEGIN    Frame.WritePC [      pc: [(Frame.ReadPC [Frame.GetReturnFrame [] ] + 2)],      lf: Frame.GetReturnFrame [] ];    SoftwareRotateBits [srcPtr, srcWPL, dstPtr, dstWPL]    END;  -- main code  PrincOps.ESCTrapTable[ESCAlphaExtras.aROTATEBITS] ¬ LOOPHOLE[ROTATEBITS]  END. -- of ImageRotationImplLOG30-Oct-86 -- JPM -- Created.