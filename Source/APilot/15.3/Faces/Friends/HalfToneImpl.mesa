-- HalfToneImpl.mesa-- Last edited by MRR    18-Dec-86  9:44:37DIRECTORY  Environment,  ESCAlphaExtras,  Frame USING [GetReturnFrame, ReadPC, WritePC],  HalfTone,  PrincOps USING [ControlLink, ESCTrapTable, LocalFrameHandle];HalfToneImpl: PROGRAM  IMPORTS Frame  EXPORTS HalfTone =  BEGIN  SrcScanLine: TYPE = RECORD [PACKED SEQUENCE COMPUTED CARDINAL OF Environment.Byte];  HALFTONENotImplementedInMicrocode: PROC[SrcLine:HalfTone.SLtype, HTline:HalfTone.HTtype, Offset:CARDINAL, DstLine:HalfTone.BitAddress, InvertRequested:BOOLEAN] =    BEGIN      lf: PrincOps.LocalFrameHandle ¬ Frame.GetReturnFrame[];      Frame.WritePC[pc: [Frame.ReadPC[lf] + 2], lf: lf];      SoftwareHalfTone[SrcLine, HTline, Offset, DstLine, InvertRequested];    END; -- HALFTONENotImplementedInMicrocode  SoftwareHalfTone : PUBLIC PROCEDURE [SrcLine:HalfTone.SLtype, HTline:HalfTone.HTtype, Offset:CARDINAL, DstLine:HalfTone.BitAddress, InvertRequested:BOOLEAN] =  BEGIN    dstWord : PACKED ARRAY [0..16) OF BOOLEAN;    HTbase: LONG POINTER ¬ HTline.BASE + Offset;    HTitem: NATURAL ¬ Offset + 1;    HTval: NATURAL [0..255] ¬ HTbase­;    SLptr: LONG POINTER TO SrcScanLine ¬ SrcLine.ByteAddr.word;    SLpixel: CARDINAL [0..255] ¬ 0;    SrcByteIndex: CARDINAL ¬ SrcLine.ByteAddr.byte;    GetNextHalfToneVal : PROCEDURE = INLINE-- This procedure manages a line of the HalfTone cell. Should the end of a cell-- be reached, the working base pointer is reset to the beginning of the cell. The-- item indicator simply keeps track of the current cell element, relative to the-- cell length.    BEGIN      IF HTitem >= HTline.LENGTH THEN {        HTitem ¬ 1;        HTbase ¬ HTline.BASE;}      ELSE {        HTitem ¬ HTitem + 1;        HTbase ¬ HTbase + 1;};      HTval ¬ HTbase­;    END;      GetSLpixel : PROCEDURE = INLINE-- This procedure retrieves an eight bit Scan Line pixel.    BEGIN      SLpixel ¬ SLptr[SrcByteIndex];      SrcByteIndex ¬ SrcByteIndex + 1;    END;        HalfToneAPixel : PROCEDURE = INLINE-- This procedure sets a bilevel destination bit to the HalfToned value resulting-- from a comparison between the original eight bit pixel and a HalfTone cell.-- The destination bit address is incremented after updating the bit.    BEGIN      dstWord ¬ DstLine.word­;      dstWord[DstLine.bit] ¬ ThresholdVal[];      DstLine.word­ ¬ dstWord;      SELECT DstLine.bit FROM      IN [0..14] => { DstLine.bit ¬ DstLine.bit + 1; };      ENDCASE =>{ DstLine.bit ¬ 0;	 DstLine.word ¬ DstLine.word + 1; };    END;    ThresholdVal : PROCEDURE RETURNS [BOOLEAN] = INLINE-- This procedure compares the eight bit pixel value to a HalfTone cell element-- and returns the corresponding threshold boolean value.    BEGIN      pixel: BOOLEAN;            IF SLpixel >= HTval THEN pixel ¬ TRUE      ELSE pixel ¬ FALSE;      IF InvertRequested THEN pixel ¬ NOT pixel;      RETURN[pixel];    END;-- this is the control loop for Software HalfToning.    THROUGH [0..SrcLine.SlLength) DO      GetSLpixel;      HalfToneAPixel;      GetNextHalfToneVal;    ENDLOOP;  END;-- the main line code starts here.  PrincOps.ESCTrapTable[ESCAlphaExtras.aHALFTONE] ¬ LOOPHOLE[HALFTONENotImplementedInMicrocode];  END...