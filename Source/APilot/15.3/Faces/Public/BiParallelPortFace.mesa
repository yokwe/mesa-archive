--File = BiParallelPortFace.mesa--  created 31-May-86 14:30:06 by JMA--  last edited 27-Feb-87 18:09:14 JMA------ Copyright (C) 1986, 1987 by Xerox Corporation. All rights reserved.DIRECTORY   Environment USING [Base],   Zone USING [Alignment, BlockSize];      BiParallelPortFace: DEFINITIONS =  BEGIN      -- Type Definitions  CommandStatus: TYPE = {    ready,		-- ready for the next command    inProgress,		-- command submitted is pending service, normal return value    busy,		-- command not serviceable at this time    invalidParameter,	-- command is invalid due to invalid parameter    unimplemented }; 	-- command with the specified param is unimplemented      InitializationStatus: TYPE = {     success, optionHardwareNotDetected, optionSoftwareNotStarted, other };    Port: TYPE = CARDINAL;  PortType: TYPE = {     unknown,		-- unknown port type designation     inputOnly,		-- no such device at this time     outputOnly,	-- eg. printer     bidirectional };	-- eg. printer or scanner        ControlOrData: TYPE = { control, data };    DeviceConnection: TYPE = {     unknown,		-- do not know or cannot determine if device is connected    disconnected,     connected,		-- device is connected but status unknown    connectedAndOn,    connectedButOff };          DeviceStatus: TYPE = RECORD [    port: Port ¬ nullPortNumber,	-- indicates port number this device status rec is meant    portType: PortType ¬ unknown,	-- indicates last known port type setting of this port    	    portWasReset: BOOLEAN ¬ FALSE,  	-- port has been reset    deviceWasReset: BOOLEAN ¬ FALSE,  	-- device has been reset    statusIsUpToDate: BOOLEAN ¬ FALSE,	-- status of this port has been updated    testResultIsUpToDate: BOOLEAN ¬ FALSE,-- test of this port has been completed    deviceConnection: DeviceConnection ¬ unknown,  -- device connection status        << common status lines >>    fault: BOOLEAN ¬ FALSE,		-- device fault line    busy: BOOLEAN ¬ FALSE,		-- device busy line         << outputOnly port booleans >>    select: BOOLEAN ¬ FALSE,		-- device status    printerEmpty: BOOLEAN ¬ FALSE,	-- device status        << bidirectional port booleans >>    endOfInputStream: BOOLEAN ¬ FALSE,	-- device indicates end of input detected    attention: BOOLEAN ¬ FALSE,		-- device needs attention    << shared error conditions >>    portError: BOOLEAN ¬ FALSE,		-- BiParallelPort Option HW error, fatal    portException: BOOLEAN ¬ FALSE	-- other error conditions    ];        PulseWidth: TYPE = {     pw250ns, pw500ns, pw750ns, pw625nSec, pw1uSec, pw1250ns, pw1500ns, pw1750ns, pw2uSec };         TransferStatus: TYPE = {    pending,		-- transfer operation queued    inProgress, 	-- transfer is in progress    success,		-- successful block or byte transfer    endOfInputStream,	-- transfer completed due to endOfInputStream    aborted,		-- transfer was aborted by workstation    incomplete 		-- transfer did not complete because of some error    };          CompletedTransferStatus: TYPE = TransferStatus[success..LAST[TransferStatus]];    Parameters: TYPE = RECORD [    port: Port ¬ nullPortNumber,			-- port number    portType: PortType ¬ unknown,			-- port type config     transferProtocol: TransferProtocol ¬ useAck,	-- for End-Of-Transfer    pulseWidth: PulseWidth ¬ pw1uSec,			-- controls speed of data transfer to the device    portInUse: BOOLEAN ¬ FALSE    ];  TransferMode: TYPE = { put, get };	     TransferProtocol: TYPE = { useAck, useBusy };        Transfer: TYPE = RECORD [    port: Port,				-- for which port number    operation: OperationPtr,		-- operation     transferMode: TransferMode,		-- Put/Get transfer     controlOrData: ControlOrData 	-- data type being transferred	     ];    << The head client passes to the head a pointer to a block structure which appears to contain      only a data buffer pointer and buffer size counter.  The size, alignment, and location of     this block structure is specified by READONLY variables defined in the face. >>         OperationPtr: TYPE = LONG POINTER TO Operation;	    Operation: TYPE = RECORD [    dataBufferPtr: LONG POINTER,	-- ptr to buffer that contains data to be transferred out    					--	or will contain data transferred in    bufferByteLength: CARDINAL		-- buffer size in bytes    ];      operationSize: READONLY Zone.BlockSize;	-- block structure size    operationAlignment: READONLY Zone.Alignment;  -- block alignment structure    operationLocation: READONLY Environment.Base;	-- block location    numberOfPorts: READONLY CARDINAL;    nullPortNumber: Port = LAST [Port];    maxBlockSizeInBytes: READONLY CARDINAL;    << Head client has access to hardware board and port status.  Bit definitions for the status     words are not specified in this interface.  This record is intended for diagnostic and     testing purposes only. >>             HardwareStatus: TYPE = RECORD [	-- for special use only    port: Port,			-- port number source    boardMode: PortType,	-- board mode when read    boardStatus: WORD,		-- hardware status of the interface board    portStatus: WORD		-- status lines connected to the interface board    ];  -- PROCEDURES    Initialize: PROCEDURE [notify: WORD]    RETURNS [initStatus: InitializationStatus];    -- client should check if initialization was successful      GetNextAvailablePort:  PROCEDURE [portType: PortType]    RETURNS [nextPort: Port];    -- returns immediately    -- returns next available port with specified port type    -- ===========================================================          InitiatePortReset: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus];    -- resets the BiParallelPort option board and ALL on-going processes of the specified port    -- returns immediately    -- needs a naked notify to caller's naked notify condition before the caller can get    --   results via GetStatus[]      InitiateDeviceReset: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus];    -- resets only the device connected to the specified port     -- returns immediately    -- needs a naked notify to caller's naked notify condition before the caller can get    --   results via GetStatus[]    -- ===========================================================         UpdateStatus: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus];    -- needs a naked notify to caller's naked notify condition before the caller can get    --   results via GetStatus[] or GetHardwareStatusBits[] (special uses)    GetHardwareStatusBits: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus, hardwareStatus: HardwareStatus];    -- returns immediately    -- for special applications only (ie. diagnostic and testing)      GetStatus: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus, deviceStatus: DeviceStatus];    -- returns immediately    -- ===========================================================          InitiateTransfer: PROCEDURE [transfer: Transfer]      RETURNS [commandStatus: CommandStatus];     -- needs a naked notify to caller's naked notify condition before the caller can get    -- results via GetTransferStatus []    PollTransferStatus: PROCEDURE [port: Port, operation: OperationPtr]    RETURNS [transferStatus: TransferStatus, bytesTransferred: CARDINAL ];    -- additional return parameter bytesTransferred      SetParameters: PROCEDURE [parameters: Parameters];    -- sets transfer related parameters, usually done once before a series of transfers    -- returns immediately    -- ===========================================================       InitiateTest: PROCEDURE [port: Port, diagnosticTestPattern: WORD]      RETURNS [commandStatus: CommandStatus];       -- needs a naked notify to caller's naked notify condition before the caller can get    -- results via GetTestResult[]     GetTestResult: PROCEDURE []    RETURNS [returnPattern: WORD];    -- returns immediately    -- ===========================================================         TestIfBiParallelPortExists: PROCEDURE [port: Port]    RETURNS [commandStatus: CommandStatus];    -- Checks if specified port exists    -- needs an up-notify to get results via BiParallelPortExists []  BiParallelPortExists: PROCEDURE [port: Port]    RETURNS [BOOLEAN];    -- Checks if specified port exists    -- returns immediately    -- ===========================================================          InitializeCleanup: PROCEDURE [];    -- cleanup before world swaps        END... -- BiParallelPortFace.mesa    LOG31-May-86 14:30:06	JMA	Created27-Feb-87 18:09:14	JMA	Change Parallel to BiParallel