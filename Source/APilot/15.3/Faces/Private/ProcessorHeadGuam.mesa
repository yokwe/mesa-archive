-- ProcessorHeadGuam.mesa - last edit:--  JPM		 8-Mar-93  6:24:36-- Copyright (C) 1993 by Xerox Corporation.  All rights reserved.<< The following program was created in 1993 but has not been published within the meaning   of the copyright law, is furnished under license, and may not be used, copied and/or   disclosed except in accordance with the terms of said license.>>DIRECTORY  Environment USING [LongPointerFromPage, PageCount, PageNumber],  GuamInputOutput USING [CallAgent, IORegionType, StopEmulator],  Inline USING [LowHalf],  PageMap USING [GetState],  PilotMP USING [cPowerOff],  PrincOps USING [ControlLink, ESCTrapTable, StateVector],  ProcessorFace USING [gmtEpoch, GreenwichMeanTime, ProcessorID, SpecialSetMP],  ProcessorFaceExtras USING [CSBanks, MachineType],  ProcessorFaceExtras2 USING [DoveMachineType],  ProcessorIOFaceGuam USING [ProcessorFCBType],  SDDefs USING [SD, sOpcodeTrap];ProcessorHeadGuam: PROGRAM  IMPORTS Environment, GuamInputOutput, Inline, PageMap, ProcessorFace  EXPORTS GuamInputOutput, ProcessorFace, ProcessorFaceExtras, ProcessorFaceExtras2  SHARES PageMap, ProcessorFace =  BEGIN  -- constants  cvTimeoutMask: WORD = 100000B; -- Guam microcode assumes level 0  ioRegionLast: CARDINAL = 255;  ioRegionAfterEnd: CARDINAL = ioRegionLast + 1;  -- Public items:  -- exported to GuamInputOutput  ioRegionPtr: PUBLIC LONG POINTER TO GuamInputOutput.IORegionType;  ioRegionPageCount: PUBLIC CARDINAL;  numberRealPages: PUBLIC Environment.PageCount;  numberVirtualPages: PUBLIC Environment.PageCount;  microsecondsPerHundredPulses: PUBLIC CARDINAL;  millisecondsPerTick: PUBLIC CARDINAL;  mp: PUBLIC CARDINAL;  processorID: PUBLIC ProcessorFace.ProcessorID;  reservedNakedNotifyMask: PUBLIC WORD;  -- Private items:  fcb: LONG POINTER TO ProcessorIOFaceGuam.ProcessorFCBType;  ioRegionPage: Environment.PageNumber;  timeToAutoPowerOn: ProcessorFace.GreenwichMeanTime;    InstructionNotImplemented: PRIVATE ERROR = CODE;  --===================  -- Intialization:  --===================  Start: PUBLIC --ProcessorFace.-- PROC =    BEGIN    -- initialize exports    ioRegionPage ¬ ioRegionLast - PageMap.GetState[ioRegionLast].real;    ioRegionPtr ¬ Environment.LongPointerFromPage[ioRegionPage];    ioRegionPageCount ¬ ioRegionAfterEnd - Inline.LowHalf[ioRegionPage];    fcb ¬ ioRegionPtr.fcbPtrs[processor];    fcb.command ¬ noop;    GuamInputOutput.CallAgent[processor];    numberRealPages ¬ fcb.realMemoryPageCount;    numberVirtualPages ¬ fcb.virtualMemoryPageCount;    microsecondsPerHundredPulses ¬ fcb.microsecondsPerHundredPulses;    millisecondsPerTick ¬ fcb.millisecondsPerTick;    mp ¬ 0;    processorID ¬ fcb.processorID;    reservedNakedNotifyMask ¬ cvTimeoutMask;    timeToAutoPowerOn ¬ ProcessorFace.gmtEpoch - 1;    -- initialize trap vectors    SDDefs.SD[SDDefs.sOpcodeTrap] ¬ LOOPHOLE[UnimplementedTrapHandler];    PrincOps.ESCTrapTable­ ¬      ALL[LOOPHOLE[UnimplementedTrapHandler, PrincOps.ControlLink]]    END;  --Start--  --==============================  -- ProcessorFace Implementation:  --==============================  BootButton: PUBLIC PROC = {    GuamInputOutput.StopEmulator[]};  CountCSBanks: PUBLIC PROCEDURE RETURNS [banks: ProcessorFaceExtras.CSBanks] = {    banks ¬ 0};         DoveMachineTypeInfo: PUBLIC PROC RETURNS [type: ProcessorFaceExtras2.DoveMachineType] = {    type ¬ diana};  GetGreenwichMeanTime: PUBLIC PROC RETURNS [gmt: ProcessorFace.GreenwichMeanTime] =    BEGIN    fcb.command ¬ readGMT;    GuamInputOutput.CallAgent[processor];    gmt ¬ IF fcb.status # success THEN ProcessorFace.gmtEpoch ELSE fcb.gmt    END;  GetNextAvailableVM: PUBLIC PROC [page: Environment.PageNumber]    RETURNS [firstPage: Environment.PageNumber, count: Environment.PageCount] = {    SELECT page FROM      > ioRegionAfterEnd => RETURN [0, 0];      > 0 => RETURN [ioRegionAfterEnd, numberVirtualPages - ioRegionAfterEnd];      ENDCASE => RETURN [0, ioRegionPage]};  -- = 0  MachineTypeInfo: PUBLIC PROC RETURNS [type: ProcessorFaceExtras.MachineType] = {    type ¬ daybreak};  PowerOff: PUBLIC PROCEDURE =    BEGIN    SetMP[PilotMP.cPowerOff];    fcb.command ¬ readGMT;    GuamInputOutput.CallAgent[processor];    IF fcb.status # success THEN fcb.gmt ¬ [ProcessorFace.gmtEpoch];    GuamInputOutput.StopEmulator[timeToAutoPowerOn - fcb.gmt]    END;  ResetAutomaticPowerOn: PUBLIC PROC = {    timeToAutoPowerOn ¬ ProcessorFace.gmtEpoch - 1};  SetAutomaticPowerOn: PUBLIC PROC [    gmt: ProcessorFace.GreenwichMeanTime, externalEvent: BOOLEAN] = {    timeToAutoPowerOn ¬ gmt};  -- externalEvent ignored on Guam  SetGreenwichMeanTime: PUBLIC PROC [gmt: ProcessorFace.GreenwichMeanTime] =    BEGIN    fcb.command ¬ writeGMT;    fcb.gmt ¬ [gmt];    GuamInputOutput.CallAgent[processor]    END;  SetMP: PUBLIC PROC [mpnew: CARDINAL] = {    ProcessorFace.SpecialSetMP[mp ¬ mpnew]};  --===========================================  -- Trap of instructions not implemented by microcode  --===========================================  UnimplementedTrapHandler: PROC =    BEGIN    v: RECORD [a: ARRAY [0..3) OF WORD, state: PrincOps.StateVector];    v.state ¬ STATE;    ERROR InstructionNotImplemented    END;  END.LOG 8-Mar-93 - JPM - Created from ProcessorHeadBounty.