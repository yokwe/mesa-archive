-- Copyright (C) 1980, 1981, 1982  by Xerox Corporation. All rights reserved. -- GMTUsingIntervalTimer.mesa (last edited by: DXG      on: 25-Sep-84 23:53:07)DIRECTORY  DeviceCleanup USING [Perform],  HeadStartChain USING [Start],  PilotMP USING [cPowerOff],  -- heads should have their own MP codes!  ProcessOperations USING [DisableInterrupts],  ProcessorFace USING [    BootButton, GetClockPulses, gmtEpoch, GreenwichMeanTime,    microsecondsPerHundredPulses, SetMP],  TemporarySetGMT USING [];GMTUsingIntervalTimer: PROGRAM  IMPORTS DeviceCleanup, RemainingHeads: HeadStartChain, ProcessOperations, ProcessorFace  EXPORTS HeadStartChain, ProcessorFace, TemporarySetGMT =  BEGIN OPEN ProcessorFace;  --  -- Simulate greenwich mean time and power control features of ProcessorFace using  -- interval timer  GetGreenwichMeanTime: PUBLIC PROC RETURNS [GreenwichMeanTime] =    BEGIN    IF gmtSimulated ~= gmtEpoch THEN  -- don't update clock unless it has been set      BEGIN      seconds: GreenwichMeanTime =        ((GetClockPulses[] - pulsesGmtSimulated)*100)/pulsesPer100Seconds;      pulsesGmtSimulated ¬ pulsesGmtSimulated + seconds*pulsesPer100Seconds/100;      -- long multiply!  The truncation keeps pulsesGmtSimulated at the right value      gmtSimulated ¬ gmtSimulated + seconds;      END;    RETURN[gmtSimulated]    END;  SetGreenwichMeanTime: PUBLIC PROC [gmt: GreenwichMeanTime] =    {pulsesGmtSimulated ¬ GetClockPulses[]; gmtSimulated ¬ gmt};    adjustableClockRate: PUBLIC BOOLEAN ¬ TRUE;    SetClockRate: PUBLIC PROC [internal, external: LONG CARDINAL] =    BEGIN    diff: LONG INTEGER = external-internal;    temp: LONG INTEGER;    f: LONG CARDINAL ¬ 10*(1D9/microsecondsPerHundredPulses);    temp ¬ f*diff/external;    pulsesPer100Seconds ¬ f - temp;    END;    gmtSimulated:       GreenwichMeanTime ¬ gmtEpoch;  -- =gmtEpoch => not set  pulsesGmtSimulated: LONG CARDINAL;  -- interval timer value corresponding to gmtSimulated  pulsesPer100Seconds: LONG CARDINAL ¬ 10*(1D9/microsecondsPerHundredPulses);  PowerOff: PUBLIC PROC =    BEGIN    -- NOTE: This code depends on the greenwich mean time clock running with    -- interrupts disabled and devices turned off.    ProcessOperations.DisableInterrupts[];    DeviceCleanup.Perform[turnOff];    SetMP[PilotMP.cPowerOff];    DO  -- forever      IF GetGreenwichMeanTime[] - gmtEpoch >= gmtAutomaticPowerOn - gmtEpoch        AND (~externalEventRequired OR ExternalEvent[]) THEN BootButton[]      ENDLOOP    END;  gmtAutomaticPowerOn:   GreenwichMeanTime;  externalEventRequired: BOOLEAN;  ExternalEvent:         PROC RETURNS [BOOLEAN] = {RETURN[FALSE]};  SetAutomaticPowerOn: PUBLIC PROC [gmt: GreenwichMeanTime, externalEvent: BOOLEAN] =    {gmtAutomaticPowerOn ¬ gmt; externalEventRequired ¬ externalEvent};  ResetAutomaticPowerOn: PUBLIC PROC = {gmtAutomaticPowerOn ¬ gmtEpoch - 1};  --  -- (Head)StartChain  -- Start this module (and rest of chain)  Start: PUBLIC PROC = {RemainingHeads.Start[]};  --  -- Initialization  ResetAutomaticPowerOn[];  END....LOGTime: February 4, 1980  10:36 AM	By: PXM    	Action: Create file, borrowing code from SystemImplTime: June 26, 1980  10:48 AM	By: PXM    	Action: OISProcessorFace=>ProcessorFaceTime:  7-Dec-81 15:32:28	By: KAM     	Action: added adjustableClockrate and SetClockRateTime: 20-Sep-82 18:13:12	By: KAM     	Action: fixed signed/unsigned problem with SetClockRate (fix courtesy HGM).Time: 25-Sep-84 23:52:54	By: DXG     	Action: Added copyright notice and rebuild for 11.1 release.