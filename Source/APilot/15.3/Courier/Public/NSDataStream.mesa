-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. --  NSDataStream: Manila Release, Filing 5.0--  Revised by Kiser: 23-Sep-82  8:49:37--  Overview:  Data Stream interface.DIRECTORY  Courier USING [Description, Handle, SystemElement],  Stream USING [Handle];NSDataStream: DEFINITIONS =  BEGIN  ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----  ----  -- CLIENT DEFINITIONS :  ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----  ----  Handle: TYPE = RECORD [Stream.Handle];  SinkStream: TYPE = RECORD [Handle];  SourceStream: TYPE = RECORD [Handle];  Sink: TYPE = RECORD [SELECT type: * FROM    proc => [proc: PROCEDURE [SourceStream]],    stream => [stream: SinkStream],    none => [],    ENDCASE];  Source: TYPE = RECORD [SELECT type: * FROM    proc => [proc: PROCEDURE [SinkStream]],    stream => [stream: SourceStream],    none => [],    ENDCASE];  Abort: PROCEDURE [stream: Handle];  -- Aborts a data stream.  The stream must still be deleted.  Aborted: ERROR;  -- Raised when a stream has been aborted (e.g. during Stream.Put/Get/Delete).  AssertLocal: PROCEDURE [stream: Handle];  -- Indicates that the client intends to do stream operations (Get/Put) on this stream.  A client may imply this by doing the Put or Get directly.  This operation may be used to provide this information at the earliest possible moment.   ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----  ----  -- IMPLEMENTOR DEFINITIONS :  ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----  ----  Couple: TYPE = RECORD [sink: SinkStream, source: SourceStream];    Ticket: TYPE [11];  -- Tickets are used to name the sending and receiving ends of network data streams.  One can be obtained by a client stub using Register, provided as an argument in a remote procedure call, and used in an Open operation by a server stub to establish the network data stream.     Error: ERROR [errorCode: ErrorCode];    ErrorCode: TYPE = {    localEndIncorrect,    tooManyLocalConnections,    tooManyTickets,    unimplemented};  AnnounceStream: PROCEDURE [cH: Courier.Handle];  -- Called to provide Courier's stream at a time when it may be used.   CancelTicket: PROCEDURE [ticket: Ticket, cH: Courier.Handle];  -- This operation is called by client stubs to indicate that a ticket will not be used.  CreateCouple: PROCEDURE RETURNS [Couple];  -- Creates a "couple" of data streams such that data sent on couple.sink can be received from couple.source.  DescribeTicket: Courier.Description;  -- A Courier description of a ticket.  Used by client and server stubs to pass parameters.  OpenSink: PROCEDURE [ticket: Ticket, cH: Courier.Handle] RETURNS [SinkStream];  OpenSource: PROCEDURE [ticket: Ticket, cH: Courier.Handle]    RETURNS [SourceStream];  -- These operations are called by server stubs.  They establish network data streams in exchange for tickets which were provided to client stubs by the Register operation below.  Stream must be deleted with Stream.Delete when data transfer is complete.  Register: PROCEDURE [stream: Handle, forUseAt: Courier.SystemElement,    cH: Courier.Handle, useImmediateTicket: BOOLEAN ¬ TRUE]    RETURNS [Ticket];  -- This operation is called by client stubs.  It asserts that the data stream will be used on the specified system element.  The ticket obtained may be passed as an argument to a remote procedure call, where the server stub may exchange it for a network data stream using the Open operations above.  The operation will not return until both sides of the Couple have been registered (or asserted local).  The data stream argument may not be used by the client after one of these calls is made.  OperateOnSink: PROCEDURE [sink: Sink, operation: PROCEDURE [SinkStream]];  OperateOnSource: PROCEDURE [source: Source, operation: PROCEDURE [SourceStream]];  -- These operations is called by client stubs or local implementations of bulk data transfer operations.  They either extract the stream from the supplied variant record (if the 'stream' variant); create a Couple, call 'operation' with one end of the Couple and fork the client's procedure with the other end (proc variant); or returns [NIL] (none variant).    SetStreamTimeout: PROCEDURE [stream: Handle, waitTimeInSeconds: LONG CARDINAL];  -- Set wait times on the data stream (controls amount of time before gets time out).      END. LOG  ( date - person - action )25-Mar-82 11:00:32 - Kiser - Renamed to NSDataStream.12-May-82 10:00:00 - Kiser - Reworked for Filing 5.0. 7-Jun-82 13:31:56 - Kiser - Added CancelSink/Source, Error, ErrorType.23-Jul-82 10:44:31 - Kiser - Added AnnounceStream and parameters to allow use of immediate tickets.26-Jul-82 17:39:18 - Kiser - Changed tickets from TYPE[16] to TYPE[11]. 2-Aug-82 15:32:45 - Kiser - Added StreamFromSink(Source) and combined tickets, Register operations and Cancel operations. 3-Aug-82 15:55:28 - Kiser - Added DescribeTicket. 5-Aug-82 16:57:22 - Kiser - Replaced StreamFromSink(Source) with OperateOnSink(Source).September 2, 1982 - Hanzel - Added 'unimplemented' error type for OS 4.0.September 23, 1982 - Kiser - Added SetStreamTimeout.