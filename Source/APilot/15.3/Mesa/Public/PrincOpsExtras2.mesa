-- File: PrincOpsExtras2.Mesa - Last edit:-- JGS		 5-Jun-86 16:28:28-- MEW		 1-Jul-86 17:05:52-- Copyright (C) 1986 by Xerox Corporation. All rights reserved.DIRECTORY  PrincOps USING [BytePC, GlobalCodebase, GlobalVariables,   LocalFrameHandle, LocalVariables, LocalWord, NullLocalFrame, PortHandle,   ShortControlLink];PrincOpsExtras2: DEFINITIONS =  BEGIN  BYTE: TYPE = [0..377B];  -- control link definitions    ControlLinkVariants: TYPE = {frame, shortProc, indirect, longProc, rep0, rep1};  ControlLinkTag: TYPE = ControlLinkVariants [frame .. longProc];  ControlLink: TYPE = MACHINE DEPENDENT RECORD [    SELECT OVERLAID ControlLinkVariants FROM      frame => [        frame: PrincOps.LocalFrameHandle, fill: WORD ¬ 0],      shortProc => [        gf: ShortGlobalFrameHandle, pc: PrincOps.BytePC],      indirect => [	SELECT OVERLAID * FROM	  port => [port: PrincOps.PortHandle, fill: WORD ¬ 0],	  link => [link: POINTER TO ControlLink, fill: WORD ¬ 0],	  ENDCASE],      longProc => [        gfi: GFTHandle, pc: PrincOps.BytePC],      rep0 => [fill0: [0..37777B], indirect: BOOLEAN, proc: BOOLEAN, fill: WORD],      rep1 => [gfi: GFTIndex, tag: ControlLinkTag, fill: WORD],      ENDCASE];  ProcDesc: TYPE = longProc ControlLink;  ShortProcDesc: TYPE = shortProc ControlLink;  TrapLink, NullLink: ControlLink = ControlLink[frame[PrincOps.NullLocalFrame]];  trapLink, nullLink: ControlLink = NullLink;  UnboundLink: ControlLink =    ControlLink[rep1[gfi: nullGFI, tag: longProc, fill: 0]];  unboundLink: ControlLink = UnboundLink;  -- local frames  LocalFrameBase: TYPE = POINTER TO LocalOverhead;    LocalOverhead: TYPE = MACHINE DEPENDENT RECORD [    word (0): PrincOps.LocalWord,    returnlink (1): PrincOps.ShortControlLink,    globallink (2): GFTHandle,    pc (3): PrincOps.BytePC,    local (4): PrincOps.LocalVariables];    -- global frame  LongGlobalFrameHandle: TYPE = LONG POINTER TO PrincOps.GlobalVariables;    ShortGlobalFrameHandle: TYPE = POINTER TO PrincOps.GlobalVariables;    GlobalFrameBase: TYPE = LONG POINTER TO GlobalOverhead;    GlobalWord: TYPE = MACHINE DEPENDENT RECORD [    gfi (0:0..13): GFTIndex,    trapxfers (0:14..14),    codelinks (0:15..15): BOOLEAN];    ExtraGlobalWord: TYPE = MACHINE DEPENDENT RECORD [    unused (0:0..10): CARDINAL[0..2048),    started (0:11..11),    copy (0:12..12),    copied (0:13..13),    alloced (0:14..14),    shared (0:15..15): BOOLEAN];    GlobalOverhead: TYPE = MACHINE DEPENDENT RECORD [    extra (0): ExtraGlobalWord,    word (1): GlobalWord,    global (2): PrincOps.GlobalVariables];    NullGlobalFrame, nullGlobalFrame: LongGlobalFrameHandle = NIL;    extraGlobalWordOffset: CARDINAL = 2;  globalWordOffset: CARDINAL = 1;  -- GFT    GFTIndex: TYPE = CARDINAL[0..16384);    GlobalFrameTable: TYPE = LONG BASE POINTER TO ARRAY GFTIndex OF GFTItem;    GFT: GlobalFrameTable = LOOPHOLE[400000B];    GFTHandle: TYPE = GlobalFrameTable RELATIVE ORDERED POINTER [0..LAST[CARDINAL]] TO GFTItem;   EmptyGFTItem: GFTItem = [inuse[globalFrame: NIL, codebase: [code[NIL]]]];  nullGFI: GFTIndex = FIRST[GFTIndex];  nullGFH: GFTHandle = FIRST[GFTHandle];      -- First page reserved for Germ  GermUseOnly: TYPE = GFTIndex[0..64);  -- Environment.wordsPerPage / SIZE[GFTItem]    -- reserved for Pilot use  Reserved: TYPE = GFTIndex[LAST[GermUseOnly]+1..LAST[GermUseOnly]+6);   CrossMDSSlot: GFTIndex = FIRST[Reserved];  -- used for crossMDS linkage in Germ     GFTItem: TYPE = MACHINE DEPENDENT RECORD [     SELECT OVERLAID * FROM       inuse => [         globalFrame: LongGlobalFrameHandle,         codebase: PrincOps.GlobalCodebase],       free => [         next: GFTHandle,	 fill0: CARDINAL ¬ 0,	 nullCodebase: LONG CARDINAL ¬ 0]       ENDCASE];      codebaseLowOffset: CARDINAL = 2;    codebaseHighOffset: CARDINAL = 3;     GFTIndexToHandle: PROCEDURE [gfi: GFTIndex] RETURNS [GFTHandle] = INLINE {    RETURN[ LOOPHOLE[gfi * SIZE[GFTItem]] ] };    GFTHandleToIndex: PROCEDURE [gfh: GFTHandle] RETURNS [GFTIndex] = INLINE {    RETURN[ LOOPHOLE[gfh] / SIZE[GFTItem] ] };      OldSignalDesc: TYPE = MACHINE DEPENDENT RECORD [    gf: ShortGlobalFrameHandle, index: CARDINAL];    NewSignalDesc: TYPE = MACHINE DEPENDENT RECORD [    gf: GFTHandle, index: CARDINAL];  nullSignal: NewSignalDesc = [nullGFH, 0];    ImportLinkTag: TYPE = {newProc, oldProc, newSignal, oldSignal, variable};  ImportLink: TYPE = MACHINE DEPENDENT RECORD [    SELECT OVERLAID ImportLinkTag FROM      newProc => [proc: longProc ControlLink],      oldProc => [proc: shortProc ControlLink],      newSignal => [signal: NewSignalDesc],      oldSignal => [signal: OldSignalDesc],      variable => [pointer: LONG POINTER],      ENDCASE];    nullProcImportLink: newProc ImportLink = [newProc[LOOPHOLE[UnboundLink]]];  nullSignalImportLink: newSignal ImportLink = [newSignal[nullSignal]];  nullVariableImportLink: variable ImportLink = [variable[NIL]];  END.