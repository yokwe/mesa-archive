-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- System.mesa   (last edited by AWL       on  22-Nov-82 16:53:34)DIRECTORY   Device USING [Type],   ESCAlpha USING [aRRIT],   Mopcodes USING [zESC];System: DEFINITIONS =BEGIN   -- Universal identifiersUniversalID: TYPE [5];nullIDRep: MACHINE DEPENDENT RECORD [a, b, c, d, e: WORD] = [0, 0, 0, 0, 0];   -- never returned by GetUniversalIDnullID: UniversalID = LOOPHOLE[nullIDRep];GetUniversalID: PROCEDURE RETURNS [uid: UniversalID];VolumeID: TYPE = RECORD [UniversalID]; -- another useful special case of UniversalIDPhysicalVolumeID: TYPE = RECORD [UniversalID]; -- yet another useful special case of UniversalID   -- Network addressesNetworkAddress: TYPE = MACHINE DEPENDENT RECORD [   net: NetworkNumber,   host: HostNumber,   socket: SocketNumber];NetworkNumber: TYPE [2];HostNumber: TYPE [3];SocketNumber: TYPE [1];nullNetworkAddress: NetworkAddress = [   net: nullNetworkNumber,   host: nullHostNumber,   socket: nullSocketNumber];nullNetworkNumber: NetworkNumber = LOOPHOLE[LONG[0]];nullHostNumberRep: MACHINE DEPENDENT RECORD [a, b, c: WORD] = [0, 0, 0];nullHostNumber: HostNumber = LOOPHOLE[nullHostNumberRep];broadcastHostNumberRep: MACHINE DEPENDENT RECORD [a, b, c: WORD] =   [177777B, 177777B, 177777B];broadcastHostNumber: HostNumber = LOOPHOLE[broadcastHostNumberRep];nullSocketNumber: SocketNumber = LOOPHOLE[0];localHostNumber: READONLY HostNumber;   -- Time of dayGreenwichMeanTime: TYPE = RECORD [LONG CARDINAL];   -- A greenwich mean time t represents the time which is t-gmtEpoch seconds after   -- midnight, 1 January 1968, the time chosen as the epoch or beginning of the Pilot   -- time standard.  Within the range in which they overlap, the Alto and Pilot time   -- standards assign identical bit patterns, but the Pilot standard runs an additional   -- 67 years before overflowing.   -- Greenwich mean times should be compared directly only for equality; to find which of   -- two gmt's comes first, apply SecondsSinceEpoch to each and compare the result.  If t2   -- is a gmt known to occur after t1, then t2-t1 is the seconds between t1 and t2.  If t   -- is a gmt, then System.GreenwichMeanTime[t+60] is the gmt one minute after t.gmtEpoch: GreenwichMeanTime = [2114294400];   -- = (67 years * 365 days + 16 leap days) * 24 hours * 60 minutes * 60 secondsGetGreenwichMeanTime: PROCEDURE RETURNS [gmt: GreenwichMeanTime];SecondsSinceEpoch: PROCEDURE [gmt: GreenwichMeanTime] RETURNS [LONG CARDINAL] =   INLINE BEGIN RETURN[gmt-gmtEpoch] END;AdjustGreenwichMeanTime: PROCEDURE [gmt: GreenwichMeanTime, delta: LONG INTEGER]   RETURNS [GreenwichMeanTime] = INLINE BEGIN RETURN[[gmt+delta]] END;LocalTimeParameters: TYPE = MACHINE DEPENDENT RECORD [   direction(0:0..0): WestEast, -- e.g. Pacific is west   zone(0:1..4): [0..12], -- e.g. Pacific is 8   zoneMinutes(1:0..6): [0..59],   beginDST(0:5..15): [0..366], -- e.g. April 30 is 121   endDST(1:7..15): [0..366]]; -- e.g. October 31 is 305WestEast: TYPE = MACHINE DEPENDENT {west(0), east(1)};GetLocalTimeParameters: PROCEDURE [pvID: PhysicalVolumeID ¬ [nullID]]   RETURNS [params: LocalTimeParameters];   -- The parameter pvID should normally be defaulted.LocalTimeParametersUnknown: ERROR;SetLocalTimeParameters: PROCEDURE [      params: LocalTimeParameters, pvID: PhysicalVolumeID ¬ [nullID]];   -- The parameter pvID should normally be defaulted.   -- Interval timingMicroseconds: TYPE = LONG CARDINAL;Pulses: TYPE = RECORD [pulses: LONG CARDINAL];GetClockPulses: PROCEDURE RETURNS [p: Pulses] = MACHINE CODE   {Mopcodes.zESC, ESCAlpha.aRRIT};PulsesToMicroseconds: PROCEDURE [p: Pulses] RETURNS [m: Microseconds];MicrosecondsToPulses: PROCEDURE [m: Microseconds] RETURNS [p: Pulses];Overflow: ERROR;  -- Old interval timer mechanism (clients should convert GetClockPulses)TimerHandle: TYPE = RECORD [Pulses];CreateIntervalTimer: PROCEDURE RETURNS [t: TimerHandle] = LOOPHOLE[GetClockPulses];GetIntervalTime: PROCEDURE [t: TimerHandle] RETURNS [m: Microseconds];   -- System power controlPowerOff: PROCEDURE;SetAutomaticPowerOn: PROCEDURE [time: GreenwichMeanTime, externalEvent: BOOLEAN];ResetAutomaticPowerOn: PROCEDURE;  -- System boot switchesSwitches: TYPE = PACKED ARRAY CHARACTER OF UpDown;UpDown: TYPE = MACHINE DEPENDENT {up (0), down (1)};switches: READONLY Switches;defaultSwitches: Switches = ALL[up];isUtilityPilot: READONLY BOOLEAN;IsUtilityPilot: PROCEDURE RETURNS [BOOLEAN] = INLINE {RETURN[isUtilityPilot]};  -- System boot deviceBootDevice: TYPE = RECORD [device: Device.Type, index: CARDINAL];systemBootDevice: READONLY BootDevice;END.--LOG(Trimmed to Pilot 7.0.  See Pilot 6.0 archives for earlier entries)11-Aug-81 11:25:27		AWL         Trimmed log to Trinity.  Added Switches.  Made nullIDRep a MACHINE DEPENDENT RECORD.  Added BootDevice, IsUtilityPilot, Overflow and systemBootDevice.9-Nov-81 14:05:55		AWL         Added HostNumber, isUtiltiyPilot.  Made IsUtilityPilot an INLINE.9-Nov-81 14:05:55		WDK       MiscAlpha changed to ESCAlpha.7-Dec-81  8:07:27		AWL         NetworkAddress is now concrete here.December 7, 1981  3:13 PM	AWL         Added definitions of nullNetworkAddress, nullNetworkNumber, nullHostNumber,   nullSocketNumber, broadcastHostNumber. 1-Oct-82 14:56:37		AWL         Removed FileID - file ID's are no longer UIDs.22-Nov-82 16:53:30		AWL         Added localHostNumber.  Named field of Pulses to pulses.