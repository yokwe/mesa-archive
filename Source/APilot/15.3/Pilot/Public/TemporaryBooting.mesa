-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- TemporaryBooting.mesa (last edited by: JXP    on:   6-Jul-83 15:23:15)DIRECTORY  Environment USING [PageCount],  File USING [File, PageNumber, Type],  PhysicalVolume USING [ID],  System USING [defaultSwitches, Switches],  Volume USING [ID];TemporaryBooting: DEFINITIONS =  BEGIN  tBootFile: READONLY File.Type;     -- Only files of this type may be made bootable.  MakeBootable: PROCEDURE [file: File.File, firstPage: File.PageNumber ¬ 0];     -- Install the chaining links in the labels of the file pages starting with the specified     -- first page and for the length of the contained Pilot boot file.     -- MakeBootable must be performed after contents are written and before file is passed to     -- BootFrom.     -- InvalidParameters is raised if file is of wrong type or doesn't contain Pilot boot file     -- starting at firstPage.  MakeUnbootable: PROCEDURE [    file: File.File, firstPage: File.PageNumber ¬ 0];     -- Remove the chaining links.  May speed subsequent bulk access to the file.  InstallVolumeBootFile: PROCEDURE [    file: File.File, firstPage: File.PageNumber ¬ 0];     -- Set up the file as the one gaining control when the containing (logical) volume is booted.  InstallPhysicalVolumeBootFile: PROCEDURE [    file: File.File, firstPage: File.PageNumber ¬ 0];     -- Set up the (logical) volume as the one gaining control when the containing physical     -- volume is booted.  BootFromFile: PROCEDURE [    file: File.File, firstPage: File.PageNumber ¬ 0,    switches: System.Switches ¬ System.defaultSwitches];     -- Restart the system from the specified boot file.  Improper arguments will likely result     -- in an MP code and crash.  BootFromVolume: PROCEDURE [    volume: Volume.ID, switches: System.Switches ¬ System.defaultSwitches];     -- Restart the system from the Pilot boot file installed on the specified volume.  BootFromPhysicalVolume: PROCEDURE [    volume: Volume.ID, switches: System.Switches ¬ System.defaultSwitches];     -- Restart the system from the Pilot boot file installed on the physical volume     -- containing the specified (logical) volume.  BootButton: PROCEDURE [switches: System.Switches ¬ System.defaultSwitches];  -- Restart the system as if its boot button had been pressed (may ignore switches).    BootLocation: TYPE = RECORD [    body: SELECT bootLocation: * FROM      bootButton, none => NULL,      physicalVolume => [pvLocation: PVLocation],      logicalVolume => [volumeLocation: VolumeLocation],      file => [fileLocation: FileLocation],      ENDCASE];  -- Describes a place that the state of a running Pilot may be saved in, or  -- restored from.  -- Currently, it is only possible to save state in a file BootLocation.  -- A bootButton BootLocation is always valid.  The other variants are only valid  -- for limited periods of time, as denoted below.  The conservative approach is  -- to never store these other variants in a permanent location and to always  -- recreate them just before calling OutLoadInLoad.    PVLocation: TYPE [11];  VolumeLocation: TYPE [11];  FileLocation: TYPE [11];    -- The following procedures return a BootLocation for the specified location.  -- For each operation, the circumstances under which the returned information  -- becomes invalid is noted.   GetFileLocation: PROCEDURE [    file: File.File, firstPage: File.PageNumber ¬ 0]    RETURNS [bootLocation: file BootLocation];  -- The returned BootLocation is valid so long as the specified file is  -- neither deleted or has any of its attributes changed (including size  -- and permanency).  Scavenging may invalidate the returned BootLocation   -- if the file was damaged and the client scavenger repaired the damage.  -- The returned BootLocation is also only valid if the specified file has  -- been made bootable (via TemporaryBooting.MakeBootable) and is not  -- subsequently made unbootable.  -- May raise File.Unknown, Volume.Unknown.  -- Raises TemporaryBooting.InvalidParameters if the specified file page is  -- beyond the end of the file.    GetVolumeLocation: PROCEDURE [volume: Volume.ID]    RETURNS [bootLocation: logicalVolume BootLocation];  -- The returned BootLocation is only valid so long as the boot files are  -- not changed on the specified volume.  The comments for the validity of  -- returned BootLocations in GetFileLocation also apply here.  -- Raises TemporaryBooting.InvalidParameters if the specified volume does  -- not have a Pilot boot file installed on it.  -- May raise Volume.Unknown, Volume.NotOpen.    GetPVLocation: PROCEDURE [volume: PhysicalVolume.ID]    RETURNS [bootLocation: physicalVolume BootLocation];  -- Valid so long as the boot files are not changed on the specified  -- physical volume.  The comments for the validity of returned BootLocations  -- in GetFileLocation also apply here.  -- Raises TemporaryBooting.InvalidParameters if the specified volume does  -- not have a Pilot boot file installed on it.  -- May raise PhysicalVolume.Error[physicalVolumeUnknown].    OutLoadInLoad: PROCEDURE [    outloadLocation: file BootLocation,  -- loaciton to save current system    -- The following describe the instance of Pilot to be restored    inloadLocation: BootLocation,    pMicrocode, pGerm: LONG POINTER ¬ NIL, countGerm: Environment.PageCount ¬ 0,    switches: System.Switches ¬ System.defaultSwitches];  -- The state of the currently running Pilot is saved on outloadLocation.  -- The Pilot represented by inloadLocation is restored to a running state.  -- The microcode and/or germ may be changed by passing the appropriate   -- information in pMicrocode, pGerm and countGerm.  If these pMicrocode is  -- defaulted, the microcode is not changed.  If pGerm is defaulted, the germ  -- is not changed.  -- The switches are available to the inloaded Pilot.  These are typically  -- only examined when the Pilot being booted is not an outload file (e.g., it  -- was made by MakeBoot).  Note that the switches may be ignored if  -- inloadLocation is a bootButton BootLocation.  -- Upon return, the client has successfully performed the outload and someone  -- else later has requested that THIS instance of Pilot be inloaded.  InvalidParameters: ERROR;  InvalidVersion: ERROR; -- Note that this error is raised by MakeBootable AFTER the  -- the file is made bootable.  END.--LOGTime: September 14, 1979  2:45 PM	By: PXM       Create fileTime: October 3, 1979  6:17 PM	By: PXM       Add InstallAsBoot*Time: January 25, 1980  10:58 AM	By: PXM       InstallAsBootFile=>InstallVolumeBootFile;   InstallAsBootVolume[vol]=>InstallPhysicalBootVolume[file]; add BootFromPhysicalVolume,   Boot; add Switches to Boot*Time: April 17, 1980  10:34 AM	By: PXM       Default for firstPage to BootFrmFile missingTime:  9-Aug-81 15:03:38	By: AWL         Switches now in System.Time: 10-Nov-81  13:45:00       By: JXP      Added InvalidVersion ERROR.Time: 22-Nov-82 16:03:03	By: AWL         File.Capability => File.File.Time: 30-Mar-83 17:25:52	By: AWL         Added BootLocation, PVLocation, VolumeLocation, FileLocation, GetFileLocation, GetVolumeLocation, GetPVLocation, OutLoadInLoad.Time:  6-Jul-83 15:25:51	By: JXP      Added "none" variant to BootLocation