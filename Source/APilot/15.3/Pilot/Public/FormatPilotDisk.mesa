-- Copyright (C) 1982, 1986, 1987  by Xerox Corporation. All rights reserved. -- FormatPilotDisk.mesa edited by: CAJ       19-Jun-87 13:39:12DIRECTORY  PhysicalVolume USING [Handle, PageCount, PageNumber];FormatPilotDisk: DEFINITIONS =  BEGIN  DiskPageNumber: TYPE = PhysicalVolume.PageNumber;  FailureType:    TYPE = {    emptyFile, firstPageBad, microcodeTooBig, makeBootableFailed, other};  PassesLeft:     TYPE = CARDINAL;  RetryLimit:     TYPE = [0..254);  noRetries:      RetryLimit = 0;  retryLimit:     RetryLimit = LAST[RetryLimit];  BadPage:                      SIGNAL [p: DiskPageNumber];  MicrocodeInstallFailure:      SIGNAL [m: FailureType];    -- Generated upon install error.  If resumed, InstallBootMicrocode    -- will "eat" the remaining input (until NIL) and then return    -- (this may be usefull for some protocols).  PassDone:			SIGNAL [passesLeft: PassesLeft];    -- PassDone MUST be RESUMEd for proper cleanup  CantInstallUCodeOnThisDevice: ERROR;  FormattingMustBeTrackAligned: ERROR;    -- The formatting was either not track aligned or an integral number of    --   tracks long.  FormattingUnitConflict: ERROR;    -- The unit specified to be formatted is inconsistent with the device    -- FormattingUnit, e.g., specifying a single track to a disk which must    -- be formatted wholeDisk at a time.  NotAPilotDisk:                ERROR;  DiskInfo: PROC [h: PhysicalVolume.Handle] RETURNS [    firstPilotPage: DiskPageNumber, countPages: PhysicalVolume.PageCount,    pagesPerTrack: CARDINAL, pagesPerCylinder: CARDINAL];    -- Returns in firstPilotPage the first page on the device where Pilot    --   volumes may begin.  countPages is the total number of pages on that    --   volume.  Thus the total number of pages available to hold Pilot    --   volumes is countPages-firstPilotPage.  Format: PROC [    h: PhysicalVolume.Handle, firstPage: DiskPageNumber, count: LONG CARDINAL,    passes: CARDINAL ¬ 10, retries: RetryLimit ¬ noRetries,    returnOnUserAbort: BOOLEAN ¬ FALSE, signalPassDone: BOOLEAN ¬ FALSE];    -- Formats pages [firstPage..firstPage+count) of the drive h.  This    --   is done in a manner appropriate for that device.   If the device    --   requires track aligned formatting, then the error    --   rFormattingMustBeTrackAligned may be raised.    -- Passes is the number of times to go over disk for bad pages     -- Retries is the number of times to retry page if any problem    --   verifying headers or data.    -- ReturnOnUserAbort indicates whether the user abort (set via SetUserAbort)    --   should be checked for early return during format.    -- SignalPassDone indicates whether a PassDone should be raised on    --   completion of each pass.  FormatBootMicrocodeArea: PROC [    h: PhysicalVolume.Handle, passes: CARDINAL, retries: RetryLimit];    -- Format the area of the disk where the boot microcode will reside.    InstallBootMicrocode: PROC [    h: PhysicalVolume.Handle, getPage: PROC RETURNS [LONG POINTER]];    -- Install boot microcode on disk.  Repeatedly calls getPage until    -- NIL is returned.  Copies the information out of the page and does    -- the magic.  Pointer's page which must be resident and page    -- aligned.  Scan: PROC [    h: PhysicalVolume.Handle, firstPage: DiskPageNumber, count: LONG CARDINAL,    retries: RetryLimit ¬ 10];    -- Scan (verify headers, read all Data IN [firstPage..firstPage+count))  SetUserAbort: PROC;    -- Sets indicator that the user wishes to abort a Format in progress.    -- Format checks the indicator if it was called with returnOnUserAbort = TRUE.  END.--LOG-- (See Mesa 11.0 archives for earlier entries)Time: 13-Nov-84 16:14:54	AWL        Removed device-specific constants.  Added DiskInfo.Time:  2-Jul-86 11:12:10	CAJ        No more labels; removed FailureType.flakeyPageFound, added .makeBootableFailed.19-Jun-87 13:38:37	CAJ     Added diag changes: Format parameters returnOnUserAbort and signalPassDone, proc SetUserAbort, signal PassDone, type PassesLeft.  Added new error FormattingUnitConflict.