-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- OthelloOps.mesa      16-Aug-83 13:33:02 by JXP   DIRECTORY  Device         USING [Type],  File           USING [File, PageNumber],  PhysicalVolume USING [Handle, ID, PageNumber],  System         USING [GreenwichMeanTime, LocalTimeParameters, Switches],  Volume         USING [ID, nullID, PageCount];    -- Operations useful to volume utilities.OthelloOps: DEFINITIONS =  BEGIN  DecodeSwitches: PROC [switchString: LONG STRING]    RETURNS [switches: System.Switches];  BadSwitches: ERROR;  DeleteTempFiles: PROCEDURE [Volume.ID];  VolumeNotClosed: ERROR;  GetDriveSize: PROCEDURE [h: PhysicalVolume.Handle]    RETURNS [nPages: LONG CARDINAL];  -- returns total size, ignoring reserved spaces, etc.  BootFileType: TYPE = {hardMicrocode, softMicrocode, germ, pilot};  MakeBootable, MakeUnbootable: PROCEDURE [    file: File.File, type: BootFileType, firstPage: File.PageNumber];  InvalidVersion: ERROR;  -- Prepare (or undo) chains for making a file bootable.  --  There is no need to remove bootlinks merely to delete  -- a file.  Boot links should be removed before any increase or decrease in  -- the size of a file, and reinstalled after the operation.  SetVolumeBootFile, SetPhysicalVolumeBootFile: PROCEDURE [    file: File.File, type: BootFileType, firstPage: File.PageNumber];  GetVolumeBootFile: PROCEDURE [lvID: Volume.ID, type: BootFileType]    RETURNS [file: File.File, firstPage: File.PageNumber];  GetPhysicalVolumeBootFile:    PROCEDURE [pvID: PhysicalVolume.ID, type: BootFileType]    RETURNS [file: File.File, firstPage: File.PageNumber];  VoidVolumeBootFile: PROCEDURE [lvID: Volume.ID, type: BootFileType];  VoidPhysicalVolumeBootFile:    PROCEDURE [pvID: PhysicalVolume.ID, type: BootFileType];  SetDebuggerSuccess: TYPE = {    success, nullBootFile, cantWriteBootFile, notInitialBootFile,    cantFindStartListHeader, startListHeaderHasBadVersion, other, noDebugger};  SetGetSwitchesSuccess:    TYPE = SetDebuggerSuccess[success..other];  SetExpirationDateSuccess: TYPE = SetDebuggerSuccess[success..other];  GetExpirationDateSuccess: TYPE = SetDebuggerSuccess[success..other];  SetDebugger: PROCEDURE [    debuggeeFile: File.File, debuggeeFirstPage: File.PageNumber,    debugger: Volume.ID, debuggerType: Device.Type, debuggerOrdinal: CARDINAL]    RETURNS [SetDebuggerSuccess];      SetExpirationDate: PROCEDURE [    file: File.File, firstPage: File.PageNumber,    expirationDate: System.GreenwichMeanTime]    RETURNS [SetExpirationDateSuccess];      GetExpirationDate: PROCEDURE [file: File.File, firstPage: File.PageNumber]    RETURNS [GetExpirationDateSuccess, System.GreenwichMeanTime];      SetSwitches: PROCEDURE [    file: File.File, firstPage: File.PageNumber, switches: System.Switches]    RETURNS [SetGetSwitchesSuccess];      GetSwitches: PROCEDURE [file: File.File, firstPage: File.PageNumber]    RETURNS [SetGetSwitchesSuccess, System.Switches];  -- Physical layout of subvolumes on a physical Volume:    LogicalVolumePageNumber: TYPE = LONG CARDINAL;  SubVolume: TYPE = RECORD [    lvID:              Volume.ID,    subVolumeSize:     Volume.PageCount,    firstLVPageNumber: LogicalVolumePageNumber,    firstPVPageNumber: PhysicalVolume.PageNumber];  nullSubVolume: SubVolume = [Volume.nullID, 0, 0, 0];  GetNextSubVolume: PROCEDURE [pvID: PhysicalVolume.ID, thisSv: SubVolume]    RETURNS [nextSV: SubVolume];  SubVolumeUnknown: ERROR [sv: SubVolume];    -- Time related functions:    IsTimeValid: PROCEDURE RETURNS [valid: BOOLEAN];  -- Returns TRUE if the processor clock appears to be set correctly.    SetProcessorTime: PROCEDURE [time: System.GreenwichMeanTime];  -- Sets the processor clock to the specified value.  In general, the  -- clock should NOT be set backwards from that returned by  -- System.GetGreenwhichMeanTime.    GetTimeFromTimeServer: PROCEDURE []     RETURNS [       serverTime: System.GreenwichMeanTime,       serverLTPs: System.LocalTimeParameters];  -- Attempts to access a time server to determine what time it currently is  -- and the local time parameters that the server is using.  Will  -- raise TimeServerError if this operation fails.    TimeServerError: ERROR [error: TimeServerErrorType];  TimeServerErrorType: TYPE = {noCommunicationFacilities, noResponse};  END.--LOGJuly 13, 80 7:17 PM  FXH       Create from old OthelloOps and Old OthelloInternalInterface11-Aug-81 15:14:43   AWL         DecodeSwitches takes a LONG STRING.  Switches now in System.  Added SetProcessorTime,   GetTimeFromTimeServer and TimeServerError.10 Nov 81 13:46:00   JXP      Added InvalidVersion ERROR.12-Nov-81  9:46:49   FXH       Add SetExpirationDate.24-Nov-82  9:12:20   AWL         Add GetExpirationDate, GetExpirationDateSuccess.  File.Capability => File.File.  Renamed "cap" arguments to "file".27-Jun-83 17:40:34   WDK       Added pilotSnapshot.Time: 11-Jul-83 14:30:56        By: JXP      The parm. debuggeeCap => debuggeeFile in SetDebugger.Time: 16-Aug-83 13:33:12        By: JXP      Decommision the pilotSnapshot BootFileType for the time being.