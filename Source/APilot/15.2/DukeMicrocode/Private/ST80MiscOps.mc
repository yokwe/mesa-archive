{ ST80MiscOps.mcMesa escape bytecodes for Smalltalk.  This file contains the code to switch between the Mesa emulator and the Smalltalk emulator.	by P McCullough, J Trow, J Monahan	 5-Dec-90 14:38:56Copyright 1983, 1984, 1985, 1986, 1987, 1988, 1990 by Xerox Corporation.  All rights reserved. }noop:	T ¬ ErrnIBnStkp,						c1, at[09,10,ESC3n];	T ¬ T and 0F, 							c2;	T ¬ T xor 0F, 							c3;	TT ¬ uDebugTemp, 						c1;	[] ¬ T xor TT, ZeroBr, 						c2;	BRANCH [noopTrap, $], 						c3;	Noop, 								c1;	IBDisp,								c2;	DISPNI [OpTable],						c3;noopTrap:	Noop, 								c1;	IBDisp,								c2;	DISPNI [OpTable],						c3;doInitializationBytecode:	uRumRecordHigh ¬ TOS,						c1, at[0A,10,ESC3n];	Q ¬ STK, pop,							c2;	uRumRecordLow ¬ Q, GOTO [ReturnFromRum],			c3;ReturnFromRum:		TOS ¬ STK, pop, GOTO [IBDispOnly],				c1, at[addrReturnFromRum];IfGreater[TheNumberOfBanks,SmallTalkBank,,SkipTo[NoSmallTalk]];doBytecodesBytecode:	L0 ¬ 0, 							c1, at[0B,10,ESC3n];	Bank ¬ bankSmallTalk, GOTO [switchToRum],			c2;doStabilizationBytecode:	L0 ¬ 1,								c1, at[0C,10,ESC3n];	Bank ¬ bankSmallTalk, GOTO [switchToRum],			c2;doCompress:	L0 ¬ 2,								c1, at[0D,10,ESC3n];	Bank ¬ bankSmallTalk, GOTO [switchToRum],			c2;switchToRum:	GOTOBANK [SmallTalkEntry],					c3;SkipTo[EndSmallTalkConditional];NoSmallTalk!doBytecodesBytecode:	PC ¬ PC - 1, GOTO[ESCb], 					c1, at[0B,10,ESC3n];doStabilizationBytecode:	PC ¬ PC - 1, GOTO[ESCb]						c1, at[0C,10,ESC3n];doCompress:	PC ¬ PC - 1, GOTO[ESCb]						c1, at[0D,10,ESC3n];EndSmallTalkConditional!{	PMemFetch: PROCEDURE [LONG CARDINAL] RETURNS [CARDINAL] --fetch a word from any real address }pMemFetch:	rhT ¬ TOS LRot0,						c1, at[0E,10,ESC3n];	T ¬ STK, fXpop, fZpop,						c2;	Noop,								c3;	MAR ¬ [rhT, T + 0],						c1;	IBDisp, CANCELBR [$, 0],					c2;	TOS ¬ MD {read word}, DISPNI [OpTable],				c3;{	PMemSmash: PROCEDURE [LONG CARDINAL, CARDINAL] --store a word at any real address }pMemSmash:	rhT ¬ STK, pop, {high address}					c1, at[0F,10,ESC3n];	T ¬ STK, pop, {low address}					c2;	Noop, {TOS = value}						c3;	MAR ¬ [rhT, T + 0],						c1;	MDR ¬ TOS {smash word}, IBDisp, CANCELBR [$, 0],		c2;	TOS ¬ STK, pop, DISPNI [OpTable],				c3;{getBase:	{GetBase: PROCEDURE [oop: Word] RETURNS [RealAddress]}	TT ¬ TOS, fXpop, push,						c1, at[ 6,10,ESC8n];	rhT ¬ uRumRecordHigh, push, 					c2;	T ¬ uRumRecordLow,						c3;	MAR ¬ [rhT, T + objectTableHighOffset],				c1; {read ot base}	push, fZpop, CANCELBR [$, 2],					c2;	rhTT ¬ MD, 							c3;	MAR ¬ [rhTT, TT + 0],						c1; {index ot, get low addr}	CANCELBR [$, 2],						c2;	T ¬ MD,								c3;	MAR ¬ [rhTT, TT + 1],						c1; {index ot, get high addr}	T ¬ T + objectHeaderSize, IBDisp, CANCELBR [$, 2],		c2; {adjust low}	STK ¬ T, TOS ¬ MD, DISPNI [OpTable],				c3;}{ Edit history: }