-- Copyright (C) 1982, 1983, 1987  by Xerox Corporation. All rights reserved.---- File: DiagFlTapeTTY.mesa-- Edited by: PJT 11-Mar-87 16:17:18--  DiagFlTapeTTY:  DEFINITIONS=  BEGIN  DiagFlTapeTTYImpl:	PROGRAM;  CharsPerLine:		CARDINAL; --characters in a line on the CRT, usually 80  CRAtCharPosition:	CARDINAL; --character number at which an CR is done   CharPosition:		CARDINAL;  UserAbort:		SIGNAL;    CursorAtStartPosition: BOOLEAN;  -- can be used to wiggle the cursor while the subtest is running  -- indicating that the system is alive  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  AddChar: PROCEDURE [		char: CHARACTER,		charCount: CARDINAL¬ 1,		checkLineLength: BOOLEAN¬ FALSE];  -- Displays the given char on the screen  -- Checks line length for automatic CRs.  -- Displayed characters in the line are tracked.   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    AddDecimal: PROCEDURE [			number:		 CARDINAL,			signed:		 BOOLEAN¬ FALSE,			plus:		 BOOLEAN¬ FALSE,			checkLineLength: BOOLEAN¬ FALSE];  -- Displays the given number on the screen including the sign if specified.  -- Checks line length for automatic CRs. Characters in the line are tracked.   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    AddLongDecimal: PROCEDURE [		number:		 LONG CARDINAL,		signed:		 BOOLEAN¬ FALSE,		plus:		 BOOLEAN¬ TRUE,		checkLineLength: BOOLEAN¬ FALSE];  -- Displays the given number on the screen including the sign if specified.  -- Checks line length for automatic CRs. Characters in the line are tracked.     -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   AddString: PROCEDURE [		string: LONG STRING¬ NIL,		checkLineLength: BOOLEAN¬ FALSE];  -- Displays the given string on the screen  -- Checks line length for automatic CRs.  -- Displayed characters in the line are tracked.   -- If the string equals NIL can be used just to check the line length.      -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- checks the length of a line on a CRT and does an automatic CR  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     CheckLineLength: PROCEDURE;    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ClearBackedUpChars: PROCEDURE; -- clears all of the typed characters that were not yet accepted by the program  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ClearPriorLine: PROCEDURE; -- clears one prior line given and moves back up the screen   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ClearPriorLines: PROCEDURE	[		lineCount: CARDINAL¬ 1]; -- clears the number of prior lines given and moves back up the screen   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- deletes characters on the CRT of the desired count  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    EraseText: PROCEDURE [			stringLength: CARDINAL¬ 0,			decrCharPosition: BOOLEAN¬ TRUE];    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    Initialize: PROCEDURE [	charactersPerLine:	CARDINAL¬ 80,	returnAtCharPosition:	CARDINAL¬ 50,	linesOnScreen:		CARDINAL¬ 24]; -- clears the entire screen and moves the cursor to the top/left position -- and presets line and character counts to 0. -- (the line and character counter are used with Command Files and PutString --  and OutMsg)  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    GetChar: PROCEDURE RETURNS [char: CHARACTER]; -- gets and returns a character from the user  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  GetNumber: PROCEDURE [   prompt: LONG STRING¬ NIL,   deletePrompt: BOOLEAN¬ FALSE, --delete the prompt message   clearBackedUPChars:	BOOLEAN¬ TRUE,   displayExplanation: BOOLEAN¬ FALSE, --displays the explanations   delNum: BOOLEAN¬ FALSE,   --delete the number on the screen   --used to delete command file menu selections   signed: BOOLEAN¬ FALSE,   --requires a + or - in front of the number   numberInHex: BOOLEAN¬ FALSE,   --treat the entered number as hexadecimal   acceptNumWithin: BOOLEAN¬ FALSE,   --accept only the range given from num1 to num2   minNumber: CARDINAL¬ 0,   --low number of acceptNumWithin   maxNumber: CARDINAL¬ 0,   --high number of acceptNumWithin    acceptOnlyValidNums: BOOLEAN¬ FALSE,   --the number accepted must be in the acceptedNums array   validNums: LONG DESCRIPTOR FOR ARRAY OF CARDINAL¬ DESCRIPTOR [NIL, 0],   --array of numbers accepted when acceptOnlyGivenNums is true   --next stuff is for lines of explanation when a ? is entered   useOnlyExp: BOOLEAN¬ FALSE,   --use explLines for line count output(limits putting all out)   explLines: CARDINAL¬ 0,   --explanation line count to be output   explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0],   numberExplanations:	BOOLEAN¬ FALSE]   --the array of strings to be output with a '?   RETURNS [     numInStrForm: LONG STRING,     --used in building command file     num: CARDINAL,     positive: BOOLEAN¬ TRUE];      -- usable to get any number size (LONG STRING OR CARDINAL) -- also usable to get + or - numbers -- also outputs explanations when a '? is entered -- also SIGNALs Restart when a control-C or a BREAK is typed -- also usable to delete prompt strings -- also usable to delete numbers on the screen after they are no longer needed  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  GetNumbers: PROCEDURE [    prompt: LONG STRING¬ NIL,    acceptNumWithin: BOOLEAN¬ FALSE,    minNumber: CARDINAL¬ 0,    maxNumber: CARDINAL¬ 0,    numberArray: LONG DESCRIPTOR FOR ARRAY OF CARDINAL,    --Note: the array must be cleared with desire value before being passes    explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0]];    --lines of explanation when a ? is entered -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  GetLongNumber: PROCEDURE [    prompt:		LONG STRING¬ NIL,    clearBackedUPChars:	BOOLEAN¬ TRUE,    acceptNumWithin:	BOOLEAN¬ FALSE,    minNumber:		LONG CARDINAL¬ 0,    maxNumber:		LONG CARDINAL¬ 0,     useOnlyExp:		BOOLEAN¬ FALSE,    explLines:		CARDINAL¬ 0,    explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0]] RETURNS [    longNumber: LONG CARDINAL];     -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     GetTime: PUBLIC PROCEDURE [		seconds: LONG CARDINAL,		timeString: LONG STRING]; -- returns the time in hours, minutes and seconds (in string form) -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     GetString: PUBLIC PROCEDURE [   prompt: LONG STRING,   inputString: LONG STRING,   stringLength: CARDINAL,   terminateEntry: CHARACTER¬ 15C,   explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0]]; -- gets a string of desired type and character length from the user     -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     GetYesNo: PROCEDURE [   prompt: LONG STRING¬ NIL,   defaultYes: BOOLEAN¬ FALSE,   checkIfAbort: BOOLEAN¬ TRUE,   messageForm: BOOLEAN¬ FALSE,   returnIfNoInput: BOOLEAN¬ FALSE,   keepScreenOn: BOOLEAN¬ FALSE,   explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0],   partOfCharCount: BOOLEAN¬ FALSE]	RETURNS [yes: BOOLEAN]; -- displays the prompt string if given -- gets a yes or no answer and returns a yes BOOLEAN -- displays the default yes or no on the screen (No is the default) -- check for user abort (if user abort then signals Restart) -- can return if no character input for 3 seconds -- the explanation is displayed if a '? is entered and messageForm is false -- used in command files where characters are tracked						 -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			 HexStrToNum: PROCEDURE [str: LONG STRING] RETURNS [n: CARDINAL]; --Converts a Hexadecimal String to a number   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ProceedOnInput: PROCEDURE [    text: LONG STRING¬ NIL,    keepScreenOn: BOOLEAN¬ FALSE]; -- displays either the given string or "Type any character to continue: " -- and waits for an input character before continuing -- If keepScreenOn is true -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutChar: PROCEDURE [		char: CHARACTER,		charCount: CARDINAL¬ 1]; -- displays the given count of characters on the screen   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    PutCR: PROCEDURE [count: CARDINAL¬ 1];  -- does a carriage return increments the line count  -- and clear the line character count    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- displays the given text in the prescribed columns  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    --  PutColumns: PROCEDURE [  --		title:			LONG STRING	¬ NIL,  --		charactersPerLine:	CARDINAL¬ 80,  --		linesOnScreen:		CARDINAL¬ 24,  --		numberOfColumns:	CARDINAL¬ 2,  --		useGivenEntryCount:	BOOLEAN	¬ FALSE,  --		firstEntry:		CARDINAL¬ 1,  --		lastEntry:		CARDINAL,  --		recordArray: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR[NIL, 0]];		--Note: If recordArray is used the name of the strings		--	to be displayed must be called 'string:' within the record		 -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   PutLine: PROCEDURE [string: LONG STRING]; -- displays the given string on the screen and does a carriage return -- all characters and lines used are tracked   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutMenu: PROCEDURE [   title: LONG STRING¬ NIL,   startSelectionAt: CARDINAL¬ 1,   options: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0],   optionExplanation:	  LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0],   numberExplanations:	BOOLEAN¬ FALSE,   deleteEntry: BOOLEAN¬ TRUE,   addExitSelection: BOOLEAN¬ TRUE]      RETURNS [selection: CARDINAL¬ 0]; -- displays the given menu and returns the selection  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --This procedure outputs a single message line or an array or strings --It can be used for explanations where a '?' is entered and  --is able to return to its original input spot. --It will automatically cleanup prior messages unless specified otherwise. --can be used to clean prior messages by not giving it any strings to display -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PutMessage: PROCEDURE [    str:	    LONG STRING¬ NIL,    numberMessages: BOOLEAN¬ FALSE,    strArray:	    LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0],    useOnlyExp:	    BOOLEAN¬ FALSE,    expLines:	    CARDINAL¬ 1,    selectMessages: LONG DESCRIPTOR FOR ARRAY OF CARDINAL¬ DESCRIPTOR [NIL, 0],    endMessage:	    LONG STRING¬ NIL];  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   PutNumber: PUBLIC PROCEDURE	[	number:		CARDINAL,	size:		CARDINAL¬ 2,	terminateWith:	LONG STRING¬ NIL,	fillSpaceWith:	CHARACTER¬ ' ]; -- alignes and displays the given number -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutLongNumber: PROCEDURE [	number:		LONG CARDINAL,	size:		CARDINAL¬ 7,	fillSpaceWith:	CHARACTER¬ ' ]; -- alignes and displays the given long number   -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   PutQuestionMark: PROCEDURE;  -- displays a questionmark when an illegal character is entered  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutSpaces: PROCEDURE [spaceCount: CARDINAL]; -- displays the given number of spaces on the screen  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutString: PROCEDURE [string: LONG STRING¬ NIL]; -- displays a string on the screen -- if used for CommandFile  -- outputs the string then if the line length is > 60 outputs a RETURN -- if not used for CommandFile  -- outputs the string and counts the characters in CharPosition  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutSubtest: PROCEDURE [testName: LONG STRING,		checkIfAbort: BOOLEAN¬ TRUE,		initialize: BOOLEAN¬ FALSE,		clearPriorTest: BOOLEAN¬ TRUE]; -- displays the test name on the screen -- uses the same screen area to display the test names -- and earases prior test name data   -- outputs the string and counts the characters in CharPosition  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  PutTime: PROCEDURE [seconds: LONG CARDINAL]; -- displays the time in hours, minutes and seconds  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  SelectOptions: PROCEDURE [    prompt: LONG STRING¬ NIL,    numberArray: LONG DESCRIPTOR FOR ARRAY OF BOOLEAN,    explanation: LONG DESCRIPTOR FOR ARRAY OF LONG STRING¬ DESCRIPTOR [NIL, 0]]; -- accepts a string of numbers (individual numbers or from to numbers) -- the from-to numbers are separated by a '- -- individual numbers are separated by a ', -- only numbers within 0 to LENGTH [numberArray] are accepted  -- explanation explans what the numbers are for when a '? is entered -- the following messages are added automatically when a '? is entered: --	"A '-' is used for from to numbers"; --	"Example: 2-5 means do choices 2,3,4,5."; --	"A ',' separates the numbers including from to numbers"; --	"Example: 9,2-5,26,12 means do choices 2,3,4,5,9,12,26."; --	The supported numbers are 0 through (LENGTH [numberArray]- 1)    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- to check for TTY User Abort  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   CheckIfUserAbort: PROCEDURE; END...  --DiagFlTapeTTY    LOG  