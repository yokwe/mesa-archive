-- Copyright (C) 1983, 1985, 1986  by Xerox Corporation. All rights reserved. -- VolBackingStoreImpl.mesa  By: RSV  on   7-Jul-86 17:28:24-- This module implements a backing store based on disk channels used for-- transfering RootPages and MarkerPages. Basically no error handling is provided,-- the debugger is called if anything goes wrong.-- NOTES:-- * Transfer, and everything it calls, must be resident.DIRECTORY  BackingStore USING [Data, TransferProc],  DiskBackingStore USING [GetDiskChannel, ReportErrorToDebugger],  DiskChannel USING [      defaultTries, DiskPageCount, DiskPageNumber, DoIO, goodCompletion,    Handle, IORequest, IOStatus],  Environment USING [PageNumber],  File USING [PageNumber],  FileBasicsPerf,  FileBasicsPrograms,  PhysicalVolume USING [PageNumber],  PilotDiskFace USING [Command],  RuntimeInternal USING [Bug],  VolBackingStore USING [Data, VolDataFromBSData];VolBackingStoreImpl: PROGRAM  IMPORTS    DiskBackingStore, DiskChannel, RuntimeInternal, VolBackingStore  EXPORTS FileBasicsPerf, FileBasicsPrograms, VolBackingStore =  BEGIN  transfers: PUBLIC CARDINAL ¬ 0;    -- Total number of transfer requests.  BugType: TYPE = {funnyCase, invalidChannel, invalidDriveState};  -- PUBLIC PROCEDURES  Transfer: PUBLIC BackingStore.TransferProc --[transData] RETURNS [result]--  =    BEGIN    ioStatus: DiskChannel.IOStatus;    countDone: DiskChannel.DiskPageCount;    diskChannel: DiskChannel.Handle;    ioRequest: DiskChannel.IORequest;    data: VolBackingStore.Data = VolBackingStore.VolDataFromBSData[      transData.data];    command: PilotDiskFace.Command;    firstFilePage: File.PageNumber = data.filePage + transData.offsetFromData;    SELECT transData.operation FROM        read => command ¬ read;      write => command ¬ write;      ENDCASE => Bug[funnyCase];    ioRequest ¬ [      command: command, diskPage: data.pvPage + transData.offsetFromData,      memoryPage: transData.pageBuffer, tries: DiskChannel.defaultTries,      useSamePage: FALSE, count: transData.countBuffer];    diskChannel ¬ DiskBackingStore.GetDiskChannel[data.channelHandle];      -- DiskBackingStore.GetDiskChannel must be RESIDENT,      -- and should be non-ENTRY.    [ioStatus, countDone] ¬ DiskChannel.DoIO[diskChannel, @ioRequest];    WITH ioStatus SELECT FROM      invalidDriveState => Bug[invalidDriveState];      invalidChannel => Bug[invalidChannel];      disk =>        IF ioStatus ~= DiskChannel.goodCompletion THEN          DiskBackingStore.ReportErrorToDebugger[	    channel: diskChannel, request: @ioRequest, countValid: countDone,	    status: status];      ENDCASE => Bug[funnyCase];    transfers ¬ SUCC[transfers];    RETURN[[done[]]];    END;  --Transfer--  -- Exported to FileBasicsPrograms.  InitVolBackingStore: PUBLIC PROCEDURE = {-- might do something someday --};  -- INTERNAL PROCEDURES  Bug: PROCEDURE [type: BugType] = INLINE {RuntimeInternal.Bug[type]};      END.    LOGTime:	17-Nov-82 11:29:45	By: JXP   Action:	Created file from DiskBackingStoreImpl.Time:	13-Dec-82 17:06:33	By: JXP   Action:	Updated comments. Changed from MONITOR to PROGRAM - no monitored data.Time:	28-Jul-83 11:03:53	By: JXP   Action:	Get rid of local copy of ReportErrorToDebugger, use the one exported	by DiskBackingStore.Time:	 5-Apr-85 17:58:07	By: CAJ Action:	New args to ReportErrorToDebugger.Time:   30-Apr-86 15:49:33      By: RSVAction: Added CHANGE comments and new code for when change takes effect.  Deleted all references to labels in TransferTime:    7-Jul-86 17:28:24      By: RSVActino: Actually change the CHANGE comments into the new code that had been written.