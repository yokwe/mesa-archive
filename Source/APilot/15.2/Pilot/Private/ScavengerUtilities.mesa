-- Copyright (C) 1983, 1986  by Xerox Corporation. All rights reserved. -- ScavengerUtilities.mesa  24-Sep-86 13:14:56 by RSV     -- This interface defines types and procedures that are used useful to-- all scavengers and to the implementation of the file system itself.DIRECTORY  DiskChannel USING [DiskPageCount, DiskPageNumber, Handle, IOStatus],  LogicalVolumeFormat USING [Handle],  PhysicalVolume USING [PageNumber],  PhysicalVolumeFormat USING [MarkerHandle],  VolTable USING [LVToken, SVDesc, SVToken],  Volume USING [ID, PageNumber];ScavengerUtilities: DEFINITIONS =  BEGIN  -- TYPES  Direction: TYPE = {forward, backward};  SVInfo: TYPE = RECORD [    valid: BOOLEAN,    svTok: VolTable.SVToken,    svDesc: VolTable.SVDesc,    marker: PhysicalVolumeFormat.MarkerHandle];  TryMode: TYPE = {normalRetry, tryRealHard};  -- normalRetry => use retry algorithms used in  normal operation  -- tryRealHard => go to extroidinary effort to perform the operation  -- PROCEDURES  CheckLVConsistency: PROCEDURE [    vol: LogicalVolumeFormat.Handle,    subvolumes: LONG DESCRIPTOR FOR ARRAY OF SVInfo]    RETURNS [consistent: BOOLEAN];  -- Checks that the indicated LV root page and associated LV sub-marker pages  -- are mutually consistent.  FreeLVBadPages: PROCEDURE [    badPages: LONG DESCRIPTOR FOR ARRAY OF Volume.PageNumber];  FreeLVMarkerPages: PROCEDURE [subvolumes: LONG DESCRIPTOR FOR ARRAY OF SVInfo];  GatherLVBadPages: PROCEDURE [tok: VolTable.LVToken, lv: Volume.ID]    RETURNS [badPages: LONG DESCRIPTOR FOR ARRAY OF Volume.PageNumber];  GatherLVMarkerPages: PROCEDURE [tok: VolTable.LVToken, lv: Volume.ID]    RETURNS [subvolumes: LONG DESCRIPTOR FOR ARRAY OF SVInfo];  -- Gathers all of the marker pages for the indicated logical volume.  -- lv must be locked via VolTable.LockEntireLV.  -- When done, the client must call FreeMarkerPages.  MovePages: PROCEDURE [    firstPage: DiskChannel.DiskPageNumber, count: DiskChannel.DiskPageCount,    direction: Direction, diskChannel: DiskChannel.Handle,    badPages: LONG DESCRIPTOR FOR ARRAY OF PhysicalVolume.PageNumber,    maxMove: DiskChannel.DiskPageCount]    RETURNS [okay: BOOLEAN, countMoved: DiskChannel.DiskPageCount];  <<Moves count pages starting at page firstPage so that all pages are readable  after the move, preserving the old data if possible. countMoved is the number  of pages that each was actually moved. If moving the first page of the run  would require a move of more than maxMove pages, returns okay=FALSE  and no pages are moved. If direction is forward, the new pages will have  larger page numbers than the old, and vice versa.>>  ReadPages: PROCEDURE [    data: LONG POINTER, firstPage: DiskChannel.DiskPageNumber,    count: DiskChannel.DiskPageCount,    diskChannel: DiskChannel.Handle, try: TryMode]    RETURNS [status: disk DiskChannel.IOStatus];  -- Reads count pages into data­ using label, firstPage and diskChannel to  -- actually perform the I/O using a [verify, verify, read] operation.  -- data must be page aligned.  WritePages: PROCEDURE [    data: LONG POINTER, firstPage: DiskChannel.DiskPageNumber,    count: DiskChannel.DiskPageCount, diskChannel: DiskChannel.Handle,     try: TryMode]    RETURNS [status: disk DiskChannel.IOStatus];  -- Writes count pages from data­ using label, firstPage and diskChannel to  -- actually perform the I/O using a [verify, verify, write] operation.  -- data must be page aligned.  END.LOG 2-Dec-82 10:10:05   AWL      	Created file.10-Dec-82 16:06:52   JXP   	Add direction parameter to MovePages.21-Nov-83 10:00:51   JXP   	Added LabelProc to MovePages.24-Sep-86 13:14:56   RSV        Deleted label references.