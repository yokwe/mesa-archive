-- File: DiagDescriptions.mesa - last edit:-- BKI                 29-Oct-87 10:54:15-- SMA                 18-Apr-85 16:30:21-- Copyright (C) 1984, 1985, 1987 by Xerox Corporation. All rights reserved. DIRECTORY  DiagInternal USING [CourierCallProc, DialupParams,    EchoCounterResults, EchoResults, EchoResultsParams, EchoStartParams,    etherDiagErr, EtherStatsResults, EventRepParams, ModemChangeParams,     rs232cDiagErr, RS232CResultsParams, RS232CTestParams, SetLineParams,    WriteMsgParams],  Dialup USING [Number],  Environment USING [Byte],  CommOnlineDiagnostics USING [CommError, CommErrorCode, CountType,    Detail, DialupOutcome, EchoDiagHandle, EtherDiagError, EtherErrorReason,    EtherStatsInfo, RS232CDiagHandle, RS232CDiagError, RS232CErrorReason,    StatsIndices],  Courier USING [Delete, Description, Error, ErrorCode, Handle,    NoSuchProcedureNumber, RemoteErrorSignalled, VersionMismatch];     DiagDescriptions: PROGRAM  IMPORTS CommOnlineDiagnostics, Courier  EXPORTS DiagInternal =  BEGIN  -- The description routines for remote online diagnostics.      <<For backwards compatibility kludges.  This is safe because it is only       modified by MakeCall which is only called from monitered procedures on the      client side.   Server side (callbacks) should never see VersionMismatch.  >>  mismatchSeen: BOOLEAN ¬ FALSE;      xlate: ARRAY Courier.ErrorCode OF CommOnlineDiagnostics.CommErrorCode ¬ [    transmissionMediumHardwareProblem: transmissionMediumProblem,    transmissionMediumUnavailable: transmissionMediumProblem,    transmissionMediumNotReady: transmissionMediumProblem,    noAnswerOrBusy: noAnswerOrBusy,    noRouteToSystemElement: noRouteToSystemElement,    transportTimeout: transportTimeout,    remoteSystemElementNotResponding: remoteSystemElementNotResponding,    noCourierAtRemoteSite: noCourierAtRemoteSite,    tooManyConnections: tooManyConnections,    invalidMessage: invalidMessage,    noSuchProgramNumber: noSuchDiagnostic,    noSuchProcedureNumber: noSuchDiagnostic,    returnTimedOut: returnTimedOut,    callerAborted: callerAborted,    unknownErrorInRemoteProcedure: unknownErrorInRemoteProcedure,    streamNotYours: streamNotYours,    truncatedTransfer: truncatedTransfer,    parameterInconsistency: parameterInconsistency,    invalidArguments: invalidArguments,    protocolMismatch: protocolMismatch,    duplicateProgramExport: duplicateProgramExport,    noSuchProgramExport: noSuchProgramExport,    invalidHandle: invalidHandle,    noError: noError];       DescribeBoolean: PUBLIC Courier.Description =    BEGIN  -- Describes a boolean.    [] ¬ notes.noteSize[SIZE[BOOLEAN]];    END;  -- DescribeBoolean          DescribeCardinal: PUBLIC Courier.Description =    BEGIN  -- Describes a cardinal.    [] ¬ notes.noteSize[SIZE[CARDINAL]];    END;  -- DescribeCardinal              DescribeDialup: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the dialup test.    d: LONG POINTER TO DiagInternal.DialupParams =      notes.noteSize[SIZE[DiagInternal.DialupParams]];          DescribeSeq: Courier.Description =      BEGIN      ptr: LONG POINTER;      nullByte: Environment.Byte ¬ 0;      SELECT notes.operation FROM        fetch => 	  BEGIN	  notes.noteSpace[d.phoneNum, SIZE[CARDINAL]];  --length.	  ptr ¬ d.phoneNum + SIZE[CARDINAL];	  notes.noteBlock[[ptr, 0, d.phoneNum.n]];  --sequence data.	  ptr ¬ @nullByte;	  IF (d.phoneNum.n MOD 2) # 0 THEN notes.noteBlock[[ptr, 0, 1]];	  END;  --fetch        store =>          BEGIN	  length: CARDINAL;	  notes.noteSpace[@length, 1];	  d.phoneNum ¬ notes.zone.NEW[Dialup.Number[length]];  --sets phoneNum.n	  ptr ¬ d.phoneNum + SIZE[CARDINAL];	  IF (length MOD 2) # 0 THEN length ¬ length + 1;  --round to word	  notes.noteBlock[[ptr, 0, length]];	  END;  --store        free => notes.zone.FREE[@d.phoneNum];        ENDCASE;      END;  -- DescribeSeq        -- Start of proc.    notes.noteDisjointData[@d.phoneNum, DescribeSeq];    END;  -- DescribeDialup            DescribeDialupOutcome: PUBLIC Courier.Description =    BEGIN  -- Describes the result of the dialup test.    [] ¬ notes.noteSize[SIZE[CommOnlineDiagnostics.DialupOutcome]];    END;  -- DescribeDialupOutcome          DescribeEchoCounters: PUBLIC Courier.Description =    BEGIN    d: LONG POINTER TO DiagInternal.EchoCounterResults =      notes.noteSize[SIZE[DiagInternal.EchoCounterResults]];    notes.noteLongCardinal[@d.pkts];    notes.noteLongCardinal[@d.bytes];    notes.noteLongCardinal[LOOPHOLE[@d.time]];    END;  -- DescribeEchoCounters      DescribeEchoHandle: PUBLIC Courier.Description =    BEGIN  -- Describes the returned handle for the echo test.    [] ¬ notes.noteSize[SIZE[CommOnlineDiagnostics.EchoDiagHandle]];    END;  --DescribeEchoHandle          DescribeEchoResults: PUBLIC Courier.Description =    BEGIN  -- Describes the echo test results.    OPEN notes;    d: LONG POINTER TO DiagInternal.EchoResults =      noteSize[SIZE[DiagInternal.EchoResults]];    noteLongCardinal[@d.totals.totalTime];    noteLongCardinal[@d.totals.totalAttempts];    noteLongCardinal[@d.totals.successes];    noteLongCardinal[@d.totals.timeouts];    noteLongCardinal[@d.totals.late];    noteLongCardinal[@d.totals.unexpected];    noteLongCardinal[@d.totals.bad];    noteLongCardinal[@d.totals.avgDelayInMsecs];    noteLongCardinal[@d.totals.okButDribble];    noteLongCardinal[@d.totals.badAlignmentButOkCrc];    noteLongCardinal[@d.totals.packetTooLong];    noteLongCardinal[@d.totals.overrun];    noteLongCardinal[@d.totals.idleInput];    noteLongCardinal[@d.totals.tooManyCollisions];    noteLongCardinal[@d.totals.lateCollisions];    noteLongCardinal[@d.totals.underrun];    noteLongCardinal[@d.totals.stuckOutput];    noteLongCardinal[@d.totals.spare];    noteArrayDescriptor[@d.hist, SIZE[CommOnlineDiagnostics.Detail],      LAST[CARDINAL]];    END;  -- DescribeEchoResults          DescribeEchoResultsParams: PUBLIC Courier.Description =    BEGIN  --Describes the parameters for GetEchoResults.    [] ¬ notes.noteSize[SIZE[DiagInternal.EchoResultsParams]];    END;  --DescribeEchoResultsParams          DescribeEventRepParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the event reporter callback in Echo.    [] ¬ notes.noteSize[SIZE[DiagInternal.EventRepParams]];    END;  -- DescribeEventRepParams        DescribeLoopbackHandle: PUBLIC Courier.Description =    BEGIN  --Describes the returned handle for RS232CLoopback.    [] ¬ notes.noteSize[SIZE[CommOnlineDiagnostics.RS232CDiagHandle]];    END;  --DescribeLoopbackHandle          DescribeModemChangeParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the ModemChange callback in RS232C.    [] ¬ notes.noteSize[SIZE[DiagInternal.ModemChangeParams]];    END;  -- DescribeModemChangeParams                  DescribeStartEchoParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the starting the echo user test.    d: LONG POINTER TO DiagInternal.EchoStartParams =      notes.noteSize[SIZE[DiagInternal.EchoStartParams]];    notes.noteLongCardinal[@d.parms.safetyTOInMsecs];    END;  -- DescribeStartEchoParams          DescribeEtherStats: PUBLIC Courier.Description =    BEGIN  -- Describes CommOnlineDiagnostics.EtherStatsInfo.    OPEN notes;    d: LONG POINTER TO CommOnlineDiagnostics.EtherStatsInfo =       noteSize[SIZE[CommOnlineDiagnostics.EtherStatsInfo]];    FOR i: CommOnlineDiagnostics.StatsIndices IN      CommOnlineDiagnostics.StatsIndices DO noteLongCardinal[@d[i]]; ENDLOOP;    END;  -- DescribeEtherStats        DescribeEtherStatsResults: PUBLIC Courier.Description =    BEGIN  -- Describes the results for getting ether stats.  (The statistics           -- and the time).    d: LONG POINTER TO DiagInternal.EtherStatsResults =      notes.noteSize[SIZE[DiagInternal.EtherStatsResults]];    notes.noteParameters[@d.stats, DescribeEtherStats];    notes.noteLongCardinal[LOOPHOLE[@d.time]];    END;  -- BEGIN          DescribeRS232CResults: PUBLIC Courier.Description =    BEGIN OPEN notes; -- Describes the results of the RS232C loopback test.    d: LONG POINTER TO CommOnlineDiagnostics.CountType ¬      noteSize[SIZE[CommOnlineDiagnostics.CountType]];        noteLongCardinal[@d.sendOk];    noteLongCardinal[@d.bytesSent];    noteLongCardinal[@d.recOk];    noteLongCardinal[@d.bytesRec];    noteLongCardinal[@d.deviceError];    noteLongCardinal[@d.dataLost];    noteLongCardinal[@d.checkSum];    noteLongCardinal[@d.parity];    noteLongCardinal[@d.invalidChar];    noteLongCardinal[@d.invalidFrame];    noteLongCardinal[@d.asynchFrame];    noteLongCardinal[@d.breakDetected];    noteLongCardinal[@d.frameTimeout];    noteLongCardinal[@d.badSeq];    noteLongCardinal[@d.missing];    noteLongCardinal[@d.sendErrors];    noteLongCardinal[@d.recErrors];    END;  -- DescribeRS232CResults          DescribeRS232CResultsParams: PUBLIC Courier.Description =    BEGIN  --Describes the parameters for getting the loopback results.    [] ¬ notes.noteSize[SIZE[DiagInternal.RS232CResultsParams]];    END;  --DescribeRS232CResultsParams           DescribeRS232CParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the RS232C test.    d: LONG POINTER TO DiagInternal.RS232CTestParams =      notes.noteSize[SIZE[DiagInternal.RS232CTestParams]];    notes.noteLongCardinal[@d.params.safetyTOInMsecs];    END;  -- DescribeRS232CTest          DescribeSetLineParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the SetLine callback in RS232C test.    [] ¬ notes.noteSize[SIZE[DiagInternal.SetLineParams]];    END;  --DescribeSetLineParams          DescribeWriteMsgParams: PUBLIC Courier.Description =    BEGIN  -- Describes the parameters for the WriteMsg callback in RS232C test.    [] ¬ notes.noteSize[SIZE[DiagInternal.WriteMsgParams]];    END;  --DescribeWriteMsgParams            MakeCall: PUBLIC PROC [callProc: DiagInternal.CourierCallProc,    cH: Courier.Handle] =    BEGIN  << Does the courier call and traps all the errors. It resides in this    module because like the descriptions, it is used by both the server and the    client side.  >>    commErrReason: CommOnlineDiagnostics.CommErrorCode;    etherErrReason: CommOnlineDiagnostics.EtherErrorReason;    rs232cErrReason: CommOnlineDiagnostics.RS232CErrorReason;        <<For the 12.0 release, since we have to be backwards compatable with      one release back, we have to let VersionMismatch travel up to the      BackCompatableDiag module so he can execute the kludges for the multiple      versions.  However, since BackCompatableDiag does not have access to the      courier handle, we need to delete it here on the unwind if we know he is      unwinding from VersionMismatch.  When we no longer have this backwards      compatibility requirement, VersionMismatch should again be handled as      below.     	Courier.VersionMismatch => 	  {commErrReason ¬ noSuchDiagnostic; GOTO commErr}; >> 	                 BEGIN ENABLE        BEGIN       UNWIND => IF mismatchSeen THEN {Courier.Delete[cH]; mismatchSeen ¬ FALSE};       Courier.Error =>	  {commErrReason ¬ xlate[errorCode]; GOTO commErr};        Courier.NoSuchProcedureNumber =>	  {commErrReason ¬ noSuchDiagnostic; GOTO commErr};	Courier.VersionMismatch =>	  {mismatchSeen ¬ TRUE; REJECT};        Courier.RemoteErrorSignalled =>          SELECT errorNumber FROM	    DiagInternal.etherDiagErr => 	      BEGIN	      arguments[[@etherErrReason, DescribeCardinal]];	      GOTO etherErr;	      END;	    DiagInternal.rs232cDiagErr =>	      BEGIN	      arguments[[@rs232cErrReason, DescribeCardinal]];	      GOTO rs232cErr;	      END;	    ENDCASE => ERROR;  -- unexpected diag error from remote end.        END;  -- enable clause.            -- Do the actual call.      callProc[cH];                  EXITS        commErr => ERROR CommOnlineDiagnostics.CommError[commErrReason];	etherErr => ERROR CommOnlineDiagnostics.EtherDiagError[etherErrReason];	rs232cErr => ERROR CommOnlineDiagnostics.RS232CDiagError[rs232cErrReason];    END;  -- enabled block     	    END;  -- MakeCall          END.  LOG 1-Jul-83 10:31:52  SMA  Created file. 6-Jul-83 11:24:28  SMA  Added ethernet stats to echo test results. 9-Dec-83 11:26:23  SMA  Fixed description routine for Dialer number.15-Feb-84  8:42:48  SMA  No space leak for Dialer number.30-May-84  8:31:52  SMA  No garbage byte at end of odd-length Dialer number.25-Jan-85 11:34:11  SMA  Changes for multiport board and Mesa 12.0.18-Apr-85 16:30:30  SMA  Version kludges for backwards compatibility.29-Oct-87 10:54:15  BKI  Fixed AR 11267.