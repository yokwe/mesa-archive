-- Copyright (C) 1983, 1984  by Xerox Corporation. All rights reserved. -- AuthProtocolImpl.mesa-- JMaloney, 3-Jul-83 21:42:31.-- Last modified: JMaloney, 16-Apr-84 18:25:20.DIRECTORY  Auth USING [Credentials, Verifier],  AuthProtocol USING [    GetStrongCredentialsArgs, GetStrongCredentialsResults,    CheckSimpleCredentialsArgs, CheckSimpleCredentialsResults,    CreateStrongKeyArgs, ChangeStrongKeyArgs, DeleteStrongKeyArgs,    CreateSimpleKeyArgs, ChangeSimpleKeyArgs, DeleteSimpleKeyArgs,    TradeProxyForCredentialsArgs, TradeProxyForCredentialsResults,    CallErrorRecord, AuthenticationErrorRecord,    CredentialsPackage, CredentialsPackageInternals,    maxCredentialsPackageSizeInWords, maxCredentialsSizeInWords,    maxNSNameSizeInWords, RoundWordsToDESBlocks,    StrongCredentials, StrongVerifier,    SimpleCredentials, SimpleVerifier,    ProbeResults, Proxy, ProxyInternals],  AuthServerAdmin USING [],  Courier USING [Description, VersionRange],  DESFace USING [Block],  NSAddr USING [DescribeAddress],  NSName USING [DescribeNameRecord, Name],  System USING [SocketNumber];AuthProtocolImpl: MONITOR  IMPORTS AuthProtocol, NSAddr, NSName  EXPORTS Auth, AuthProtocol, AuthServerAdmin =    -- (Except where noted, all exports are to AuthProtocol.)BEGIN-- Constants --maxCredentialsLength: CARDINAL =  MAX[    AuthProtocol.maxCredentialsSizeInWords,    SIZE[AuthProtocol.SimpleCredentials] + AuthProtocol.maxNSNameSizeInWords];  -- The spec says a Credentials.value is a "SEQUENCE OF UNSPECIFIED" (no limit)  -- but it actually cannot exceed this number of words.maxVerifierLength: CARDINAL = 12;  -- The spec says a Verifier is a "SEQUENCE 12 OF UNSPECIFIED".maxProxyLength: CARDINAL =  AuthProtocol.RoundWordsToDESBlocks[    SIZE[AuthProtocol.ProxyInternals]      - SIZE[NSName.Name] + AuthProtocol.maxNSNameSizeInWords]  * SIZE[DESFace.Block];  -- The spec says a Proxy is a "SEQUENCE OF UNSPECIFIED" (no limit)  -- but it actually cannot exceed this number of words.maxCredentialsPackageLength: CARDINAL =  AuthProtocol.maxCredentialsPackageSizeInWords;  -- The spec says a CredentialsPackage is a "SEQUENCE OF UNSPECIFIED" (no limit)  -- but it actually cannot exceed this number of words.-- Remote program declarations --  -- Monitored data! --asProgram: LONG CARDINAL ¬ 14;asVersion: CARDINAL ¬ 2;asVersionRange: Courier.VersionRange ¬ [low: asVersion, high: asVersion];asProbeSocket: System.SocketNumber ¬ LOOPHOLE[21];GetProgramNumbers: PUBLIC ENTRY PROC  RETURNS [    program: LONG CARDINAL, version: CARDINAL,    versionRange: Courier.VersionRange, probeSocket: System.SocketNumber] =  BEGIN    RETURN[asProgram, asVersion, asVersionRange, asProbeSocket];  END;--AuthServerAdmin.--SetTestMode: PUBLIC ENTRY PROC [on: BOOLEAN, testModeNumber: CARDINAL [0..100]] =  BEGIN    IF on THEN      BEGIN	asVersion ¬ LAST[CARDINAL] - testModeNumber;	asVersionRange ¬ [low: asVersion, high: asVersion];      END    ELSE -- reset the version number --      BEGIN	asVersion ¬ LAST[CARDINAL] - testModeNumber;	asVersionRange ¬ [low: asVersion, high: asVersion];      END;  END;-- Description routines --DescribeGetStrongCredentialsArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.GetStrongCredentialsArgs =      notes.noteSize[SIZE[AuthProtocol.GetStrongCredentialsArgs]];    notes.noteDisjointData[@p.initiator, NSName.DescribeNameRecord];    notes.noteDisjointData[@p.recipient, NSName.DescribeNameRecord];    notes.noteLongCardinal[@p.nonce];  END;DescribeGetStrongCredentialsResults: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.GetStrongCredentialsResults =      notes.noteSize[SIZE[AuthProtocol.GetStrongCredentialsResults]];    notes.noteParameters[@p.credentialsPackage, DescribeCredentialsPackage];  END;DescribeCheckSimpleCredentialsArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CheckSimpleCredentialsArgs =      notes.noteSize[SIZE[AuthProtocol.CheckSimpleCredentialsArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];  END;DescribeCheckSimpleCredentialsResults: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CheckSimpleCredentialsResults =      notes.noteSize[SIZE[AuthProtocol.CheckSimpleCredentialsResults]]; -- notes.noteBoolean[@p.ok];  END;DescribeCreateStrongKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CreateStrongKeyArgs =      notes.noteSize[SIZE[AuthProtocol.CreateStrongKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];    notes.noteDisjointData[@p.name, NSName.DescribeNameRecord]; -- notes.noteBlock[@p.encryptedInitialKey];  END;DescribeChangeStrongKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.ChangeStrongKeyArgs =      notes.noteSize[SIZE[AuthProtocol.ChangeStrongKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier]; -- notes.noteBlock[@p.encryptedNewKey];  END;DescribeDeleteStrongKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.DeleteStrongKeyArgs =      notes.noteSize[SIZE[AuthProtocol.DeleteStrongKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];    notes.noteDisjointData[@p.name, NSName.DescribeNameRecord];  END;DescribeCreateSimpleKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CreateSimpleKeyArgs =      notes.noteSize[SIZE[AuthProtocol.CreateSimpleKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];    notes.noteDisjointData[@p.name, NSName.DescribeNameRecord]; -- notes.noteHashedPassword[@p.initialKey];  END;DescribeChangeSimpleKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.ChangeSimpleKeyArgs =      notes.noteSize[SIZE[AuthProtocol.ChangeSimpleKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier]; -- notes.noteHashedPassword[@p.newKey];  END;DescribeDeleteSimpleKeyArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.DeleteSimpleKeyArgs =      notes.noteSize[SIZE[AuthProtocol.DeleteSimpleKeyArgs]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];    notes.noteDisjointData[@p.name, NSName.DescribeNameRecord];  END;DescribeTradeProxyForCredentialsArgs: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.TradeProxyForCredentialsArgs =      notes.noteSize[SIZE[AuthProtocol.TradeProxyForCredentialsArgs]];    notes.noteParameters[@p.agentCredentials, DescribeCredentials];    notes.noteParameters[@p.verifier, DescribeVerifier];    notes.noteParameters[@p.proxy, DescribeProxy];    notes.noteDisjointData[@p.recipient, NSName.DescribeNameRecord];    notes.noteLongCardinal[@p.nonce];  END;DescribeTradeProxyForCredentialsResults: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.TradeProxyForCredentialsResults =      notes.noteSize[SIZE[AuthProtocol.TradeProxyForCredentialsResults]];    notes.noteParameters[@p.credentialsForRecipient, DescribeCredentialsPackage];    notes.noteParameters[@p.proxyForRecipient, DescribeProxy];  END;DescribeCallErrorRecord: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CallErrorRecord =      notes.noteSize[SIZE[AuthProtocol.CallErrorRecord]]; -- notes.noteCallProblem[@p.problem]; -- notes.noteWhichArg[@p.whichArg];  END;DescribeAuthenticationErrorRecord: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.AuthenticationErrorRecord =      notes.noteSize[SIZE[AuthProtocol.AuthenticationErrorRecord]]; -- notes.noteAuthenticationProblem[@p.problem];  END;--Auth.--DescribeCredentials: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO Auth.Credentials =      notes.noteSize[SIZE[Auth.Credentials]]; -- notes.noteFlavor[@p.flavor];    notes.noteArrayDescriptor[@p.value, SIZE[UNSPECIFIED], maxCredentialsLength];  END;--Auth.--DescribeVerifier: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO Auth.Verifier =      notes.noteSize[SIZE[Auth.Verifier]];    notes.noteArrayDescriptor[p, SIZE[UNSPECIFIED], maxVerifierLength];  END;DescribeCredentialsPackage: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CredentialsPackage =      notes.noteSize[SIZE[AuthProtocol.CredentialsPackage]];    notes.noteArrayDescriptor[p, SIZE[UNSPECIFIED], maxCredentialsPackageLength];  END;DescribeProxy: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.Proxy =      notes.noteSize[SIZE[AuthProtocol.Proxy]];    notes.noteArrayDescriptor[p, SIZE[UNSPECIFIED], maxProxyLength];  END;DescribeStrongCredentials: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.StrongCredentials =      notes.noteSize[SIZE[AuthProtocol.StrongCredentials]]; -- notes.noteKey[@p.conversationKey];    notes.noteLongCardinal[@LOOPHOLE[p.expirationTime, LONG CARDINAL]];    notes.noteDisjointData[@p.initiator, NSName.DescribeNameRecord];  END;DescribeStrongVerifier: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.StrongVerifier =      notes.noteSize[SIZE[AuthProtocol.StrongVerifier]];    notes.noteLongCardinal[@LOOPHOLE[p.timeStamp, LONG CARDINAL]];    notes.noteLongCardinal[@p.ticks];  END;DescribeSimpleCredentials: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.SimpleCredentials =      notes.noteSize[SIZE[AuthProtocol.SimpleCredentials]];    notes.noteDisjointData[@p.initiator, NSName.DescribeNameRecord];  END;DescribeSimpleVerifier: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.SimpleVerifier =      notes.noteSize[SIZE[AuthProtocol.SimpleVerifier]]; -- notes.noteHashedPassword[@p.password];  END;DescribeCredentialsPackageInternals: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.CredentialsPackageInternals =      notes.noteSize[SIZE[AuthProtocol.CredentialsPackageInternals]];    notes.noteParameters[@p.credentials, DescribeCredentials];    notes.noteLongCardinal[@p.nonce];    notes.noteDisjointData[@p.recipient, NSName.DescribeNameRecord]; -- notes.noteKey[@p.conversationKey];  END;DescribeProxyInternals: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.ProxyInternals =      notes.noteSize[SIZE[AuthProtocol.ProxyInternals]]; -- notes.noteBlock[@p.randomBits];    notes.noteLongCardinal[@LOOPHOLE[p.expirationTime, LONG CARDINAL]];    notes.noteDisjointData[@p.agent, NSName.DescribeNameRecord];  END;DescribeProbeResults: PUBLIC Courier.Description =  BEGIN    p: LONG POINTER TO AuthProtocol.ProbeResults =      notes.noteSize[SIZE[AuthProtocol.ProbeResults]];    notes.noteParameters[@p.serverAddress, NSAddr.DescribeAddress];  END;END.