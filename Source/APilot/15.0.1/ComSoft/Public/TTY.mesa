-- TTY.Mesa  Edited by--   SXE  	Jul 22, 1980 3:34 PM --   MXA    	Aug 13, 1980  2:53 PM --   PXM    	February 4, 1981  11:10 AM --   PXK    	15-Jul-81 18:22:17 --   LXR    	15-Oct-82 10:31:14 --   JGS	19-Aug-81 10:55:53--   FXH    	19-Aug-81 11:49:03 --   AWL      	 3-Nov-81 11:57:00 --   CRF	13-Nov-81 13:55:51 --   RXJ     	 7-Jul-83  0:07:56 -- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Ascii USING [CR],  Environment USING [Block],  Format USING [DateFormat, NumberFormat],  Stream USING [Handle],  String USING [SubString],  Time USING [Packed, TimeZoneStandard];TTY: DEFINITIONS =  BEGIN  -- Types  Handle: TYPE [2];  nullHandle: Handle = LOOPHOLE[LAST[LONG CARDINAL]];  EchoClass: TYPE = {none, plain, stars};  DateFormat: TYPE = Format.DateFormat;  NumberFormat: TYPE = Format.NumberFormat;  CharStatus: TYPE = {ok, stop, ignore};  -- Signals  LineOverflow: SIGNAL [s: LONG STRING] RETURNS [ns: LONG STRING];  Rubout: SIGNAL;  NoBackingFile: ERROR;  -- raised by BackingStream  OutOfInstances: ERROR;  -- raised by Create  NoDefaultInstance: ERROR;  -- raised by Create  -- Starting and stopping  Create: PROCEDURE [    name: LONG STRING ¬ NIL, backingStream, ttyImpl: Stream.Handle ¬ NIL]    RETURNS [h: Handle];  Destroy: PROCEDURE [h: Handle, deleteBackingFile: BOOLEAN ¬ FALSE];  -- BackingFile deleted only if subsystem created file  UserAbort: PROCEDURE [h: Handle] RETURNS [yes: BOOLEAN];  ResetUserAbort: PROCEDURE [h: Handle];  SetUserAbort: PROCEDURE [h: Handle];  -- CreateTTYInstance exported by TTY instance implementation  CreateTTYInstance: PROCEDURE [    name: LONG STRING, backingStream: Stream.Handle, tty: Handle]     RETURNS [ttyImpl, backing: Stream.Handle];  -- Utilities  BackingStream: PROCEDURE [h: Handle] RETURNS [stream: Stream.Handle];  BlinkDisplay: PROCEDURE [h: Handle];  CharsAvailable: PROCEDURE [h: Handle] RETURNS [number: CARDINAL];  GetEcho: PROCEDURE [h: Handle] RETURNS [old: EchoClass];  NewLine: PROCEDURE [h: Handle] RETURNS [yes: BOOLEAN];  PopAlternateInputStreams: PROCEDURE [h: Handle, howMany: CARDINAL ¬ 1];  PushAlternateInputStream: PROCEDURE [h: Handle, stream: Stream.Handle];  PutBackChar: PROCEDURE [h: Handle, c: CHARACTER];  SetBackingSize: PROCEDURE [h: Handle, size: LONG CARDINAL];  SetEcho: PROCEDURE [h: Handle, new: EchoClass] RETURNS [old: EchoClass];  -- Read & write procedures  GetChar: PROCEDURE [h: Handle] RETURNS [c: CHARACTER];  PutChar: PROCEDURE [h: Handle, c: CHARACTER];  PutCR: PROCEDURE [h: Handle] = INLINE {PutChar[h, Ascii.CR]};  PutBlank, PutBlanks: PROCEDURE [h: Handle, n: CARDINAL ¬ 1];  RemoveCharacter, RemoveCharacters: PROCEDURE [h: Handle, n: CARDINAL ¬ 1];  GetString: PROCEDURE [    h: Handle, s: LONG STRING,     t: PROCEDURE [c: CHARACTER] RETURNS [status: CharStatus]];  GetEditedString: PROCEDURE [    h: Handle, s: LONG STRING,     t: PROCEDURE [c: CHARACTER] RETURNS [status: CharStatus]]    RETURNS [c: CHARACTER];  PutString, PutLongString, PutText: PROCEDURE [h: Handle, s: LONG STRING];  PutSubString, PutLongSubString: PROCEDURE [h: Handle, ss: String.SubString];  PutDate: PROCEDURE [    h: Handle, gmt: Time.Packed, format: DateFormat ¬ noSeconds,    zone: Time.TimeZoneStandard ¬ ANSI];  GetID, GetLine, GetPassword: PROCEDURE [h: Handle, s: LONG STRING];  PutLine: PROCEDURE [h: Handle, s: LONG STRING];  GetNumber: PROCEDURE [    h: Handle, default: UNSPECIFIED, radix: CARDINAL, showDefault: BOOLEAN ¬ TRUE]    RETURNS [n: UNSPECIFIED];  GetLongNumber: PROCEDURE [    h: Handle, default: LONG UNSPECIFIED, radix: CARDINAL,    showDefault: BOOLEAN ¬ TRUE] RETURNS [n: LONG UNSPECIFIED];  PutNumber: PROCEDURE [h: Handle, n: UNSPECIFIED, format: NumberFormat];  PutLongNumber: PROCEDURE [h: Handle, n: LONG UNSPECIFIED, format: NumberFormat];  GetOctal: PROCEDURE [h: Handle] RETURNS [n: UNSPECIFIED];  GetLongOctal: PROCEDURE [h: Handle] RETURNS [n: LONG UNSPECIFIED];  PutOctal: PROCEDURE [h: Handle, n: UNSPECIFIED];  PutLongOctal: PROCEDURE [h: Handle, n: LONG UNSPECIFIED];  GetDecimal: PROCEDURE [h: Handle] RETURNS [n: INTEGER];  GetLongDecimal: PROCEDURE [h: Handle] RETURNS [n: LONG INTEGER];  PutDecimal: PROCEDURE [h: Handle, n: INTEGER];  PutLongDecimal: PROCEDURE [h: Handle, n: LONG INTEGER];  PutBlock: PROCEDURE [h: Handle, block: Environment.Block];  END....  