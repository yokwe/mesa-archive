-- File: Format.mesa - last edited-- AWL        9-Nov-81 13:45:28-- LXR    , 17-Sep-82 13:21:37-- KAM     ,  1-Jul-83 10:24:20-- Copyright (C) Xerox Corporation 1982. All rights reserved.DIRECTORY  Environment USING [Block],  String USING [SubString],  System USING [HostNumber, NetworkAddress, NetworkNumber, SocketNumber],  Time USING [Packed, TimeZoneStandard];Format: DEFINITIONS =  BEGIN  -- Types  StringProc: TYPE = PROCEDURE [s: LONG STRING, clientData: LONG POINTER ¬ NIL];  DateFormat: TYPE = {dateOnly, noSeconds, dateTime, full, mailDate};  NetFormat: TYPE = {octal, hex, productSoftware};  NumberFormat: TYPE = RECORD [    base: [2..36] ¬ 10,    zerofill: BOOLEAN ¬ FALSE,    unsigned: BOOLEAN ¬ TRUE,    columns: [0..255] ¬ 0];  -- Constants  OctalFormat: NumberFormat = [  -- 0 columns means use as many as needed.    base: 8, zerofill: FALSE, unsigned: TRUE, columns: 0];  DecimalFormat: NumberFormat = [    base: 10, zerofill: FALSE, unsigned: FALSE, columns: 0];  -- proc = NIL in Format procedures will direct output to the default output sink.  SetDefaultOutputSink: PROCEDURE [new: StringProc, clientData: LONG POINTER ¬ NIL]    RETURNS [old: StringProc, oldClientData: LONG POINTER];  -- Format procedures  Blank, Blanks: PROCEDURE [    proc: StringProc, n: CARDINAL ¬ 1, clientData: LONG POINTER ¬ NIL];  Block: PROCEDURE [    proc: StringProc, block: Environment.Block, clientData: LONG POINTER ¬ NIL];  Char: PROCEDURE [    proc: StringProc, char: CHARACTER, clientData: LONG POINTER ¬ NIL];  CR: PROCEDURE [proc: StringProc, clientData: LONG POINTER ¬ NIL];  Date: PROCEDURE [    proc: StringProc, pt: Time.Packed, format: DateFormat ¬ noSeconds,    zone: Time.TimeZoneStandard ¬ ANSI, clientData: LONG POINTER ¬ NIL];  Decimal: PROCEDURE [    proc: StringProc, n: INTEGER, clientData: LONG POINTER ¬ NIL] = INLINE {    Number[n: n, format: DecimalFormat, proc: proc, clientData: clientData]};  HostNumber: PROCEDURE [    proc: StringProc, hostNumber: System.HostNumber, format: NetFormat,    clientData: LONG POINTER ¬ NIL];  Line: PROCEDURE [    proc: StringProc, s: LONG STRING, clientData: LONG POINTER ¬ NIL];  LongDecimal: PROCEDURE [    proc: StringProc, n: LONG INTEGER, clientData: LONG POINTER ¬ NIL] = INLINE    BEGIN    LongNumber[n: n, format: DecimalFormat, proc: proc, clientData: clientData];    END;  LongNumber: PROCEDURE [    proc: StringProc, n: LONG UNSPECIFIED, format: NumberFormat,    clientData: LONG POINTER ¬ NIL];  LongOctal: PROCEDURE [    proc: StringProc, n: LONG UNSPECIFIED, clientData: LONG POINTER ¬ NIL];  -- Adds 'B after number if > 7.  NetworkAddress: PROCEDURE [    proc: StringProc, networkAddress: System.NetworkAddress, format: NetFormat,    clientData: LONG POINTER ¬ NIL];  NetworkNumber: PROCEDURE [    proc: StringProc, networkNumber: System.NetworkNumber, format: NetFormat,    clientData: LONG POINTER ¬ NIL];  Number: PROCEDURE [    proc: StringProc, n: UNSPECIFIED, format: NumberFormat,    clientData: LONG POINTER ¬ NIL];  Octal: PROCEDURE [    proc: StringProc, n: UNSPECIFIED, clientData: LONG POINTER ¬ NIL];  -- Adds 'B after number if > 7.  SocketNumber: PROCEDURE [    proc: StringProc, socketNumber: System.SocketNumber, format: NetFormat,    clientData: LONG POINTER ¬ NIL];  SubString, LongSubStringItem: PROCEDURE [    proc: StringProc, ss: String.SubString, clientData: LONG POINTER ¬ NIL];  Text, LongString: PROCEDURE [    proc: StringProc, s: LONG STRING, clientData: LONG POINTER ¬ NIL] = INLINE {    proc[s, clientData]};  -- for completeness  END. -- Format.mesa