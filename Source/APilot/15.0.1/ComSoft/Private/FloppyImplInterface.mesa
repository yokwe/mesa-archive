-- Copyright (C) 1983, 1985, 1987  by Xerox Corporation. All rights reserved. -- FloppyImplInterface.mesa (last edited by: RSV   on:  3-Oct-87 18:01:10)DIRECTORY   CommonSoftwareFileTypes USING [tFileList],   Environment USING [bitsPerWord, wordsPerPage],   File USING [Type],   Floppy USING [     BootFilePointer, Density, FileID, nullFileID, PageCount, PageNumber, Sides,     VolumeHandle],   FloppyChannel USING [Context, DiskAddress, Handle, SectorCount],   FloppyFormat USING [     BadSpotSectors, FileList, ImplementedFileSize, Sector, SectorNine],   Space USING [Interval, PageCount];FloppyImplInterface: DEFINITIONS =BEGIN	-- Private TYPE's, constants and variablesBug: ERROR [type: BugType];BugType: TYPE = {   trackBufferLengthTooSmall, wrappedAroundFileIDs, invalidAddress, invalidBufferSize,   floppyVolumeTooLarge};IOError: ERROR[countDone: CARDINAL];DiskChanged: ERROR;volumeTable: LONG POINTER TO ARRAY [0..0) OF VolumeDesc; -- indexed by device indexes.VolumeDesc: TYPE = LONG POINTER TO VolumeDescObject;VolumeDescObject: TYPE = MONITORED RECORD [   open: BOOLEAN,   changeCount: CARDINAL, -- change count at last open   writeProtected: BOOLEAN, -- either physically or logically write protected   density: Floppy.Density[single..double],   sides: Floppy.Sides[one..two],    handle: FloppyChannel.Handle, -- handle on this particular instance of the floppy   numPages: Floppy.PageCount, -- count of the total number of pages on the volume   fileList: LONG POINTER TO FloppyFormat.FileList,   fileListSpace: Space.Interval, -- only allocated when the volume is open   sectorNine: LONG POINTER TO FloppyFormat.SectorNine,   badPageMap: LONG POINTER TO FloppyFormat.BadSpotSectors,   trackZeroSpace: Space.Interval,   allocationMap: LONG POINTER TO PACKED ARRAY [0..0) OF Allocation,   allocationMapSpace: Space.Interval -- only allocated when the volume is open   ];Allocation: TYPE =  MACHINE DEPENDENT {allocated (0), free (1), markerPage (2), badPage (3)};   -- If add more, change the next line!allocationsPerPage: CARDINAL = (Environment.wordsPerPage*Environment.bitsPerWord)/2;maxVolumes: CARDINAL = 4;FileListType: File.Type = CommonSoftwareFileTypes.tFileList;AccessFloppy: PROCEDURE [   volumeDesc: VolumeDesc, buffer: LONG POINTER, address: FloppyChannel.DiskAddress,   count: CARDINAL, access: AccessMode];AccessMode: TYPE = {read, write};AddFile: PROCEDURE [   volumeDesc: VolumeDesc, file: Floppy.FileID, size: FloppyFormat.ImplementedFileSize,   type: File.Type, location: FloppyFormat.Sector];AllocateFile: PROCEDURE [   volumeDesc: VolumeDesc, bigSize: Floppy.PageCount, type: File.Type,   startPage: FloppyFormat.Sector, id: Floppy.FileID ¬ Floppy.nullFileID]   RETURNS [startingSector: FloppyFormat.Sector, file: Floppy.FileID];CloseVolume: PROCEDURE [volumeDesc: VolumeDesc];CreateBuffer: PROCEDURE [size: Space.PageCount]   RETURNS [buffer: Space.Interval];   CreateFileInternal: PROCEDURE [volumeDesc: VolumeDesc, size: Floppy.PageCount,   type: File.Type, startSector: FloppyFormat.Sector,   id: Floppy.FileID ¬ Floppy.nullFileID]   RETURNS[fileID: Floppy.FileID, startPage: FloppyFormat.Sector];CreateInitialMicrocodeInternal: PROCEDURE [   volumeDesc: VolumeDesc, size: Floppy.PageCount, type: File.Type,   startingPageNumber: Floppy.PageNumber, id: Floppy.FileID ¬ Floppy.nullFileID]   RETURNS[file: Floppy.FileID];FindFile: PROCEDURE [volumeDesc: VolumeDesc, file: Floppy.FileID]   RETURNS [      address: FloppyFormat.Sector, type: File.Type, size: FloppyFormat.ImplementedFileSize];FirstDataSector: PROCEDURE [volumeDesc: VolumeDesc] RETURNS [FloppyFormat.Sector];GetBootFileAddress: PROCEDURE [   volumeDesc: VolumeDesc, bootFile: Floppy.BootFilePointer]   RETURNS [address: FloppyFormat.Sector];GetFileID: PROCEDURE [volumeDesc: VolumeDesc] RETURNS [fileID: Floppy.FileID];InitializeAllocationMap: PROCEDURE [volumeDesc: VolumeDesc];IsDriveWriteProtected: PROCEDURE [volumeDesc: VolumeDesc]   RETURNS [writeProtected: BOOLEAN];ReadFloppy: PROCEDURE [   volumeDesc: VolumeDesc, buffer: LONG POINTER, address: FloppyFormat.Sector,   count: FloppyFormat.ImplementedFileSize];RemoveFile: PROCEDURE [volumeDesc: VolumeDesc, file: Floppy.FileID];SectorsPerTrack: PROCEDURE [handle: FloppyChannel.Handle, context: FloppyChannel.Context]   RETURNS [sectorsPerTrack: FloppyChannel.SectorCount];SetBlock: PROCEDURE [p: LONG POINTER, length: CARDINAL, value: CARDINAL];ValidateHandle: PROCEDURE[volume: Floppy.VolumeHandle] RETURNS[volumeDesc: VolumeDesc];ValidDrive: PROCEDURE [drive: CARDINAL] RETURNS [exists: BOOLEAN];VolumeChanging: PROCEDURE [volumeDesc: VolumeDesc];VolumeStable: PROCEDURE [volumeDesc: VolumeDesc]; WordsToPages: PROCEDURE [count: LONG CARDINAL] RETURNS [CARDINAL] = INLINE   {RETURN [CARDINAL[(count+Environment.wordsPerPage-1)/Environment.wordsPerPage]]};WriteFileList: PROCEDURE [volumeDesc: VolumeDesc];WriteFloppy: PROCEDURE [   volumeDesc: VolumeDesc, buffer: LONG POINTER, address: FloppyFormat.Sector,   count: FloppyFormat.ImplementedFileSize];WriteSectorNine: PROCEDURE [volumeDesc: VolumeDesc]; END.LOGTime: 19-Aug-81 10:06:47	By: AWL         Created fileTime: 20-Oct-81 11:35       By: LXD         Modified arguments to AllocateFileTime: 15-Nov-81 18:35      By: LXD         Deleted BugType unexpectedPVError   Time: 2-Feb-82 11:59:28    By: LXD       	Added CreateFileInternal Time:   2-Feb-82 17:45:36  By: LXD      	Added ValidateHandleTime:  6-Aug-82 18:57:32      By: AWL         Added fileID argument to AllocateFile and CreateFileInternal.  Added CreateInitialMicrocodeInternal.Time:  3-Mar-83  9:54:37      By: EKN      Changed Space.Handle to Space.Interval for Klamath. Replaced Inline.LowHalf with CARDINAL type.  Changed CreateBuffer to not return allocatedSize and bufferP.Time: 21-Jan-85 16:49:59      By: ERN     and EKN     Removed FloppyDevice, added SectorsPerTrack.Time:  3-Oct-87 18:00:53      By: RSV   Added MaxVolumes.