-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- StartList.mesa    30-Jun-83  9:17:53 by RXJ     <<This interface describes the data structure which describes the contents of the boot file and the initial contents of memory.  It is the communication path from MakeBoot to Pilot.The boot file is composed of a sequence of Spaces.  Each Space may be unused ("empty"), or may contain code and/or data.  A non-empty Space may be tiled with swap units which define the units of swapping ("family"), or it may be unitary ("space").Unitary Spaces and swap units may be pinned into memory ("resident"), may require that their Space and Region Descriptors be pinned into their caches ("residentDescriptor"), or may be unrestricted ("swappable").  In addition, any unitary Space or swap unit may be in the set loaded by the Pilot Boot Loader ("bootLoaded").To ease bootstrapping, this module uses no TYPEs from any defs files which MakeBoot imports.  The SIZEs of the appropriate fields must be checked at run time.>>DIRECTORY   Environment USING [PageCount, PageNumber, PageOffset];  StartList: DEFINITIONS =  BEGIN    -- IF YOU MAKE A CHANGE TO THE DATA STRUCTURES DEFINED HERE, CHANGE VersionID!  VersionID: CARDINAL = 06303; -- version of 06/30/83  Limit: CARDINAL = 37777B;  Base: TYPE = LONG BASE POINTER TO Header;  Index: TYPE = Base RELATIVE POINTER [0..Limit] TO Entry;  StartIndex: Index = LOOPHOLE[SIZE[Header]];  -- index of the first startlist entry.  NullIndex: Index = FIRST[Index];  SpaceIndex: TYPE = Base RELATIVE POINTER [0..Limit] TO space Entry;  NullSpaceIndex: SpaceIndex = LOOPHOLE[NullIndex];  SwapUnitIndex: TYPE = Base RELATIVE POINTER [0..Limit] TO swapUnit Entry;  NullSwapUnitIndex: SwapUnitIndex = LOOPHOLE[NullIndex];  Switches: TYPE = --System.Switches-- PACKED ARRAY CHARACTER OF BOOLEAN;  StateVectorCounts: TYPE = ARRAY --Process.Priority-- [0..8) OF CARDINAL;  BootLocation: TYPE = --Boot.Location-- ARRAY [0..11) OF WORD;    PageNumber: TYPE = Environment.PageNumber;  PageCount: TYPE = Environment.PageCount;  PageOffset: TYPE = Environment.PageOffset;  Header: TYPE = MACHINE DEPENDENT RECORD [    version(0): CARDINAL,    table(1): Base,    initLoadState(3): SwapUnitIndex,    nProcesses(4): CARDINAL,    mdsBase(5): PageNumber,    pdaPages(7): PageCount,  -- number of mapped pages supplied.    lastVMPage(9): PageNumber,  -- last used in the boot file.    lastBootLoadedPage(11): PageNumber,    stateVectorSize(13): CARDINAL,    buildDate(14): LONG CARDINAL,    expirationDate(16): LONG CARDINAL,    stateVectorCounts(18): StateVectorCounts,    switches(26): Switches,    locDebuggerMicrocode(42): BootLocation,    locDebuggerGerm(53): BootLocation,    locDebugger(64): BootLocation,    locDebuggee(75): BootLocation,    stateVectorBase(86): PageNumber,    timeoutBase(88): PageNumber,    timeoutPages(90): PageCount];  EntryType: TYPE = MACHINE DEPENDENT {space(0), swapUnit(1), stop(2)};  SpaceClass: TYPE = MACHINE DEPENDENT {empty(0), unitary(1), family(2)};  SwapUnitInfo: TYPE = MACHINE DEPENDENT RECORD [    readOnly(0:0..0): BOOLEAN,    state(0:1..2): SwapUnitState];  SwapUnitState: TYPE = MACHINE DEPENDENT {    resident(0), residentDescriptor(1), swappable(2)};  SpaceType: TYPE = MACHINE DEPENDENT RECORD [    body(0): SELECT class(0:0..1): SpaceClass FROM      empty => [fill(0:2..15): Index ¬ NullIndex],  -- an unused Space      unitary =>  -- a Space with no swap units.        [swapUnit(0:2..15): SwapUnitIndex],  -- (only swapUnit.info is significant.)      family => [  -- a Space tiled with swap units.        anyReadOnlyChildren(0:2..2): BOOLEAN,        anyResidentChildren(0:3..3): BOOLEAN,        anyResidentDescriptorChildren(0:4..4): BOOLEAN,        anySwappableChildren(0:5..5): BOOLEAN,        allReadOnlyChildren(0:6..6): BOOLEAN,        allResidentChildren(0:7..7): BOOLEAN,        allResidentDescriptorChildren(0:8..8): BOOLEAN,        allSwappableChildren(0:9..15): BOOLEAN],      ENDCASE];  BackingLocation: TYPE = MACHINE DEPENDENT {null(0), self(1)};  PHandle: TYPE[2];  Entry: TYPE = MACHINE DEPENDENT RECORD [    body(0): SELECT option(0:0..1): EntryType FROM      space => [	readOnly(0:2..2): BOOLEAN,        bootLoaded(0:3..14): BOOLEAN,        backingStore(0:15..15): BackingLocation,        type(1): SpaceType,        pages(2): PageCount,        vmpage(4): PageNumber,        backingPage(6): PageNumber,        reserved(8): PHandle],  -- this uninitialized field is provided for Pilot's convenience.      swapUnit => [        info(0:2..15): SwapUnitInfo,        parent(1): SpaceIndex,        base(2): PageOffset,  -- relative to parent.vmpage.        pages(4): PageCount],      stop => [fill(0:2..15): Index ¬ NullIndex],  -- terminates the Start List.      ENDCASE];  END.LOG11-Aug-81 11:35:47   WDK    /AWL         Made Switches bigger. Made BackingLocation EntryType, SpaceClass, SwapUnitState   be MACHINE DEPENDENT.  Added anyReadOnlyChildren, allReadOnlyChildren.  Removed   pdaBase.27-Aug-81  9:04:06   WDK       Forget to increment version number.13-Oct-81 15:51:23   WDK       Base becomes LONG.  VersionID ¬ 23023.11-Nov-81  9:26:32   JGS   Addes buildDate, expirationDate, statevectorBase, timeoutBase, timeoutPages.  VersionID ¬ 11111.23-Aug-82 14:53:05   AWL         Page numbers, counts and offsets remain SHORT even though Environment now supports those as LONG.30-Jun-83  8:32:06   RXJ        Page numbers, counts and offsets become LONG .  VersionID ¬ 06303.