-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- BootFile.mesa       23-Jun-83 11:15:40 by WDK     <<Defines the format of a Pilot boot file.  (Germ boot files have a different format.)  Most of the items defined here are known to MakeBoot.A boot file is intended to capture the state of real memory and the relevant processor registers, most notably the map.  It consists of a Header page followed by one or more data pages, followed by zero or more groups each consisting of a Trailer page followed by one or more data pages.  Each Header or Trailer page assigns virtual and real addresses and flag bits to the accompanying data pages.  The Header page contains some additional global state.Assertion: if MapEntry[p, v] precedes MapEntry[p', v'] in a boot file, then p is less than (and not equal to) p'. If a boot file does NOT contain an entry for a given page, that page is understood to be vacant.There are two varieties of boot file depending on whether the inLoadMode of a boot file is load or resume:  inLoadMode=load signifies that the program captured in the boot file does not care into which real pages it is loaded.  In this case the boot loader expects all real memory to be mapped to an initial prefix of virtual memory; it leaves all excess real memory mapped immediately following the last virtual page it loads.  (Thus those virtual pages between ones which are loaded are set vacant.) This flavor of boot file is made by MakeBoot; its Header.pStartListHeader is non-NIL and points to the start list in the boot file.  inLoadMode=restore signifies that the program captured in the boot file expects to be reloaded into the real pages specified in the boot file.  All excess real pages should not be mapped into virtual memory. This flavor of boot file is made by the OutLoad operation of the boot loader; its Header.pStartListHeader is NIL.With either inLoadMode, the flags (W, D, R) of the loaded pages are set to the values specified in the boot file.At present, continuation=initial is always associated with inLoadMode=load and continuation=resumptive is always associated with inLoadMode=restore.  That is, we have found no reason to have a boot file with (say) continuation=resumptive and inLoadMode=load.To be distributed via an Alto/PUP boot server, one of these boot files would have to be encapsulated by preceding it with a dummy page containing an appropriate timestamp. (At present, PUP-style boot servers are only used by D0s (and Dorados?).) NS servers distribute the boot file with no additional encapsulation.NOTE: Some item definitions here do not obtain their Mesa TYPE from the proper interface, but instead have a local copy of the TYPE definition. This is done to ease bootstrapping. The runtime must be careful when loopholing these items to the correct type.>>DIRECTORY  Environment USING [PageCount, PageNumber, wordsPerPage],  PageMap USING [Flags, RealPageNumber],  StartList USING [Base];BootFile: DEFINITIONS =  BEGIN    currentVersion: CARDINAL = 103;  -- for boot files written using these definitions (see Header below)    -- Note that a system's entry point is a control link stored at SDDefs.SD[sBoot] in the MDS specified by Header.mds.  Header: TYPE = MACHINE DEPENDENT RECORD [  -- first page of boot file    version (0): CARDINAL ¬ currentVersion,    creationDate (1): --System.GreenwichMeanTime-- LONG UNSPECIFIED,    pStartListHeader (3): StartList.Base,  -- (NIL if made by boot loader).    mds (5): MDSIndex,  -- mds in which inloaded system runs.  Always 0 for germ.    switches (6): Switches,  -- copy of switches for germ.    spareA (22) : WORD ¬ 0|NULL,    spareB (23) : WORD ¬ 0|NULL,    -- Page map data:    inLoadMode (24): InLoadMode,  -- real page numbers significant?    countData (25): Environment.PageCount,  -- total number of nonvacant virtual pages described in boot file (Header.entries plus any Trailer.entries).    entries (27): ARRAY [0..0) OF MapEntry];  -- page map entries for (first part of) boot file.  Trailer: TYPE = MACHINE DEPENDENT RECORD [    version (0): CARDINAL ¬ currentVersion,    entries (1): ARRAY [0..0) OF MapEntry];  -- page map entries for next part of boot file.  InLoadMode: TYPE = MACHINE DEPENDENT {    load(0),  -- value of MapEntry.real is meaningless.    restore(1) };  -- value of MapEntry.real is significant.    MapEntry: TYPE = MACHINE DEPENDENT RECORD [  -- page map data    virtual (0): Environment.PageNumber, real (2): PageMap.RealPageNumber,    flags (4): PageMap.Flags];  MDSIndex: TYPE = CARDINAL;  -- high order bits of long pointer to MDS.    Switches: TYPE = --System.Switches-- PACKED ARRAY CHARACTER OF UpDown;  UpDown: TYPE = MACHINE DEPENDENT {up(0), down(1)};  MemorySizeToFileSize: PROCEDURE [countReal: Environment.PageCount]    RETURNS [Environment.PageCount] = INLINE {    -- Calculates upper bound on boot file size as function of real memory size.    RETURN[      countReal  -- total data pages        + 1  -- header page        + (MAX[countReal, maxEntriesPerHeader] - maxEntriesPerHeader +           maxEntriesPerTrailer - 1)	   /maxEntriesPerTrailer  -- trailer pages      ] };  maxEntriesPerHeader: CARDINAL =    (Environment.wordsPerPage - SIZE[Header])/SIZE[MapEntry];  maxEntriesPerTrailer: CARDINAL =    (Environment.wordsPerPage - SIZE[Trailer])/SIZE[MapEntry];  END.LOGDec 15, 78 5:32 PM   PXM    	Create fileJan 26, 80 11:29 PM  FXH    	Move MDSIndex here from BootJul 11, 80 9:09 AM   PXM    	Delete self field of Header19-Oct-81 16:54:29   WDK       New instruction set.  Deleted Continuation and destination.   pStartListHeader becomes LONG POINTER. Entry renamed to MapEntry.   Improved documentation.  currentVersion ¬ 102.24-Nov-82 20:13:45   AWL         MapEntry.virtual of type VirtualPageNumber temporarily until MakeBoot can be fixed.23-Jun-83 11:22:45   WDK        Long real page numbers. Added switches to Header.   Incremented version. Documentation.