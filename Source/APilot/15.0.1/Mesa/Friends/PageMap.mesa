-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- PageMap.mesa            8-Nov-82 15:52:34 by JXP   -- Inline access to the Principles of Operation page map.-- Use a higher level interface unless you cannot call a procedure AND you will not interfere with Pilot's use of the page map!DIRECTORY  Environment USING [PageNumber],  ESCAlpha USING [aSM, aGMF, aSMF],  Mopcodes USING [zESC];PageMap: DEFINITIONS =  BEGIN  PageNumber: TYPE = Environment.PageNumber;  RealPageNumber: TYPE = LONG CARDINAL;  maxRealPages: LONG CARDINAL = LAST[RealPageNumber];  State: TYPE = MACHINE DEPENDENT RECORD [    processorDependent(0:0..12): ProcessorDependent ¬ NULL,    flags(0:13..15): Flags];  Flags: TYPE = MACHINE DEPENDENT RECORD [    readonly(0:0..0): BOOLEAN,  -- (0 for FALSE, 1 for TRUE.)    dirty(0:1..1): BOOLEAN,    referenced(0:2..2): BOOLEAN];  assertFALSEIsZero: PRIVATE BOOLEAN[TRUE..TRUE] =    (LOOPHOLE[FALSE, CARDINAL] = CARDINAL[0]);  assertTRUEIsOne: PRIVATE BOOLEAN[TRUE..TRUE] =    (LOOPHOLE[TRUE, CARDINAL] = CARDINAL[1]);  ProcessorDependent: TYPE = MACHINE DEPENDENT RECORD [    -- Processor dependent page status. This data is read-only    -- to the processor via the procedures in this interface.    bits(0:0..12): CARDINAL [0..17777B]];  -- Flags or bit masks for setting the fields of a Flags (in binary order):  flagsClean, flagsNone: Flags = [    readonly: FALSE, dirty: FALSE, referenced: FALSE];  flagsDirty: Flags = [readonly: FALSE, dirty: TRUE, referenced: FALSE];  flagsDirtyReferenced: Flags = [readonly: FALSE, dirty: TRUE, referenced: TRUE];  flagsReadOnly, flagsReadonly: Flags = [    readonly: TRUE, dirty: FALSE, referenced: FALSE];  flagsReadOnlyReferenced, flagsReadonlyReferenced: Flags = [    readonly: TRUE, dirty: FALSE, referenced: TRUE];  flagsVacant: Flags = [readonly: TRUE, dirty: TRUE, referenced: FALSE];  flagsReadOnlyDirtyReferenced: Flags = [    readonly: TRUE, dirty: TRUE, referenced: TRUE];  -- Bit masks for isolation of the fields of a Flags (in binary order):  maskNone: Flags = [    readonly: LOOPHOLE[0], dirty: LOOPHOLE[0], referenced: LOOPHOLE[0]];  maskReferenced, maskNotReadonlyNotDirty: Flags = [    readonly: LOOPHOLE[0], dirty: LOOPHOLE[0], referenced: LOOPHOLE[1]];  maskDirty, maskNotReadOnlyNotReferenced, maskNotReadonlyNotReferenced: Flags = [    readonly: LOOPHOLE[0], dirty: LOOPHOLE[1], referenced: LOOPHOLE[0]];  maskDirtyReferenced, maskNotReadOnly, maskNotReadonly: Flags = [    readonly: LOOPHOLE[0], dirty: LOOPHOLE[1], referenced: LOOPHOLE[1]];  maskReadOnly, maskNotDirtyNotReferenced: Flags = [    readonly: LOOPHOLE[1], dirty: LOOPHOLE[0], referenced: LOOPHOLE[0]];  maskReadOnlyReferenced, maskReadonlyReferenced, maskNotDirty: Flags = [    readonly: LOOPHOLE[1], dirty: LOOPHOLE[0], referenced: LOOPHOLE[1]];  maskReadOnlyDirty, maskReadonlyDirty, maskNotReferenced: Flags = [    readonly: LOOPHOLE[1], dirty: LOOPHOLE[1], referenced: LOOPHOLE[0]];  maskAll: Flags = [    readonly: LOOPHOLE[1], dirty: LOOPHOLE[1], referenced: LOOPHOLE[1]];  -- Machine instructions from the Principles of Operations:  -- (ExchangeFlags et al are declared PRIVATE to prevent accidental misuse.)  ExchangeState: PRIVATE PROCEDURE [virtual: PageNumber, newState: State]    RETURNS [oldState: State, real: RealPageNumber] =    -- Gets the state and real page of a virtual page;    -- If the page is mapped, also sets the flags to newState.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aSMF END;  ExchangeFlags: PRIVATE PROCEDURE [virtual: PageNumber, newFlags: Flags]    RETURNS [oldState: State, real: RealPageNumber] =    -- Gets the state and real page of a virtual page;    -- If the page is mapped, also sets the flags to newFlags.    -- INLINE {RETURN ExchangeState[virtual, StateFromFlags[newFlags]]}; ++TEMP until AR12673 fixed.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aSMF END;  GetState: PRIVATE PROCEDURE [virtual: PageNumber]    RETURNS [state: State, real: RealPageNumber] =    -- Gets the state and real page of a virtual page.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aGMF END;  SetMapState: PRIVATE PROCEDURE [    virtual: PageNumber, real: RealPageNumber, state: State] =    -- Sets the real page and state of a virtual page.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aSM END;  SetMapFlags: PRIVATE PROCEDURE [    virtual: PageNumber, real: RealPageNumber, flags: Flags] =    -- Sets the real page and flags of a virtual page.    -- INLINE {SetMapState[virtual, real, StateFromFlags[flags]]}; ++TEMP until AR12673 fixed.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aSM END;  IsMapped: PROCEDURE [virtual: PageNumber] RETURNS [BOOLEAN] = INLINE    BEGIN RETURN[GetState[virtual].state.flags ~= flagsVacant] END;  IsVacant: PROCEDURE [virtual: PageNumber] RETURNS [BOOLEAN] = INLINE    BEGIN RETURN[GetState[virtual].state.flags = flagsVacant] END;  StateFromFlags: PROCEDURE [flags: Flags] RETURNS [State] = INLINE    -- (state.processorDependent ¬ 0.) WORKAROUND for AR 12658.    BEGIN RETURN[LOOPHOLE[flags]] END;  END.    LOGDecember 11, 1978  2:14 PM   PXM       Created file.January 21, 1980  8:57 AM   WDK       Added mask values.July 21, 1980  2:46 PM   WDK       Added GetFlags.1-Aug-81 11:12:32   WDK       Value.logSingleError renamed to "reserved".  Added IsMapped and IsVacant.  Added maskFlagsAll. etc.  Added maskFlagsDirtyReferenced, maskNotReferenced.  Defined flagsAll in terms of maskFlagsAll, etc.  Gave explicit machine dependent values.8-Sep-81  8:31:19   JGS   Convert to new princops names and semantics.12-Oct-81 14:30:54   WDK       Put masks back in.  Added human-sensible names.13-Sep-82 19:54:02   WDK       Flags becomes field in new State. Added new masks, no longer named maskFlags*.22-Oct-82 15:04:26   WDK        Changed processor dependent field of State from UNSPECIFIED to a definite type. ExchangeFlags renamed to ExchangeState, SetMap to SetMapState. Added StateFromFlags, ExchangeFlags, SetMapFlags. Deleted SMF, GMF, SM.26-Oct-82 12:34:03   WDK        Work around AR12673. 8-Nov-82 15:53:06   JXP   	Define PageNumber as Environment.PageNumber.