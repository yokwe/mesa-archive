-- TextBltFontFormat.mesa    3-Jan-85 10:49:37 by WDK     -- Copyright (C) Xerox Corporation 1984. All rights reserved.DIRECTORY  Environment USING [Byte];TextBltFontFormat: DEFINITIONS =  BEGIN  fontRecordAlignment: NATURAL = 16;  -- FontRecord MUST be aligned on a sixteen word boundary!  FontHandle: TYPE = LONG POINTER TO FontRecord;  -- FontRecord is the concrete type of a TextBlt.Font.  -- MUST be aligned on a sixteen word boundary!  FontRecord: TYPE = MACHINE DEPENDENT RECORD [    rasters(0): FontRasters,    spacingWidths(2): SpacingWidths,    printerWidths(4): PrinterWidths,    flags(6): FlagsArray,    rasterInfos(8): RasterInfos,    height(10): CARDINAL];  FontRasters: TYPE =  -- base pointer for rasters (Note 2)    LONG BASE POINTER TO <<rasters>> ARRAY [0..0) OF WORD;  SpacingWidths: TYPE = LONG POINTER TO PACKED ARRAY Environment.Byte OF SpacingWidth;  SpacingWidth: TYPE = Environment.Byte;  PrinterWidths: TYPE = LONG POINTER TO ARRAY Environment.Byte OF PrinterWidth;  PrinterWidth: TYPE = CARDINAL;  FlagsArray: TYPE = LONG POINTER TO PACKED ARRAY Environment.Byte OF Flags;  Flags: TYPE = MACHINE DEPENDENT RECORD [    pad(0:0..0): BOOLEAN, stop(0:1..1): BOOLEAN];  RasterInfos: TYPE = LONG POINTER TO ARRAY Environment.Byte OF RasterInfo;  RasterInfo: TYPE = MACHINE DEPENDENT RECORD [    leftKern: BOOLEAN,  -- (Note 1)    rightKern: BOOLEAN,  -- (Note 1)    offset: RasterOffset];  -- offset of char's raster (Note 2)  RasterOffsetDomain: TYPE = CARDINAL [0..37777B];  RasterOffset: TYPE = FontRasters RELATIVE POINTER  --RasterOffsetDomain--    [0..37777B] <<to raster>> ;  RasterOffsetFromDomain: PROC [domain: RasterOffsetDomain]    RETURNS [RasterOffset] = INLINE {RETURN[LOOPHOLE[domain]]};  RasterDomainFromOffset: PROC [offset: RasterOffset]    RETURNS [RasterOffsetDomain] = INLINE {RETURN[LOOPHOLE[offset]]};  maxLeftKern: CARDINAL = 1;  -- supports kerning up to one pixel to the left.  maxRightKern: CARDINAL = 1;  -- supports kerning up to one pixel to the right.  END.LOG7-25-80              XXG   	Created.July 30, 80  10:35   Jim JXF     	Added D0FontHandle.July 30, 80  10:35   Jim JXF     	Remove D0FontHandle.Nov 13, 81   17:23   David DXM    	Renamed Xfonts, changed FontRecord12-Jan-82 14:20:59   FXH    /Jim/Joe	Merged back into Pilot Version 9-May-84 12:17:33   WDK        Improved documentation. Added RgFlagsPtr, max*Kern, PixelWidth, RasterOffset, FontWidths, FontChar, RgFlags, FontRecordAlignment. FontBitsPtr becomes BASE. Added explicit bit positions in CharEntry.17-Oct-84 14:30:44   JGS       Moved printer widths to separate table.28-Nov-84  8:56:08   WDK        Added RasterOffsetDomain, RasterOffsetFromDomain. Touch up. 3-Jan-85 10:51:09   WDK     	Use Environment.Byte.NOTES:1. KerningIf RasterInfo.leftKern = TRUE, the character's raster has one column preceeding the char's origin, and is to be written into the destination bitmap one column preceeding the current position (bitPos). If RasterInfo.rightKern = TRUE, the raster extends one column past the spacing width into the space for the next next char; that char's raster should begin coincident with the current char's last column (one column preceeding where it would normally go). In PrincOps terms,  DisplayWidth: PROC [font: FontHandle, char: Environment.Byte] RETURNS [CARDINAL] = {    RETURN[      font.spacingWidths[char]      + (IF font.rasterInfo[char].leftKern THEN 1 ELSE 0)      + (IF font.rasterInfo[char].rightKern THEN 1 ELSE 0)]};  LeftKern: PROC [font: FontHandle, char: Environment.Byte] RETURNS [CARDINAL] = {    RETURN[IF font.rasterInfo[char].leftKern THEN 1 ELSE 0]};  SpacingWidth: PROC [font: FontHandle, char: Environment.Byte] RETURNS [CARDINAL] = {    RETURN[font.spacingWidths[char]]};Caution: Because of kerning, TextBlt may write bits into the destination bitmap to the left of the bitPos of the leftmost character and to the right of the right margin. The programmer must initialize bitPos to allow for left kerning of the first character and must supply a bitmap wide enough to allow for the maximum possible right kerning. [from PrincOps]2. RastersFontRasters is a base pointer for the character raster data. For a particular character, RasterInfo.offset is added to this base to get the address of the character's raster. The raster format is defined in the following pseudo-Mesa:  Raster: TYPE = MAXIMALLY PACKED ARRAY [0..FontRecord.height) OF ScanLine;  ScanLine: TYPE = PACKED ARRAY [0..FontRecord.spacingWidths[char]) OF BIT;Note that the scan lines are tightly packed together; the last bit of a scan line is immediately followed by the first bit of the next. Each raster begins on a word boundary.In PrincOps terms,  Bit: PROC [font: FontHandle, char: Environment.Byte, scanLine, pixel: CARDINAL] RETURNS [BIT] = {    raster: LONG POINTER TO PACKED ARRAY OF BIT =      LOOPHOLE[font.raster + font.rasterInfos[char].offset];    bit: CARDINAL = scanLine * DisplayWidth[font, char] + pixel;    RETURN[raster[bit]]};[The PrincOps definition of Bit has been recast above in terms of explicit scanline and pixel.]3. Raster orientationThe memory order of the bits in the raster correspond to the memory order that TextBlt will paint them into the destination bitmap. Said another way, TextBlt paints the first scan line of the raster into the appropriate place in first scan line of the destination bitmap, and so on. Similarly, the first bit of a raster's scan line is painted into the appropriate first bit of the scan line in the destination bitmap, and so on.In conventional Xerox bitmap displays, the first scan line in memory corresponds to the top line on the screen, and the first bit of a scan line corresponds to the left pixel of the line. For this case, the first scan line in the raster will be the topmost row of the character, and the first pixel (most significant bit) of a scan line will be the leftmost pixel of its row.