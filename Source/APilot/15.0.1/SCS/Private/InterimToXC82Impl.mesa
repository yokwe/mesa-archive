-- InterimToXC82Impl.mesa-- Last edited by Alfvin on 15-May-84 16:57:07DIRECTORY  Inline USING [DIVMOD],  JapaneseKanji USING [InterimJIS1Chset, InterimJIS2Chset, InterimToJDSObjectHandle, InterimToStandardKanjiMap, StandardJIS1Chset, StandardJIS2Chset],  NSString USING [Character],  NSStringConvert USING [Error],  NSStringConvertInternal USING [CharIndex, ChineseKanjiChset, LeftHalf, LeftHalfTable, RightHalf, RightHalfTable, unknownChar],  Runtime USING [GetTableBase];InterimToXC82Impl: PROGRAM  IMPORTS Inline, NSStringConvert, JapaneseKanji, Runtime  EXPORTS NSStringConvertInternal =  BEGIN OPEN NSStringConvertInternal, JapaneseKanji;  interimToJDSMap: InterimToJDSObjectHandle _ NIL;  ConvertInterimToXC82: PUBLIC PROC [c: NSString.Character]    RETURNS [newChar: NSString.Character] =    BEGIN    SELECT c.chset FROM      0 =>        newChar _          SELECT c.code FROM            IN [41B..43B] => c,            44B => [0, 244B],            IN [45B..46B] => c,            47B => [0, 271B],            IN [50B..54B] => c,            55B => [41B, 76B],            IN [56B..135B] => c,            IN [136B..137B] => c,            140B => [0, 251B],            IN [141B..176B] => c,            <<the following codes in 177..240 are not really part of	    the interim set and are being handled for the benefit of Star>>            211B => c,            215B => c,	    IN [221B..231B] => [360B, 341B + c.code - 221B],	    IN [234B..237B] => [360B, 354B + c.code - 234B],            IN [241B..243B] => c,            245B => c,            247B => c,            250B => [0, 44B],            253B => c,            IN [260B..270B] => c,            IN [273B..277B] => c,            IN [301B..310B] => c,            IN [312B..317B] => c,            IN [340B..344B] => c,            IN [346B..376B] => c,            ENDCASE => unknownChar;      1 =>        newChar _          SELECT c.code FROM            IN [41B..70B] => [46B, c.code],            71B => [46B, 140B],            IN [101B..130B] => [46B, c.code],            131B => [46B, 141B],            IN [241B..376B] => [47B, 41B + c.code - 241B],	    ENDCASE => unknownChar;      2 =>        newChar _          SELECT c.code FROM            IN [41B..163B] => [44B, c.code],            IN [167B..170B] => [41B, 65B + c.code - 167B],            IN [171B..172B] => [41B, 42B + c.code - 171B],            IN [173B..176B] => [41B, 126B + c.code - 173B],            IN [241B..366B] => [45B, 41B + c.code - 241B],            IN [367B..370B] => [41B, 63B + c.code - 367B],            371B => [41B, 74B],            ENDCASE => unknownChar;      3 =>        newChar _ SELECT c.code FROM 41B => [357B, 247B], ENDCASE => unknownChar;      4 =>        newChar _          SELECT c.code FROM            IN [41B..176B] => [44B, 241B + c.code - 41B],            -- Chinese comma ?? 376B => [41B, 44B],              ENDCASE => unknownChar;      20B =>        BEGIN        ci: CharIndex _ VAL[c.code];        leftHalfTable: LeftHalfTable = [          c41B: [357B, 41B], c42B: [357B, 42B], c43B: [357B, 43B],          c44B: [357B, 44B], c45B: [0, 55B], c46B: [0, 47B], c47B: [357B, 50B],          c50B: [0, 252B], c51B: [0, 272B], c52B: [357B, 260B],          c53B: [357B, 261B], c54B: [0, 255B], c55B: [0, 254B], c56B: [0, 257B],          c57B: [0, 256B], c60B: [357B, 100B], c61B: [357B, 153B],          c62B: [357B, 62B], c63B: [357B, 63B], c64B: [357B, 64B],          c65B: [357B, 65B], c66B: [357B, 66B], c67B: [357B, 67B],          c70B: [357B, 70B], c71B: [357B, 71B], c72B: [357B, 262B],          c73B: [357B, 263B], c74B: [357B, 74B], c75B: [357B, 77B],          c76B: [357B, 75B], c77B: [357B, 76B], c100B: [41B, 145B],          c101B: [41B, 146B], c102B: [357B, 102B], c103B: [357B, 103B],          c104B: [357B, 104B], c105B: [357B, 105B], c106B: [357B, 106B],          c107B: [357B, 107B], c110B: [41B, 102B], c111B: [357B, 111B],          c112B: [357B, 112B], c113B: [357B, 113B], c114B: [357B, 122B],          c115B: [357B, 115B], c116B: [357B, 116B], c117B: [357B, 117B],          c120B: [42B, 42B], c121B: [357B, 140B], c122B: [357B, 317B],          c123B: [357B, 320B], c124B: [357B, 337B], c125B: [357B, 340B],          c126B: [41B, 154B], c127B: [41B, 155B], c130B: [357B, 60B],          c131B: [357B, 61B], c132B: [357B, 114B], c133B: [357B, 141B],          c134B: [357B, 121B], c135B: [357B, 123B], c136B: [357B, 120B],          c137B: [357B, 270B], c140B: [42B, 43B], c141B: [41B, 175B],          c142B: [357B, 142B], c143B: [357B, 143B], c144B: [357B, 144B],          c145B: [357B, 145B], c146B: [0, 323B], c147B: [0, 322B],          c150B: [357B, 146B], c151B: [357B, 147B], c152B: [357B, 264B],          c153B: [357B, 265B], c154B: [357B, 154B], c155B: [357B, 155B],          c156B: [41B, 150B], c157B: [357B, 157B], c160B: [357B, 152B],          c161B: [41B, 147B], c162B: [41B, 142B], c163B: [357B, 162B],          c164B: [357B, 163B], c165B: [357B, 164B], c166B: [357B, 165B],          c167B: [357B, 166B], c170B: [357B, 167B], c171B: [357B, 171B],          c172B: [357B, 266B], c173B: [357B, 267B], c174B: [357B, 174B],          c175B: [357B, 175B], c176B: [357B, 176B], c177B: unknownChar];        rightHalfTable: RightHalfTable = [          c241B: [0, 324B], c242B: [357B, 252B], c243B: [357B, 374B],          c244B: [357B, 243B], c245B: [357B, 244B], c246B: [357B, 241B],          c247B: [357B, 242B], c250B: [357B, 151B], c251B: [357B, 253B],          c252B: [357B, 124B], c253B: [357B, 125B], c254B: [357B, 126B],          c255B: [357B, 127B], c256B: [357B, 350B], c257B: [357B, 351B],          c260B: [357B, 271B], c261B: [357B, 272B], c262B: [357B, 150B],          c263B: [357B, 251B], c264B: [357B, 160B], c265B: [357B, 161B],          c266B: [357B, 250B], c267B: [357B, 254B], c270B: [357B, 255B],          c271B: [357B, 256B], c272B: [357B, 130B], c273B: [357B, 131B],          c274B: [357B, 132B], c275B: [357B, 133B], c276B: [357B, 352B],          c277B: [41B, 152B], c300B: [357B, 301B], c301B: [357B, 302B],          c302B: [357B, 303B], c303B: [357B, 304B], c304B: [357B, 305B],          c305B: [357B, 306B], c306B: [357B, 307B], c307B: [357B, 310B],          c310B: [357B, 311B], c311B: [357B, 312B], c312B: [357B, 134B],          c313B: [357B, 135B], c314B: [357B, 136B], c315B: [357B, 137B],          c316B: [41B, 151B], c317B: [357B, 353B], c320B: [357B, 321B],          c321B: [357B, 322B], c322B: [357B, 323B], c323B: [357B, 324B],          c324B: [357B, 325B], c325B: [357B, 326B], c326B: [357B, 327B],          c327B: [357B, 330B], c330B: [357B, 331B], c331B: [357B, 332B],          c332B: [357B, 360B], c333B: [357B, 361B], c334B: [357B, 362B],          c335B: [357B, 363B], c336B: [357B, 354B], c337B: [357B, 355B],          c340B: [42B, 46B], c341B: [42B, 44B], c342B: [41B, 176B],          c343B: [41B, 171B], c344B: [41B, 173B], c345B: [357B, 341B],          c346B: [357B, 342B], c347B: [357B, 343B], c350B: [357B, 316B],          c351B: [357B, 313B], c352B: [357B, 364B], c353B: [357B, 365B],          c354B: [357B, 366B], c355B: [357B, 367B], c356B: [357B, 356B],          c357B: [357B, 357B], c360B: [42B, 47B], c361B: [42B, 45B],          c362B: [42B, 41B], c363B: [41B, 172B], c364B: [41B, 174B],          c365B: [357B, 344B], c366B: [357B, 345B], c367B: [357B, 346B],          c370B: [357B, 314B], c371B: [357B, 315B], c372B: [357B, 370B],          c373B: [357B, 371B], c374B: [357B, 372B], c375B: [357B, 373B],          c376B: [357B, 347B], c377B: unknownChar];        newChar _          SELECT ci FROM            IN LeftHalf => leftHalfTable[ci],            IN RightHalf => rightHalfTable[ci],            ENDCASE => unknownChar;        END;      21B =>        newChar _          SELECT c.code FROM            IN [41B..46B] => [360B, 366B + c.code - 41B],            57B => [375B, 257B],	    IN [60B..71B] => [375B, 260B + c.code - 60B],	    140B => [357B, 257B],	    141B => [357B, 300B],	    142B => [357B, 110B],	    143B => [357B, 156B],	    144B => [357B, 45B],	    IN [145B..147B] => [357B, 273B + c.code - 145B],	    IN [150B..152B] => [357B, 333B + c.code - 150B],	    IN [160B..161B] => [41B, 53B + c.code - 160B],            162B => [41B, 156B],            IN [163B..164B] => [357B, 375B + c.code - 163B],            165B => [357B, 336B],            IN [166B..167B] => [357B, 172B + c.code - 166B],            170B => [357B, 277B],            IN [171B..172B] => [357B, 52B + c.code - 171B],	    173B => [357B, 46B],	    174B => [357B, 101B],	    175B => [357B, 276B],	    176B => [357B, 170B],	    241B => [164B, 41B],            242B => [42B, 56B],            243B => [41B, 105B],            244B => [41B, 104B],            245B => [41B, 67B],            IN [246B..247B] => [41B, 132B + c.code - 246B],            IN [250B..251B] => [41B, 114B + c.code - 250B],            IN [252B..253B] => [42B, 50B + c.code - 252B],            254B => [41B, 72B],            255B => [41B, 70B],            IN [256B..257B] => [357B, 72B + c.code - 256B],	    IN [260B..275B] => [164B, 42B + c.code - 260B],            ENDCASE => unknownChar;      22B =>        newChar _          SELECT c.code FROM            IN [43B..52B] => [50B, c.code],            IN [320B..323B] => [375B, c.code],	    ENDCASE => unknownChar;      40B =>        BEGIN        ci: CharIndex _ VAL[c.code];        leftHalfTable: LeftHalfTable = [          c41B: [361B, 51B], c42B: [361B, 71B], c61B: [361B, 50B],          c62B: [361B, 70B], c65B: [361B, 110B], c66B: [361B, 130B],          c67B: [361B, 150B], c70B: [361B, 170B], c73B: [361B, 250B],          c74B: [361B, 270B], c75B: [361B, 310B], c76B: [361B, 330B],          c101B: [361B, 43B], c102B: [361B, 63B], c105B: [361B, 103B],          c106B: [361B, 123B], c107B: [361B, 143B], c110B: [361B, 163B],          c113B: [361B, 243B], c114B: [361B, 263B], c115B: [361B, 303B],          c116B: [361B, 323B], c121B: [361B, 41B], c122B: [361B, 61B],          c125B: [361B, 101B], c126B: [361B, 121B], c127B: [361B, 141B],          c130B: [361B, 161B], c133B: [361B, 241B], c134B: [361B, 261B],          c135B: [361B, 301B], c136B: [361B, 321B], c141B: [361B, 44B],          c142B: [361B, 64B], c151B: [363B, 304B], c152B: [363B, 324B],          c153B: [361B, 244B], c154B: [361B, 264B], c161B: [361B, 42B],          c162B: [361B, 62B], c165B: [361B, 102B], c166B: [361B, 122B],          c167B: [361B, 142B], c170B: [361B, 162B], c173B: [361B, 242B],          c174B: [361B, 262B], c175B: [361B, 302B], c176B: [361B, 322B],          c177B: unknownChar];        rightHalfTable: RightHalfTable = [          c243B: [362B, 112B], c244B: [362B, 132B], c260B: [0, 40B],	  c270B: [360B, 270B], c271B: [360B, 271B],          c272B: [360B, 272B], c273B: [360B, 273B], c274B: [360B, 274B],          c275B: [360B, 275B], c276B: [360B, 276B], c277B: [360B, 277B],          c300B: [360B, 300B], c301B: [360B, 301B], c302B: [360B, 302B],          c303B: [360B, 303B], c304B: [360B, 304B], c305B: [360B, 305B],          c306B: [360B, 306B], c307B: [360B, 307B], c310B: [360B, 310B],          c311B: [360B, 311B], c312B: [360B, 312B], c313B: [360B, 313B],          c314B: [360B, 314B], c315B: [360B, 315B], c316B: [360B, 316B],          c317B: [360B, 317B], c320B: [360B, 320B], c321B: [360B, 321B],          c322B: [360B, 322B], c323B: [360B, 323B], c324B: [360B, 324B],          c325B: [360B, 325B], c326B: [360B, 326B], c327B: [360B, 327B],          c330B: [360B, 330B], c331B: [360B, 331B], c332B: [360B, 332B],          c333B: [360B, 333B], c334B: [360B, 334B], c335B: [360B, 335B],          c336B: [360B, 336B], c337B: [360B, 337B], c340B: [360B, 340B],          c341B: [360B, 341B], c342B: [360B, 342B], c343B: [360B, 343B],          c344B: [360B, 344B], c345B: [360B, 345B], c346B: [360B, 346B],          c347B: [360B, 347B], c350B: [360B, 350B], c351B: [360B, 351B],          c352B: [360B, 352B], c353B: [360B, 353B], c354B: [360B, 354B],          c355B: [360B, 355B], c356B: [360B, 356B], c357B: [360B, 357B],          c360B: [360B, 41B], c361B: [360B, 42B], c362B: [360B, 43B],          c363B: [360B, 44B], c364B: [360B, 45B],	  -- ft ligature not yet assigned c365B: [360B, 46B],          c370B: [357B, 55B], c371B: [357B, 54B], c372B: [357B, 56B],          c373B: [357B, 57B], c374B: [360B, 374B], c375B: [360B, 375B],	  c376B: [360B, 176B], c377B: unknownChar];        newChar _          SELECT ci FROM            IN LeftHalf => leftHalfTable[ci],            IN RightHalf => rightHalfTable[ci],            ENDCASE => unknownChar;        END;      IN InterimJIS1Chset => {        interimSeq, seq: CARDINAL;        IF c = [60B, 0] THEN RETURN[[41B, 71B]];        IF c = [60B, 1] THEN RETURN[[41B, 73B]];        interimSeq _ (c.chset - FIRST[InterimJIS1Chset]) * 256 + c.code;        IF interimSeq > 2977 THEN newChar _ unknownChar	ELSE {          IF interimToJDSMap = NIL THEN            interimToJDSMap _ Runtime.GetTableBase[InterimToStandardKanjiMap];          seq _ interimToJDSMap[interimSeq];          [newChar.chset, newChar.code] _ Inline.DIVMOD[seq, 94];          newChar.chset _ newChar.chset + FIRST[StandardJIS1Chset];          newChar.code _ newChar.code + 41B}};      IN InterimJIS2Chset => {        seq: CARDINAL _ (c.chset - FIRST[InterimJIS2Chset]) * 255 + c.code;        [newChar.chset, newChar.code] _ Inline.DIVMOD[seq, 94];        newChar.chset _ newChar.chset + FIRST[StandardJIS2Chset];        newChar.code _ newChar.code + 41B;        RETURN};      IN ChineseKanjiChset => newChar _ c;      ENDCASE => newChar _ unknownChar;    IF newChar = unknownChar THEN newChar _ NSStringConvert.Error[unknownChar, c];    END;  END.x - Alfvin - Added ChineseKanjiChset processing.18-Mar-84 13:00:01 - Alfvin - Adapt to NSStringConvertImpl change which allows control codes through and fix bug in special handling of [60B, 0], [60B, 1] 9-Apr-84 15:41:27 - Alfvin - In the interest of clarity, remove code to allow [0, 0..40]] through since it must be handled in main module anyway.16-Apr-84 12:02:29 - Alfvin -  1) Was: [20B, 110B] => [357B, 110B], Now: [20B, 110B] => [41B, 102B]  2) Was: [0, 136B] => unknownChar, Now: [0, 136B] => [0, 136B]17-Apr-84 17:45:13 - Alfvin -  1) Was: [21B, 57B] => unknownChar, Now: => [375B, 257B]  2) Was: [21B, 60B..71B] => unknownChar, Now:  => [375B, 260B..271B]18-Apr-84 11:13:12 - Alfvin -  1) Was: [0, 221B..231B] => unknownChar, Now: => [360B, 341B..351B]  2) Was: [0, 234B..237B] => unknownChar, Now: => [360B, 354B..357B]15-May-84 16:57:03 - Alfvin -  1) Was: [0, 211B] => unknownChar, Now: => [0, 211B]  2) Was: [0, 215B] => unknownChar, Now: => [0, 215B]  4) Was: [40B, 260B] => unknownChar, Now: => [0, 40B]