-- File: PacketExchangeInternal.mesa - last edit:-- AOF                  6-Jun-86 12:12:25-- SMA                 27-May-86  9:25:16-- Copyright (C) 1983 , 1986, 1986, 1986 by Xerox Corporation. All rights reserved. DIRECTORY  NSBuffer USING [Buffer],  PacketExchange USING [    defaultWaitTime, ExchangeClientType, ExchangeHandle, WaitTime],  Socket USING [ChannelHandle, ReturnBuffer],  System USING [SocketNumber];PacketExchangeInternal: DEFINITIONS  IMPORTS Socket =BEGIN  <<  The Packet Exchange Protocol is a request/reply protocol that provides a  little more reliability than raw packets transmitetd from a socket, and less  reliabilty than the Sequenced Packet Protocol.  Usually one end will provide  some service at a well known socket or at a network address that is available  through a binding process involving the Clearinghouse.  The other end acquires  a socket and sends a request.  The request will be retransmitted a number of  times with the interval between retransmissions based on the delay to the  remote entity.>>--The Exchange handle and object (concrete form)  ExchangeHandle: TYPE = LONG POINTER TO PacketExchangeObject;  PacketExchangeObject: TYPE = RECORD [    cH: Socket.ChannelHandle,  --of the socket supporting the communication    retries: CARDINAL,   --number of times to send before giving up    exchangeID: LONG CARDINAL];  --initial when created, incremented when used    -- proceduresCreate: PROCEDURE [localSocket: System.SocketNumber,  receiveRequestCount: CARDINAL ¬ 1,  waitTime: PacketExchange.WaitTime ¬ PacketExchange.defaultWaitTime]  RETURNS [PacketExchange.ExchangeHandle]; -- receiveRequestCount is estimate of number of "to be queued" requests;  privateBuffers TRUE mean the buffers will be allocated, FALSE mean buffer will be shared with the system buffer pool.CreateTypicalServer: PROCEDURE [localSocket: System.SocketNumber]  RETURNS [PacketExchange.ExchangeHandle] = INLINE  {RETURN[Create[localSocket, 2]]};CreateTypicalUser: PROCEDURE [localSocket: System.SocketNumber]  RETURNS [PacketExchange.ExchangeHandle] = INLINE   {RETURN[Create[localSocket, 1]]};Delete: PROCEDURE [PacketExchange.ExchangeHandle];-- in SendRequestPacket, user is responsible for requestB and replyB when not NIL;-- the user CANNOT depend on the value of requestB.requeueProcedure!!SendRequestPacket: PROCEDURE [h: PacketExchange.ExchangeHandle,  requestB: NSBuffer.Buffer,  replyFilter: PacketExchange.ExchangeClientType ¬ unspecified,  replyMask: LONG CARDINAL ¬ LAST[LONG CARDINAL]]  RETURNS [replyB: NSBuffer.Buffer];  WaitForRequestPacket: PROCEDURE [h: PacketExchange.ExchangeHandle,   request: PacketExchange.ExchangeClientType ¬ unspecified]   RETURNS [requestB: NSBuffer.Buffer];-- in SendReplyPacket, caller loses ownership of replyB (he can get it back via-- replyB.requeueProcedure  SendReplyPacket: PROCEDURE [  h: PacketExchange.ExchangeHandle, replyB: NSBuffer.Buffer];  GetFreeSendPacket: PROCEDURE [  h: PacketExchange.ExchangeHandle] RETURNS [NSBuffer.Buffer];     ReturnFreeSendPacket: PROCEDURE [b: NSBuffer.Buffer] = INLINE  {Socket.ReturnBuffer[b]};   END.LOGTime: October 23, 1980  1:50 PM  By: Dalal  Action: created file.Time: January 13, 1981  5:30 PM  By: BLyon  Action: moved to Pilot Communication.Time:  2-Dec-81 10:42:56  By: AOF  Action: Trinity updates.Time: 10-May-82  9:42:43  By: AOF  Action: OIS => NS.Time: 14-Apr-83 10:58:47  By: AOF  Action: NS interface => Buffer interface.Time: 24-May-83 14:03:43  By: AOF  Action: Change transaction id.Time: 22-May-86 18:19:52  By: SMA  Action: Remove dependencies on Buffer.Time: 27-May-86  9:24:49  By: SMA  Action: ReturnBuffer => ReturnBuffer.