-- File SysConfigChangeAllImpl.mesa-- Last edited:	 5-Jan-87 10:47:22	RDM Add badMemConfig message.--  9-Dec-86 12:54:34	RDM-- 29-Jan-86 18:37:13	by: RRP changes for 12.2-- Created		30-Jun-85 12:45:38	by: AMR-- Last edited:		 2-Oct-85 13:47:06	by: MAY---- Copyright (C) 1985 Xerox Corporation. All rights reserved.--DIRECTORY  EEpromDefs	        USING [ VersionNumberROM, VersionNumberRAM, VersionNumberBadPages ],  Heap			USING [ systemZone],  Inline	        USING [ LowHalf ],  OfflineDiagInterface  USING [ OfflineDiagnosticProc,  				AbortCurrentTest,				DisplayItem,  				OptionsRecord, AnOptionLine, GetAnOptionsRecord,				GetAnOptionLine, GetAnOption,				GetAFixedPositionDisplayRecord, GetARow,			        FixedPositionDisplayRecord, ARow, 				DisplayFixedPositionData,			        GetANumber, GetYesNo, PutMessage],  SysConfigSubDefs,  SysConfigControlDefs  USING [ msgKey, msgKey1, NumberToHex, statusPtr],  SysConfigChannelDefs  USING [ eePromPointer, eePromImage, Status];    SysConfigChangeAllImpl: PROGRAM	IMPORTS Heap, Inline, OfflineDiagInterface, SysConfigControlDefs, SysConfigChannelDefs			EXPORTS SysConfigSubDefs =	BEGIN OPEN Odi: OfflineDiagInterface, SysConfigControlDefs, SysConfigChannelDefs;  -- ODI stands for OfflineDiagInterface.--******************************************************************************-- ConfigureChangeAllEEprom:--******************************************************************************ConfigureChangeAllEEprom: PUBLIC Odi.OfflineDiagnosticProc =  BEGIN    SetUpRow: PROCEDURE[namePosition: CARDINAL, name: LONG STRING,			stringValue: LONG STRING]         RETURNS [displayItem: Odi.DisplayItem] =      BEGIN        displayItem.namePosition ¬ namePosition;	displayItem.name ¬ name;	displayItem.stringValue ¬ stringValue;	displayItem.valuePosition ¬ noNumericData;	RETURN[displayItem];      END;  optionTable: LONG POINTER TO Odi.OptionsRecord ¬      Odi.GetAnOptionsRecord [1];  -- Just one row of option here  optionRow0: LONG POINTER TO Odi.AnOptionLine ¬      Odi.GetAnOptionLine [2]; -- Extra option is for EXIT  --     leftEdge: CARDINAL = 3;   -- For formatting display.  maxNumberWidth: CARDINAL = 5;  -- Biggest number is 10 digits wide.   noNumericData: CARDINAL = 0;  aSpace: CARDINAL = 1;  xPosition: CARDINAL;  -- Number for tracking position on current line  eePromWordSelected: CARDINAL;  -- The option selected by the user  initialEntry: BOOLEAN ¬ TRUE;  wordIndex: LONG CARDINAL;  dataValue: LONG CARDINAL;    stringArray: ARRAY [0..64) OF LONG STRING;   information: LONG POINTER TO Odi.FixedPositionDisplayRecord ¬      Odi.GetAFixedPositionDisplayRecord [11];  --  2 single-itemed rows of data    infoRow0: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 1 item on row  infoRow1: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 1 item  infoRow2: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item on row  infoRow3: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item  infoRow4: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item on row  infoRow5: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item  infoRow6: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item  infoRow7: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item on row  infoRow8: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item  infoRow9: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [6];  -- 6 item on row  infoRow10: LONG POINTER TO Odi.ARow ¬ Odi.GetARow [4];  -- 6 item  BEGIN  ENABLE    Odi.AbortCurrentTest => {FOR i: CARDINAL IN [0..64) DO       Heap.systemZone.FREE[@stringArray[i]]; ENDLOOP; REJECT};  FOR i: CARDINAL IN [0..64) DO     stringArray[i] ¬ Heap.systemZone.NEW[StringBody[4]]; ENDLOOP;  -- Option table     optionTable.linesOfOptions[0] ¬ optionRow0; -- Save pointer to row  optionTable.optionMenuTiTle ¬ msgKey[changeAll];    optionRow0.optionsOnALine[0].position ¬ leftEdge;  optionRow0.optionsOnALine[0].selectionNumberForThisItem ¬ 1;  optionRow0.optionsOnALine[0].option ¬ msgKey[continue];  -- %Change    xPosition ¬ leftEdge + msgKey[goToNextSelection].length + 8;  -- %Change  optionRow0.optionsOnALine[1].position ¬ xPosition;  optionRow0.optionsOnALine[1].selectionNumberForThisItem ¬ 2;  optionRow0.optionsOnALine[1].option ¬ msgKey[returnToTopLevel];  -- %Change      -- Now fill in the static fields of the display record        -- Fill in the screen Information record fields  information.displayTitle ¬ msgKey[contentsEEProm];  information.rows[0] ¬ infoRow0;  -- First row  information.rows[1] ¬ infoRow1;  -- Second row  information.rows[2] ¬ infoRow2;  -- third row  information.rows[3] ¬ infoRow3;  -- Fourth row  information.rows[4] ¬ infoRow4;  -- Fifth row  information.rows[5] ¬ infoRow5;  -- Sixth row  information.rows[6] ¬ infoRow6;  -- Seventh row  information.rows[7] ¬ infoRow7;  -- Eighth row  information.rows[8] ¬ infoRow8;  -- Ninth row  information.rows[9] ¬ infoRow9;  -- Tenth row  information.rows[10] ¬ infoRow10;  -- Eleventh row    -- Now fill in the static fields of the display record  --  --  -- Fill in first row first item static data  -- --  infoRow0.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word1], stringArray[0]];  xPosition ¬ leftEdge + msgKey[word1].length + 8;  infoRow0.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word2], stringArray[1]];  xPosition ¬ xPosition + msgKey[word2].length + 8;  infoRow0.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word3], stringArray[2]];  xPosition ¬ xPosition + msgKey[word3].length + 8;  infoRow0.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word4], stringArray[3]];  xPosition ¬ xPosition + msgKey[word4].length + 8;  infoRow0.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word5], stringArray[4]];  xPosition ¬ xPosition + msgKey[word5].length + 8;  infoRow0.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word6], stringArray[5]];  infoRow1.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word7], stringArray[6]];  xPosition ¬ leftEdge + msgKey[word7].length + 8;  infoRow1.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word8], stringArray[7]];  xPosition ¬ xPosition + msgKey[word8].length + 8;  infoRow1.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word9], stringArray[8]];  xPosition ¬ xPosition + msgKey[word9].length + 8;  infoRow1.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word10], stringArray[9]];  xPosition ¬ xPosition + msgKey[word10].length + 8;  infoRow1.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word11], stringArray[10]];  xPosition ¬ xPosition + msgKey[word11].length + 8;  infoRow1.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word12], stringArray[11]];  infoRow2.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word13], stringArray[12]];  xPosition ¬ leftEdge + msgKey[word13].length + 8;  infoRow2.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word14], stringArray[13]];  xPosition ¬ xPosition + msgKey[word14].length + 8;  infoRow2.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word15], stringArray[14]];  xPosition ¬ xPosition + msgKey[word15].length + 8;  infoRow2.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word16], stringArray[15]];  xPosition ¬ xPosition + msgKey[word16].length + 8;  infoRow2.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word17], stringArray[16]];  xPosition ¬ xPosition + msgKey[word17].length + 8;  infoRow2.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word18], stringArray[17]];  infoRow3.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word19], stringArray[18]];  xPosition ¬ leftEdge + msgKey[word19].length + 8;  infoRow3.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word20], stringArray[19]];  xPosition ¬ xPosition + msgKey[word20].length + 8;  infoRow3.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word21], stringArray[20]];  xPosition ¬ xPosition + msgKey[word21].length + 8;  infoRow3.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word22], stringArray[21]];  xPosition ¬ xPosition + msgKey[word22].length + 8;  infoRow3.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word23], stringArray[22]];  xPosition ¬ xPosition + msgKey[word23].length + 8;  infoRow3.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word24], stringArray[23]];  infoRow4.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word25], stringArray[24]];  xPosition ¬ leftEdge + msgKey[word25].length + 8;  infoRow4.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word26], stringArray[25]];  xPosition ¬ xPosition + msgKey[word26].length + 8;  infoRow4.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word27], stringArray[26]];  xPosition ¬ xPosition + msgKey[word27].length + 8;  infoRow4.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word28], stringArray[27]];  xPosition ¬ xPosition + msgKey[word28].length + 8;  infoRow4.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word29], stringArray[28]];  xPosition ¬ xPosition + msgKey[word29].length + 8;  infoRow4.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word30], stringArray[29]];  infoRow5.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word31], stringArray[30]];  xPosition ¬ leftEdge + msgKey[word31].length + 8;  infoRow5.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word32], stringArray[31]];  xPosition ¬ xPosition + msgKey[word32].length + 8;  infoRow5.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word33], stringArray[32]];  xPosition ¬ xPosition + msgKey[word33].length + 8;  infoRow5.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word34], stringArray[33]];  xPosition ¬ xPosition + msgKey[word34].length + 8;  infoRow5.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word35], stringArray[34]];  xPosition ¬ xPosition + msgKey[word35].length + 8;  infoRow5.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word36], stringArray[35]];  infoRow6.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word37], stringArray[36]];  xPosition ¬ leftEdge + msgKey[word37].length + 8;  infoRow6.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word38], stringArray[37]];  xPosition ¬ xPosition + msgKey[word38].length + 8;  infoRow6.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word39], stringArray[38]];  xPosition ¬ xPosition + msgKey[word39].length + 8;  infoRow6.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word40], stringArray[39]];  xPosition ¬ xPosition + msgKey[word40].length + 8;  infoRow6.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word41], stringArray[40]];  xPosition ¬ xPosition + msgKey[word41].length + 8;  infoRow6.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word42], stringArray[41]];  infoRow7.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word43], stringArray[42]];  xPosition ¬ leftEdge + msgKey[word43].length + 8;  infoRow7.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word44], stringArray[43]];  xPosition ¬ xPosition + msgKey[word44].length + 8;  infoRow7.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word45], stringArray[44]];  xPosition ¬ xPosition + msgKey[word45].length + 8;  infoRow7.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word46], stringArray[45]];  xPosition ¬ xPosition + msgKey[word46].length + 8;  infoRow7.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word47], stringArray[46]];  xPosition ¬ xPosition + msgKey[word47].length + 8;  infoRow7.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word48], stringArray[47]];  infoRow8.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word49], stringArray[48]];  xPosition ¬ leftEdge + msgKey[word31].length + 8;  infoRow8.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word50], stringArray[49]];  xPosition ¬ xPosition + msgKey[word32].length + 8;  infoRow8.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word51], stringArray[50]];  xPosition ¬ xPosition + msgKey[word33].length + 8;  infoRow8.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word52], stringArray[51]];  xPosition ¬ xPosition + msgKey[word34].length + 8;  infoRow8.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word53], stringArray[52]];  xPosition ¬ xPosition + msgKey[word35].length + 8;  infoRow8.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word54], stringArray[53]];  infoRow9.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word55], stringArray[54]];  xPosition ¬ leftEdge + msgKey[word55].length + 8;  infoRow9.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word56], stringArray[55]];  xPosition ¬ xPosition + msgKey[word56].length + 8;  infoRow9.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word57], stringArray[56]];  xPosition ¬ xPosition + msgKey[word57].length + 8;  infoRow9.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word58], stringArray[57]];  xPosition ¬ xPosition + msgKey[word58].length + 8;  infoRow9.rowItems[4] ¬ SetUpRow[xPosition, msgKey[word59], stringArray[58]];  xPosition ¬ xPosition + msgKey[word59].length + 8;  infoRow9.rowItems[5] ¬ SetUpRow[xPosition, msgKey[word60], stringArray[59]];  infoRow10.rowItems[0] ¬ SetUpRow[leftEdge, msgKey[word61], stringArray[60]];  xPosition ¬ leftEdge + msgKey[word61].length + 8;  infoRow10.rowItems[1] ¬ SetUpRow[xPosition, msgKey[word62], stringArray[61]];  xPosition ¬ xPosition + msgKey[word62].length + 8;  infoRow10.rowItems[2] ¬ SetUpRow[xPosition, msgKey[word63], stringArray[62]];  xPosition ¬ xPosition + msgKey[word63].length + 8;  infoRow10.rowItems[3] ¬ SetUpRow[xPosition, msgKey[word64], stringArray[63]];  IF SysConfigControlDefs.statusPtr­ # success THEN {    continue: BOOLEAN _ TRUE;    SELECT SysConfigControlDefs.statusPtr­ FROM      eePromError => Odi.PutMessage [msgKey1[eePromReadFailed], TRUE, TRUE];      badCommand => Odi.PutMessage [msgKey1[eePromBadCommand], TRUE, TRUE];      checkSumError => Odi.PutMessage [msgKey1[eePromCheckSumError], TRUE, TRUE];      badMemConfig => Odi.PutMessage [msgKey1[eePromMemConfigError], TRUE, TRUE];      ENDCASE => Odi.PutMessage [msgKey1[eePromUnknownError], TRUE, TRUE];    continue _ Odi.GetYesNo [prompt: msgKey1[doYouWishToContinue]];    IF ~continue THEN SIGNAL Odi.AbortCurrentTest};  DO  -- Loop until STOP is hit or valid data has been received    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i],stringArray[i]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+6],stringArray[i+6]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+12],stringArray[i+12]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+18],stringArray[i+18]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+24],stringArray[i+24]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+30],stringArray[i+30]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+36],stringArray[i+36]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+42],stringArray[i+42]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+48],stringArray[i+48]]; ENDLOOP;    FOR i: CARDINAL IN [0..6) DO NumberToHex[eePromPointer[i+54],stringArray[i+54]]; ENDLOOP;    FOR i: CARDINAL IN [0..4) DO NumberToHex[eePromPointer[i+60],stringArray[i+60]]; ENDLOOP;        IF initialEntry THEN [] ¬ Odi.GetAnOption [ optionTable: optionTable, 				optionPrompt: msgKey[blanks], justDisplayTable:TRUE];    IF eePromImage.VersionEProm > EEpromDefs.VersionNumberROM OR    eePromImage.VersionRAM > EEpromDefs.VersionNumberRAM OR    eePromImage.VersionBadPages > EEpromDefs.VersionNumberBadPages    					THEN { Odi.PutMessage [msgKey1[badVersionNumber], TRUE, TRUE, , , FALSE]; };					    Odi.DisplayFixedPositionData [  -- Display the drive information       		displayData: information, 		upDateOnly:IF initialEntry THEN FALSE ELSE TRUE];           			     eePromWordSelected ¬ Odi.GetAnOption [  -- Always returns a valid option         optionTable:NIL,         optionPrompt: msgKey[respondToPrompt], defaultOption:0]; -- Change screen or Exit		      IF eePromWordSelected = 2 THEN SIGNAL Odi.AbortCurrentTest;  -- Exit requested              [] ¬ Odi.GetAnOption [  -- Always returns a valid option      optionTable: NIL,      optionPrompt: msgKey[blanks], justDisplayTable:TRUE]; -- erase option Prompt before go to next question               -- Get  bad page Index       wordIndex ¬ Odi.GetANumber [       	  prompt: msgKey[eePromWordIndex],	  lowLimit: 1,		--These are dependent on the EEPromDefs structure	  upperLimit: 64,	--These are dependent on the EEPromDefs structure	  numberIsLong: TRUE,	  defaultNumber: 0].longNumber;	         initialEntry ¬ FALSE;	       -- Get bad page value       dataValue ¬ Odi.GetANumber [       	  prompt: msgKey[pageValue],	  lowLimit: 0,	  upperLimit: 0FFFFH,	  numberIsHexadecimal: TRUE,	  numberIsLong: TRUE, 	  defaultNumber: eePromPointer[Inline.LowHalf[wordIndex-1]]].longNumber;              eePromPointer[Inline.LowHalf[wordIndex-1]] ¬ --Index       				Inline.LowHalf[dataValue]; --Bad page information       	     ENDLOOP; -- inner loop           END;  -- ConfigureBadMemPages  END;END.logcreated on 30-Jun-85 12:45:38 by Allen Roberts