-- File: OFLFloppyDiagsDoveImpl.mesa-- Last edited   1-Oct-87 10:20:40 by STC  ---- Copyright (C) 1985 Xerox Corporation. All rights reserved.--DIRECTORY  DiagDiskMkTime       USING [ DiagDiskMkTimeImpl, mkTime],  DiagDiskTime	       USING [ SetRealTimeClock, RealTimeClockFailure],  OfflineDiagInterface USING [ OfflineDiagnosticProc, PutData,			       TestItemsForThisNode, GetATestItemsForThisNode,			       TestItem, GetATestItem, ClientPackage,			       AMenuOfSelections, GetAMenuOfSelections,			       Selections, GetASelectionArray,			       HelpText, GetAHelpText, AbortCurrentTest,			       FixedPositionDisplayRecord, ARow, GetARow,			       GetAFixedPositionDisplayRecord,			       PutMessage, HitAnyKeyToContinue,			       GetYesNo, LookForAbort, PutTestParameters],  OfflineFloppyMsgFaceDove                       USING [fdMsgPointer, fhMsgPointer, FloppyHelpMessages],  OfflineFloppyMsgImplDove,  OnlineDiagnostics    USING [DisplayFieldsProc, DisplayNumberedTableProc,                              DisplayTableProc, FloppyCleanReadWriteHeads,			      FloppyDisplayErrorLog, FloppyExerciser, FloppyMessage,			      FloppyFormatDiskette, FloppyReturn, FloppyStandardTest,			      GetConfirmationProc, GetFloppyChoiceProc, GetYesOrNoProc,			      PutMessageProc],  OnlineDiagnosticsExtra,  Runtime	       USING [ StartFault];  OFLFloppyDiagsDoveImpl: PROGRAM	 IMPORTS Runtime, OnlineDiagnostics, OnlineDiagnosticsExtra,  	 	 OfflineDiagInterface,		 OfflineFloppyMsgFaceDove,		 DiagDiskTime, DiagDiskMkTime, 		 MessageKeyFile: OfflineFloppyMsgImplDove	 		 	 	 EXPORTS OfflineDiagInterface =BEGIN OPEN Odi: OfflineDiagInterface;	     --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- First declare various structures and constants that will be used.--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   testLevelMenuNode: LONG POINTER TO Odi.AMenuOfSelections;    testLevelMenuSelections: LONG POINTER TO Odi.TestItemsForThisNode;     format: CARDINAL = 0;   clean: CARDINAL = 1;  standard: CARDINAL = 2;   exerciser: CARDINAL = 3;  continuousExerciser: CARDINAL = 4;  write: CARDINAL = 5;  read: CARDINAL = 6;  display: CARDINAL = 7;  ffTestItem: LONG POINTER TO Odi.TestItem;  fsTestItem: LONG POINTER TO Odi.TestItem;  fcTestItem: LONG POINTER TO Odi.TestItem;  feTestItem: LONG POINTER TO Odi.TestItem;  fdTestItem: LONG POINTER TO Odi.TestItem;  frTestItem: LONG POINTER TO Odi.TestItem;  fwTestItem: LONG POINTER TO Odi.TestItem;  ftTestItem: LONG POINTER TO Odi.TestItem;      destrUserSelections, nonDestrUserSelections: LONG POINTER TO Odi.Selections;  priveledgeUserSelections: LONG POINTER TO Odi.Selections;  techSupportUserSelections: LONG POINTER TO Odi.Selections;    testScreenRec: LONG POINTER TO Odi.FixedPositionDisplayRecord;    floppyHelp: LONG POINTER TO Odi.HelpText;  flpReturn: OnlineDiagnostics.FloppyReturn;    fdMsg: LONG POINTER TO ARRAY OnlineDiagnostics.FloppyMessage  	 		 OF LONG STRING;  fhMsg: LONG POINTER TO ARRAY OfflineFloppyMsgFaceDove.FloppyHelpMessages  	 		 OF LONG STRING;			   --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- Common support procedures  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~lookForAbort:OnlineDiagnosticsExtra.lookForAbortProc = {  ENABLE OfflineDiagInterface.AbortCurrentTest =>              SIGNAL OnlineDiagnosticsExtra.abortCurrentTest;	        Odi.LookForAbort[];      };  displayTable: OnlineDiagnostics.DisplayTableProc = {        numCols, r: CARDINAL;    numRows, c: CARDINAL;    tmp: CARDINAL ¬ 0;        tmpString: LONG STRING ¬ NIL;          numCols ¬ LENGTH[headers];    numRows ¬ LENGTH[rowNames];        Odi.PutData[clearHeadingAndData: TRUE];    Odi.PutData[dataAreaHeading: fdMsg[tSummErrLog]];    tmpString ¬ fdMsg[headers[0]];    Odi.PutData[data: tmpString, xPosition: 22, pauseAtBottomOfDataArea: TRUE];        FOR c IN [1..numCols) DO {      tmpString ¬ fdMsg[headers[c]];      Odi.PutData[data: tmpString, xPosition: c*12+24, pauseAtBottomOfDataArea: TRUE]; };    ENDLOOP;        FOR r IN [0..numRows) DO {      tmpString ¬ fdMsg[rowNames[r]];      Odi.PutData[data: tmpString, startWithNewLine: TRUE, xPosition:2, pauseAtBottomOfDataArea: TRUE];      FOR c IN [0..numCols) DO {          tmp ¬ values[c][r];	  Odi.PutData[numberAfterData: tmp, xPosition: c*12+26, pauseAtBottomOfDataArea: TRUE]; };      ENDLOOP;  };    ENDLOOP;        Odi.HitAnyKeyToContinue[];    Odi.PutData[clearHeadingAndData: TRUE];           };  getConfirmation:OnlineDiagnostics.GetConfirmationProc = {  Odi.PutMessage[fdMsg[msg]];  Odi.HitAnyKeyToContinue[beep: FALSE];    };  getYesOrNo: OnlineDiagnostics.GetYesOrNoProc = {	            IF Odi.GetYesNo[fdMsg[msg]] THEN RETURN[yes]                           ELSE RETURN[no];			     };  putMessage: OnlineDiagnostics.PutMessageProc = {	            Odi.PutMessage[fdMsg[msg]];			     };  displayFields:OnlineDiagnostics.DisplayFieldsProc = {      };  displayNumberedTable: OnlineDiagnostics.DisplayNumberedTableProc = {	            			     };  getFloppyChoice: OnlineDiagnostics.GetFloppyChoiceProc = {      RETURN[exit];	        };      --******************************************************************************-- Build up all the data structures for this package--******************************************************************************InitializePackage: PROCEDURE = BEGIN--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- Top level menu stuffs--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  testLevelMenuNode ¬ Odi.GetAMenuOfSelections [];  testLevelMenuSelections ¬ Odi.GetATestItemsForThisNode [8];   -- create the Floppy Format test item  ffTestItem ¬  Odi.GetATestItem [];   ffTestItem.itemName ¬ fhMsg[ufFormatItem];  ffTestItem.test ¬ runFormat; -- The actual procedure  ffTestItem.itemExplanation ¬ fhMsg[ufFormatExpl]; -- Online help.  testLevelMenuSelections.nodeItems [0] ¬ ffTestItem; -- Store TestItem pointer.    -- create the Floppy CleanHeads test item  fcTestItem ¬  Odi.GetATestItem [];   fcTestItem.itemName ¬ fhMsg[ufClnHdItem];  fcTestItem.test ¬ runCleanHeads; -- The actual procedure  fcTestItem.itemExplanation ¬ fhMsg[ufClnHdExpl]; -- Online help.  testLevelMenuSelections.nodeItems [1] ¬ fcTestItem; -- Store TestItem pointer.    -- create the Floppy StandardTest test item  fsTestItem ¬  Odi.GetATestItem [];   fsTestItem.itemName ¬ fhMsg[ufStdTestItem];  fsTestItem.test ¬ runStdTest; -- The actual procedure  fsTestItem.itemExplanation ¬ fhMsg[ufStdTestExpl]; -- Online help.  testLevelMenuSelections.nodeItems [2] ¬ fsTestItem; -- Store TestItem pointer.    -- create the Floppy Exerciser test item  feTestItem ¬  Odi.GetATestItem [];   feTestItem.itemName ¬ fhMsg[ufExItem];  feTestItem.test ¬ runExerciser; -- The actual procedure  feTestItem.itemExplanation ¬ fhMsg[ufExExpl]; -- Online help.  testLevelMenuSelections.nodeItems [3] ¬ feTestItem; -- Store TestItem pointer.     -- create the Continuous Exerciser test item  ftTestItem ¬  Odi.GetATestItem [];   ftTestItem.itemName ¬ fhMsg[ufContExItem];  ftTestItem.test ¬ runContExerciser; -- The actual procedure  ftTestItem.itemExplanation ¬ fhMsg[ufContExExpl]; -- Online help.  testLevelMenuSelections.nodeItems [4] ¬ ftTestItem; -- Store TestItem pointer.    -- create the Write Diag Data test item  fwTestItem ¬  Odi.GetATestItem [];   fwTestItem.itemName ¬ fhMsg[ufWriteItem];  fwTestItem.test ¬ runWrite; -- The actual procedure  fwTestItem.itemExplanation ¬ fhMsg[ufWriteExpl]; -- Online help.  testLevelMenuSelections.nodeItems [5] ¬ fwTestItem; -- Store TestItem pointer.    -- create the Read Diag Data test item  frTestItem ¬  Odi.GetATestItem [];   frTestItem.itemName ¬ fhMsg[ufReadItem];  frTestItem.test ¬ runRead; -- The actual procedure  frTestItem.itemExplanation ¬ fhMsg[ufReadExpl]; -- Online help.  testLevelMenuSelections.nodeItems [6] ¬ frTestItem; -- Store TestItem pointer.    -- create the Floppy DisplayLog test item  fdTestItem ¬  Odi.GetATestItem [];   fdTestItem.itemName ¬ fhMsg[ufDisplItem];  fdTestItem.test ¬ runDisplayLog; -- The actual procedure  fdTestItem.itemExplanation ¬ fhMsg[ufDisplExpl]; -- Online help.  testLevelMenuSelections.nodeItems [7] ¬ fdTestItem; -- Store TestItem pointer.    -- Prepare help texts     floppyHelp ¬ Odi.GetAHelpText [8];   floppyHelp.helpTitle ¬ fhMsg[ufMenuHelpTitle];  floppyHelp.textBody[0] ¬ fhMsg[ufMenuHelpFmt];  floppyHelp.textBody[1] ¬ fhMsg[ufMenuHelpClH];  floppyHelp.textBody[2] ¬ fhMsg[ufMenuHelpStd];  floppyHelp.textBody[3] ¬ fhMsg[ufMenuHelpEx];  floppyHelp.textBody[4] ¬ fhMsg[ufMenuHelpContEx];  floppyHelp.textBody[5] ¬ fhMsg[ufMenuHelpWrite];  floppyHelp.textBody[6] ¬ fhMsg[ufMenuHelpRead];  floppyHelp.textBody[7] ¬ fhMsg[ufMenuHelpDispl];-- Classes of users selection lists  destrUserSelections ¬ Odi.GetASelectionArray [6];    destrUserSelections.selections[0] ¬ format;    destrUserSelections.selections[1] ¬ clean;    destrUserSelections.selections[2] ¬ standard;    destrUserSelections.selections[3] ¬ exerciser;  destrUserSelections.selections[4] ¬ read;    destrUserSelections.selections[5] ¬ display;      nonDestrUserSelections ¬ Odi.GetASelectionArray [3];    nonDestrUserSelections.selections[0] ¬ clean;    nonDestrUserSelections.selections[1] ¬ standard;  nonDestrUserSelections.selections[2] ¬ display;    techSupportUserSelections ¬ Odi.GetASelectionArray [5];  techSupportUserSelections.selections[0] ¬ format;  techSupportUserSelections.selections[1] ¬ clean;  techSupportUserSelections.selections[2] ¬ standard;  techSupportUserSelections.selections[3] ¬ exerciser;  techSupportUserSelections.selections[4] ¬ display;     priveledgeUserSelections ¬ Odi.GetASelectionArray [8];    priveledgeUserSelections.selections[0] ¬ format;    priveledgeUserSelections.selections[1] ¬ clean;    priveledgeUserSelections.selections[2] ¬ standard;    priveledgeUserSelections.selections[3] ¬ exerciser;  priveledgeUserSelections.selections[4] ¬ continuousExerciser;    priveledgeUserSelections.selections[5] ¬ write;  priveledgeUserSelections.selections[6] ¬ read;    priveledgeUserSelections.selections[7] ¬ display;   testLevelMenuNode.menuTitle ¬ fhMsg[ufMenuTitle];   testLevelMenuNode.menuHelp ¬ floppyHelp;    testLevelMenuNode.userSelections ¬ nonDestrUserSelections;  testLevelMenuNode.adminSelections ¬ techSupportUserSelections;  testLevelMenuNode.seSelections ¬ techSupportUserSelections;  testLevelMenuNode.manufacturingSelections ¬ destrUserSelections;  testLevelMenuNode.programmerSelections ¬ priveledgeUserSelections;    testLevelMenuNode.testItemsForThisNode ¬ testLevelMenuSelections;    testScreenRec ¬ Odi.GetAFixedPositionDisplayRecord[1];  testScreenRec.rows[0] ¬ Odi.GetARow[1];    testScreenRec.rows[0].rowItems[0].namePosition ¬ 1;  testScreenRec.rows[0].rowItems[0].valuePosition ¬ 0;  testScreenRec.rows[0].rowItems[0].name ¬ NIL;  testScreenRec.rows[0].rowItems[0].stringValue ¬ NIL;  testScreenRec.rows[0].rowItems[0].value ¬ 0;      END;  -- InitialaizePackage.  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- diagnostic procs selected from menu--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~runFormat: Odi.OfflineDiagnosticProc = {   BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufFormatBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];    Odi.PutMessage[message:fhMsg[ufFormatBold], beep:FALSE,clearMessageAreaFirst:TRUE];    OnlineDiagnostics.FloppyFormatDiskette[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];    Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];           EXITS      UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE];  };         END;       }; runCleanHeads: Odi.OfflineDiagnosticProc = {  BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufCleanBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];    Odi.PutMessage[message:fhMsg[ufCleanBold], beep:FALSE,clearMessageAreaFirst:TRUE];    flpReturn ¬ OnlineDiagnostics.FloppyCleanReadWriteHeads[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];           SELECT flpReturn FROM          deviceNotReady => {Odi.PutMessage[fdMsg[cNBNotReady]]};	 notDiagDiskette => {Odi.PutMessage[fdMsg[cFirst]]};	 floppyFailure => {Odi.PutMessage[fdMsg[iErrDet]]};	          ENDCASE => {Odi.PutMessage[fhMsg[ufDone]]};	      Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];           EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };       END ;   };   runStdTest: Odi.OfflineDiagnosticProc = {      BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufStdBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];    Odi.PutMessage[message:fhMsg[ufStdBold], beep:FALSE,clearMessageAreaFirst:TRUE];    flpReturn ¬ OnlineDiagnostics.FloppyStandardTest[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];           SELECT flpReturn FROM          deviceNotReady => {Odi.PutMessage[fdMsg[cNBNotReady]]};	 notDiagDiskette => {Odi.PutMessage[fdMsg[cFirst]]};	 floppyFailure => {Odi.PutMessage[fdMsg[iErrDet]]};	          ENDCASE => {Odi.PutMessage[fhMsg[ufDone]]};	     Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];	         EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };         END ;   }; runExerciser: Odi.OfflineDiagnosticProc = {    BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufExBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];            Odi.PutMessage[message:fhMsg[ufExBold], beep:FALSE,clearMessageAreaFirst:TRUE];    OnlineDiagnostics.FloppyExerciser[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];    Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];       EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };     END ;   };   runContExerciser: Odi.OfflineDiagnosticProc = {    BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufContExBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];                Odi.PutMessage[message:fhMsg[ufContExBold], beep:FALSE,clearMessageAreaFirst:TRUE];    OnlineDiagnosticsExtra.ContinuousExerciser[       lookForAbort, displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];    Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];       EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };     END ;   };   runWrite: Odi.OfflineDiagnosticProc = {    BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufWrBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];            Odi.PutMessage[message:fhMsg[ufWrBold], beep:FALSE,clearMessageAreaFirst:TRUE];    OnlineDiagnosticsExtra.WriteDiagData[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];    Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];       EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };     END ;   };   runRead: Odi.OfflineDiagnosticProc = {    BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufRdBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];            Odi.PutMessage[message:fhMsg[ufRdBold], beep:FALSE,clearMessageAreaFirst:TRUE];    OnlineDiagnosticsExtra.ReadDiagData[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];    Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];       EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };     END ;   }; runDisplayLog: Odi.OfflineDiagnosticProc = {    BEGIN    ENABLE Odi.AbortCurrentTest => GOTO UserAbrt ;        testScreenRec.displayTitle ¬ fhMsg[ufDsplBold];    Odi.PutTestParameters[parameters: testScreenRec, upDateOnly: FALSE];          Odi.PutMessage[message:fhMsg[ufDsplBold], beep:FALSE,clearMessageAreaFirst:TRUE];        OnlineDiagnostics.FloppyDisplayErrorLog[       displayFields, displayTable, displayNumberedTable,       putMessage, getConfirmation, getYesOrNo, getFloppyChoice];           Odi.PutMessage[fhMsg[ufDone]];        Odi.HitAnyKeyToContinue[prompt: fhMsg[ufReturnToMenu], beep: FALSE];        EXITS        UserAbrt => {Odi.PutMessage[message:fhMsg[ufBlankers], clearMessageAreaFirst:TRUE]; };	    END ;   };--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- PUBLIC PROCEDURE exported to the Control Module.--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~RunFloppyDiscTests: PUBLIC Odi.ClientPackage =  BEGIN      --~~~~~~~~~~~~~~~~~    -- Main line code.    --~~~~~~~~~~~~~~~~~        START MessageKeyFile [! Runtime.StartFault => CONTINUE];      fdMsg ¬ OfflineFloppyMsgFaceDove.fdMsgPointer;     fhMsg ¬ OfflineFloppyMsgFaceDove.fhMsgPointer;    InitializePackage [];          START DiagDiskMkTime.DiagDiskMkTimeImpl [! Runtime.StartFault => CONTINUE];    DiagDiskTime.SetRealTimeClock [displayMsg: TRUE        ! DiagDiskTime.RealTimeClockFailure => {	     Odi.PutData[data: DiagDiskMkTime.mkTime[rTCFailure],	                 clearHeadingAndData: TRUE] }];        RETURN [testLevelMenuNode];      END;  -- Main line code  END...  OFLFloppyDiagsDoveImpl.mesa  LOGCreated on 8-Jan-86 by SPLAdded capability for OnlineDiagnosticsExtra stuff  3-Mar-86 16:04:52 SPLremove  ReadDiagnosticData from the user and se menus  9-May-86  8:54:13 SPLremove  ReadDiagnosticData from the administrator  1-Oct-87 10:20:31 STC