-- File SysConfigVersionNumbersImpl.mesa-- Last edited:	29-Jan-87 10:40:12	RDM Add badMemConfig message.-- 	 1-Oct-85 15:00:18	by: AMR-- Edited:	20-Aug-85 15:49:17	by: AMR-- Created	20-Aug-85 15:49:17	by: AMR<<	Copyright (C) 1985 by Xerox Corporation. All rights reserved.		The following program was created in 1985 but has not been published within the meaning of the	copyright law, is furnished under license, and may not be used, copied and/or disclosed except	in accordance with the terms of said license.	>>DIRECTORY  EEpromDefs	        USING [ EEpromConfig ],  Inline	        USING [ LowHalf,LowByte ],  OfflineDiagInterface  USING [ OfflineDiagnosticProc,			        AbortCurrentTest,				OptionsRecord, AnOptionLine, GetAnOptionsRecord,				GetAnOptionLine, GetAnOption,				GetAFixedPositionDisplayRecord, GetARow,			        FixedPositionDisplayRecord, ARow, 				DisplayFixedPositionData,			        GetANumber, GetYesNo, PutMessage],  SysConfigSubDefs,  SysConfigControlDefs  USING [ msgKey, msgKey1, statusPtr],  SysConfigChannelDefs  USING [ eePromImage];    SysConfigVersionNumbersImpl: PROGRAM	IMPORTS Inline, OfflineDiagInterface, SysConfigControlDefs, SysConfigChannelDefs			EXPORTS SysConfigSubDefs =	BEGIN OPEN Odi: OfflineDiagInterface, SysConfigControlDefs, SysConfigChannelDefs;  -- ODI stands for OfflineDiagInterface.--******************************************************************************-- ConfigureVersionNumbers:--******************************************************************************ConfigureEEPromVersions: PUBLIC Odi.OfflineDiagnosticProc =  BEGIN    hardware: TYPE = {B0B1, B2, newHardware};    numberOfHardwareTypes: CARDINAL = ORD[LAST[hardware]] + 1;    optionTable: LONG POINTER TO Odi.OptionsRecord _      Odi.GetAnOptionsRecord [1];  -- Just one row of option here  optionRow0: LONG POINTER TO Odi.AnOptionLine _      Odi.GetAnOptionLine [numberOfHardwareTypes+1]; --      leftEdge: CARDINAL = 3;   -- For formatting display.  maxNumberWidth: CARDINAL = 5;  -- Biggest number is 10 digits wide.   noNumericData: CARDINAL = 0;  aSpace: CARDINAL = 1;  xPosition: CARDINAL;  -- Number for tracking position on current line  selected: CARDINAL;  -- The option selected by the user  intialEntry: BOOLEAN _ TRUE;    information: LONG POINTER TO Odi.FixedPositionDisplayRecord _      Odi.GetAFixedPositionDisplayRecord [2];  -- 3 single-itemed rows of data    infoRow0: LONG POINTER TO Odi.ARow _ Odi.GetARow [1];  -- 1 item on row  infoRow1: LONG POINTER TO Odi.ARow _ Odi.GetARow [1];      --  optionTable.linesOfOptions[0] _ optionRow0; -- Save pointer to row  optionTable.optionMenuTiTle _ msgKey[configEEPromVersion];      optionRow0.optionsOnALine[0].position _ leftEdge;  optionRow0.optionsOnALine[0].selectionNumberForThisItem _ 1;  optionRow0.optionsOnALine[0].option _ msgKey[b0b1];  -- %Change    xPosition _ leftEdge + msgKey[b0b1].length + 8;  optionRow0.optionsOnALine[1].position _ xPosition;  optionRow0.optionsOnALine[1].selectionNumberForThisItem _ 2;  optionRow0.optionsOnALine[1].option _ msgKey[b2];  -- %Change    xPosition _ xPosition + msgKey[b2].length + 8;  optionRow0.optionsOnALine[2].position _ xPosition;  optionRow0.optionsOnALine[2].selectionNumberForThisItem _ 3;  optionRow0.optionsOnALine[2].option _ msgKey[newHardware];  -- %Change    xPosition _ xPosition + msgKey[newHardware].length + 8;  -- %Change  optionRow0.optionsOnALine[3].position _ xPosition;  optionRow0.optionsOnALine[3].selectionNumberForThisItem _ 4;  optionRow0.optionsOnALine[3].option _ msgKey[returnToTopLevel];    -- Now fill in the static fields of the ai record  information.displayTitle _ msgKey[versionHeader];  information.rows[0] _ infoRow0;  -- First row  information.rows[1] _ infoRow1;  -- First row    -- Fill in first row static data  infoRow0.rowItems[0].namePosition _ leftEdge;  -- Name position  infoRow0.rowItems[0].name _ msgKey[hardwareVersion];  infoRow0.rowItems[0].valuePosition _ noNumericData;     infoRow1.rowItems[0].namePosition _ leftEdge;  -- Name position  infoRow1.rowItems[0].name _ msgKey[newHardwareVersionNumber];  infoRow1.rowItems[0].stringValue _ NIL;  -- No string value  infoRow1.rowItems[0].valuePosition _ noNumericData;   IF SysConfigControlDefs.statusPtr­ # success THEN {    continue: BOOLEAN _ TRUE;    SELECT SysConfigControlDefs.statusPtr­ FROM      eePromError => Odi.PutMessage [msgKey1[eePromReadFailed], TRUE, TRUE];      badCommand => Odi.PutMessage [msgKey1[eePromBadCommand], TRUE, TRUE];      checkSumError => Odi.PutMessage [msgKey1[eePromCheckSumError], TRUE, TRUE];      badMemConfig => Odi.PutMessage [msgKey1[eePromMemConfigError], TRUE, TRUE];      ENDCASE => Odi.PutMessage [msgKey1[eePromUnknownError], TRUE, TRUE];    continue _ Odi.GetYesNo [prompt: msgKey1[doYouWishToContinue]];    IF ~continue THEN SIGNAL Odi.AbortCurrentTest};  DO  -- Loop until exit is requested      infoRow0.rowItems[0].stringValue _ SELECT eePromImage.HardwareVersion FROM    				       none => msgKey[none],				       B0B1 => msgKey[b0b1],				       B2 => msgKey[b2],				       ENDCASE => NIL;    IF infoRow0.rowItems[0].stringValue = NIL     	   THEN {	   	infoRow0.rowItems[0].name _ msgKey[newHardware];	   	infoRow1.rowItems[0].value _ LONG[LOOPHOLE[eePromImage.HardwareVersion]];	        infoRow1.rowItems[0].name _ msgKey[newHardwareVersionNumber];    		infoRow1.rowItems[0].valuePosition _   		leftEdge + msgKey[newHardwareVersionNumber].length + aSpace; } 	   ELSE  {	       	infoRow1.rowItems[0].valuePosition _ noNumericData;		infoRow1.rowItems[0].name _ NIL;}; 		    IF intialEntry THEN     	[] _ Odi.GetAnOption [  -- Always returns a valid option      		optionTable: optionTable,      		optionPrompt: msgKey[blanks], 		justDisplayTable:TRUE]; -- Change screen or Exit				    Odi.DisplayFixedPositionData [  -- Display the drive information	       displayData: information, upDateOnly: FALSE];		  		    selected _ Odi.GetAnOption [  -- Always returns a valid option      	optionTable: NIL,      	optionPrompt: msgKey[getHardware], 	defaultOption: 0]; -- Change screen or Exit           IF selected = 4 THEN SIGNAL Odi.AbortCurrentTest;  -- Exit requested    IF selected < 4 THEN      	{ SELECT selected FROM	  1 => eePromImage.HardwareVersion _ B0B1;	        	  2 => eePromImage.HardwareVersion _ B2;	  3 => {infoRow1.rowItems[0].value _ Odi.GetANumber [		prompt: msgKey[newHardware],		lowLimit: 0,		upperLimit: 0FFH,		numberIsLong: TRUE,		defaultNumber: infoRow1.rowItems[0].value].longNumber;		eePromImage.HardwareVersion _ Inline.LowByte[Inline.LowHalf[infoRow1.rowItems[0].value]];};    	   ENDCASE;  };		intialEntry _ FALSE;       ENDLOOP; -- Outer loop    END;  --END.logcreated on 20-Aug-85 16:30:12 by AMR