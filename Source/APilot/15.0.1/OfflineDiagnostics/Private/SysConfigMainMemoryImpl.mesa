-- File SysConfigMainMemoryImpl.mesa	-Last edited:-- TXM	 7-Oct-89 12:02:34	Add separate 2MB and 4MB menu.-- STC	 2-Oct-88 22:47:47	Labelless.-- RDM	 6-Feb-87 12:12:09	Fix daisy 4meg memory configuration.-- RDM	 3-Feb-87 11:56:13	Add daisy mem expansion.-- RDM	 2-Feb-87 13:06:03	Change VERSION to Version in ProcessorFaceExtras.-- RDM	29-Jan-87 16:21:19	Add badMemConfig message.-- RDM	27-Jan-87 17:46:40	Check for machineType=daisy, and configure memory accordingly.-- RDM  9-Dec-86  9:46:18	Add EEprom error messages.-- 11-Oct-85 11:12:01	by: AMR-- Created	18-Jun-85 14:51:56	by: AMR<<	Copyright (C) 1985, 1986, 1987, 1988, 1989 by Xerox Corporation. All rights reserved.		The following program was created in 1985 but has not been published within the meaning of the	copyright law, is furnished under license, and may not be used, copied and/or disclosed except	in accordance with the terms of said license.	>>DIRECTORY  EEpromDefs	        USING [ EEpromConfig ],  Inline	        USING [ LowByte ],  OfflineDiagInterface  USING [ OfflineDiagnosticProc,			        AbortCurrentTest,				OptionsRecord, AnOptionLine, GetAnOptionsRecord,				GetAnOptionLine, GetAnOption, GetYesNo,				GetAFixedPositionDisplayRecord, GetARow,			        FixedPositionDisplayRecord, ARow, 				DisplayFixedPositionData, PutMessage],--  ProcessorFaceExtras	USING [Version, VersionResult],  ProcessorFaceExtras2	USING [DoveMachineType, DoveMachineTypeInfo],  SysConfigSubDefs,  SysConfigControlDefs  USING [ msgKey, msgKey1, msgKey2, statusPtr],  SysConfigChannelDefs  USING [ eePromImage];    SysConfigMainMemoryImpl: PROGRAM	IMPORTS Inline, OfflineDiagInterface, --	ProcessorFaceExtras, 	ProcessorFaceExtras2, 	SysConfigControlDefs, SysConfigChannelDefs			EXPORTS SysConfigSubDefs =	BEGIN OPEN Odi: OfflineDiagInterface, SysConfigControlDefs, SysConfigChannelDefs;  -- ODI stands for OfflineDiagInterface.--******************************************************************************-- ConfigureMainMemory:--******************************************************************************ConfigureMainMemory: PUBLIC Odi.OfflineDiagnosticProc =  BEGIN  -- Main types supported. Whenever new types are encountered, simply add   MainTypes: TYPE = {defaults, meb1, meb2, meb3, meb4, meb5};  MainTypes2: TYPE = {meb6, meb7};    -- This option table presents the various main types to the user for selection.  --   numberOfMainTypes: CARDINAL = ORD[LAST[MainTypes]] + 1;  numberOfMainTypes2: CARDINAL = ORD[LAST[MainTypes2]] + 1;  mainOptionTable: LONG POINTER TO Odi.OptionsRecord _      Odi.GetAnOptionsRecord [3];  -- Just one row of option here  mainOptionTable2: LONG POINTER TO Odi.OptionsRecord _      Odi.GetAnOptionsRecord [2];  -- Just one row of option here  mainOptionRow0: LONG POINTER TO Odi.AnOptionLine _      Odi.GetAnOptionLine [2];   mainOptionRow1: LONG POINTER TO Odi.AnOptionLine _      Odi.GetAnOptionLine [3];        mainOptionRow2: LONG POINTER TO Odi.AnOptionLine _      Odi.GetAnOptionLine [numberOfMainTypes -5 + 1 ]; --  for EXIT  mainOptionRow3: LONG POINTER TO Odi.AnOptionLine _      Odi.GetAnOptionLine [numberOfMainTypes2 -2 + 1 ]; --  for EXIT  -- This option table presents the various main types to the user for selection.      memoryInformation: LONG POINTER TO Odi.FixedPositionDisplayRecord _      Odi.GetAFixedPositionDisplayRecord [1];  -- 6 single-itemed rows of data    memoryInfoRow0: LONG POINTER TO Odi.ARow _ Odi.GetARow [1];  -- 4 item on row      leftEdge: CARDINAL = 3;   -- For formatting display.  maxNumberWidth: CARDINAL = 12;  -- Biggest number is 10 digits wide.   noNumericData: CARDINAL = 0;  aSpace: CARDINAL = 1;  xPosition: CARDINAL;  -- Number for tracking position on current line  mainTypeSelected: CARDINAL;  -- The option selected by the user  initialEntry : BOOLEAN; --  version: ProcessorFaceExtras.VersionResult _ ProcessorFaceExtras.Version[];  machineType: ProcessorFaceExtras2.DoveMachineType _ ProcessorFaceExtras2.DoveMachineTypeInfo[];  -- Now construct the type option table  --  IF machineType = duke OR machineType = diana THEN {    mainOptionTable2.linesOfOptions[0] _ mainOptionRow0; -- Save pointer to row    mainOptionTable2.linesOfOptions[1] _ mainOptionRow3; -- Save pointer to row    mainOptionTable2.optionMenuTiTle _ msgKey[mainTypesSupported];    mainOptionRow0.optionsOnALine[0].position _ leftEdge;    mainOptionRow0.optionsOnALine[0].selectionNumberForThisItem _ 1;    mainOptionRow0.optionsOnALine[0].option _ msgKey2[memory7];    xPosition _ leftEdge + msgKey2[memory7].length + 8;    mainOptionRow0.optionsOnALine[1].position _ xPosition;    mainOptionRow0.optionsOnALine[1].selectionNumberForThisItem _ 2;    mainOptionRow0.optionsOnALine[1].option _ msgKey2[memory6];    mainOptionRow3.optionsOnALine[0].position _ leftEdge;    mainOptionRow3.optionsOnALine[0].selectionNumberForThisItem _ 3;    mainOptionRow3.optionsOnALine[0].option _ msgKey[exitSelection] }  ELSE {    mainOptionTable.linesOfOptions[0] _ mainOptionRow0; -- Save pointer to row    mainOptionTable.linesOfOptions[1] _ mainOptionRow1; -- Save pointer to row    mainOptionTable.linesOfOptions[2] _ mainOptionRow2; -- Save pointer to row    mainOptionTable.optionMenuTiTle _ msgKey[mainTypesSupported];    mainOptionRow0.optionsOnALine[0].position _ leftEdge;    mainOptionRow0.optionsOnALine[0].selectionNumberForThisItem _ 1;    mainOptionRow0.optionsOnALine[0].option _ msgKey[defaultMemory];  -- %Change    --mainOptionRow0.optionsOnALine[0].helpForThisOption _ msgKey[defaultMemoryExpl];    xPosition _ leftEdge + msgKey[defaultMemory].length + 21;    mainOptionRow0.optionsOnALine[1].position _ xPosition;    mainOptionRow0.optionsOnALine[1].selectionNumberForThisItem _ 2;    mainOptionRow0.optionsOnALine[1].option _ msgKey[memory1];  -- %Change    --mainOptionRow0.optionsOnALine[1].helpForThisOption _ msgKey[mpbChoiceExpl];    mainOptionRow1.optionsOnALine[0].position _ leftEdge;    mainOptionRow1.optionsOnALine[0].selectionNumberForThisItem _ 3;    mainOptionRow1.optionsOnALine[0].option _ msgKey[memory2];  -- %Change    --mainOptionRow1.optionsOnALine[0].helpForThisOption _ msgKey[mebChoiceExpl];    xPosition _ leftEdge + msgKey[memory2].length + 8;    mainOptionRow1.optionsOnALine[1].position _ xPosition;    mainOptionRow1.optionsOnALine[1].selectionNumberForThisItem _ 4;    mainOptionRow1.optionsOnALine[1].option _ msgKey[memory3];    xPosition _ xPosition + msgKey[memory3].length + 8;    mainOptionRow1.optionsOnALine[2].position _ xPosition;    mainOptionRow1.optionsOnALine[2].selectionNumberForThisItem _ 5;    mainOptionRow1.optionsOnALine[2].option _ msgKey[memory4];    mainOptionRow2.optionsOnALine[0].position _ leftEdge;    mainOptionRow2.optionsOnALine[0].selectionNumberForThisItem _ 6;    mainOptionRow2.optionsOnALine[0].option_ msgKey[memory5];  -- %Change    --mainOptionRow2.optionsOnALine[0].helpForThisOption _ msgKey[mebChoiceExpl];    xPosition _ leftEdge + msgKey[memory5].length + 8;    mainOptionRow2.optionsOnALine[1].position _ xPosition;    mainOptionRow2.optionsOnALine[1].selectionNumberForThisItem _ 7;    mainOptionRow2.optionsOnALine[1].option _ msgKey[exitSelection] };  memoryInformation.displayTitle _ msgKey[blanks];  memoryInformation.rows[0] _ memoryInfoRow0;  -- First row  memoryInfoRow0.rowItems[0].namePosition _ leftEdge;  -- Name position  memoryInfoRow0.rowItems[0].name _ msgKey[lowMemoryMPB];  memoryInfoRow0.rowItems[0].valuePosition _ noNumericData;  initialEntry _ TRUE;  IF SysConfigControlDefs.statusPtr­ # success THEN {    continue: BOOLEAN _ TRUE;    SELECT SysConfigControlDefs.statusPtr­ FROM      eePromError => Odi.PutMessage [msgKey1[eePromReadFailed], TRUE, TRUE];      badCommand => Odi.PutMessage [msgKey1[eePromBadCommand], TRUE, TRUE];      checkSumError => Odi.PutMessage [msgKey1[eePromCheckSumError], TRUE, TRUE];      badMemConfig => Odi.PutMessage [msgKey1[eePromMemConfigError], TRUE, TRUE];      ENDCASE => Odi.PutMessage [msgKey1[eePromUnknownError], TRUE, TRUE];    continue _ Odi.GetYesNo [prompt: msgKey1[doYouWishToContinue]];    IF ~continue THEN SIGNAL Odi.AbortCurrentTest};  IF machineType = duke OR machineType = diana THEN {    DO  -- Loop until exit is requested      mainTypeSelected _ Odi.GetAnOption [  -- Always returns a valid option	optionTable: IF initialEntry THEN mainOptionTable2 ELSE NIL,	optionPrompt: msgKey[respondToPrompt], defaultOption: 0]; -- Example default      IF mainTypeSelected = 3 THEN SIGNAL Odi.AbortCurrentTest;  -- Exit requested      eePromImage.MainMemoryExpansion _ Inline.LowByte[2];      eePromImage.MainMemory0 _ present;      eePromImage.MainMemory1 _ present;      eePromImage.MainMemory2 _ present;      eePromImage.MainMemory3 _ present;      eePromImage.MainMemory4 _ present;      eePromImage.MainMemory5 _ present;      eePromImage.MainMemory6 _ present;      eePromImage.MainMemory7 _ present;      eePromImage.MainMemory8 _ present;      eePromImage.MainMemory9 _ present;      eePromImage.MainMemory10 _ present;      eePromImage.MainMemory11 _ present;      eePromImage.MainMemory12 _ present;      eePromImage.MainMemory13 _ present;      eePromImage.MainMemory14 _ present;      eePromImage.MainMemory15 _ present;      SELECT mainTypeSelected FROM	 1 => eePromImage.MainMemoryExpansion _ mega1;	 2 => eePromImage.MainMemoryExpansion _ mega3;	 ENDCASE;      memoryInfoRow0.rowItems[0].stringValue _	SELECT eePromImage.MainMemoryExpansion FROM	      mega1 => msgKey2[mem7],	      mega3 => msgKey2[mem6],	      ENDCASE  => msgKey[unknown];      Odi.DisplayFixedPositionData[  -- Display the memory information			  displayData: memoryInformation,			  upDateOnly: FALSE];      initialEntry _ FALSE;    ENDLOOP }  ELSE {    DO  -- Loop until exit is requested      mainTypeSelected _ Odi.GetAnOption [  -- Always returns a valid option	optionTable: IF initialEntry THEN mainOptionTable ELSE NIL,	optionPrompt: msgKey[respondToPrompt], defaultOption: 0]; -- Example default      IF mainTypeSelected = 7 THEN SIGNAL Odi.AbortCurrentTest;  -- Exit requested      eePromImage.MainMemoryExpansion _ Inline.LowByte[2];      IF machineType = daisy THEN {	meg4: BOOLEAN _ FALSE;	eePromImage.MainMemory0 _ present;	eePromImage.MainMemory1 _ present;	eePromImage.MainMemory2 _ present;	eePromImage.MainMemory3 _ present;	eePromImage.MainMemory4 _ present;	eePromImage.MainMemory5 _ present;	eePromImage.MainMemory6 _ present;	eePromImage.MainMemory7 _ present;	eePromImage.MainMemory8 _ notPresent;	eePromImage.MainMemory9 _ notPresent;	eePromImage.MainMemory10 _ notPresent;	eePromImage.MainMemory11 _ notPresent;	eePromImage.MainMemory12 _ notPresent;	eePromImage.MainMemory13 _ notPresent;	eePromImage.MainMemory14 _ notPresent;	eePromImage.MainMemory15 _ notPresent;	SELECT mainTypeSelected FROM	   1 => eePromImage.MainMemoryExpansion _ mega1;	   2 => eePromImage.MainMemoryExpansion _ k1512;	   3 => eePromImage.MainMemoryExpansion _ mega2;	   4 => eePromImage.MainMemoryExpansion _ k2512;	   5 => eePromImage.MainMemoryExpansion _ mega3;	   6 => {	      meg4 _ TRUE;	      eePromImage.MainMemoryExpansion _ mega3;	      eePromImage.MainMemory8 _ present;	      eePromImage.MainMemory9 _ present;	      eePromImage.MainMemory10 _ present;	      eePromImage.MainMemory11 _ present;	      eePromImage.MainMemory12 _ present;	      eePromImage.MainMemory13 _ present;	      eePromImage.MainMemory14 _ present;	      eePromImage.MainMemory15 _ present};	   ENDCASE;	memoryInfoRow0.rowItems[0].stringValue _ SELECT eePromImage.MainMemoryExpansion FROM		k512 => msgKey1[defaultMem],		mega1 => msgKey1[mem1],		k1512 => msgKey1[mem2],		mega2 => msgKey1[mem3],		k2512 => msgKey1[mem4],		mega3 => IF meg4 THEN msgKey1[mem5] ELSE msgKey1[mem4],		ENDCASE  => msgKey[unknown]}      ELSE {	eePromImage.MainMemory0 _ present;	eePromImage.MainMemory1 _ present;	eePromImage.MainMemory2 _ notPresent;	eePromImage.MainMemory3 _ notPresent;	eePromImage.MainMemory4 _ notPresent;	eePromImage.MainMemory5 _ notPresent;	eePromImage.MainMemory6 _ notPresent;	eePromImage.MainMemory7 _ notPresent;	eePromImage.MainMemory8 _ present;	eePromImage.MainMemory9 _ present;	eePromImage.MainMemory10 _ present;	eePromImage.MainMemory11 _ present;	eePromImage.MainMemory12 _ present;	eePromImage.MainMemory13 _ present;	eePromImage.MainMemory14 _ present;	eePromImage.MainMemory15 _ present;	SELECT mainTypeSelected FROM	   1 => eePromImage.MainMemoryExpansion _ k512;	   2 => eePromImage.MainMemoryExpansion _ mega1;	   3 => eePromImage.MainMemoryExpansion _ k1512;	   4 => eePromImage.MainMemoryExpansion _ mega2;	   5 => eePromImage.MainMemoryExpansion _ k2512;	   6 => eePromImage.MainMemoryExpansion _ mega3;	   ENDCASE;	memoryInfoRow0.rowItems[0].stringValue _ SELECT eePromImage.MainMemoryExpansion FROM		k512 => msgKey1[defaultMem],		mega1 => msgKey1[mem1],		k1512 => msgKey1[mem2],		mega2 => msgKey1[mem3],		k2512 => msgKey1[mem4],		mega3 => msgKey1[mem5],		ENDCASE  => msgKey[unknown]};      Odi.DisplayFixedPositionData[  -- Display the memory information			  displayData: memoryInformation,			  upDateOnly: FALSE];      initialEntry _ FALSE;    ENDLOOP }; -- Outer loop  END;  -- ConfigureMainMemoryEND.logcreated on 18-Jun-85 14:51:56 by Allen Roberts