-- Copyright (C) 1985, 1986, 1987, 1988 Xerox Corporation. All rights reserved.---- File: DiskUtilityMsgKeysImplDove.mesa	-Last edited:   -- STC, 12-Oct-88 13:45:42, convert to Labelless-- -- This file implements the English version of DiskUtilityMsgKeysDove. -- The messages are used by OfflineDiskUtilitiesDove.mesa.---- To implement non-English messages, perform the following:----    1) Replace "English" with <LanguageOfConcern>.--    2) Replace English messages with message in the language of concern.--DIRECTORY  DiskUtilityMsgKeysDove	USING	[DUMessages, EnglishMessages],  Heap			USING	[Create],  String		USING	[CopyToNewString];			 DiskUtilityMsgKeysImplDove: PROGRAM   IMPORTS Heap, String  EXPORTS DiskUtilityMsgKeysDove =  BEGIN  OPEN S: String;    duMessage: PUBLIC LONG DESCRIPTOR FOR 	      DiskUtilityMsgKeysDove.EnglishMessages;    z: UNCOUNTED ZONE;    InitializeDiskUtilMsgKeys: PUBLIC PROC = {        z ¬ Heap.Create[initial: 10];  duMessage ¬ DESCRIPTOR[z.NEW[DiskUtilityMsgKeysDove.EnglishMessages], 203];           -- Beginning of English messages used by the OfflineDiskUtilitiesDove.mesa:   duMessage[topLevelMenuTitle] ¬    S.CopyToNewString["Formatter, Scavenger, Bad Page Utilities"L, z];  duMessage[formatDisk] ¬    S.CopyToNewString["Format Rigid Disk"L, z];  duMessage[formatDiskExp] ¬    S.CopyToNewString["Formats rigid disk, creates physical volume RD0 and logs bad pages"L, z];      duMessage[fmtWarning] ¬    S.CopyToNewString["Formatting irrevocably destroys the disk data. Proceed? [Y/N]:"L, z];  duMessage[formatting] ¬    S.CopyToNewString["Formatting ..."L, z];  duMessage[badCylZero] ¬    S.CopyToNewString["Bad pages detected on Cylinder 0! Please contact Technical Support."L, z];  duMessage[pageInCylZero] ¬    S.CopyToNewString["Not added because page is in Cylinder 0"L, z];  duMessage[preFormatBPT] ¬    S.CopyToNewString["Preformat Bad Page Table:"L, z];  duMessage[formattingInfo] ¬    S.CopyToNewString["Formatting Information"L, z];  duMessage[savePlusCount] ¬    S.CopyToNewString["Saved, Count:"L, z];  duMessage[notSaved] ¬    S.CopyToNewString["Not saved"L, z];  duMessage[saved] ¬    S.CopyToNewString["Saved"L, z];  duMessage[isDiskFormatted] ¬    S.CopyToNewString["Is this disk formatted?"L, z];  duMessage[unformattedDisk] ¬    S.CopyToNewString["Unformatted Disk"L, z];  duMessage[neverFormatted] ¬    S.CopyToNewString["An unformatted disk is a brand new disk that has never been used"L, z];  duMessage[formatFirst] ¬    S.CopyToNewString["It must be formatted first, or other operations may hang"L, z];  duMessage[canNotOpOnVirginDisk] ¬    S.CopyToNewString["This operation can not be performed on an unformatted disk!"L, z];  duMessage[unableToAccessPDS] ¬    S.CopyToNewString["Unable to read Pilot data structures... Needs scavenging or reformatting"L, z];  duMessage[problemAccessingDrive] ¬    S.CopyToNewString["Unable to access drive... Please run diagnostics"L, z];  duMessage[createPV] ¬    S.CopyToNewString["Creating Pilot volume named ""RD0"" ..."L, z];    -- This is the name of the initial Physical Volume created by Format.  duMessage[RD0] ¬    S.CopyToNewString["RD0"L, z]; -- Can take on any name in any language  duMessage[combineBPTs] ¬    S.CopyToNewString["Should I get confirmation from you before adding a page?"L, z];  duMessage[markedBad] ¬    S.CopyToNewString["Marked bad"L, z];  duMessage[notMarkedBad] ¬    S.CopyToNewString["Not marked bad"L, z];  duMessage[needToScanDisk] ¬    S.CopyToNewString["RAM bad page table overflowed. Re-scan disk to catch remaining bad pages"L, z];  duMessage[overflowedPages] ¬    S.CopyToNewString["Overflowed pages not saved in RAM table:"L, z];  duMessage[remainPassCount] ¬    S.CopyToNewString["Remaining pass count:"L, z];  duMessage[stopKeyAckn] ¬    S.CopyToNewString["STOP acknowledged."L, z];  duMessage[knownStopKey] ¬    S.CopyToNewString["Yes, I already know you want to STOP!"L, z];  duMessage[checkDrive] ¬    S.CopyToNewString["Scan Disk For New Bad Pages"L, z];  duMessage[pattern] ¬    S.CopyToNewString["Pattern:"L, z];  duMessage[checkDriveExpl] ¬    S.CopyToNewString["Scans the entire disk surface for bad pages"L, z];  duMessage[intermittent] ¬    S.CopyToNewString["Intermittent"L, z];  duMessage[errorStatus] ¬    S.CopyToNewString["Error Status"L, z];  duMessage[addThisPage] ¬    S.CopyToNewString["Add this page?"L, z];  duMessage[bptEmpty] ¬    S.CopyToNewString["No bad pages found"L, z];  duMessage[badPagesFound] ¬    S.CopyToNewString["Bad pages found"L, z];  duMessage[endOfBPT] ¬    S.CopyToNewString["End of bad page table"L, z];  duMessage[normalRepair] ¬    S.CopyToNewString["Should I perform safe repair?"L, z];  duMessage[riskyRepair] ¬    S.CopyToNewString["Should I perform risky repair?"L, z];  duMessage[areYouSure] ¬    S.CopyToNewString["Are you sure?"L, z];  duMessage[areYouStillSure] ¬    S.CopyToNewString["Last warning... Are you still sure?"L, z];  duMessage[badPageDisposition] ¬    S.CopyToNewString["Bad Page Disposition"L, z];  duMessage[combineExp] ¬    S.CopyToNewString["Combine - Adds the preformat bad pages to the current bad page table"L, z];  duMessage[discardExp] ¬    S.CopyToNewString["Discard - Throws away the preformat bad pages"L, z];  duMessage[testExp] ¬    S.CopyToNewString["Test - Users can test, add, repair or discard each page individually"L, z];  duMessage[scavenging] ¬    S.CopyToNewString["Scavenging ..."L, z];  duMessage[completed] ¬    S.CopyToNewString["Completed"L, z];  duMessage[forceStop] ¬    S.CopyToNewString["*** Test was stopped by YOU! Format might not be done! *** "L, z];  duMessage[noProblemFound] ¬    S.CopyToNewString["No problem found"L, z];  duMessage[problemsFound] ¬    S.CopyToNewString["Damage detected ..."L, z];  duMessage[damageReport] ¬    S.CopyToNewString["Damage Report"L, z];  duMessage[internalStruct] ¬    S.CopyToNewString["Internal Structures:"L, z];  duMessage[doRiskyRepair] ¬    S.CopyToNewString["Contact support services to perform risky repair"L, z];  duMessage[hasBeenRepaired] ¬    S.CopyToNewString["Have been repaired"L, z];  duMessage[convertFormat] ¬    S.CopyToNewString["Volume and boot file formats are inconsistent. Shall I convert it? [Y/N]:"L, z];  duMessage[cannotScavenge] ¬    S.CopyToNewString["Volume cannot be scavenged"L, z];  duMessage[scanning] ¬    S.CopyToNewString["Scanning disk for new bad pages ..."L, z];  duMessage[numberOfScans] ¬    S.CopyToNewString["Please enter the number of times to scan the disk:"L, z];  duMessage[scanInfo] ¬    S.CopyToNewString["Scan Count Information"L, z];  duMessage[desiredScanCount] ¬    S.CopyToNewString["Desired Scan Count:"L, z];  duMessage[scansCompleted] ¬    S.CopyToNewString["Scans Completed:"L, z];   duMessage[newBadPageCount] ¬    S.CopyToNewString["New Bad Page Count:"L, z];    duMessage[overflowAbort] ¬    S.CopyToNewString["Scanning stopped because of RAM bad page table overflow"L, z];  duMessage[repeatOp] ¬    S.CopyToNewString["Would you like to repeat the operation?"L, z];  duMessage[overFlowRescan] ¬    S.CopyToNewString["Overflow encountered... Rescan disk to find remaining bad pages? [Y/N]"L, z];  duMessage[bptFull] ¬    S.CopyToNewString["Bad page table on disk is full. Operation aborted."L, z];  duMessage[pageToBeAdd] ¬    S.CopyToNewString["Bad page to be added:"L, z];  duMessage[pagesMarkedBad] ¬    S.CopyToNewString["Pages marked bad:"L, z];  duMessage[aborted] ¬    S.CopyToNewString["Aborted operation"L, z];  duMessage[addHelpTitle] ¬    S.CopyToNewString["Adding bad pages to the Bad Page Table"L, z];  duMessage[addHelp0] ¬    S.CopyToNewString["Once marked bad, the page is no longer useable by the system"L, z];  duMessage[addHelp1] ¬    S.CopyToNewString["To reclaim a page: Format the disk or reset the bad page table"L, z];  duMessage[addHelp2] ¬    S.CopyToNewString["No page on cylinder 0 can be marked bad"L, z];  duMessage[PVShelp] ¬    S.CopyToNewString["Physical Volume Scavenging"L, z];  duMessage[PVShelp0] ¬    S.CopyToNewString["Is responsible the integrity of the physical disk only"L, z];  duMessage[PVShelp1] ¬    S.CopyToNewString["Attempts to repair damaged physical volume data structures"L, z];  duMessage[badPageList] ¬    S.CopyToNewString["Bad page list:"L, z];  duMessage[bootFile] ¬    S.CopyToNewString["Boot file:"L, z];  duMessage[germ] ¬    S.CopyToNewString["Germ:"L, z];  duMessage[pilotMicrocode] ¬    S.CopyToNewString["Pilot microcode:"L, z];  duMessage[diagnosticMicrocode] ¬    S.CopyToNewString["Diagnostic microcode:"L, z];  duMessage[damaged] ¬    S.CopyToNewString["Damaged"L, z];  duMessage[lost] ¬    S.CopyToNewString["Lost"L, z];  duMessage[tooManyBadPages] ¬    S.CopyToNewString["RAM bad page table is full"L, z];  duMessage[noBPwritten] ¬    S.CopyToNewString["No bad pages written to disk"L, z];  duMessage[passCount] ¬    S.CopyToNewString["Number of passes: "L, z];  duMessage[retryCount] ¬    S.CopyToNewString["Number of retries per pass: "L, z];  duMessage[softErrors] ¬    S.CopyToNewString["Soft errors: "L, z];  duMessage[hardErrors] ¬    S.CopyToNewString["Hard errors: "L, z];  duMessage[retryHelpTitle] ¬    S.CopyToNewString["PASSES and RETRY COUNTS"L, z];  duMessage[retryHelp0] ¬    S.CopyToNewString["<PASSES> is the number of times to go over the disk for bad pages"L, z];  duMessage[retryHelp1] ¬    S.CopyToNewString["<RETRY COUNTS> is the number of times to verify a page before declaring it bad"L, z];  duMessage[runPVScavenger] ¬    S.CopyToNewString["Run Physical Volume Scavenger"L, z];  duMessage[PVScavengerExp] ¬    S.CopyToNewString["Checks the integrity of the physical volume. Returns the physical volume to a consistent state."L, z];  duMessage[badPageUtilities] ¬    S.CopyToNewString["Bad Page Utilities"L, z];  duMessage[badPageUtilitiesExp] ¬    S.CopyToNewString["Provides various utilities to handle bad pages"L, z];  duMessage[testAction] ¬    S.CopyToNewString["Please Select Option[ 1-Test,  2-Repair,  3-Mark Bad,  4-Next,  5-Exit ]:"L, z];  duMessage[trackOption] ¬    S.CopyToNewString["Please Select Option[ 1-Abort,  2-Review Track Status,  3-Continue ]:"L, z];  duMessage[badPageOptions] ¬    S.CopyToNewString["Bad Page Options[ 1-Redisplay,  2-Test,  3-Exit ]"L, z];  duMessage[insufficentPriv] ¬    S.CopyToNewString["Insufficient privilege to perform this operation"L, z];  duMessage[resetBadPageTable] ¬    S.CopyToNewString["Reset Bad Page Table"L, z];  duMessage[resetExpl] ¬    S.CopyToNewString["Destroys disk data and creates a new physical volume"L, z];  duMessage[destroyContents] ¬    S.CopyToNewString["Do you wish to destroy the contents of this disk?"L, z];  duMessage[displayBPT] ¬    S.CopyToNewString["Display Bad Page Table"L, z];  duMessage[displayBPTExp] ¬    S.CopyToNewString["Displays the contents of the existing Bad Page Table"L, z];  duMessage[manualBadPageEntry] ¬    S.CopyToNewString["Manual Entry Of Bad Pages"L, z];  duMessage[byPageNumberOrEM] ¬    S.CopyToNewString["Adds entries to the bad page table by page number or manufacturer's error map"L, z];  duMessage[enterBadPageIntoBPT] ¬    S.CopyToNewString["Enter By Page Number"L, z];  duMessage[enterBadPageIntoBPTExp] ¬    S.CopyToNewString["Adds a specified bad page to the BAD PAGE TABLE"L, z];  duMessage[enterManufacturerEM] ¬    S.CopyToNewString["Enter By Manufacturer's Error Map"L, z];  duMessage[enterManufacturerEMExp] ¬    S.CopyToNewString["Converts manufacturers' error map entries into page numbers and adds them to the BAD PAGE TABLE"L, z];  duMessage[rewriteBadPageHeader] ¬    S.CopyToNewString["Fix Bad Page Headers"L, z];  duMessage[rewriteBadPageExp] ¬    S.CopyToNewString["Saves the data on the track with the bad page header, reformats the track and restores the good pages"L, z];  duMessage[brokenPageInfo] ¬    S.CopyToNewString["Broken Page Information"L, z];  duMessage[savingData] ¬    S.CopyToNewString["Saving data on track ..."L, z];  duMessage[fmtTrack] ¬    S.CopyToNewString["Track will be formatted next... Do you wish to continue?"L, z];  duMessage[noBadPagesOnTrack] ¬    S.CopyToNewString["Formatting found NO bad pages on the track"L, z];  duMessage[restoringData] ¬    S.CopyToNewString["Restoring track data..."L, z];  duMessage[trackBPdisposition] ¬    S.CopyToNewString["Options for bad pages found on track[ 1-Mark bad,  2-Test ]"L, z];  duMessage[desiredAction] ¬    S.CopyToNewString["Preformat bad page table disposition[ 1-Combine,  2-Discard,  3-Test,  4-EXIT ]"L, z];  duMessage[pageScavenger] ¬    S.CopyToNewString["Page Scavenger"L, z];  duMessage[pageScavengerExp] ¬    S.CopyToNewString["Attempts to make an unreadable page readable"L, z];  duMessage[getPgToBeScavenged] ¬    S.CopyToNewString["Please enter page to be scavenged:"L, z];  duMessage[repairHelpTitle] ¬    S.CopyToNewString["Page Scavenging"L, z];  duMessage[repairHelp0] ¬    S.CopyToNewString["The page is presumed to have caused an unrecoverable disk error"L, z]; -- Can take on any name in any language  duMessage[repairHelp1] ¬    S.CopyToNewString["This attempts to make that page readable again by repairing data or label CRC errors"L, z];    -- PageScavenger.ErrorType messages  duMessage[driveNotAvailable] ¬    S.CopyToNewString["Drive not available"L, z];  duMessage[driveNotReady] ¬    S.CopyToNewString["Drive not ready"L, z];  duMessage[invalidPageNumber] ¬    S.CopyToNewString["Invalid page number"L, z];  duMessage[unknownDrive] ¬    S.CopyToNewString["Unknown drive"L, z];    -- PageScavenger.Action messages  duMessage[userAction] ¬    S.CopyToNewString["User action:"L, z];  duMessage[fixDataCRCError] ¬    S.CopyToNewString["Fix data CRC error"L, z];  duMessage[fixHardware] ¬    S.CopyToNewString["Fix page header, mark page bad or call Technical Support"L, z];  duMessage[boot] ¬    S.CopyToNewString["Reboot volume with the offending page"L, z];  duMessage[lvScavenge] ¬    S.CopyToNewString["Scavenge logical volume containing the specified page"L, z];  duMessage[pvScavenge] ¬    S.CopyToNewString["Scavenge physical volume. If no problem found, scavenge the logical volume containing the page"L, z];  duMessage[fixPVRootPageFirst] ¬    S.CopyToNewString["Fix the PV Root Page -- see implementor -- fooXXX"L, z];  duMessage[fixLabelCRCErrorFirst] ¬    S.CopyToNewString["Fix the Label CRC Error"L, z];  -- fooXXX  duMessage[forceFulRepair] ¬    S.CopyToNewString["Should I attempt a repair by formatting the track followed by a data restore? [Y/N]"L, z];        -- PageScavenger.DiskStatus messages  duMessage[diskStatus] ¬    S.CopyToNewString["Disk status:"L, z];  duMessage[goodCompletion] ¬    S.CopyToNewString["Good completion"L, z];  duMessage[noSuchPage] ¬    S.CopyToNewString["Page not found"L, z];  duMessage[labelDoesNotMatch] ¬    S.CopyToNewString["Label verify error"L, z];  duMessage[seekFailed] ¬    S.CopyToNewString["Seek failure"L, z];  duMessage[checkError] ¬    S.CopyToNewString["Unable to verify data"L, z];  duMessage[dataVerifyError] ¬    S.CopyToNewString["Data verify error"L, z];  duMessage[dataError] ¬    S.CopyToNewString["Data CRC error"L, z];  duMessage[hardwareError] ¬    S.CopyToNewString["Hardware error encountered"L, z];  duMessage[labelError] ¬    S.CopyToNewString["Label CRC error"L, z];  duMessage[headerCRCError] ¬    S.CopyToNewString["Header CRC error"L, z];  duMessage[headerNotFound] ¬    S.CopyToNewString["Header not found"L, z];  duMessage[unknown] ¬    S.CopyToNewString["Unknown error"L, z];  duMessage[repairStatus] ¬    S.CopyToNewString["Repair Status"L, z]; -- Heading  duMessage[pageContents] ¬    S.CopyToNewString["Page contents:"L, z];  duMessage[reliable] ¬    S.CopyToNewString["Reliable"L, z];  duMessage[unReliable] ¬    S.CopyToNewString["Unreliable"L, z];  duMessage[unKnown] ¬    S.CopyToNewString["Unknown"L, z];  duMessage[pageRepaired] ¬    S.CopyToNewString["Page repaired"L, z];  duMessage[pageNotRepaired] ¬    S.CopyToNewString["Page not repaired"L, z];  duMessage[overWritePage] ¬    S.CopyToNewString["Should I overwrite data if required?"L, z];  duMessage[diskErrorLogInfo] ¬    S.CopyToNewString["Disk Error Map Information"L, z];  duMessage[page] ¬    S.CopyToNewString["Page-Number:"L, z];  duMessage[cylinder] ¬    S.CopyToNewString["Cylinder"L, z];  duMessage[head] ¬    S.CopyToNewString["Head"L, z];  duMessage[sector] ¬    S.CopyToNewString["Sector"L, z];  duMessage[volume] ¬    S.CopyToNewString["Volume"L, z];  duMessage[saveStatus] ¬    S.CopyToNewString["Save-Status"L, z];   duMessage[restoreStatus] ¬    S.CopyToNewString["Restore-Status"L, z];    duMessage[byteFromIndex] ¬    S.CopyToNewString["Bytes From Index:"L, z];  duMessage[lengthInBits] ¬    S.CopyToNewString["Length Of Bad Spot In Bits:"L, z];  duMessage[lengthInBytes] ¬    S.CopyToNewString["Length Of Bad Spot In Bytes:"L, z];  duMessage[pilotBadPages] ¬    S.CopyToNewString["Resultant Bad Pages:"L, z];  duMessage[anyMore] ¬    S.CopyToNewString["More to go?"L, z];  duMessage[isLengthInBits] ¬    S.CopyToNewString["Is the bad spot length in bits?"L, z];  duMessage[bitsVersesBytes] ¬    S.CopyToNewString["Bad spot length can be given in two formats:"L, z];  duMessage[inBits] ¬    S.CopyToNewString["In bits - Bad spot length entered is in bits"L, z];  duMessage[inBytes] ¬    S.CopyToNewString["In bytes - Bad spot length entered is in bytes"L, z];  duMessage[enterData] ¬    S.CopyToNewString["Please enter the data from the manufacturer's error map as prompted"L, z];  duMessage[enterIntoBPT] ¬    S.CopyToNewString["Shall I mark the pages bad?"L, z];  duMessage[badSpotInGap] ¬    S.CopyToNewString["Bad spot falls in an unused gap. Ignore it"L, z];  duMessage[restored] ¬    S.CopyToNewString["Restored"L, z];  duMessage[notRestored] ¬    S.CopyToNewString["Not restored"L, z];  duMessage[enterAPageNumber] ¬    S.CopyToNewString["Please enter a page number:"L, z];  duMessage[yesNo] ¬    S.CopyToNewString["? [Y/N]:"L, z];  duMessage[data] ¬    S.CopyToNewString["Data:"L, z];  duMessage[header] ¬    S.CopyToNewString["Header:"L, z];  duMessage[originalBPSaved] ¬    S.CopyToNewString["Original bad page table saved"L, z];  duMessage[discardOldBPT] ¬    S.CopyToNewString["Should I discard the original bad page table?"L, z];  duMessage[testBadPages] ¬    S.CopyToNewString["Test Bad Pages"L, z];  duMessage[testBadPagesExp] ¬    S.CopyToNewString["Determines if a page has soft or hard errors"L, z];  duMessage[printBadPageTable] ¬    S.CopyToNewString["Print Bad Page Table"L, z];    --Messages for Head Retraction Utility   duMessage[headRetract] ¬    S.CopyToNewString["Head Retraction"L, z];  duMessage[headRetractExp] ¬    S.CopyToNewString["To be used before moving or shipping, this utility moves the rigid disk heads to a safe landing zone prior to powering off the 6085."L, z];  duMessage[chooseContinue] ¬    S.CopyToNewString["If you choose to continue, you must power off the machine when requested."L, z];  duMessage[wishContinue] ¬    S.CopyToNewString["Do you wish to continue?"L, z];  duMessage[powerOff] ¬    S.CopyToNewString["Heads retracted, please power off the 6085..."L, z];  duMessage[invalidEEProm] ¬    S.CopyToNewString["Invalid EEPROM values."L, z];  duMessage[notRetracted] ¬    S.CopyToNewString["Heads cannot be retracted.  Repair system and retry this utility before shipping or moving."L, z];  duMessage[diskError] ¬    S.CopyToNewString["Disk Error."L, z];  duMessage[riskWarning] ¬    S.CopyToNewString["**** WARNING! If Continue may DESTROY the content of the Disk!****"L, z];  duMessage[writeDiskShape] ¬    S.CopyToNewString["Writing disk shape ..."L, z];  duMessage[isDiskTypeCorrect] ¬    S.CopyToNewString["Is disk type correct?"L, z]; --Messages for FixABrokenHeader with PhysicalVolumeExtras  duMessage[pilotTableFullMsg0] ¬    S.CopyToNewString["Pilot Damaged Page Table is Full..."L, z];  duMessage[pilotTableFullMsg1] ¬    S.CopyToNewString["...You must Scavenge the Logical Volume containing the page to be repaired."L, z];  duMessage[badCylZeroPage] ¬    S.CopyToNewString["Bad Page On Cylinder Zero: "L, z];  duMessage[foundOnPage] ¬    S.CopyToNewString["  found on page "L, z];  duMessage[sysnotmatch] ¬    S.CopyToNewString["Warning: This version of diagnostics is not compatible with the data on this disk (labelled)."L, z];  duMessage[warndamage] ¬    S.CopyToNewString["Continuing will damage the data on your disk."L, z];  duMessage[spare1] ¬    S.CopyToNewString["For future use 1"L, z];  duMessage[spare2] ¬    S.CopyToNewString["For future use 2"L, z];  duMessage[spare3] ¬    S.CopyToNewString["For future use 3"L, z];  duMessage[spare4] ¬    S.CopyToNewString["For future use 4"L, z];  };    END... of DiskUtilityMsgKeysImplDove.mesa    LOGCreated on 27-Mar-85 11:15:12 by KL12-Sep-86 by rk:  Added messages for Head Retraction Utility.12-Jan-87 by PJT (SPL):  Added messages for remainPassCount & stopKeyAckn15-Jan-87 by STC, SPL:  Added message for knownStopKey and forceStop31-Jan-87 by STC:  correct English on knownStopKey22-Mar-87  9:38:18 by STC, use heap 6-Apr-87 16:57:43 by STC, add pattern for FormatDisk12-May-87  9:52:59 by STC, add riskWarning, spare1, spare229-May-87 17:47:21 by STC, change wording in spare115-Oct-87 10:46:28 by STC, add writeDiskShape, isDiskTypeCorrect21-Sep-88  8:53:24, STC, merge Labelless msg's from SPL 18-Nov-86 16:06:19 9-Oct-88 14:45:18, STC, add Warning for Labeled (spare1)12-Oct-88  9:11:28, STC, sysnotmatch ¬ spare1, added spare3 and spare4