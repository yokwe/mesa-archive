-- File: DiagDiskMkIOCmdImpl.mesa-- Last edited by STC, 21-Mar-87 19:51:31-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. -- DIRECTORY DiagDiskMkIOCmd	USING	[MkIOCmd, EnglishMessages],  Heap			USING	[Create],  String		USING	[CopyToNewString];			  DiagDiskMkIOCmdImpl: PROGRAM    IMPORTS Heap, String    EXPORTS	DiagDiskMkIOCmd =  BEGIN    OPEN S: String;        mkIOCmd: PUBLIC LONG DESCRIPTOR FOR DiagDiskMkIOCmd.EnglishMessages;   z: UNCOUNTED ZONE;      InitializeDiskIOMsgKeys: PUBLIC PROC = {   z ¬ Heap.Create[initial: 10];   mkIOCmd ¬ DESCRIPTOR[z.NEW[DiagDiskMkIOCmd.EnglishMessages], 174];    mkIOCmd[allreadyInLoop] ¬    S.CopyToNewString["Already in a loop."L, z];  mkIOCmd[allreadyLoggingErrs] ¬    S.CopyToNewString["Already logging errors."L, z];  mkIOCmd[allreadyTracingCmds] ¬    S.CopyToNewString["Already tracing commands."L, z];  mkIOCmd[clearLog] ¬    S.CopyToNewString["ClearLog"L, z];  mkIOCmd[clearLogExpl] ¬    S.CopyToNewString["Clears the error log"L, z];  mkIOCmd[clearTrace] ¬    S.CopyToNewString["ClearTrace"L, z];  mkIOCmd[clearTraceExpl] ¬    S.CopyToNewString["Clears the trace table."L, z];  mkIOCmd[command] ¬    S.CopyToNewString["Command: "L, z];  mkIOCmd[commandExecuted] ¬    S.CopyToNewString["Command executed: "L, z];  mkIOCmd[commandS] ¬    S.CopyToNewString["COMMANDS:"L, z];  mkIOCmd[commandTimedOut] ¬    S.CopyToNewString["Command timed out."L, z];  mkIOCmd[cylinder] ¬    S.CopyToNewString["Cylinder: "L, z];  mkIOCmd[cylindersExpl] ¬    S.CopyToNewString["The available cylinders are: "L, z];  mkIOCmd[cylindersPMExpl] ¬    S.CopyToNewString["To increment or decrement the cylinder in each loop iteration."L, z];  mkIOCmd[dataErrDetected] ¬    S.CopyToNewString["Data error detected."L, z];  mkIOCmd[dataStatus] ¬    S.CopyToNewString["Data status: "L, z];  mkIOCmd[delayCnt] ¬    S.CopyToNewString["Delay count: "L, z];  mkIOCmd[diagCylinder] ¬    S.CopyToNewString["Is the last cylinder reserved for Diagnostics?"L, z];  mkIOCmd[diagCylinderExpl] ¬    S.CopyToNewString["If you don't know, please answer 'N for this question."L, z];  mkIOCmd[displayData] ¬    S.CopyToNewString["DisplayData;"L, z];  mkIOCmd[displayDataExpl] ¬    S.CopyToNewString["Display the last read data;"L, z];  mkIOCmd[displayHeader] ¬    S.CopyToNewString["DisplayHeader;"L, z];  mkIOCmd[displayHeaderExpl] ¬    S.CopyToNewString["Display the last read header"L, z];  mkIOCmd[displayLabel] ¬    S.CopyToNewString["DisplayLabel;"L, z];  mkIOCmd[displayLabelExpl] ¬    S.CopyToNewString["Display the last read label;"L, z];  mkIOCmd[displayLog] ¬    S.CopyToNewString["DisplayLog;"L, z];  mkIOCmd[displayLogExpl] ¬    S.CopyToNewString["Display the error log."L, z];  mkIOCmd[displayStatus] ¬    S.CopyToNewString["DisplayStatus;"L, z];  mkIOCmd[displayStatusExpl] ¬    S.CopyToNewString["Display the last executed IO command status."L, z];  mkIOCmd[displayTrace] ¬    S.CopyToNewString["DisplayTrace;"L, z];  mkIOCmd[displayTraceExpl] ¬    S.CopyToNewString["Display the trace table."L, z];  mkIOCmd[driveAndContStatus] ¬    S.CopyToNewString["Drive and controller status: "L, z];  mkIOCmd[endLoop] ¬    S.CopyToNewString["EndLoop;"L, z];  mkIOCmd[endLoopExpl] ¬    S.CopyToNewString["Defines the end of a loop."L, z];  mkIOCmd[endOfFile] ¬    S.CopyToNewString["EndOfFile;"L, z];  mkIOCmd[endOfFileExpl] ¬    S.CopyToNewString["Defines the end of a command file."L, z];  mkIOCmd[errCode] ¬    S.CopyToNewString["Error code: "L, z];  mkIOCmd[errCount] ¬    S.CopyToNewString["Error count: "L, z];  mkIOCmd[errDisplaY] ¬    S.CopyToNewString["ERROR DISPLAY"L, z];  mkIOCmd[failures] ¬    S.CopyToNewString["Failures: "L, z];  mkIOCmd[givenParams] ¬    S.CopyToNewString["Given parameters: "L, z];  mkIOCmd[hardErrDetected] ¬    S.CopyToNewString["Hard error detected"L, z];  mkIOCmd[head] ¬    S.CopyToNewString["Head: "L, z];  mkIOCmd[headerDataErr] ¬    S.CopyToNewString["Header data error detected."L, z];  mkIOCmd[headerStatus] ¬    S.CopyToNewString["Header status: "L, z];  mkIOCmd[headExpl] ¬    S.CopyToNewString["The available heads are: "L, z];  mkIOCmd[headPMExpl] ¬    S.CopyToNewString["To increment or decrement the head in each loop iteration."L, z];  mkIOCmd[hexData] ¬    S.CopyToNewString["Data in hexadecimal: "L, z];  mkIOCmd[hexDataExpl] ¬    S.CopyToNewString["One word of hexadecimal data."L, z];  mkIOCmd[hexLabelData] ¬    S.CopyToNewString["Label data in hexadecimal: "L, z];  mkIOCmd[labelDataErr] ¬    S.CopyToNewString["Label data error detected."L, z];  mkIOCmd[labelStatus] ¬    S.CopyToNewString["Label status: "L, z];  mkIOCmd[lastErr] ¬    S.CopyToNewString["Last error: "L, z];  mkIOCmd[loopCnt] ¬    S.CopyToNewString["Loop count: "L, z];  mkIOCmd[loopCntExpl] ¬    S.CopyToNewString["The supported loop count is 1 through 65535"L, z];  mkIOCmd[maxCylinder] ¬    S.CopyToNewString["Last cylinder: "L, z];  mkIOCmd[maxHead] ¬    S.CopyToNewString["Last head: "L, z];  mkIOCmd[maxSector] ¬    S.CopyToNewString["Last sector: "L, z];  mkIOCmd[maxUnit] ¬    S.CopyToNewString["Last unit: "L, z];  mkIOCmd[minCylinder] ¬    S.CopyToNewString["First cylinder: "L, z];  mkIOCmd[minHead] ¬    S.CopyToNewString["First head: "L, z];  mkIOCmd[minSector] ¬    S.CopyToNewString["First sector: "L, z];  mkIOCmd[minUnit] ¬    S.CopyToNewString["First unit: "L, z];  mkIOCmd[minus] ¬    S.CopyToNewString["-"L, z];  mkIOCmd[needDataOperation] ¬    S.CopyToNewString["Needs Data Operation."L, z];  mkIOCmd[needHeaderOperation] ¬    S.CopyToNewString["Needs Header Operation first."L, z];  mkIOCmd[needLabelOperation] ¬    S.CopyToNewString["Needs Label Operation."L, z];  mkIOCmd[noErrs] ¬    S.CopyToNewString["No errors"L, z];  mkIOCmd[noOpData] ¬    S.CopyToNewString["NoOpData["L, z];  mkIOCmd[noOpDataExpl] ¬    S.CopyToNewString["NoOp data command."L, z];  mkIOCmd[noOpHeader] ¬    S.CopyToNewString["NoOpHeader/"L, z];  mkIOCmd[noOpHeaderExpl] ¬    S.CopyToNewString["NoOp header command."L, z];  mkIOCmd[noOpLabel] ¬    S.CopyToNewString["NoOpLabel/"L, z];  mkIOCmd[noOpLabelExpl] ¬    S.CopyToNewString["NoOp label command."L, z];  mkIOCmd[notAllowedInLoop] ¬    S.CopyToNewString["Not allowed in a loop."L, z];  mkIOCmd[notLooping] ¬    S.CopyToNewString["Not in a loop."L, z];  mkIOCmd[notLoggingErrs] ¬    S.CopyToNewString["Not logging errors."L, z];  mkIOCmd[notTracingCmds] ¬    S.CopyToNewString["Not tracing commands."L, z];  mkIOCmd[page] ¬    S.CopyToNewString["Page: "L, z];  mkIOCmd[paramEnd] ¬    S.CopyToNewString["];"L, z];  mkIOCmd[paramSeparator] ¬    S.CopyToNewString[", "L, z];  mkIOCmd[plus] ¬    S.CopyToNewString["+"L, z];  mkIOCmd[plusOrMinus] ¬    S.CopyToNewString["Increment or decrement by: "L, z];  mkIOCmd[readData] ¬    S.CopyToNewString["ReadData["L, z];  mkIOCmd[readDataExpl] ¬    S.CopyToNewString["Read data command."L, z];  mkIOCmd[readHeader] ¬    S.CopyToNewString["ReadHeader/"L, z];  mkIOCmd[readHeaderData] ¬    S.CopyToNewString["Read header data: "L, z];  mkIOCmd[readHeaderExpl] ¬    S.CopyToNewString["Read header command."L, z];  mkIOCmd[readLabel] ¬    S.CopyToNewString["ReadLabel/"L, z];  mkIOCmd[readLabelExpl] ¬    S.CopyToNewString["Read label command."L, z];  mkIOCmd[readStatus] ¬    S.CopyToNewString["ReadStatus;"L, z];  mkIOCmd[readStatusExpl] ¬    S.CopyToNewString["Read status command."L, z];  mkIOCmd[recalFirst] ¬    S.CopyToNewString["Recalibrate First: "L, z];  mkIOCmd[recalFirstYN] ¬    S.CopyToNewString["Recalibrate first (Yes/No): "L, z];  mkIOCmd[remainingSectorCnt] ¬    S.CopyToNewString["Remaining sector count: "L, z];  mkIOCmd[requestedTries] ¬    S.CopyToNewString["Requested tries: "L, z];  mkIOCmd[retriesDone] ¬    S.CopyToNewString["Retries done: "L, z];  mkIOCmd[returnedParams] ¬    S.CopyToNewString["Returned parameters: "L, z];  mkIOCmd[sector] ¬    S.CopyToNewString["Sector: "L, z];  mkIOCmd[sectorCnt] ¬    S.CopyToNewString["Sector count: "L, z];  mkIOCmd[sectorCntExpl] ¬    S.CopyToNewString["The supported sector count is: "L, z];  mkIOCmd[sectorExpl] ¬    S.CopyToNewString["The available sectors are: "L, z];  mkIOCmd[sectorPMExpl] ¬    S.CopyToNewString["To increment or decrement the sector in each loop iteration."L, z];  mkIOCmd[softErrDetected] ¬    S.CopyToNewString["Disk Errors Detected."L, z];  mkIOCmd[startLogging] ¬    S.CopyToNewString["StartLogging;"L, z];  mkIOCmd[startLoggingExpl] ¬    S.CopyToNewString["Log all detected errors."L, z];  mkIOCmd[startLoop] ¬    S.CopyToNewString["StartLoop["L, z];  mkIOCmd[startLoopExpl] ¬    S.CopyToNewString["Defines the beginning of a loop."L, z];  mkIOCmd[startTrace] ¬    S.CopyToNewString["StartTrace;"L, z];  mkIOCmd[startTraceExpl] ¬    S.CopyToNewString["Start a trace of IO commands executed."L, z];  mkIOCmd[statusHeading] ¬    S.CopyToNewString["BIT     STATUS                      STATE      "L, z];  mkIOCmd[stopLogging] ¬    S.CopyToNewString["StopLogging;"L, z];  mkIOCmd[stopLoggingExpl] ¬    S.CopyToNewString["Stop logging detected errors."L, z];  mkIOCmd[stopTrace] ¬    S.CopyToNewString["StopTrace;"L, z];  mkIOCmd[stopTraceExpl] ¬    S.CopyToNewString["Stop tracing IO commands."L, z];  mkIOCmd[testNumber] ¬    S.CopyToNewString["Test Number: "L, z];  mkIOCmd[timeDelay] ¬    S.CopyToNewString["TimeDelay["L, z];  mkIOCmd[timeDelayExpl] ¬    S.CopyToNewString["For delay between commands in .05 seconds increments."L, z];  mkIOCmd[timeIncrementEquals] ¬    S.CopyToNewString["The time increments are in .05 seconds increments."L, z];  mkIOCmd[trackCnt] ¬    S.CopyToNewString["Track count: "L, z];  mkIOCmd[trackCntExpl] ¬    S.CopyToNewString["The supported track count is: "L, z];  mkIOCmd[tries] ¬    S.CopyToNewString["Tries: "L, z];  mkIOCmd[tryCnt] ¬    S.CopyToNewString["Try count: "L, z];  mkIOCmd[tryCntExpl] ¬    S.CopyToNewString["The supported try count is: "L, z];  mkIOCmd[unit] ¬    S.CopyToNewString["Unit: "L, z];  mkIOCmd[unitSelected] ¬    S.CopyToNewString["Unit selected: "L, z];  mkIOCmd[unitExpl] ¬    S.CopyToNewString["The available units are: "L, z];  mkIOCmd[unitPMExpl] ¬    S.CopyToNewString["To increment or decrement the unit in each loop iteration."L, z];  mkIOCmd[useSameDataBuff] ¬    S.CopyToNewString["Single buffer: "L, z];  mkIOCmd[useSameDataBuffYN] ¬    S.CopyToNewString["Use a single 512K byte data buffer (Yes/No): "L, z];  mkIOCmd[verifyData] ¬    S.CopyToNewString["VerifyData["L, z];  mkIOCmd[verifyDataExpl] ¬    S.CopyToNewString["Verify data command."L, z];  mkIOCmd[verifyHeader] ¬    S.CopyToNewString["VerifyHeader/"L, z];  mkIOCmd[verifyHeaderExpl] ¬    S.CopyToNewString["Verify header command."L, z];  mkIOCmd[verifyLabel] ¬    S.CopyToNewString["VerifyLabel/"L, z];  mkIOCmd[verifyLabelExpl] ¬    S.CopyToNewString["Verify label command."L, z];  mkIOCmd[word0Bit00] ¬    S.CopyToNewString["Operation in progress........... "L, z];  mkIOCmd[word0Bit01] ¬    S.CopyToNewString["Operation complete.............. "L, z];  mkIOCmd[word0Bit02] ¬    S.CopyToNewString["Error detected.................. "L, z];  mkIOCmd[word0Bit03] ¬    S.CopyToNewString["Communication error............. "L, z];  mkIOCmd[word0Bit04] ¬    S.CopyToNewString["DMA timeout..................... "L, z];  mkIOCmd[word0Bit05] ¬    S.CopyToNewString["Fifo error...................... "L, z];  mkIOCmd[word0Bit06] ¬    S.CopyToNewString["Illegal operation............... "L, z];  mkIOCmd[word0Bit07] ¬    S.CopyToNewString["Drive ready..................... "L, z];  mkIOCmd[word0Bit08] ¬    S.CopyToNewString["Protocol violation.............. "L, z];  mkIOCmd[word0Bit09] ¬    S.CopyToNewString["Write fault..................... "L, z];  mkIOCmd[word0Bit10] ¬    S.CopyToNewString["Illegal cylinder................ "L, z];  mkIOCmd[word0Bit11] ¬    S.CopyToNewString["Track 00........................ "L, z];  mkIOCmd[word0Bit12] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word0Bit13] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word0Bit14] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word0Bit15] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word1Bit00] ¬    S.CopyToNewString["Sector not found................ "L, z];  mkIOCmd[word1Bit01] ¬    S.CopyToNewString["Header CRC error................ "L, z];  mkIOCmd[word1Bit02] ¬    S.CopyToNewString["Label address mark error........ "L, z];  mkIOCmd[word1Bit03] ¬    S.CopyToNewString["Label ID error.................. "L, z];  mkIOCmd[word1Bit04] ¬    S.CopyToNewString["Label verify error.............. "L, z];  mkIOCmd[word1Bit05] ¬    S.CopyToNewString["Label CRC error................. "L, z];  mkIOCmd[word1Bit06] ¬    S.CopyToNewString["Data address mark error......... "L, z];  mkIOCmd[word1Bit07] ¬    S.CopyToNewString["Data ID error................... "L, z];  mkIOCmd[word1Bit08] ¬    S.CopyToNewString["Data verify error............... "L, z];  mkIOCmd[word1Bit09] ¬    S.CopyToNewString["Data CRC error.................. "L, z];  mkIOCmd[word1Bit10] ¬    S.CopyToNewString["Not used........................ "L, z];  mkIOCmd[word1Bit11] ¬    S.CopyToNewString["Not used........................ "L, z];  mkIOCmd[word1Bit12] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word1Bit13] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word1Bit14] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[word1Bit15] ¬    S.CopyToNewString[" "L, z];  mkIOCmd[writeData] ¬    S.CopyToNewString["WriteData["L, z];  mkIOCmd[writeDataExpl] ¬    S.CopyToNewString["Write data command."L, z];  mkIOCmd[writeHeader] ¬    S.CopyToNewString["WriteHeader/"L, z];  mkIOCmd[writeHeaderExpl] ¬    S.CopyToNewString["Write header command."L, z];  mkIOCmd[writeLabel] ¬    S.CopyToNewString["WriteLabel/"L, z];  mkIOCmd[writeLabelExpl] ¬    S.CopyToNewString["Write label command."L, z];  };    END....--of DiagDiskMkIOCmdImpl.mesaLOG27-Sep-85 13:17:58 by MXT, Commented out unused items and Added diagCylinder and diagCylinderExpl.13-Dec-85 13:41:59 by MXT, Changed softErrDetected message.13-Dec-85 13:41:59 by STC, Changed to use heap.