-- File SysConfigComputeVMAllocIntsImpl.mesa-- Last edited:	RDM	 8-Jan-87 13:42:36	Add printingScanningOption to optionInterruptPriorityList.-- RRP  14-May-86 13:11:20  removed condition for min VM size: If PCO-- RRP  21-Mar-86 12:12:11  added condition for min VM size: If PCO-- RRP   31-Jan-86 16:14:26  changes for 12.2-- Created:	31-Jan-86 14:34:09    by: RRP<<	Copyright (C) 1986 by Xerox Corporation. All rights reserved.		The following program was created in 1986 but has not been published	within the meaning of the copyright law, is furnished under license,	and may not be used, copied and/or disclosed except in accordance with 	the terms of said license.>>DIRECTORY  EEpromDefs	        USING [ ExpansionInterruptAllocation,				OptionType, VMSizeBits],  SysConfigSubDefs,  SysConfigChannelDefs  USING [ eePromImage];    SysConfigComputeVMAllocIntsImpl: PROGRAM	IMPORTS SysConfigChannelDefs			EXPORTS SysConfigSubDefs =	BEGIN OPEN SysConfigChannelDefs;--******************************************************************************-- Compute Minumum VM Size:--******************************************************************************ComputeMinumumVMSize: PUBLIC PROCEDURE[] RETURNS[vmSize: EEpromDefs.VMSizeBits] =  BEGIN<<    IF eePromImage.OptionBoardOne.optionType = laserPrintingOption OR       eePromImage.OptionBoardTwo.optionType = laserPrintingOption OR       eePromImage.OptionBoardThree.optionType = laserPrintingOption OR       eePromImage.PCOptionBoard =  1 THEN     vmSize ¬ vm16mega   ELSE     vmSize ¬ vm8mega;>>   vmSize ¬ vm16mega;  END;--******************************************************************************-- Allocate Expansion Interrupts:--******************************************************************************AllocateExpansionInterrupts: PUBLIC PROCEDURE[]     RETURNS[validity: SysConfigSubDefs.OptionsValidity ¬ valid] =  BEGIN    DeAllocateExpansionInterrupts: PROCEDURE[] =      {eePromImage.OptionBoardOne.expansionInterruptAllocation ¬         allFalseExpansionInterruptAllocation;       eePromImage.OptionBoardTwo.expansionInterruptAllocation ¬         allFalseExpansionInterruptAllocation;       eePromImage.OptionBoardThree.expansionInterruptAllocation ¬         allFalseExpansionInterruptAllocation};    ComputeAllocation: PROCEDURE[]          RETURNS[validity: SysConfigSubDefs.OptionsValidity] =      {lengthOfList: CARDINAL = 2;       interruptAllocation: ARRAY [0..8) OF EEpromDefs.OptionType;       interruptIndex: CARDINAL ¬ 0;       optionInterruptPriorityList: ARRAY [0..lengthOfList) OF         EEpromDefs.OptionType;       optionInterruptPriorityList[0] ¬ laserPrintingOption;       optionInterruptPriorityList[1] ¬ printingScanningOption;       FOR i:CARDINAL IN [0..lengthOfList) DO         FOR j:CARDINAL IN [0..numberOfOptions) DO	   IF optionsSelected[j] = optionInterruptPriorityList[i] THEN	     {IF interruptIndex > 7 THEN RETURN[validity ¬ invalidConfiguration];	      interruptAllocation[interruptIndex] ¬ optionsSelected[j];	      interruptIndex ¬ interruptIndex + 1};	 ENDLOOP;       ENDLOOP;       DeAllocateExpansionInterrupts[];       FOR k:CARDINAL IN [0..interruptIndex) DO	 IF eePromImage.OptionBoardOne.optionType = interruptAllocation[k] THEN	   eePromImage.OptionBoardOne.expansionInterruptAllocation[LOOPHOLE[k]] ¬	     TRUE;       ENDLOOP;       FOR k:CARDINAL IN [0..interruptIndex) DO	 IF eePromImage.OptionBoardTwo.optionType = interruptAllocation[k] THEN	   eePromImage.OptionBoardTwo.expansionInterruptAllocation[LOOPHOLE[k]] ¬	     TRUE;       ENDLOOP;       FOR k:CARDINAL IN [0..interruptIndex) DO	 IF eePromImage.OptionBoardThree.optionType = interruptAllocation[k] THEN	  eePromImage.OptionBoardThree.expansionInterruptAllocation[LOOPHOLE[k]] ¬	     TRUE;       ENDLOOP;       RETURN[validity ¬ valid];      };    numberOfOptions: CARDINAL ¬ 0;    allFalseExpansionInterruptAllocation:      EEpromDefs.ExpansionInterruptAllocation  ¬ ALL[FALSE];    optionsSelected: ARRAY [0..3) OF EEpromDefs.OptionType;    IF eePromImage.OptionBoardOne.optionType # none THEN      {optionsSelected[numberOfOptions] ¬ eePromImage.OptionBoardOne.optionType;       numberOfOptions ¬ numberOfOptions + 1};    IF eePromImage.OptionBoardTwo.optionType # none THEN      {optionsSelected[numberOfOptions] ¬ eePromImage.OptionBoardTwo.optionType;       numberOfOptions ¬ numberOfOptions + 1};    IF eePromImage.OptionBoardThree.optionType # none THEN      {optionsSelected[numberOfOptions] ¬ eePromImage.OptionBoardThree.optionType;       numberOfOptions ¬ numberOfOptions + 1};    IF numberOfOptions > 1 <<AND machine = dayBreak>> THEN       --don't allocate any!      {DeAllocateExpansionInterrupts[];       RETURN[validity ¬ tooManyOptions]};    -- can't have two of the same option    IF eePromImage.OptionBoardOne.optionType # none THEN       IF eePromImage.OptionBoardOne.optionType =            eePromImage.OptionBoardTwo.optionType OR          eePromImage.OptionBoardOne.optionType =	    eePromImage.OptionBoardThree.optionType THEN          {DeAllocateExpansionInterrupts[];	   RETURN[validity ¬ invalidConfiguration]};    IF eePromImage.OptionBoardTwo.optionType # none THEN       IF eePromImage.OptionBoardTwo.optionType =            eePromImage.OptionBoardOne.optionType OR          eePromImage.OptionBoardTwo.optionType =	    eePromImage.OptionBoardThree.optionType THEN          {DeAllocateExpansionInterrupts[];	   RETURN[validity ¬ invalidConfiguration]};    IF eePromImage.OptionBoardThree.optionType # none THEN       IF eePromImage.OptionBoardThree.optionType =            eePromImage.OptionBoardOne.optionType OR          eePromImage.OptionBoardThree.optionType =	    eePromImage.OptionBoardTwo.optionType THEN          {DeAllocateExpansionInterrupts[];	   RETURN[validity ¬ invalidConfiguration]};<<    IF eePromImage.OptionBoardOne.optionType = laserPrintingOption THEN      eePromImage.OptionBoardOne.expansionInterruptAllocation[ir0] ¬ TRUE;>>     validity ¬ ComputeAllocation[];     IF validity # valid THEN       DeAllocateExpansionInterrupts[];     RETURN [validity];  END; --AllocateExpansionInterruptsEND. 