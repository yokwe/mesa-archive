-- File: DiagRDErrorCheck.mesa - last edit:-- MXT                  2-Oct-85  9:24:54-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. -- File: DiagRDErrorCheck.mesa---- DIRECTORY  PhysicalVolume	USING	[PageNumber];				     DiagRDErrorCheck:  DEFINITIONS  = BEGIN    DiagRDErrorCheckImpl:		PROGRAM;   BadPageCount:			CARDINAL; BadPageNumber:			PhysicalVolume.PageNumber; BadPageSpace:			ARRAY[0..256) OF PhysicalVolume.PageNumber; BadPageSpaceCount:		ARRAY[0..256) OF CARDINAL; Error:				BOOLEAN; ErrorCode:		 	CARDINAL; FruCode:			CARDINAL; HardError:			BOOLEAN; HeadErrorArray:		ARRAY [0..18] OF CARDINAL; MPCode:			CARDINAL; PublicErrorCheckArray:		LONG DESCRIPTOR FOR PACKED ARRAY OF					expectedStatus; Recovery:		 	TYPE= {retryCorrectable,				       eccCorrectable,				       notCorrectable}; RemainingSectorCount:		CARDINAL; SoftError:			BOOLEAN; SoftErrorCount:	 	CARDINAL; SoftErrorInTable:		BOOLEAN; SubtestSoftErrorCount:		CARDINAL;    expectedStatus: TYPE= MACHINE DEPENDENT {    inProgressFalse(0),			--word0Bit00False	  0    inProgressTrue,			--word0Bit00True	  1    completeFalse,			--word0Bit01False	  2    completeTrue,			--word0Bit01True	  3    errorDetectedFalse,			--word0Bit02False	  4    errorDetectedTrue,			--word0Bit02True	  5    communicationErrorFalse,		--word0Bit03False	  6    communicationErrorTrue,		--word0Bit03True	  7    dmaTimeoutFalse,			--word0Bit04False	  8    dmaTimeoutTrue,			--word0Bit04True	  9    fifoErrorFalse,			--word0Bit05False	 10    fifoErrorTrue,			--word0Bit05True	 11    illegalOperationFalse,		--word0Bit06False	 12    illegalOperationTrue,		--word0Bit06True	 13    readyFalse,				--word0Bit07False	 14    readyTrue,				--word0Bit07True	 15    protocolViolationFalse,		--word0Bit08False	 16    protocolViolationTrue,		--word0Bit08True	 17    writeFaultFalse,			--word0Bit09False	 18    writeFaultTrue,			--word0Bit09True	 19    illegalCylinderFalse,		--word0Bit10False	 20    illegalCylinderTrue,		--word0Bit10True	 21    track00False,			--word0Bit11False	 22    track00True,			--word0Bit11True	 23        word0Bit12False,			--word0Bit12False	 24    word0Bit12True,			--word0Bit12True	 25    word0Bit13False,			--word0Bit13False	 26    word0Bit13True,			--word0Bit13True	 27    word0Bit14False,			--word0Bit14False	 28    word0Bit14True,			--word0Bit14True	 29    word0Bit15False,			--word0Bit15False	 30    word0Bit15True,			--word0Bit15True	 31        sectorNotFoundFalse,		--word1Bit00False	 32    sectorNotFoundTrue,			--word1Bit00True	 33    headerCRCErrorFalse,		--word1Bit01False	 34    headerCRCErrorTrue,			--word1Bit01True	 35    labelAddressMarkErrorFalse,		--word1Bit02False	 36    labelAddressMarkErrorTrue,		--word1Bit02True	 37    labelIDErrorFalse,			--word1Bit03False	 38    labelIDErrorTrue,			--word1Bit03True	 39    labelVerifyErrorFalse,		--word1Bit04False	 40    labelVerifyErrorTrue,		--word1Bit04True	 41    labelCRCErrorFalse,			--word1Bit05False	 42    labelCRCErrorTrue,			--word1Bit05True	 43    dataAddressMarkErrorFalse,		--word1Bit06False	 44    dataAddressMarkErrorTrue,		--word1Bit06True	 45    dataIDErrorFalse,			--word1Bit07False	 46    dataIDErrorTrue,			--word1Bit07True	 47    dataVerifyErrorFalse,		--word1Bit08False	 48    dataVerifyErrorTrue,		--word1Bit08True	 49    dataCRCorECCErrorFalse,		--word1Bit09False	 50    dataCRCorECCErrorTrue,		--word1Bit09True	 51    word1Bit10False,			--word1Bit10False	 52    word1Bit10True,			--word1Bit10True	 53    word1Bit11False,			--word1Bit11False	 54    word1Bit11True,			--word1Bit11True	 55    word1Bit12False,			--word1Bit12False	 56    word1Bit12True,			--word1Bit12True	 57    word1Bit13False,			--word1Bit13False	 58    word1Bit13True,			--word1Bit13True	 59    word1Bit14False,			--word1Bit14False	 60    word1Bit14True,			--word1Bit14True	 61    word1Bit15False,			--word1Bit15False	 62    word1Bit15True,			--word1Bit15True	 63    spare1,				--64    spare2,				--65    cmdTimedOutFalse,			--66    cmdTimedOutTrue,			--67    invalidChannelFalse,		--68    invalidDriveStateFalse,		--69    goodCompletionFalse,		--70    goodCompletionTrue,			--71    spare3,				--72    spare4,				--73    spare5,				--74    spare6,				--75    spare7,				--76    spare8,				--77    spare9,				--78    spare10,				--79    verifyHeader,			--80    verifyLabel,			--81    verifyData,				--82    last};				--83    -- error masks arrays  ECStandard1:		PACKED ARRAY [0..26] OF expectedStatus;  ECDtVrErr:		PACKED ARRAY [0..23] OF expectedStatus;  ECLbVrErr:		PACKED ARRAY [0..23] OF expectedStatus;  ECIllegalCylErr:	PACKED ARRAY [0..12] OF expectedStatus;  ECTrack00True:	PACKED ARRAY [0..12] OF expectedStatus;  ECTrack00False:	PACKED ARRAY [0..12] OF expectedStatus;  ECIllegalOpr:		PACKED ARRAY [0..09] OF expectedStatus;      -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- to look for the given status conditions  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    BadPageNotInTable: PUBLIC PROCEDURE		RETURNS [notInTable: BOOLEAN¬ FALSE];    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- to look for the given status conditions  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    CheckStatus: PROCEDURE [	errorArray: LONG DESCRIPTOR FOR PACKED ARRAY OF expectedStatus ¬							PublicErrorCheckArray];				     -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- initializes the error checking arrays  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    InitErrorCheck: PROCEDURE [];  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- reports the error and sets the proper MP Code  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ErrorReport: PROCEDURE [MPOffset: CARDINAL];    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Reset the intermediate soft error counts  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ResetIntermediateResults: PROC;  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Show the intermediate soft error counts.  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ShowIntermediateResults: PROC;  END...  --of DiagRDErrorCheckLOG 2-Oct-85  9:24:53	MXT	Added ResetIntermediateResults and ShowIntermediateResults.  