-- File: DiagDiskMkMiscImpl.mesa-- Last edited: STC,  1-Sep-87  9:10:41                 -- Copyright (C) 1984, 1985 , 1986, 1986 by Xerox Corporation. All rights reserved. -- File: DiagDiskMkMiscImpl.mesa--   DIRECTORY  DiagDiskMkMisc		USING	[MkMisc, EnglishMessages],  Heap			USING	[Create],  String		USING	[CopyToNewString];				   DiagDiskMkMiscImpl: PROGRAM  IMPORTS Heap, String    EXPORTS	DiagDiskMkMisc =  BEGIN  OPEN S: String;    mkMisc: PUBLIC LONG DESCRIPTOR FOR DiagDiskMkMisc.EnglishMessages;      z: UNCOUNTED ZONE;    InitializeDiskMiscMsgKeys: PUBLIC PROC = {        -- mkMisc points to the array of English messages used by the Control Module  -- initialization  z ¬ Heap.Create[initial: 10];  mkMisc ¬ DESCRIPTOR[z.NEW[DiagDiskMkMisc.EnglishMessages], 148];    mkMisc[areYouSure] ¬    S.CopyToNewString["Are you sure? (Yes/No):"L, z];  mkMisc[areYouStillSure] ¬    S.CopyToNewString["Are you still sure? (Yes/No):"L, z];  mkMisc[badPageDisplay] ¬    S.CopyToNewString["Bad page display"L, z];  mkMisc[badPageTableEmpty] ¬    S.CopyToNewString["The bad page table is empty."L, z];  mkMisc[buildCmdFile] ¬    S.CopyToNewString["Build New Command File"L, z];  mkMisc[buildCmdFileExpl] ¬    S.CopyToNewString["To build a new file of commands for execution."L, z];  mkMisc[checkFormat] ¬    S.CopyToNewString["Examining whether the disk was already formatted or not."L, z];   -- For services engineers.  mkMisc[cmdFileOpt] ¬    S.CopyToNewString["Command File and Subtest Options"L, z];  mkMisc[cmdFileOptExpl] ¬    S.CopyToNewString["To build and run Command Files and run subtests."L, z];  mkMisc[confidenceTst] ¬    S.CopyToNewString["Confidence Test"L, z];  mkMisc[confidenceTstExpl] ¬    S.CopyToNewString["Does a thorough nondestructive verification of the disk."L, z];  mkMisc[continueOnErr] ¬    S.CopyToNewString["Continue on error."L, z];  mkMisc[continueOnErrExpl] ¬    S.CopyToNewString["2.  Will log errors (if requested with Command File) and continue."L, z];  mkMisc[createPV] ¬    S.CopyToNewString["Create Physical Volume"L, z];  mkMisc[creatingPV] ¬    S.CopyToNewString["Creating Physical Volume."L, z];  mkMisc[createPVExpl] ¬    S.CopyToNewString["Creates a Physical Volume."L, z];  mkMisc[dataDisplay] ¬    S.CopyToNewString["HEXADECIMAL DATA DISPLAY"L, z];  mkMisc[dataDisplay1] ¬    S.CopyToNewString["COUNT    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F"L, z];  mkMisc[dataDisplay2] ¬    S.CopyToNewString["*****  *******************************************************************************"L, z];  mkMisc[diskReadErr] ¬    S.CopyToNewString["Disk read error."L, z];  mkMisc[dispBadPageTbl] ¬    S.CopyToNewString["Display Bad Page Table"L, z];  mkMisc[dispBadPageTblExpl] ¬    S.CopyToNewString["Displays the bad pages in the bad page table."L, z];  mkMisc[dispDiskParam] ¬    S.CopyToNewString["Rigid Disk Parameters"L, z];  mkMisc[dispDiskParamExpl] ¬    S.CopyToNewString["Displays the Rigid Disk parameters."L, z];  mkMisc[dispErrLog] ¬    S.CopyToNewString["Display Error Log"L, z];  mkMisc[dispErrLogExpl] ¬    S.CopyToNewString["Displays errors encountered from a circular table."L, z];  mkMisc[dispOptions] ¬    S.CopyToNewString["Display Options"L, z];  mkMisc[dispOptionsExpl] ¬    S.CopyToNewString["Displays the Display Options Menu."L, z];  mkMisc[dispSoftErr] ¬    S.CopyToNewString["Display Encountered Soft Errors"L, z];  mkMisc[dispSoftErrExpl] ¬    S.CopyToNewString["Displays the soft errors encountered while running."L, z];  mkMisc[displaySubtest] ¬    S.CopyToNewString["Display subtests"L, z];  mkMisc[displaySubtestExpl] ¬    S.CopyToNewString["Displays the available subtests."L, z];  mkMisc[dispTrace] ¬    S.CopyToNewString["Display Trace Table"L, z];  mkMisc[dispTraceExpl] ¬    S.CopyToNewString["Displays the executed commands and status from a circular table."L, z];  mkMisc[destructiveWARNING] ¬    S.CopyToNewString["WARNING!  This test will destroy the data on the disk.  Do you still want to continue? (Y/N):"L, z];  mkMisc[donE] ¬    S.CopyToNewString["DONE"L, z];  mkMisc[earlierEntry] ¬    S.CopyToNewString["Earlier entry"L, z];  mkMisc[earlierEntryExpl] ¬    S.CopyToNewString["Display the prior entry."L, z]; -- Test ran successfully  mkMisc[ecc] ¬    S.CopyToNewString["Correctable using ECC"L, z]; -- Test failed. At least one error exist.  mkMisc[enterCoiceInQuestion] ¬    S.CopyToNewString["Enter choice number to be explained first."L, z];  mkMisc[enterChoiceNum] ¬    S.CopyToNewString["Enter choice number: "L, z]; -- Test ran is not sure whether the test passed of failed  mkMisc[enterChoiceNumExpl] ¬    S.CopyToNewString["Enter the number of the desired choice from above."L, z];  mkMisc[entryNumber] ¬    S.CopyToNewString["Entry number:"L, z];  mkMisc[errActioN] ¬    S.CopyToNewString["ERROR ACTION"L, z]; -- Exit selection.  mkMisc[errCode] ¬    S.CopyToNewString["Error code: "L, z];  mkMisc[errLogIsEmpty] ¬    S.CopyToNewString["The Error Log is empty."L, z];  mkMisc[exit] ¬    S.CopyToNewString["Exit."L, z];  mkMisc[exitExpl] ¬    S.CopyToNewString["Returns to prior menu."L, z]; -- This is yes.  mkMisc[faileD1] ¬    S.CopyToNewString["FFFF   FFFF   F   F      FFFF   FFF"L, z]; -- This is Yes.  mkMisc[faileD2] ¬    S.CopyToNewString["F      F  F   F   F      F      F  F"L, z]; -- This is no.  mkMisc[faileD3] ¬    S.CopyToNewString["FFFF   FFFF   F   F      FFFF   F  F"L, z]; -- This is No.  mkMisc[faileD4] ¬    S.CopyToNewString["F      F  F   F   F      F      F  F"L, z];  mkMisc[faileD5] ¬    S.CopyToNewString["F      F  F   F   FFFF   FFFF   FFF"L, z];  mkMisc[failureCode] ¬    S.CopyToNewString["Failure code: "L, z];  mkMisc[falsE] ¬    S.CopyToNewString["FALSE     "L, z]; --8 chars + 2for space  mkMisc[firstEntry] ¬    S.CopyToNewString["First Entry."L, z];  mkMisc[firstEntryExpl] ¬    S.CopyToNewString["Selects the first available entry."L, z];  mkMisc[formatQuestion] ¬    S.CopyToNewString["Is the disk formatted?"L, z];  mkMisc[headerDisplay1] ¬    S.CopyToNewString["HEADER DISPLAY:"L, z];  mkMisc[headerDisplay2] ¬    S.CopyToNewString["**************"L, z];   -- For services engineers.  mkMisc[hrs] ¬    S.CopyToNewString["hrs "L, z];  mkMisc[ignoreErrs] ¬    S.CopyToNewString["Ignore errors"L, z];  mkMisc[ignoreErrsExpl] ¬    S.CopyToNewString["1.  No error checking will be done."L, z];  mkMisc[labelDisplay] ¬    S.CopyToNewString["Label Display"L, z];  mkMisc[lastEntry] ¬    S.CopyToNewString["Last entry."L, z];  mkMisc[lastEntryExpl] ¬    S.CopyToNewString["Displays the last entry in the table."L, z];  mkMisc[laterEntry] ¬    S.CopyToNewString["Later entry."L, z];  mkMisc[laterEntryExpl] ¬    S.CopyToNewString["Displays the next entry in the table."L, z];  mkMisc[loopOnErr] ¬    S.CopyToNewString["Loop on error"L, z];  mkMisc[loopOnErrExpl] ¬    S.CopyToNewString["4.  Will loop on the first error encountered."L, z];  mkMisc[manufDiskCheck] ¬    S.CopyToNewString["Manufacturing disk check out"L, z];  mkMisc[manufDiskCheckExpl] ¬    S.CopyToNewString["Formats the disk, verifies disk hardware, and creates a Physical volume."L, z];  mkMisc[mayBeUnformatted] ¬    S.CopyToNewString["The disk does not seem to be formatted."L, z];  mkMisc[mins] ¬    S.CopyToNewString["mins "L, z]; --abreviation for minutes  mkMisc[moreYN] ¬    S.CopyToNewString["More (Yes/No):"L, z];  mkMisc[newDiskCheck] ¬    S.CopyToNewString["New disk check out"L, z];  mkMisc[newDiskCheckExpl] ¬    S.CopyToNewString["Does a thorough destructive verification of the disk."L, z];  mkMisc[nil] ¬    S.CopyToNewString["Spare"L, z];  mkMisc[no] ¬    S.CopyToNewString["no"L, z];  mkMisc[noBadPageS] ¬    S.CopyToNewString["NO BAD PAGES"L, z];  mkMisc[noCmdFileToRerun] ¬    S.CopyToNewString["There is no Command File to rerun."L, z];  mkMisc[noEarlierEntries] ¬    S.CopyToNewString["No earlier entries."L, z];  mkMisc[noLaterEntries] ¬    S.CopyToNewString["No later entries."L, z];  mkMisc[notCorrectable] ¬    S.CopyToNewString["Not correctable"L, z];  mkMisc[passeD1] ¬    S.CopyToNewString["PPPP   PPPP   PPPP   PPPP   PPPP   PPP"L, z];  mkMisc[passeD2] ¬    S.CopyToNewString["P  P   P  P   P      P      P      P  P"L, z];  mkMisc[passeD3] ¬    S.CopyToNewString["PPPP   PPPP   PPPP   PPPP   PPPP   P  P"L, z];  mkMisc[passeD4] ¬    S.CopyToNewString["P      P  P      P      P   P      P  P"L, z];  mkMisc[passeD5] ¬    S.CopyToNewString["P      P  P   PPPP   PPPP   PPPP   PPP"L, z];  mkMisc[passeRunTime] ¬    S.CopyToNewString["Each pass runs approximately:"L, z];  mkMisc[passesToRun] ¬    S.CopyToNewString["Passes to run: "L, z]; -- Test ran successfully  mkMisc[PVCreationErr] ¬    S.CopyToNewString["Error in creating the Physical Volume."L, z]; -- Test failed. At least one error exist.  mkMisc[PVErr] ¬    S.CopyToNewString["Physical Volume error."L, z];  mkMisc[PVNeedsScavenging] ¬    S.CopyToNewString["Physical Volume needs scavenging."L, z]; -- Test ran is not sure whether the test passed of failed  mkMisc[RD0] ¬   S.CopyToNewString["Rd0"L, z]; --Physical Volume name  mkMisc[RD1] ¬    S.CopyToNewString["Rd1"L, z]; --Physical Volume name  mkMisc[RD2] ¬    S.CopyToNewString["Rd2"L, z]; --Physical Volume name  mkMisc[RD3] ¬    S.CopyToNewString["Rd3"L, z]; --Physical Volume name  mkMisc[remainingPassCnt] ¬    S.CopyToNewString["Remaining pass count: "L, z];  mkMisc[remainingRunTime] ¬    S.CopyToNewString["Remaining run time: "L, z];  mkMisc[rerunCmdFile] ¬    S.CopyToNewString["Rerun Last Command File"L, z]; -- This is yes.  mkMisc[rerunCmdFileExpl] ¬    S.CopyToNewString["Reruns the prior command file that was built."L, z];  mkMisc[retries] ¬    S.CopyToNewString["Correctable by retrying"L, z];  mkMisc[runSubtest] ¬    S.CopyToNewString["Run subtests"L, z];  mkMisc[runSubtestExpl] ¬    S.CopyToNewString["To run the selected subtests."L, z];  mkMisc[runTime] ¬    S.CopyToNewString["Run time: "L, z];  mkMisc[sameEntry] ¬    S.CopyToNewString["Same entry."L, z];  mkMisc[sameEntryExpl] ¬    S.CopyToNewString["Redisplays the entry just displayed."L, z];  mkMisc[secs] ¬    S.CopyToNewString["secs "L, z]; --abreviation for seconds  mkMisc[softwareErr] ¬    S.CopyToNewString["Software error."L, z];  mkMisc[statusDisplay] ¬    S.CopyToNewString["STATUS DISPLAY:"L, z];  mkMisc[stepCmds] ¬    S.CopyToNewString["Step Commands"L, z];  mkMisc[stepCmdsExpl] ¬    S.CopyToNewString["5.  Executes one Command at a time and then stops."L, z];  mkMisc[stopOnErr] ¬    S.CopyToNewString["Stop on error"L, z];  mkMisc[stopOnErrExpl] ¬    S.CopyToNewString["3.  Stops and displays the error when an error occures."L, z];  mkMisc[subtesT] ¬    S.CopyToNewString["SUBTEST:"L, z];  mkMisc[subtest] ¬    S.CopyToNewString["Subtest (enter '0 to exit subtest selection): "L, z];  mkMisc[subtestExpl] ¬    S.CopyToNewString["Enter the desired subtest number to be run."L, z];  mkMisc[subtestOptions] ¬    S.CopyToNewString["Subtest Options"L, z];  mkMisc[subtestOptionsExpl] ¬    S.CopyToNewString["Allows a user to select and run subtests."L, z];  mkMisc[subtestSelection] ¬    S.CopyToNewString["Select Subtests"L, z];  mkMisc[subtestSelectionExpl] ¬    S.CopyToNewString["To select the desired subtests to be executed."L, z];  mkMisc[supportedPassCnt] ¬    S.CopyToNewString["The supported pass count is 1 through 32000."L, z];  mkMisc[surfaceVerification] ¬    S.CopyToNewString["Surface verification"L, z];  mkMisc[switchSettings] ¬    S.CopyToNewString["Switch setting"L, z]; -- Test ran successfully  mkMisc[testSelection] ¬    S.CopyToNewString["TEST SELECTION"L, z]; -- Test failed. At least one error exist.  mkMisc[to] ¬    S.CopyToNewString[" to "L, z];  mkMisc[totalPassCnt] ¬    S.CopyToNewString["Total pass count: "L, z]; -- Test ran is not sure whether the test passed of failed  mkMisc[totalRunTime] ¬   S.CopyToNewString["Total run time:"L, z]; --Physical Volume name  mkMisc[traceTableEmpty] ¬    S.CopyToNewString["The trace table is empty."L, z]; --Physical Volume name  mkMisc[truE] ¬    S.CopyToNewString["TRUE      "L, z]; --8 chars + 2for space  mkMisc[unknown] ¬    S.CopyToNewString["unknown"L, z]; --Physical Volume name  mkMisc[verifyDiskSurf] ¬    S.CopyToNewString["Verify Disk Surface"L, z];  mkMisc[verifyDiskSurfExpl] ¬    S.CopyToNewString["Verifies the disk surface against the bad page table."L, z];  mkMisc[yes] ¬    S.CopyToNewString["yes"L, z]; -- This is yes.  mkMisc[printBPT] ¬    S.CopyToNewString["Print Bad Page Table"L, z];  mkMisc[enterBadBage] ¬    S.CopyToNewString["Manual Entry Of Bad Pages"L, z];  mkMisc[enterBadBageExp] ¬    S.CopyToNewString["Adds entries to the bad page table by page number or manufacturer's error map"L, z];  mkMisc[enterBPTPage] ¬    S.CopyToNewString["Enter By Page Number"L, z];  mkMisc[enterBPTPageExp] ¬    S.CopyToNewString["Adds a specified bad page to the BAD PAGE TABLE"L, z];  mkMisc[enterManufEM] ¬    S.CopyToNewString["Enter By Manufacturer's Error Map"L, z];  mkMisc[enterManufEMExp] ¬    S.CopyToNewString["Converts manufacturers' error map entries into page numbers and adds them to the BAD PAGE TABLE"L, z];  mkMisc[testAPage] ¬    S.CopyToNewString["Format the Disk"L, z];  mkMisc[testACylinder] ¬    S.CopyToNewString["Test A Whole Cylinder Of The Disk"L, z];  mkMisc[desiredCylinder] ¬    S.CopyToNewString["Enter the Cylinder number to be tested -- default 32767 for last!"L, z];  mkMisc[loadingWait] ¬    S.CopyToNewString["***** Loading ........ Please wait! *****"L, z];  mkMisc[testCylin0] ¬    S.CopyToNewString["Will destroy the content of Cylinder 0, still want to do it?"L, z];  mkMisc[mustFormat] ¬    S.CopyToNewString["***** Warning ---- Must reformat the disk! *****"L, z];  mkMisc[gotErrors] ¬    S.CopyToNewString["Error detected, please use 'Display Option' to see Error Logs."L, z];  mkMisc[headRetract] ¬    S.CopyToNewString["Head Retraction"L, z];  mkMisc[headRetractExp] ¬    S.CopyToNewString["To be used before moving or shipping, this utility moves the rigid disk heads to a safe landing zone prior to powering off the 6085."L, z];  mkMisc[spare1] ¬    S.CopyToNewString["Drive was formatted! Will destroy the content! Do you want to continue?"L, z];  mkMisc[spare2] ¬    S.CopyToNewString["Too many disk errors detected!"L, z];    };    END...--of DiagDiskMkMiscImpl.mesa  Created:  7-Nov-84 18:29:4314-Jan-86 12:14:08	MXT	Added formatQuestion and mayBeUnformatted.9-May-86  8:36:32 by KL 14-Jan-86 12:14:08, STC, correct English in checkFormat.27-Feb-87 14:39:47 by STC, added testAPage and testACylinder 3-Mar-87 10:56:53 by STC, added printBPT, enterManufEM, and enterManufEMExp 8-Mar-87 13:45:32 by STC, add desiredCylinder21-Mar-87 20:24:45 by STC, use heap21-Mar-87 20:24:45 by STC, add loadingWait,testCylin0,mustFormat,gotErrors.24-Mar-87 18:42:11 by STC, maximum length is 110 chars28-Mar-87 15:13:57 by STC, add enterBadBage, enterBPTPage plus Exps'. 1-Jul-87 10:28:05 by STC, change desiredCylinder of TestACylinder. 7-Jul-87  8:26:10 by STC, add headRetract, headRetractExp, spare1, spare2.28-Aug-87 17:25:56 by STC, use spares for AlreadyFormatted & too many SoftErrors.18-Sep-87 15:54:04 by STC, testAPage for Manufacture's Formatter ***** Fix it