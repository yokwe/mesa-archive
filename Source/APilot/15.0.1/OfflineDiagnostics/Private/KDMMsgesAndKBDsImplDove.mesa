-- KDMMsgesAndKBDsImplDove.mesa  -- Last edited on  24-Mar-87 11:37:36  by KXW---- Copyright (C) 1985, 1986, 1987 by Xerox Corporation. All rights reserved.---- This module exports language-dependent messages and  keyboard-- descriptions. 3 keyboard types are supported, AmericanKeyboard, EuropeanKeyboard and JapaneseKeyboard.-- -- To create a module with non-English messages, replace all the English STRINGs -- with equivalent STRINGs in the desired tongue.----DIRECTORY  KeyStations		USING [KeyStation],  KDMMessagesDove	USING [KMDMessages],  OfflineDiagInterface	USING [PutMessage],  OfflineDiagTTYDove	USING [KeyDescriptor],  Runtime			USING [ControlFault, UnboundProcedure],  SysConfigChannelDefs	USING [eePromImage, Initialize, ReadEEPromImage];KDMMsgesAndKBDsImplDove: PROGRAM  IMPORTS OfflineDiagInterface, Runtime, SysConfigChannelDefs   EXPORTS KDMMessagesDove, OfflineDiagTTYDove = BEGIN    cantTalkToEEProm: BOOLEAN ¬ FALSE;--*******************************************************************************--   Messages--*******************************************************************************  -- Pointer to various language-dependent texts. (@<SomeMessages>)  -- Exported to KDMMessagesDove  --  message: PUBLIC POINTER TO ARRAY KDMMessagesDove.KMDMessages OF STRING;-- To change the messages to another langguage, do:----	1) Replace "EnglishMessages" with an appropriate term.--	2) Translate all the messages appropriately to the desired language.--	3) Rebuild system with the new implementation module.----	   *****  DO NOT CHANGE THE INDICES !!!  *****--  EnglishMessages: ARRAY KDMMessagesDove.KMDMessages OF STRING ¬ [    menuTitle: "Keyboard, Display, Mouse and Beeper Diagnostics",  helpTitle: "Special keys for the Display diagnostics",  helpText0: "NEXT displays the next pattern, if any; SPACE inverts the display; STOP exits the test",	-- Keyboard and Mouse Test Texts  keyboardAndMouseTest: "Keyboard, Mouse and Beeper Tests",  keyboardAndMouseExplanation: "Tests keyboard, mouse and beeper",  kbdAndMouseHelpTitle: "Useful Information",  normalCondition: "Keys and Mouse Buttons are represented by rectangles",  rectangleStates: "Rectangle states: DARK when associated key or button is depressed, WHITE when up",  exitCondition: "To exit test: Depress and release the STOP key",   beeperTests: "Beeper Test: LOCK beeps continuously, RETURN beeps once",	-- Display / Borders	  screenAndBorders: "Borders And Data Field",  screenAndBordersHelp: "Displays borders and the Data Field. Draws vertical, horizontal and slanted lines",  drawBars: "Vertical And Horizontal Bars",  drawBarExplanation: "VERTICAL and HORIZONTAL bars of various widths are displayed",  crossHair: "Cross-Hair Pattern",  crossHairHelp: "Prints a cross-hair pattern on the data field",  varyWidths: "NEXT changes the line thickness",	  printCharacters: "Fill Screen With H, E, @, OR Slanted Lines",    -- Data Field can be adjusted vertically and horizontally  properPosition: "Proper alignment: Opposite borders should be equal",  alignDisplay: "Display X-Y Alignment",  moveDataField: "Allows one to adjust the position of the data field on the screen",  alignDisplayHelp: "Meaningful keys, located on the numeric keypad, for this procedure are:",  alignDisplayDefault: "CLEAR - Sets screen to default position",  alignDisplayUp: "8 - Moves screen up by an increment",  alignDisplayDown: "2 - Moves screen down by an increment",  alignDisplayLeft: "4 - Moves screen left by an increment",  alignDisplayRight: "6 - Moves screen right by an increment",  alignDisplayExit: "1 - Stores new position and returns to parent menu ",    printerTestPattern: "Printer Test Pattern",  printerTestHelp: "Fills the screen with the printable character set",  circles: "Circles",  circlesHelp: "Draws 5 circles on the screen"  ];	--*******************************************************************************--   KeyBoards--*******************************************************************************  -- Pointer to a keyboard. Exported to OfflineDiagTTYDove  --  diagKeyBoard: PUBLIC POINTER TO ARRAY KeyStations.KeyStation   		OF OfflineDiagTTYDove.KeyDescriptor;  -- ¬ @<SomeKeyboard>		    <<  KeyBoard layout:                 ---------------------------------------	       |	Function key row             |	       ---------------------------------------  ---------    ---------------------------------------    ---------------  | Left  |    |      				     |    |  Right      |  | Bank  |    |	Center Bank		     |    |  Bank       |  |       |    |				     |    |             |  ---------    ---------------------------------------    ---------------  >>      -- Keyboard reference dimensions  --  -- Basic units of measurement: unit = pixelsInSixteenthOfAnInch  --  --    pixelsInSixteenthOfAnInch = UserTerminal.pixelsPerInch/16 = 75/16 = 4  --  centerBankWidth: CARDINAL = 424;   -- Width of center bank is 428 pixels  normalKeyWidth: CARDINAL = 29;  -- Width of normal keys is 29 pixels  normalKeyHeight: CARDINAL = 29;  -- Height of normal keys is 29 pixels  -- For NEXT and RETURN keys, which are twice as tall  doubleHeight: CARDINAL = 2*normalKeyHeight;     functionKeyWidth: CARDINAL = 40;  -- Width of function keys is 40 pixels  bankSeparator: CARDINAL = -- Space separating the banks  	(centerBankWidth - (10*functionKeyWidth) + (7*overlapLines))/2;  topFunKeyHeight: CARDINAL = 16; -- Height of the function keys on the top row   unAssigned: CARDINAL =  0;   -- No station associated with bit.  DiagnosticBitTwo: CARDINAL =  0;   -- Not used for Dove  DiagnosticBitOne: CARDINAL =  0;   -- Not used for Dove  stretchRightEdge: CARDINAL = 1000;  -- Add two pixels to right edge   -- Row (y) markers. All values are in pixels and are relative to the beginning  -- of the Data Area of the diagnostic display  --  functionKeyRow: CARDINAL = 0;  -- Beginning of the Data Atea  firstRow: CARDINAL = functionKeyRow + normalKeyHeight;  -- First row   secondRow: CARDINAL = firstRow + normalKeyHeight; -- Second row   thirdRow: CARDINAL = secondRow + normalKeyHeight; -- Third row  fourthRow: CARDINAL = thirdRow + normalKeyHeight; -- Fourth row  fifthRow: CARDINAL = fourthRow + normalKeyHeight; -- Fifth row.  -- Offsets  --  -- The keyboard is drawn in the middle of the offline diagnostic screen.  -- It is the responsibility of the DiagTTY DrawKBDLine routine to add the   -- yOffSet  --  --  yOffSet: CARDINAL = UserTermial.screenHeight/2  --   -- Offsets from the left edge of the display for the 3 horizontally divided  -- key banks: Left (L1-L10), Center (1-61, T1-T10) and Right (R1-R20)  --  leftOffset: CARDINAL = 16;  -- Offset from left edge of display  leftBank: CARDINAL = leftOffset;  -- 1/4 inch from left edge of screen for now  centerBank: CARDINAL = leftBank + -- Beginning postion of centerBank              functionKeyWidth + normalKeyWidth + bankSeparator;  centerBankRightEdge: CARDINAL = centerBank + centerBankWidth;  rightBank: CARDINAL = centerBankRightEdge + bankSeparator;    -- Overlaps  --  -- The edges of all rectangle are 2 pixels wide. All interior edges overlap  -- by these two pixels.   --  -- The KeyDescriptors must adjust each rectangle properly to take the overlap  -- into account.  --  overlapLines: CARDINAL = 2;  -- All outlines are 2 pixels thick.      -- functionKeyRow key widths and anchors  --  strikeOutX: CARDINAL = centerBank + 4*functionKeyWidth - 3*overlapLines +   			 bankSeparator;  marginsX: CARDINAL = strikeOutX + 4*functionKeyWidth - 3*overlapLines +   		       bankSeparator;  fontX: CARDINAL = marginsX + functionKeyWidth;  fontWidth: CARDINAL = centerBankRightEdge - fontX;         -- firstRow key widths and anchors  --  backSpaceX: CARDINAL = centerBank + 13*(normalKeyWidth - overlapLines);  backSpaceWidth: CARDINAL = centerBankRightEdge - backSpaceX;      -- secondRow key widths and anchors  --  TABwidth: CARDINAL = 44;  -- Width of TAB/ParaTab key is 44 pixels  RETURNtopX: CARDINAL = -- Starting point of the top half of the RETURN key              centerBank + TABwidth + 12*normalKeyWidth - 12*overlapLines;  RETURNtopWidth: CARDINAL = centerBankRightEdge - RETURNtopX;          -- thirdRow key widths and anchors  --  RETURNlowX: CARDINAL =  -- Starting position of lower half of the RETURN key              centerBank + LOCKwidth + 12*normalKeyWidth - 11*overlapLines;  RETURNlowWidth: CARDINAL = centerBankRightEdge - RETURNlowX;  LOCKwidth: CARDINAL = 52;  -- Width of LOCK key      -- fourthRow key widths and anchors  --  -- American Shifts  AmericanLeftShiftWidth: CARDINAL = 68;  -- LeftShift(57)  AmericanZX: CARDINAL = centerBank + AmericanLeftShiftWidth - overlapLines;  AmericanRightShiftX: CARDINAL = -- Starting position for AmericanRightShift.     centerBank + AmericanLeftShiftWidth + 10*normalKeyWidth - 11*overlapLines;  AmericanRightShiftWidth: CARDINAL = centerBankRightEdge - AmericanRightShiftX;    -- European Shifts  EuropeanLeftShiftWidth: CARDINAL =  -- Small shift key ( Bit 57 )     AmericanLeftShiftWidth - normalKeyWidth + overlapLines;  EuropeanQuoteX: CARDINAL = -- American keybord does not have this key (107).     centerBank + EuropeanLeftShiftWidth - overlapLines;    -- Japanese Shifts  LeftHandakuonShiftWidth: CARDINAL = normalKeyWidth;  -- Bit 57  LeftDakuonShiftX: CARDINAL = centerBank + LeftHandakuonShiftWidth -- Bit 107  			       - overlapLines;   LeftDakuonShiftWidth: CARDINAL = -- Does not exit on American keyboard     AmericanLeftShiftWidth - LeftHandakuonShiftWidth + overlapLines;       RightDakuonShiftX: CARDINAL = AmericanRightShiftX;  -- Bit 76  RightDakuonShiftWidth: CARDINAL = -- Bit 76     AmericanRightShiftWidth - normalKeyWidth;       RightHandakuonShiftX: CARDINAL =  -- Bit 111 (Exists not on American keyboard)     RightDakuonShiftX + RightDakuonShiftWidth - overlapLines;  RightHandakuonShiftWidth: CARDINAL = centerBankRightEdge - RightHandakuonShiftX;    -- fifthRow key widths and anchors (Bottom row of centerBank)  --  fillerWidth: CARDINAL = 36;  -- width of filler at both ends of SPACE  SpecialWidth: CARDINAL = 44;  -- width of Special or Keyboard key.  AmericanSpaceX: CARDINAL = centerBank + SpecialWidth + fillerWidth;  AmericanSpaceWidth: CARDINAL = 256;  -- Width of American SPACE bar (Space(73))  ExpandX: CARDINAL = AmericanSpaceX + AmericanSpaceWidth + fillerWidth;  EXPANDwidth: CARDINAL = centerBankRightEdge - ExpandX;    -- Japanese space keys  EnglishKeyX: CARDINAL = AmericanSpaceX;   -- Bit 86 (Japanese keyboard only)  EnglishKeyWidth: CARDINAL = -- Try to line up to right edge of X-key         (AmericanZX + 2*normalKeyWidth - overlapLines) - EnglishKeyX;	   KatakanaX: CARDINAL = EnglishKeyX + EnglishKeyWidth - overlapLines;  -- Bit 88  KatakanaWidth: CARDINAL =  -- Line up with right edge of B(55)  	(AmericanZX + 5*normalKeyWidth - 4*overlapLines) - KatakanaX;  JapaneseSpaceX: CARDINAL = KatakanaX + KatakanaWidth - overlapLines; -- Bit 110  JapaneseSpaceWidth: CARDINAL = KatakanaWidth;  HiraganaX: CARDINAL = JapaneseSpaceX + JapaneseSpaceWidth - overlapLines; -- 73  HiraganaWidth: CARDINAL = EnglishKeyWidth;      -- BOOLEANs used to identify keyboard type. ONLY ONE CAN BE TRUE !!!  --  AmericanKeyboard: BOOLEAN ¬ FALSE;  EuropeanKeyboard: BOOLEAN ¬ FALSE;  JapaneseKeyboard: BOOLEAN ¬ FALSE;      KeyBoard: ARRAY KeyStations.KeyStation   		       OF OfflineDiagTTYDove.KeyDescriptor;--******************************************************************************--  Main Line Code.--******************************************************************************  SysConfigChannelDefs.Initialize[!       Runtime.UnboundProcedure, Runtime.ControlFault => {        cantTalkToEEProm ¬ TRUE; CONTINUE}];  IF cantTalkToEEProm OR SysConfigChannelDefs.ReadEEPromImage[] # success   	THEN {AmericanKeyboard ¬ TRUE; OfflineDiagInterface.PutMessage["EEPROM cannot be read."L];}	ELSE {SELECT SysConfigChannelDefs.eePromImage.Keyboard FROM 		  european => EuropeanKeyboard ¬ TRUE;		  japanese => JapaneseKeyboard ¬ TRUE;		  ENDCASE => AmericanKeyboard ¬ TRUE};		    KeyBoard ¬ [    -- The following implements the AmericanKeyboard, EuropeanKeyboard and     -- JapaneseKeyboard for Dove. To select the proper implementaion, set    -- one and only one keyboard BOOLEANs to TRUE; the other two BOOLEANs must    -- be FALSE.    --     -- Some implementation details:    --    -- x = 0 => keystation is not used (ie not assigned any semantic)    --   # 0 => keystation is implemented and it designates the starting pixel    --		position on the line y.    --    -- For inner edges, overlap edges by 2 pixels.    --    -- All line positions are relative to yOffset.    --    -- Format of Descriptors (Units of measurements are in pixels):    --    -- Descriptor: [x: CARDINAL,       Offset from left edge of screen.    --		    y: CARDINAL,       Line number relative to an Offset.    --		    width: CARDINAL,   Width of a key's rectangle.    --		    height: CARDINAL]  Height of a key's rectangle.    --    -- -- Key Descriptors: Each maps into a bit in the keyboard bit map in KeyStations.--		    All borders are overlapped by 2 pixels.-- 0 --  [x: unAssigned],  -- 1 --  [x: centerBank, --  Bullet(1)   	  y: firstRow,	  width: normalKeyWidth,	  height: normalKeyHeight],	  -- 2 --  [x: strikeOutX + 2*functionKeyWidth - 2*overlapLines,  -- SuperSub(2)	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],	  -- 3 --  [x: centerBank + 3*functionKeyWidth - 3*overlapLines, -- Case(3)	  y: functionKeyRow,	  width: functionKeyWidth + stretchRightEdge,	  height: topFunKeyHeight],-- 4 --  [x: strikeOutX, -- Strikeout(4)	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],	  -- 5 --  [x: rightBank + 2*(normalKeyWidth - overlapLines), -- KeypadTwo(5)	  y: fourthRow,	  width: normalKeyWidth,	  height: normalKeyHeight],	  -- 6 --  [x: rightBank + 3*(normalKeyWidth - overlapLines), -- KeypadThree(6)	  y: fourthRow,	  width: normalKeyWidth + stretchRightEdge,	  height: normalKeyHeight],	  -- 7 --  [x: centerBank + LOCKwidth + 10*normalKeyWidth - 11*overlapLines,	  -- SingleQuote(7)	  y: thirdRow,	  width: normalKeyWidth,	  height: normalKeyHeight],    -- 8 -- [x: rightBank,  -- KeypadAdd(8)    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],    -- 9 -- [x: rightBank + normalKeyWidth - overlapLines,  -- KeypadSubtract(9)    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight], 	 -- 10 -- [x: rightBank + 2*(normalKeyWidth - overlapLines), -- KeypadMultiply(10)    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],   	 -- 11 -- [x:  rightBank + 3*(normalKeyWidth - overlapLines), -- KeypadDivide(11)    	 y: firstRow,	 width: normalKeyWidth + stretchRightEdge,	 height: normalKeyHeight],  	 -- 12 -- [x: rightBank,  -- KeypadClear(12)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],   -- 13 -- [x: RETURNlowX,  -- Mouse point button decribes lower half of RETURN    	  y: thirdRow - overlapLines,	  width: RETURNlowWidth,	  height: normalKeyHeight + overlapLines],	  -- 14 -- [x: 0],  -- Mouse adjust button 	 -- 15 -- [x: 0],  -- Menu(15). Not used for Dove    -- 16 -- [x: centerBank + 5*(normalKeyWidth - overlapLines),  -- 5    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],  -- FIVE-- 17 -- [x: centerBank + 4*(normalKeyWidth - overlapLines),  -- 4    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],  -- FOUR-- 18 -- [x: centerBank + 6*(normalKeyWidth - overlapLines),  -- 6    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 19 -- [x: centerBank + TABwidth + 2*normalKeyWidth - 3*overlapLines, -- E(19)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 20 -- [x: centerBank + 7*(normalKeyWidth - overlapLines), -- 7    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 21 -- [x: centerBank + LOCKwidth + 2*normalKeyWidth - 3*overlapLines, -- D(21)   	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 22 -- [x: centerBank + TABwidth + 6*normalKeyWidth - 7*overlapLines, -- U(22)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 23 -- [x: AmericanZX + 3*normalKeyWidth - 3*overlapLines, -- V(23)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 24 -- [x: centerBank + 10*(normalKeyWidth - overlapLines),  -- 0    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 25 -- [x: centerBank + LOCKwidth + 7*normalKeyWidth - 8*overlapLines, -- K(25)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 26 -- [x: centerBank + 11*(normalKeyWidth - overlapLines),  -- DASH / MINUS    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 27 -- [x: centerBank + TABwidth + 9*normalKeyWidth - 10*overlapLines, -- P(27)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 28 -- [x: AmericanZX + 9*normalKeyWidth - 9*overlapLines, -- SLASH (/)     	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 29 -- [x: fontX,  -- Starting position of FONT key    	 y: functionKeyRow,	 width: fontWidth + stretchRightEdge,	 height: topFunKeyHeight],-- 30 -- [x: leftBank, -- Same(30)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 31 -- [x: backSpaceX,  -- BS    	 y: firstRow,	 width: backSpaceWidth + stretchRightEdge,	 height: normalKeyHeight],-- 32 -- [x: centerBank + 3*normalKeyWidth - 3*overlapLines,  -- 3    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],    -- 33 -- [x: centerBank + 2*normalKeyWidth - 2*overlapLines,  -- 2    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 34 -- [x: centerBank + TABwidth + normalKeyWidth - 2*overlapLines,  -- W(34)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 35 -- [x: centerBank + TABwidth - overlapLines,  -- Q(35)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 36 -- [x: centerBank + LOCKwidth + normalKeyWidth - 2*overlapLines,  -- S(36)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 37 -- [x: centerBank + LOCKwidth - overlapLines,  -- A(37)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 38 -- [x: centerBank + 9*(normalKeyWidth - overlapLines), -- 9    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 39 -- [x: centerBank + TABwidth + 7*normalKeyWidth - 8*overlapLines,  -- I(39)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 40 -- [x: AmericanZX + normalKeyWidth - overlapLines, -- X(40)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 41 -- [x: centerBank + TABwidth + 8*normalKeyWidth - 9*overlapLines, -- O(41)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 42 -- [x: centerBank + LOCKwidth + 8*normalKeyWidth - 9*overlapLines, -- L(42)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 43 -- [x: AmericanZX + 7*normalKeyWidth - 7*overlapLines, -- Comma(43)     	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 44 -- [x: unAssigned, --centerBank+LOCKwidth+10*normalKeyWidth-11*overlapLines,    	 -- Quote(44),    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 45 -- [x: centerBank + TABwidth + 11*normalKeyWidth - 12*overlapLines,     	 -- RightBracket(45)    	 y: secondRow,	 width: normalKeyWidth + stretchRightEdge,	 height: normalKeyHeight],-- 46 -- [x: leftBank,  -- Open(46)    	 y: fifthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 47 -- [x: centerBank,  -- Special(47),  or Keyboard    	 y: fifthRow,	 width: SpecialWidth + stretchRightEdge,	 height: normalKeyHeight],-- 48 -- [x: centerBank + normalKeyWidth - overlapLines,  -- ONE    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 49 -- [x: unAssigned,  -- Tab(49)  For DLion.     	 y: firstRow,	 width: TABwidth,	 height: normalKeyHeight],-- 50 -- [x: centerBank,  -- ParaTab(50)    	 y: secondRow,	 width: TABwidth,	 height: normalKeyHeight],-- 51 -- [x: centerBank + LOCKwidth + 3*normalKeyWidth - 4*overlapLines, -- F(51)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 52 -- [x: leftBank + normalKeyWidth - overlapLines,  -- Props(52) (CONTROL)    	 y: fifthRow,	 width: functionKeyWidth + stretchRightEdge,	 height: normalKeyHeight],    -- 53 -- [x: AmericanZX + 2*normalKeyWidth - 2*overlapLines, -- C(53)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 54 -- [x: centerBank + LOCKwidth + 6*normalKeyWidth - 7*overlapLines, -- J(54)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 55 -- [x: AmericanZX + 4*normalKeyWidth - 4*overlapLines, -- B(55)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 56 -- [x: AmericanZX,  -- Z    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 57 -- [x: centerBank,  -- LeftShift(57)    	 y: fourthRow,	 -- %American (Euopean and Japanese have normalKeyWidth keys here)	 width: IF AmericanKeyboard THEN AmericanLeftShiftWidth ELSE	        IF EuropeanKeyboard THEN EuropeanLeftShiftWidth ELSE	 	   LeftHandakuonShiftWidth,	 height: normalKeyHeight],-- 58 -- [x: AmericanZX + 8*normalKeyWidth - 8*overlapLines,  -- Period(58)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 59 -- [x: centerBank + LOCKwidth + 9*normalKeyWidth - 10*overlapLines,          -- SemiColon(59)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- The RETURN key is handled specially. It is made up of two retangles that are-- painted together. See 13 for lower half.-- 60 -- [x: RETURNtopX, -- Left edge    	 y: secondRow,  -- For of top half only	 width: RETURNtopWidth + stretchRightEdge,  -- Width of top rectangle	 height: normalKeyHeight],   -- Height of right edge-- 61 -- [x: unAssigned,  -- unAssigned For DLion	 -- centerBank + LOCKwidth + 11*normalKeyWidth - 12*overlapLines,      	 -- DOUBLE QUOTE    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 62 -- [x: leftBank + normalKeyWidth - overlapLines,  -- DEL    	 y: firstRow,	 width: functionKeyWidth + stretchRightEdge,	 height: normalKeyHeight],-- 63 -- [x: rightBank,  -- Next(63)    	 y: thirdRow,	 width: normalKeyWidth,	 height: doubleHeight],-- 64 -- [x: centerBank + TABwidth + 3*normalKeyWidth - 4*overlapLines,  -- R(64)    	 y: secondRow,	 width: normalKeyWidth, 	 height: normalKeyHeight],-- 65 -- [x: centerBank + TABwidth + 4*normalKeyWidth - 5*overlapLines,  -- T(65)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 66 -- [x: centerBank + LOCKwidth + 4*normalKeyWidth - 5*overlapLines, -- G(66)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 67 -- [x: centerBank + TABwidth + 5*normalKeyWidth - 6*overlapLines,  -- Y(67)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 68 -- [x: centerBank + LOCKwidth + 5*normalKeyWidth - 6*overlapLines, -- H(68)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 69 -- [x: centerBank + 8*(normalKeyWidth - overlapLines),  -- 8    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 70 -- [x: AmericanZX + 5*normalKeyWidth - 5*overlapLines, -- N(70)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 71 -- [x: AmericanZX + 6*normalKeyWidth - 6*overlapLines, -- M(71)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 72 -- [x: centerBank,  -- Lock(72)    	 y: thirdRow,	 width: LOCKwidth,	 height: normalKeyHeight],	 -- 73 -- [x: IF JapaneseKeyboard THEN  -- SPACE %American and %European are same		JapaneseSpaceX ELSE AmericanSpaceX,  -- Space(73)    	 y: fifthRow,		 	 width: IF JapaneseKeyboard THEN JapaneseSpaceWidth  	 	ELSE AmericanSpaceWidth + stretchRightEdge,	 height: normalKeyHeight],-- 74 -- [x: centerBank + TABwidth + 10*normalKeyWidth - 11*overlapLines,     	 -- LeftBracket(74)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 75 -- [x: centerBank + 12*(normalKeyWidth - overlapLines),  -- EQUAL    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 76 -- [x: AmericanRightShiftX, -- RightShift(76)    	 y: fourthRow,	 width: IF JapaneseKeyboard THEN RightDakuonShiftWidth ELSE -- %Japanese	        AmericanRightShiftWidth + stretchRightEdge,	 height: normalKeyHeight],	 -- 77 -- [x: leftBank,  -- STOP    	 y: firstRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 78 -- [x: leftBank + normalKeyWidth - overlapLines,  -- Move(78)    	 y: fourthRow,	 width: functionKeyWidth + stretchRightEdge,	 height: normalKeyHeight],-- 79 -- [x: leftBank,  -- Undo(79)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 80 -- [x: marginsX,  -- MARGINS    	 y: functionKeyRow,	 width: functionKeyWidth + overlapLines,	 height: topFunKeyHeight],-- 81 -- [x: rightBank + normalKeyWidth - overlapLines,  -- KeypadSeven(81)    	 y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 82 -- [x: rightBank + 2*(normalKeyWidth - overlapLines),  -- KeypadEight(82)         y: secondRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 83 -- [x: rightBank + 3*(normalKeyWidth - overlapLines),  -- KeypadNine(83)    	 y: secondRow,	 width: normalKeyWidth + stretchRightEdge,	 height: normalKeyHeight],	 -- 84 -- [x: rightBank + normalKeyWidth - overlapLines,  -- KeypadFour(84)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 85 -- [x: rightBank + 2*(normalKeyWidth - overlapLines),  -- KeypadFive(85)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 86 -- [x: IF JapaneseKeyboard THEN HiraganaX ELSE unAssigned, -- %Japanese    	 y: fifthRow,    -- %Japanese	 width: HiraganaWidth + overlapLines,	 height: normalKeyHeight],-- 87 -- [x: rightBank + 3*(normalKeyWidth - overlapLines),  -- KeypadSix(87)    	 y: thirdRow,	 width: normalKeyWidth + stretchRightEdge,	 height: normalKeyHeight],-- 88 -- [x: IF JapaneseKeyboard THEN EnglishKeyX ELSE unAssigned,  -- %Japanese    	 y: fifthRow,  -- %Japanese	 width: EnglishKeyWidth,	 height: normalKeyHeight],-- 89 -- [x: leftBank + normalKeyWidth - overlapLines,  -- Copy(89)    	 y: thirdRow,	 width: functionKeyWidth + stretchRightEdge,	 height: normalKeyHeight],	 -- 90 -- [x: leftBank,  -- Find(90)    	 y: thirdRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 91 -- [x: leftBank + normalKeyWidth - overlapLines,  -- Again(91)    	 y: secondRow,	 width: functionKeyWidth + stretchRightEdge,	 height: normalKeyHeight],-- 92 -- [x: unAssigned,  -- HELP for DLION    	 y: unAssigned,	 width: unAssigned,	 height: unAssigned],-- 93 -- [x: ExpandX,  -- Expand(93)    	 y: fifthRow,	 width: EXPANDwidth + stretchRightEdge,	 height: normalKeyHeight],	 -- 94 -- [x: rightBank + normalKeyWidth - overlapLines,  -- KeypadOne    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 95 -- [x: DiagnosticBitTwo,  -- DiagnosticBitTwo(95)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],	 -- 96 -- [x: DiagnosticBitOne,  -- DiagnosticBitOne(96)    	 y: fourthRow,	 width: normalKeyWidth,	 height: normalKeyHeight],-- 97 -- [x: centerBank,  -- Center(97)    	 y: functionKeyRow,	 width: functionKeyWidth,	 height: topFunKeyHeight],-- 98 -- [x: rightBank,  -- KeypadZero(98)    	 y: fifthRow,	 width: 2*normalKeyWidth - overlapLines,	 height: normalKeyHeight],-- 99 -- [x: centerBank + functionKeyWidth - overlapLines,   -- Bold(99)    	 y: functionKeyRow,	 width: functionKeyWidth,	 height: topFunKeyHeight],-- 100 -- [x: centerBank + 2*(functionKeyWidth - overlapLines),   -- Italic(100)    	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],-- 101 -- [x: centerBank + 5*functionKeyWidth + bankSeparator - 4*overlapLines,    	  -- Underline(101)     	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],-- 102 -- [x: unAssigned,  -- Superscript(102) on the DLion    	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],-- 103 -- [x: unAssigned,  -- Subscript(103) on DLion    	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],-- 104 -- [x: centerBank + 7*functionKeyWidth + bankSeparator - 6*overlapLines,    	  -- Smaller(104) (LargerSmaller)			    	  y: functionKeyRow,	  width: functionKeyWidth + stretchRightEdge,	  height: topFunKeyHeight],-- 105 -- [x: rightBank + 2*normalKeyWidth - 2*overlapLines, -- KeypadPeriod(105)    	  y: fifthRow,	  width: normalKeyWidth,	  height: normalKeyHeight],-- 106 -- [x: rightBank + 3*normalKeyWidth - 3*overlapLines, -- KeypadComma(106)    	  y: fifthRow,	  width: normalKeyWidth + stretchRightEdge,	  height: normalKeyHeight],-- 107 -- [x: SELECT TRUE FROM		JapaneseKeyboard => LeftDakuonShiftX,  -- %Japanese		EuropeanKeyboard => EuropeanQuoteX,   -- %European		ENDCASE => unAssigned, -- %American    	  y: fourthRow, 	  width: IF JapaneseKeyboard THEN LeftDakuonShiftWidth 	  	 ELSE normalKeyWidth, -- European keyboard has a normal key here	  height: normalKeyHeight],-- 108 -- [x: centerBank + LOCKwidth + 11*normalKeyWidth - 12*overlapLines, 	  -- DoubleQuote(108) for Dove Keyboard    	  y: thirdRow,  	  width: normalKeyWidth + stretchRightEdge,	  height: normalKeyHeight],-- 109 -- [x: unAssigned, -- Defaults(109) on DLion    	  y: functionKeyRow,	  width: functionKeyWidth,	  height: topFunKeyHeight],-- 110 -- [x: IF JapaneseKeyboard THEN KatakanaX ELSE unAssigned,    	   -- (Space %Japanese)    	   y: fifthRow,  -- %Japanese	   width: KatakanaWidth,  -- %Japanese	   height: normalKeyHeight],  -- %Japanese-- 111 -- [x: IF JapaneseKeyboard THEN RightHandakuonShiftX ELSE unAssigned,    	   y: fourthRow,  -- %Japanese RightHandakuonShift	   width: RightHandakuonShiftWidth + stretchRightEdge,	   height: normalKeyHeight]  -- %Japanese 	     ];  -- End of Key Descriptors   diagKeyBoard ¬ @KeyBoard;  message ¬ @EnglishMessages;      END... of KDMMsgesAndKBDsImplDove.mesa    LOGCreated by KL on  4-Mar-8524-Jan-86: KeyDescriptor and diagKeyBoard moved to OfflineDiagTTYDove.	   KDMMsgesAndKBDsDove renamed to KDMMessagesDove19-Dec-86: The message alignDisplay and alignDisplayExit changed by KXW.17-Feb-87 15:57:54: Added alignDisplayDefault by KXW.26-Feb-87 14:48:04: Support 3 keyboard types simultaneously by KXW.24-Mar-87 11:36:05: Fixed AR(Space keys are not allocated correctly in KDM diagnostics) by KXW.