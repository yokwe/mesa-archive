-- File: DiagRDTestsImpl.mesa-- Last edited: TXM, 19-May-89 20:09:52-- Copyright (C) 1984, 1985  by Xerox Corporation. All rights reserved. ----  DIRECTORY DiagDiskCmdDes		USING	[CommandRecord], DiagRDBasicTest	USING	[ConfidenceTest, CheckDiagCylinder, InRunUnit], DiagDiskCmdDrive	USING	[DiagDiskCmdDriveImpl, CmdDescriptionArray,				 ParamArrayL1, Continue,				 Unit, Cylinder, Head, Sector, SectorCount], DiagRDCmdDes		USING	[DiagRDCmdDesImpl, CmdDescriptArray], DiagRDCmds		USING	[DiagRDCmdsImpl, NotFound, NotReady], DiagRDDisplay		USING	[BadPages, DiskParameters,				 InitDisplay], DiagRDErrorCheck	USING	[DiagRDErrorCheckImpl, ErrorCode, 				 InitErrorCheck], DiagRDExerciser	USING	[InExerciser, RunMfDiskCheck, RunNewDiskCheck, 				TestACylinder, TestAPage], DiagRDLog		USING	[ClearLog, ClearTrace,				 DisplayErrorLog, DisplayTrace,				 ErrLogPtr, ErrLogLength, StepLogPtr, Trace, 				 TracePtr, TraceLength, LogError, LogStep], DiagDiskMkIOCmd	USING	[InitializeDiskIOMsgKeys], DiagDiskMkMisc		USING	[InitializeDiskMiscMsgKeys, mkMisc], DiagDiskMkSubtest	USING	[InitializeDiskDiagMsgKeys], DiagDiskMkTime		USING	[DiagDiskMkTimeImpl, mkTime], DiagDiskTime		USING	[RealTimeClockFailure, SetRealTimeClock], DiagRDPVStuff		USING	[GoodVolumeID, GetVolumeHandle,				 IsDiskFormatted, VolumeID], DiagDiskRunCmdFile	USING	[BuildNewFile, CreatePhysicalVolume,				 RunPriorFile, RunSubtests,				 DiagDiskRunCmdFileImpl, RunningUserCmdFile], DiagRDSurfaceVerify	USING	[DisplaySoftErrors, InSurfaceVerify,				 VerifySurface], DiagRDTestCmdArrays	USING	[DiagRDTestCmdArraysImpl], DiagDiskTestControl	USING	[DiagDiskTestControlImpl, SetUpTestControl,				 TCZipControl], DiagRDTestRec		USING	[DiagRDTestRecImpl], OfflineDiagInterface	USING	[AMenuOfSelections, ARow, PutData,				 FixedPositionDisplayRecord, AbortCurrentTest,				 HitAnyKeyToContinue,				 GetAFixedPositionDisplayRecord, GetAHelpText,				 GetAMenuOfSelections, GetANumber, GetARow,				 GetASelectionArray, GetATestItem,				 GetATestItemsForThisNode, GetSpace,				 HelpText, ClientPackage,				 OfflineDiagnosticProc,				 PutTestParameters, PutMessage,  				 ResultType, Selections, TestItem,				 TestItemsForThisNode, userType], DiskUtilityMiscDove	USING [ EnterBadPagesIntoBadPageTable, 			       EnterNewDiskErrorMap, InitStarted,			       ManufDskCkOut, HeadRetraction, 			       PrintBadPageTable, RigidDiskDiag,			       -- StartInit,-- virginDisk], DiskUtilityMiscImplDove, -- ***** restored 28-Jul-87  9:27:09 PhysicalVolume		USING	[AssertNotAPilotVolume, FinishWithNonPilotVolume, Error,				 Handle, Offline], Runtime		USING 	[StartFault], String			USING	[AppendLongDecimal, AppendDecimal, AppendString], DiagRDTests		USING	[];   DiagRDTestsImpl: PROGRAM     IMPORTS	DiagRDBasicTest,	DiagDiskCmdDrive,	DiagRDCmdDes,	DiagRDCmds,	DiagRDDisplay,	DiagRDErrorCheck,	DiagRDExerciser,	DiagRDLog,	DiagDiskMkIOCmd,	DiagDiskMkMisc,	DiagDiskMkSubtest,	DiagDiskMkTime,	DiagDiskTime,	DiagRDPVStuff,	DiagDiskRunCmdFile,	DiagRDSurfaceVerify,	DiagRDTestCmdArrays,	DiagDiskTestControl,	DiagRDTestRec,	DiskUtilityMiscDove,	OfflineDiagInterface,	PhysicalVolume,	Runtime,	String    EXPORTS	DiagRDTests,	OfflineDiagInterface  =BEGIN     OPEN	DiagDiskMkMisc,	DiagDiskMkTime,	DiskUtilityMiscDove,	Odi: OfflineDiagInterface;  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --variables totalPassCnt:		CARDINAL¬ 0; getTotalPass:		BOOLEAN ¬ FALSE; -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --public variables PassCount:		PUBLIC CARDINAL¬ 0; ReadDataBuffPtr:	PUBLIC LONG POINTER TO ARRAY OF WORD; ReadDataBuffPtr2:	PUBLIC LONG POINTER TO ARRAY OF WORD; ReadLabelBuffPtr:	PUBLIC LONG POINTER TO ARRAY OF WORD; Switch:		PUBLIC ARRAY [0..127] OF BOOLEAN¬ ALL [FALSE]; WriteDataBuffPtr:	PUBLIC LONG POINTER TO ARRAY OF WORD; WriteLabelBuffPtr:	PUBLIC LONG POINTER TO ARRAY OF WORD;  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- call field service -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    CallService: PUBLIC PROCEDURE [fruCode: CARDINAL] =BEGIN str:		STRING¬ [110];  Odi.PutMessage[message: mkMisc[faileD1],  		beep: TRUE,		startWithNewLine: TRUE,		numOfBlankLines: 2,		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[faileD2],		startWithNewLine: TRUE,		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[faileD3],		startWithNewLine: TRUE,		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[faileD4],		startWithNewLine: TRUE,		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[faileD5],		startWithNewLine: TRUE,		blankSpaces: 10]; str.length¬ 0; String.AppendString[str, mkMisc[failureCode]]; String.AppendDecimal [str, fruCode]; Odi.PutData[data: str, startWithNewLine: TRUE];  IF Odi.userType=Programmer OR Odi.userType=Manufacturing THEN { str.length¬ 0;   String.AppendString[str, mkMisc[errCode]];   String.AppendDecimal [str, DiagRDErrorCheck.ErrorCode];   Odi.PutData[data: str, startWithNewLine: TRUE]; }; Odi.HitAnyKeyToContinue[];       SIGNAL Odi.AbortCurrentTest; END; --CallService -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to display the test parameters -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    DisplayTestParameters: PUBLIC PROCEDURE [		getPassCount:		BOOLEAN¬ FALSE,		secondsPerPass:		LONG CARDINAL,		putPassesLeftToRun:	BOOLEAN¬ FALSE,		putTotalPassCount:	BOOLEAN¬ FALSE,		putTimePerPass:		BOOLEAN¬ FALSE,		putRunTimeLeft:		BOOLEAN¬ FALSE]  =BEGIN testParmRecordPtr:	LONG POINTER TO Odi.FixedPositionDisplayRecord; paramRow0:		LONG POINTER TO Odi.ARow; paramRow1:		LONG POINTER TO Odi.ARow; str:			STRING¬ [80]; timeStr1:		STRING¬ [32]; timeStr2:		STRING¬ [32]; entryPtr:		CARDINAL¬ 0;   -- STC: to get a default of 5 passes and display the parameters IF (DiskUtilityMiscDove.ManufDskCkOut AND ~getTotalPass) THEN    {totalPassCnt ¬ PassCount; getTotalPass ¬ TRUE;}; IF (DiskUtilityMiscDove.ManufDskCkOut AND getTotalPass AND (PassCount = 1)) THEN    {getTotalPass ¬ FALSE};  IF (DiskUtilityMiscDove.ManufDskCkOut AND ~putTotalPassCount) THEN    {getTotalPass ¬ FALSE; RETURN};  --set up pass count IF Odi.userType# NormalUser   AND Odi.userType# Administrator   AND getPassCount THEN     GetPassCount[secondsPerPass]; IF Odi.userType= NormalUser   OR Odi.userType= Administrator   AND getPassCount THEN totalPassCnt¬ PassCount¬ 1;  --one pass only: put pass count only IF totalPassCnt= 1   AND NOT putTimePerPass THEN { testParmRecordPtr¬ Odi.GetAFixedPositionDisplayRecord [1];   testParmRecordPtr.rows[0] ¬ paramRow0 ¬ Odi.GetARow [1];   paramRow0.rowItems[0].namePosition¬ 0;   paramRow0.rowItems[0].name ¬ mkMisc[passesToRun];   paramRow0.rowItems[0].stringValue ¬ NIL;   paramRow0.rowItems[0].valuePosition ¬ 2+ mkMisc[passesToRun].length;   paramRow0.rowItems[0].value ¬ totalPassCnt; }; --one pass only: put pass count and runtime IF totalPassCnt= 1 AND putTimePerPass THEN { testParmRecordPtr¬ Odi.GetAFixedPositionDisplayRecord [2];   testParmRecordPtr.rows[0] ¬ paramRow0¬ Odi.GetARow [1];   testParmRecordPtr.rows[1] ¬ paramRow1¬ Odi.GetARow [1];   GetTime [seconds: secondsPerPass*PassCount, 	    timeString: timeStr1];   paramRow0.rowItems[0].namePosition¬ 0;   paramRow0.rowItems[0].name ¬ mkMisc[passesToRun];   paramRow0.rowItems[0].stringValue ¬ NIL;   paramRow0.rowItems[0].valuePosition ¬ 2+ mkMisc[passesToRun].length;   paramRow0.rowItems[0].value ¬ totalPassCnt;   paramRow1.rowItems[0].namePosition¬ 0;   paramRow1.rowItems[0].name ¬ mkMisc[runTime];   paramRow1.rowItems[0].stringValue ¬ timeStr1;   paramRow1.rowItems[0].valuePosition ¬ 0;   paramRow1.rowItems[0].value ¬ 0; }; --more than one pass: put pass count only IF totalPassCnt> 1 AND NOT putTimePerPass THEN { testParmRecordPtr¬ Odi.GetAFixedPositionDisplayRecord [1];   testParmRecordPtr.rows[0] ¬ paramRow0¬ Odi.GetARow [2];   paramRow0.rowItems[0].namePosition¬ 0;   paramRow0.rowItems[0].name ¬ mkMisc[totalPassCnt];   paramRow0.rowItems[0].stringValue ¬ NIL;   paramRow0.rowItems[0].valuePosition ¬ 2+ mkMisc[totalPassCnt].length;   paramRow0.rowItems[0].value ¬ totalPassCnt;   paramRow0.rowItems[1].namePosition ¬ 60;   paramRow0.rowItems[1].name ¬ mkMisc[remainingPassCnt];   paramRow0.rowItems[1].stringValue ¬ NIL;   paramRow0.rowItems[1].valuePosition ¬ 62+ mkMisc[remainingPassCnt].length;   paramRow0.rowItems[1].value ¬ PassCount; }; --more than one pass: put pass count and runtime IF totalPassCnt> 1 AND putTimePerPass THEN { testParmRecordPtr¬ Odi.GetAFixedPositionDisplayRecord [2];   testParmRecordPtr.rows[0] ¬ paramRow0¬ Odi.GetARow [2];   testParmRecordPtr.rows[1] ¬ paramRow1¬ Odi.GetARow [2];   paramRow0.rowItems[0].namePosition¬ 0;   paramRow0.rowItems[0].name ¬ mkMisc[totalPassCnt];   paramRow0.rowItems[0].stringValue ¬ NIL;   paramRow0.rowItems[0].valuePosition ¬ 2+ mkMisc[totalPassCnt].length;   paramRow0.rowItems[0].value ¬ totalPassCnt;   paramRow0.rowItems[1].namePosition ¬ 60;   paramRow0.rowItems[1].name ¬ mkMisc[remainingPassCnt];   paramRow0.rowItems[1].stringValue ¬ NIL;   paramRow0.rowItems[1].valuePosition ¬ 62+ mkMisc[remainingPassCnt].length;   paramRow0.rowItems[1].value ¬ PassCount;    GetTime [seconds: secondsPerPass*totalPassCnt, 	    timeString: timeStr1];   paramRow1.rowItems[0].namePosition¬ 0;   paramRow1.rowItems[0].name ¬ mkMisc[totalRunTime];   paramRow1.rowItems[0].stringValue ¬ timeStr1;   paramRow1.rowItems[0].valuePosition ¬ 0;   paramRow1.rowItems[0].value ¬ 0;   GetTime [seconds: secondsPerPass*PassCount, 	    timeString: timeStr2];   paramRow1.rowItems[1].namePosition ¬ 60;   paramRow1.rowItems[1].name ¬ mkMisc[remainingRunTime];   paramRow1.rowItems[1].stringValue ¬ timeStr2;   paramRow1.rowItems[1].valuePosition ¬ 0;   paramRow1.rowItems[1].value ¬ 0; }; Odi.PutTestParameters [parameters: testParmRecordPtr, 			upDateOnly: FALSE];   END; --DisplayTestParameters -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to get the pass count from the user -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    GetPassCount: PUBLIC PROCEDURE [		secondsPerPass: LONG CARDINAL¬ 0 --0=unknown--]  =BEGIN helpPtr:		LONG POINTER TO Odi.HelpText; queststr:		STRING¬ [80]; str:			STRING¬ [24];   -- add the time to pass count explanation  IF secondsPerPass> 0 THEN  { queststr.length¬ 0;    String.AppendString [queststr, mkMisc[passeRunTime]];    GetTime [secondsPerPass, str];    IF secondsPerPass# 0 THEN      String.AppendString [queststr, str] ELSE        String.AppendString [queststr, mkMisc[unknown]];  };     helpPtr¬ Odi.GetAHelpText[numberOfLines: 2]; helpPtr.textBody [0] ¬ queststr; helpPtr.textBody [1] ¬ mkMisc[supportedPassCnt];     totalPassCnt¬ PassCount¬ Odi.GetANumber [    prompt: mkMisc[passesToRun],    lowLimit: 1,    upperLimit: 10000,    help: helpPtr].number;     END; --GetPassCount -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- returns the time in hours, minutes and seconds -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		 GetTime: PROCEDURE [	seconds: LONG CARDINAL,	timeString: LONG STRING --string to be 32 chararacters in length--] = BEGIN count: LONG CARDINAL;		 timeString.length¬ 0; IF seconds>= 3600 THEN {    count¬ seconds/3600;    seconds¬ seconds MOD 3600;    String.AppendLongDecimal [timeString, count];    String.AppendString [timeString, " "L];    String.AppendString [timeString, mkMisc[hrs]];    String.AppendString [timeString, " "L]}; IF seconds>= 60 THEN {    count¬ seconds/60;    seconds¬ seconds MOD 60;    String.AppendLongDecimal [timeString, count];    String.AppendString [timeString, " "L];    String.AppendString [timeString, mkMisc[mins]];    String.AppendString [timeString, " "L]}; IF seconds> 0 THEN {    String.AppendLongDecimal [timeString, seconds];    String.AppendString [timeString, " "L];    String.AppendString [timeString, mkMisc[secs]]}; END; --GetTime -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to initialyze the required space and Handles -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    InitializeTestStuff: PUBLIC PROCEDURE = BEGIN count: CARDINAL¬ 0; volumehandle:	PhysicalVolume.Handle; DiagDiskCmdDrive.CmdDescriptionArray	¬DiagRDCmdDes.CmdDescriptArray; DiagRDLog.LogError			¬ FALSE; DiagRDLog.LogStep			¬ FALSE; DiagRDLog.Trace			¬ FALSE; DiagDiskCmdDrive.Unit			¬ 0; DiagDiskCmdDrive.Cylinder		¬ 0; DiagDiskCmdDrive.Head			¬ 0; DiagDiskCmdDrive.Sector		¬ 0; DiagDiskCmdDrive.SectorCount		¬ 1; DiagRDExerciser.InExerciser		¬ FALSE; DiagRDSurfaceVerify.InSurfaceVerify	¬ FALSE; DiagDiskCmdDrive.Continue		¬ FALSE; DiagDiskRunCmdFile.RunningUserCmdFile	¬ FALSE; DiskUtilityMiscDove.ManufDskCkOut ¬ FALSE; DiagRDBasicTest.InRunUnit ¬ FALSE;  DiagDiskTestControl.SetUpTestControl [controlData: DiagDiskTestControl.TCZipControl]; -- clear Volume IDs IF DiagRDPVStuff.GoodVolumeID THEN   {PhysicalVolume.Offline [pvID: DiagRDPVStuff.VolumeID    ! ANY=> { CONTINUE }];    DiagRDPVStuff.GoodVolumeID¬ FALSE   }; IF NOT DiagRDCmds.NotFound AND NOT DiagRDCmds.NotReady THEN   {volumehandle¬ DiagRDPVStuff.GetVolumeHandle [];    PhysicalVolume.AssertNotAPilotVolume[instance: volumehandle     ! PhysicalVolume.Error => IF error= alreadyAsserted THEN CONTINUE];   };  DiagRDLog.ClearLog[]; DiagRDLog.ClearTrace[]; DiagRDDisplay.InitDisplay[]; DiagRDErrorCheck.InitErrorCheck[]; -- DiskUtilityMiscDove.virginDisk ¬ NOT (DiagRDPVStuff.IsDiskFormatted[]); END; --InitializeTestStuff     -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to initialyze the required space and Handles -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     InitializeSpace: PROCEDURE = BEGIN ptr: LONG POINTER TO ARRAY OF WORD;  --			space size in pages -- trace size			 3 -- errlog size			 8 was 4 -- templog			 1 -- read data buffers		 2 -- write data buffers		 2 -- read/write lable buffers	 1--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ total:		CARDINAL¬	17; ptr¬ Odi.GetSpace[pageCount: total];  --trace space DiagRDLog.TracePtr¬ ptr; DiagRDLog.TraceLength ¬ 3 * 256; ptr¬ ptr + DiagRDLog.TraceLength;  --error log space DiagRDLog.ErrLogPtr¬ ptr; DiagRDLog.ErrLogLength ¬ 8 * 256; -- was 4 * 256 ptr¬ ptr + DiagRDLog.ErrLogLength;  --temporary log space DiagRDLog. StepLogPtr¬ ptr; ptr¬ ptr + 256;  --read data space 2 pages ReadDataBuffPtr ¬ ptr; ptr ¬ ptr + 512; --write data space 2 pages WriteDataBuffPtr ¬ ptr; ptr ¬ ptr + 512;  --label space WriteLabelBuffPtr ¬ ptr; ReadLabelBuffPtr ¬ ptr + 10;   DiagDiskCmdDrive.ParamArrayL1[0].WriteDataPtr  ¬ WriteDataBuffPtr; DiagDiskCmdDrive.ParamArrayL1[1].WriteDataPtr  ¬ WriteDataBuffPtr; DiagDiskCmdDrive.ParamArrayL1[2].WriteDataPtr  ¬ WriteDataBuffPtr; DiagDiskCmdDrive.ParamArrayL1[3].WriteDataPtr  ¬ WriteDataBuffPtr; DiagDiskCmdDrive.ParamArrayL1[0].WriteLabelPtr ¬ WriteLabelBuffPtr; DiagDiskCmdDrive.ParamArrayL1[1].WriteLabelPtr ¬ WriteLabelBuffPtr; DiagDiskCmdDrive.ParamArrayL1[2].WriteLabelPtr ¬ WriteLabelBuffPtr; DiagDiskCmdDrive.ParamArrayL1[3].WriteLabelPtr ¬ WriteLabelBuffPtr;   END; --InitializeSpace  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to display good completion to the user and proceed -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    PutGoodCompletion: PUBLIC PROCEDURE []  =BEGIN Odi.PutMessage[message: mkMisc[passeD1],		clearMessageAreaFirst: TRUE,		numOfBlankLines: 1,		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[passeD2],		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[passeD3],		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[passeD4],		blankSpaces: 10]; Odi.PutMessage[message: mkMisc[passeD5],		blankSpaces: 10]; Odi.HitAnyKeyToContinue[];   END; --PutGoodCompletion  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- returns the test number to be run  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        RunHardDiscTests:	PUBLIC Odi.ClientPackage= BEGIN   menuPtr:		LONG POINTER TO Odi.AMenuOfSelections;--Test selection menuPtr1:		LONG POINTER TO Odi.AMenuOfSelections;--Display Options menuPtr2:		LONG POINTER TO Odi.AMenuOfSelections;--Command File menuPtr3:		LONG POINTER TO Odi.AMenuOfSelections;--Enter Bad Pages menuEntriesPtr:	LONG POINTER TO Odi.TestItemsForThisNode; menuEntryPtr:		LONG POINTER TO Odi.TestItem; userTestPtr:		LONG POINTER TO Odi.Selections; adminTestPtr:		LONG POINTER TO Odi.Selections; serviceTestPtr:	LONG POINTER TO Odi.Selections; manufacturingTestPtr:	LONG POINTER TO Odi.Selections; programerTestPtr:	LONG POINTER TO Odi.Selections; volumehandle:		PhysicalVolume.Handle ¬ DiagRDPVStuff.GetVolumeHandle[];   DiskUtilityMiscDove.RigidDiskDiag ¬ TRUE; DiskUtilityMiscDove.InitStarted ¬ FALSE; PhysicalVolume.FinishWithNonPilotVolume [instance: volumehandle    ! ANY=> { CONTINUE }]; DiagDiskTime.SetRealTimeClock [displayMsg: TRUE          ! DiagDiskTime.RealTimeClockFailure=>	    { Odi.PutData[data: mkTime[rTCFailure], clearHeadingAndData: TRUE];               CallService [fruCode: 8];	    }]; InitializeSpace[]; InitializeTestStuff[];-- check if virginDisk-- DiskUtilityMiscDove.virginDisk ¬ NOT (DiagRDPVStuff.IsDiskFormatted[]); -- DiagRDBasicTest.CheckDiagCylinder[]; -- ~~~~~~~~~~~~~~~~~Display Options Menu  menuEntriesPtr ¬ Odi.GetATestItemsForThisNode [5];    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispErrLog];  menuEntryPtr.test			¬ DiagRDLog.DisplayErrorLog;  menuEntryPtr.itemExplanation		¬ mkMisc[dispErrLogExpl];  menuEntriesPtr.nodeItems [0]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispTrace];  menuEntryPtr.test			¬ DiagRDLog.DisplayTrace;  menuEntryPtr.itemExplanation		¬ mkMisc[dispTraceExpl];  menuEntriesPtr.nodeItems [1]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispSoftErr];  menuEntryPtr.test			¬ DiagRDSurfaceVerify.DisplaySoftErrors;  menuEntryPtr.itemExplanation		¬ mkMisc[dispSoftErrExpl];  menuEntriesPtr.nodeItems [2]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispDiskParam];  menuEntryPtr.test			¬ DiagRDDisplay.DiskParameters;  menuEntryPtr.itemExplanation		¬ mkMisc[dispDiskParamExpl];  menuEntriesPtr.nodeItems [3]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispBadPageTbl];  menuEntryPtr.test			¬ DiagRDDisplay.BadPages;  menuEntryPtr.itemExplanation		¬ mkMisc[dispBadPageTblExpl];  menuEntriesPtr.nodeItems [4]		¬ menuEntryPtr;    userTestPtr ¬ Odi.GetASelectionArray [2];  userTestPtr.selections[0]		¬ 0;  userTestPtr.selections[1]		¬ 2;    adminTestPtr ¬ Odi.GetASelectionArray [3];  adminTestPtr.selections[0]		¬ 0;  adminTestPtr.selections[1]		¬ 1;  adminTestPtr.selections[2]		¬ 2;  serviceTestPtr ¬ Odi.GetASelectionArray [4];  serviceTestPtr.selections[0]		¬ 0;  serviceTestPtr.selections[1]		¬ 1;  serviceTestPtr.selections[2]		¬ 2;  serviceTestPtr.selections[3]		¬ 3;  manufacturingTestPtr ¬ Odi.GetASelectionArray [5];  manufacturingTestPtr.selections[0]		¬ 0;  manufacturingTestPtr.selections[1]		¬ 1;  manufacturingTestPtr.selections[2]		¬ 2;  manufacturingTestPtr.selections[3]		¬ 3;  manufacturingTestPtr.selections[4]		¬ 4;  programerTestPtr ¬ Odi.GetASelectionArray [5];  programerTestPtr.selections[0]	¬ 1;  programerTestPtr.selections[1]	¬ 0;  programerTestPtr.selections[2]	¬ 2;  programerTestPtr.selections[3]	¬ 3;  programerTestPtr.selections[4]	¬ 4;  menuPtr1 ¬ Odi.GetAMenuOfSelections [];  menuPtr1.menuTitle			¬ mkMisc[dispOptions];  menuPtr1.userSelections		¬ userTestPtr;  menuPtr1.adminSelections		¬ adminTestPtr;  menuPtr1.seSelections			¬ serviceTestPtr;  menuPtr1.manufacturingSelections	¬ manufacturingTestPtr;  menuPtr1.programmerSelections		¬ programerTestPtr;  menuPtr1.testItemsForThisNode		¬ menuEntriesPtr;-- ~~~~~~~~~~~~~~~~~Command File Menu  menuEntriesPtr ¬ Odi.GetATestItemsForThisNode [4];    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[buildCmdFile];  menuEntryPtr.test			¬ DiagDiskRunCmdFile.BuildNewFile;  menuEntryPtr.itemExplanation		¬ mkMisc[buildCmdFileExpl];  menuEntriesPtr.nodeItems [0]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[rerunCmdFile];  menuEntryPtr.test			¬ DiagDiskRunCmdFile.RunPriorFile;  menuEntryPtr.itemExplanation		¬ mkMisc[rerunCmdFileExpl];  menuEntriesPtr.nodeItems [1]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[subtestOptions];  menuEntryPtr.test			¬ DiagDiskRunCmdFile.RunSubtests;  menuEntryPtr.itemExplanation		¬ mkMisc[runSubtestExpl];  menuEntriesPtr.nodeItems [2]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[createPV];  menuEntryPtr.test			¬ DiagDiskRunCmdFile.CreatePhysicalVolume;  menuEntryPtr.itemExplanation		¬ mkMisc[createPVExpl];  menuEntriesPtr.nodeItems [3]		¬ menuEntryPtr;  manufacturingTestPtr ¬ Odi.GetASelectionArray [3];  manufacturingTestPtr.selections[0]		¬ 0;  manufacturingTestPtr.selections[1]		¬ 1;  manufacturingTestPtr.selections[2]		¬ 2;  programerTestPtr ¬ Odi.GetASelectionArray [4];  programerTestPtr.selections[0]	¬ 0;  programerTestPtr.selections[1]	¬ 1;  programerTestPtr.selections[2]	¬ 2;  programerTestPtr.selections[3]	¬ 3;  menuPtr2 ¬ Odi.GetAMenuOfSelections [];  menuPtr2.menuTitle			¬ mkMisc[cmdFileOpt];  menuPtr2.userSelections		¬ NIL;  menuPtr2.adminSelections		¬ NIL;  menuPtr2.seSelections			¬ NIL;  menuPtr2.manufacturingSelections	¬ manufacturingTestPtr;  menuPtr2.programmerSelections		¬ programerTestPtr;  menuPtr2.testItemsForThisNode		¬ menuEntriesPtr;-- ~~~~~~~~~~~~~~~~~Enter Bad Pages Menu  menuEntriesPtr ¬ Odi.GetATestItemsForThisNode [2];    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[enterBPTPage];  menuEntryPtr.test	¬ DiskUtilityMiscDove.EnterBadPagesIntoBadPageTable;  menuEntryPtr.itemExplanation		¬ mkMisc[enterBPTPageExp];  menuEntriesPtr.nodeItems [0]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[enterManufEM];  menuEntryPtr.test		¬ DiskUtilityMiscDove.EnterNewDiskErrorMap;  menuEntryPtr.itemExplanation		¬ mkMisc[enterManufEMExp];  menuEntriesPtr.nodeItems [1]		¬ menuEntryPtr;  manufacturingTestPtr ¬ Odi.GetASelectionArray [2];  manufacturingTestPtr.selections[0]		¬ 0;  manufacturingTestPtr.selections[1]		¬ 1;  programerTestPtr ¬ Odi.GetASelectionArray [2];  programerTestPtr.selections[0]	¬ 0;  programerTestPtr.selections[1]	¬ 1;  menuPtr3 ¬ Odi.GetAMenuOfSelections [];  menuPtr3.menuTitle			¬ mkMisc[enterBadBage];  menuPtr3.userSelections		¬ NIL;  menuPtr3.adminSelections		¬ NIL;  menuPtr3.seSelections			¬ NIL;  menuPtr3.manufacturingSelections	¬ manufacturingTestPtr;  menuPtr3.programmerSelections		¬ programerTestPtr;  menuPtr3.testItemsForThisNode		¬ menuEntriesPtr;-- ~~~~~~~~~~~~~~~~~Main test selection menu  menuEntriesPtr ¬ Odi.GetATestItemsForThisNode [12];    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[confidenceTst];  menuEntryPtr.test			¬ DiagRDBasicTest.ConfidenceTest;  menuEntryPtr.itemExplanation		¬ mkMisc[confidenceTstExpl];  menuEntriesPtr.nodeItems [0]		¬ menuEntryPtr;    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[dispOptions];  menuEntryPtr.test			¬ NIL;  menuEntryPtr.itemExplanation		¬ mkMisc[dispOptionsExpl];  menuEntryPtr.subMenu			¬ menuPtr1;  menuEntriesPtr.nodeItems [1]		¬ menuEntryPtr;    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[verifyDiskSurf];  menuEntryPtr.test			¬ DiagRDSurfaceVerify.VerifySurface;  menuEntryPtr.itemExplanation		¬ mkMisc[verifyDiskSurfExpl];  menuEntriesPtr.nodeItems [2]		¬ menuEntryPtr;    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[newDiskCheck];  menuEntryPtr.test			¬ DiagRDExerciser.RunNewDiskCheck;  menuEntryPtr.itemExplanation		¬ mkMisc[newDiskCheckExpl];  menuEntriesPtr.nodeItems [3]		¬ menuEntryPtr;    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[manufDiskCheck];  menuEntryPtr.test			¬ DiagRDExerciser.RunMfDiskCheck;  menuEntryPtr.itemExplanation		¬ mkMisc[manufDiskCheckExpl];  menuEntriesPtr.nodeItems [4]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[cmdFileOpt];  menuEntryPtr.test			¬ NIL;  menuEntryPtr.itemExplanation		¬ mkMisc[cmdFileOptExpl];  menuEntryPtr.subMenu			¬ menuPtr2;  menuEntriesPtr.nodeItems [5]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[switchSettings];  menuEntryPtr.test			¬ SetSwitches;  menuEntryPtr.itemExplanation		¬ NIL;  menuEntriesPtr.nodeItems [6]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[printBPT];  menuEntryPtr.test		¬ DiskUtilityMiscDove.PrintBadPageTable;  menuEntryPtr.itemExplanation		¬ NIL;  menuEntriesPtr.nodeItems [7]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[headRetract];  menuEntryPtr.test			¬ DiskUtilityMiscDove.HeadRetraction;  menuEntryPtr.itemExplanation		¬ NIL;  menuEntriesPtr.nodeItems [8]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[testACylinder];  menuEntryPtr.test			¬ DiagRDExerciser.TestACylinder;  menuEntryPtr.itemExplanation		¬ NIL;  menuEntriesPtr.nodeItems [9]		¬ menuEntryPtr;  menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[enterBadBage];  menuEntryPtr.test	      		¬ NIL;  menuEntryPtr.itemExplanation		¬ mkMisc[enterBadBageExp];  menuEntryPtr.subMenu			¬ menuPtr3;  menuEntriesPtr.nodeItems [10]		¬ menuEntryPtr;    menuEntryPtr ¬ Odi.GetATestItem [];  menuEntryPtr.itemName			¬ mkMisc[testAPage];  menuEntryPtr.test	      		¬ DiagRDExerciser.TestAPage;  menuEntryPtr.itemExplanation		¬ NIL;  menuEntriesPtr.nodeItems [11]		¬ menuEntryPtr;    userTestPtr ¬ Odi.GetASelectionArray [2];  userTestPtr.selections[0]	¬ 0;  userTestPtr.selections[1]	¬ 1;  adminTestPtr ¬ Odi.GetASelectionArray [3];  adminTestPtr.selections[0]	¬ 0;  adminTestPtr.selections[1]	¬ 2;  adminTestPtr.selections[2]	¬ 1;  serviceTestPtr ¬ Odi.GetASelectionArray [4];  serviceTestPtr.selections[0]	¬ 0;  serviceTestPtr.selections[1]	¬ 1;  serviceTestPtr.selections[2]	¬ 2;  serviceTestPtr.selections[3]	¬ 3;  manufacturingTestPtr ¬ Odi.GetASelectionArray [10];  manufacturingTestPtr.selections[0]	¬ 4;  manufacturingTestPtr.selections[1]	¬ 1;  manufacturingTestPtr.selections[2]	¬ 11;  manufacturingTestPtr.selections[3]	¬ 2;  manufacturingTestPtr.selections[4]	¬ 5;  manufacturingTestPtr.selections[5]	¬ 0;  manufacturingTestPtr.selections[6]	¬ 7;  manufacturingTestPtr.selections[7]	¬ 8;  manufacturingTestPtr.selections[8]	¬ 9;  manufacturingTestPtr.selections[9]	¬ 10;  programerTestPtr ¬ Odi.GetASelectionArray [11];  programerTestPtr.selections[0]¬ 5;  programerTestPtr.selections[1]¬ 1;  programerTestPtr.selections[2]¬ 0;  programerTestPtr.selections[3]¬ 2;  programerTestPtr.selections[4]¬ 3;  programerTestPtr.selections[5]¬ 4;  programerTestPtr.selections[6]¬ 7;  programerTestPtr.selections[7]¬ 8;  programerTestPtr.selections[8]¬ 9;  programerTestPtr.selections[9]¬ 10;  programerTestPtr.selections[10]¬ 6;  menuPtr ¬ Odi.GetAMenuOfSelections [];  menuPtr.menuTitle			¬ mkMisc[testSelection];  menuPtr.userSelections		¬ userTestPtr;  menuPtr.adminSelections		¬ adminTestPtr;  menuPtr.seSelections			¬ serviceTestPtr;  menuPtr.manufacturingSelections	¬ manufacturingTestPtr;  menuPtr.programmerSelections		¬ programerTestPtr;  menuPtr.testItemsForThisNode		¬ menuEntriesPtr;-- check if virginDisk  DiskUtilityMiscDove.virginDisk ¬ NOT (DiagRDPVStuff.IsDiskFormatted[]);   DiagRDBasicTest.CheckDiagCylinder[];  RETURN [menuPtr];  END; --RunHardDiskTests    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- to initialyze the required space and Handles -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    SetSwitches:  PROCEDURE RETURNS [result: OfflineDiagInterface.ResultType] = BEGIN num:		CARDINAL¬ 1; str: STRING¬ [8];  Switch¬ ALL[FALSE]; Odi.PutMessage[message: "Switches set: ",		clearMessageAreaFirst: TRUE]; UNTIL num= 0 DO   num¬ Odi.GetANumber[prompt: "Switch 1-127, 0 exits: ",		       lowLimit: 0,		       upperLimit: 128].number;   Switch[num]¬ TRUE;   str.length¬ 0;   String.AppendDecimal[str, num];   String.AppendString[str, ", "];   Odi.PutMessage[message: str,		  startWithNewLine: FALSE]; ENDLOOP;  result¬ none; END; --SetSwitches  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- Main line code  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START DiagDiskCmdDrive.DiagDiskCmdDriveImpl; START DiagRDCmds.DiagRDCmdsImpl; START DiagRDErrorCheck.DiagRDErrorCheckImpl;-- START DiagDiskMkIOCmd.DiagDiskMkIOCmdImpl;-- START DiagDiskMkMisc.DiagDiskMkMiscImpl;-- START DiagDiskMkSubtest.DiagDiskMkSubtestImpl;  DiagDiskMkIOCmd.InitializeDiskIOMsgKeys[]; DiagDiskMkMisc.InitializeDiskMiscMsgKeys[]; DiagDiskMkSubtest.InitializeDiskDiagMsgKeys[]; START DiagDiskMkTime.DiagDiskMkTimeImpl[! Runtime.StartFault => CONTINUE]; START DiagDiskRunCmdFile.DiagDiskRunCmdFileImpl; START DiagRDTestCmdArrays.DiagRDTestCmdArraysImpl; START DiagDiskTestControl.DiagDiskTestControlImpl; START DiagRDTestRec.DiagRDTestRecImpl; START DiagRDCmdDes.DiagRDCmdDesImpl;-- removed the following, will do it in RunHardDiscTests, anyway **** restore InitializeTestStuff[];  END...-- of DiagRDTestsImpl.mesa	   LOG26-Sep-85 13:50:13	MXT	Added DiagRDBasicTest.CheckDiagCylinder. 1-Nov-85  9:36:55	MXT	Added Catch phrase for Runtime.StartFault in START DiagDiskMkTimeImpl.13-Dec-85 13:43:51	MXT	Added display option for user level menu.24-Feb-87 17:31:31 by STC, Change ManufCkOut, add BPT functions and TestACyl 3-Mar-87 11:22:37 by STC, all msgkeys' in mkMisc 5-Mar-87 14:41:22 by STC, added RigidDiskDiag and InitStarted21-Mar-87 21:20:48 by STC, change msg systems24-Mar-87 21:20:34 by STC, add initialize ManufDskCkOut24-Mar-87 21:20:34 by STC, modified DisplayTestParameters with default 5 passes28-Mar-87 15:51:58 by STC, add EnterBadPagesIntoBadPageTable10-Apr-87  8:49:48 by STC, check virginDisk in the beginning30-Jun-87 15:49:55 by STC, TotalPassCnt in DisplayTestParameters, double IsFormat 6-Jul-87 14:30:59 by STC, removed InitializeTestStuff in StartUp 7-Jul-87  8:20:12 by STC, added HeadRetraction20-Jul-87 11:24:36 by STC, remove DiskUtilityMiscImplDove27-Aug-87 10:34:26 by STC, increase ErrorLog from 4 to 8 pages11-Sep-87  7:25:48 by STC, Init DiagRDBasicTest.InRunUnit18-Sep-87 15:56:12 by STC, add Formatter for Manufacture19-May-89 20:09:52 by TXM, add FinishWithNonPilotVolume before SetRealTimeClock