-- Copyright (C) 1982, 1983, 1985  by Xerox Corporation. All rights reserved. --Courier.mesa (last edited by: AOF on: 29-Jun-83 10:56:13)DIRECTORY  Environment USING [Block],  NetworkStream USING [ClassOfService],  Stream USING [Handle],  System USING [GreenwichMeanTime, NetworkAddress];Courier: DEFINITIONS =  BEGIN  SystemElement: TYPE = System.NetworkAddress;  Handle: TYPE = LONG POINTER TO READONLY Object;  Object: TYPE = RECORD [    remote: SystemElement,    programNumber: LONG CARDINAL, versionNumber: CARDINAL,    zone: UNCOUNTED ZONE, sH: Stream.Handle,    classOfService: NetworkStream.ClassOfService];  --CALLER'S PROCEDURES AND ERRORS  --Bind the client to a system element and a remote program.  Create: PROCEDURE [    remote: SystemElement,    programNumber: LONG CARDINAL, versionNumber: CARDINAL,    zone: UNCOUNTED ZONE, classOfService: NetworkStream.ClassOfService]    RETURNS [cH: Handle];  --Delete the Courier connection and the binding.    Delete: PROCEDURE [cH: Handle];  Call: PROCEDURE [    cH: Handle, procedureNumber: CARDINAL,    arguments, results: Parameters ¬ nullParameters,    timeoutInSeconds: LONG CARDINAL ¬ LAST[LONG CARDINAL],    requestDataStream: BOOLEAN ¬ FALSE,    streamCheckoutProc: PROCEDURE [cH: Handle] ¬ NIL]    RETURNS [sH: Stream.Handle];  --Instructs Courier that the client is finished with the data stream.  --Required only after client of Courier.Call has requestDataStream = TRUE.    ReleaseDataStream: PROCEDURE [cH: Handle];  --Signal raised in calling process in response to server's SignalRemoteError.  --Error arguments are obtained by calling "arguments" parameter.  RemoteErrorSignalled: ERROR [errorNumber: CARDINAL, arguments: Arguments];  --Version mismatch error indicating what version the server supports  VersionMismatch: ERROR [versionRange: VersionRange];  VersionRange: TYPE = RECORD [low, high: CARDINAL];  --SERVER'S PROCEDURES AND ERRORS  --Register a service making it remotely callable  ExportRemoteProgram: PROCEDURE [    programNumber: LONG CARDINAL, versionRange: VersionRange,    dispatcher: Dispatcher, serviceName: LONG STRING ¬ NIL,    zone: UNCOUNTED ZONE, classOfService: NetworkStream.ClassOfService];  --Undo the effects of ExportRemoteProgram.  UnexportRemoteProgram: PROCEDURE [    programNumber: LONG CARDINAL, versionRange: VersionRange];  --Server client implemented routine that is called each time a remote call  --is received by Courier.   Dispatcher: TYPE = PROCEDURE [    cH: Handle, procedureNumber: CARDINAL,    arguments: Arguments, results: Results];  --Signal generated by implementer of a remote procedure, i.e. the dispatcher.  --Translated to RemoteErrorSignalled in the calling process.  SignalRemoteError: ERROR [    errorNumber: CARDINAL, arguments: Parameters ¬ nullParameters];    --May be raised by client when malformed arguments are noticed.  --Translated to Courier.Error[invalidArguments] by Couier.  InvalidArguments: ERROR;  --Raised by the client dispatcher.  --Translated to Error[noSuchProcedureNumber] at caller.   NoSuchProcedureNumber: ERROR;  --PROCEDURES USED AT BOTH SIDES OF CONNECTION  --Free spaces allocated by Courier during deserialization.  Free: PROCEDURE [parameters: Parameters, zone: UNCOUNTED ZONE];  --procedures for (de)serialization of parameters  SerializeParameters: PROCEDURE [parameters: Parameters, sH: Stream.Handle];  DeserializeParameters: PROCEDURE [    parameters: Parameters, sH: Stream.Handle, zone: UNCOUNTED ZONE];  --ERROR COMMON TO BOTH SIDES OF CONNECTION  Error: ERROR [errorCode: ErrorCode];  ErrorCode: TYPE = {    transmissionMediumHardwareProblem, transmissionMediumUnavailable,    transmissionMediumNotReady, noAnswerOrBusy, noRouteToSystemElement,    transportTimeout, remoteSystemElementNotResponding, noCourierAtRemoteSite,    tooManyConnections, invalidMessage, noSuchProcedureNumber, returnTimedOut,    callerAborted, unknownErrorInRemoteProcedure, streamNotYours,    truncatedTransfer, parameterInconsistency, invalidArguments,    noSuchProgramNumber, protocolMismatch, duplicateProgramExport,    noSuchProgramExport, invalidHandle, noError};  --DEFINITION OF PARAMETERS AND DESCRIPTIONS  Parameters: TYPE = RECORD [location: LONG POINTER, description: Description];  nullParameters: Parameters = [NIL, NIL];  Arguments: TYPE = PROCEDURE [argumentsRecord: Parameters ¬ nullParameters];  Results: TYPE = PROCEDURE [    resultsRecord: Parameters ¬ nullParameters,    requestDataStream: BOOLEAN ¬ FALSE] RETURNS [sH: Stream.Handle];  Description: TYPE = PROCEDURE [notes: Notes];  Notes: TYPE = POINTER TO READONLY NotesObject;  NotesObject: TYPE = RECORD [    zone: UNCOUNTED ZONE,  --for allocating/deallocating storage    operation: {fetch, store, free},  --being performed by description routine    noteSize: NoteSize,  --defines size of parameter area    noteLongCardinal: NoteLongCardinal,    noteLongInteger: NoteLongInteger,    noteParameters: NoteParameters,    noteChoice: NoteChoice,  --variant record serialization    noteDeadSpace: NoteDeadSpace,  --consumes portion of parameter area    noteString: NoteString,  --notes Mesa LONG STRING (NB: NIL and length = 0)    noteSpace: NoteSpace,  --notes disjoint block of unspecified data    noteArrayDescriptor: NoteArrayDescriptor, --(NB: BASE = NIL or LENGTH = 0)    noteDisjointData: NoteDisjointData,  --(NB: NIL)    noteBlock: NoteBlock];  --building block for processing byte data  NoteSize: TYPE = PROCEDURE [size: CARDINAL] RETURNS [location: LONG POINTER];  NoteLongCardinal: TYPE = PROCEDURE [site: LONG POINTER TO LONG CARDINAL];  NoteLongInteger: TYPE = PROCEDURE [site: LONG POINTER TO LONG INTEGER];  NoteParameters: TYPE = PROCEDURE [    site: LONG POINTER, description: Description];  NoteChoice: TYPE = PROCEDURE [    site: LONG POINTER,  --to beginning of variant record    size: CARDINAL,  --length of undiscriminated record    variant: LONG DESCRIPTOR FOR ARRAY OF CARDINAL,  --discriminated lengths    tag: LONG POINTER ¬ NIL];  --address of variant tag (NIL => offset = 0)  NoteDeadSpace: TYPE = PROCEDURE [site: LONG POINTER, size: CARDINAL];  NoteString: TYPE = PROCEDURE [site: LONG POINTER TO LONG STRING];  NoteSpace: TYPE = PROCEDURE [site: LONG POINTER, size: CARDINAL];    NoteArrayDescriptor: TYPE = PROCEDURE [    site: LONG POINTER,  --to LONG DESCRIPTOR FOR ARRAY    elementSize: CARDINAL,  --of elements of array    upperBound: CARDINAL];  --maximum number of elements permitted  NoteDisjointData: TYPE = PROCEDURE [    site: LONG POINTER TO LONG POINTER, description: Description];  NoteBlock: TYPE = PROCEDURE [block: Environment.Block];  --UTILITIES AVAILABLE TO CLIENTS  --Local system element ([<local network>, <host number>, <Courier socket>]  LocalSystemElement: PROCEDURE RETURNS [SystemElement];  --Enumerate all exports on local system element   Exports: TYPE = ARRAY CARDINAL OF ExportItem;  ExportItem: TYPE = MACHINE DEPENDENT RECORD [    programNumber(0): LONG CARDINAL,    versionRange(2): VersionRange,    serviceName(4): LONG STRING,    exportTime(6): System.GreenwichMeanTime];  EnumerateExports: PROCEDURE RETURNS [enum: LONG DESCRIPTOR FOR Exports];  FreeEnumeration: PROCEDURE [enum: LONG DESCRIPTOR FOR Exports];  END. --of Courier.DEFINTIONS  --Modification Log:August 6, 1980  7:45 PM	By: Garlick  Action: Created21-Dec-81  3:32:44  By: AOF  Updates for Trinity.19-Jul-82 12:00:01  By: AOF  Changes for Bulk Data (OS 4). 4-Aug-82 14:27:47  By: AOF  Added ERROR InvalidArguments, CHOICE tag offset   and SetStreamTimeout for client streams. 5-Aug-82  9:43:56  By: AOF  Add time to export enumerations.28-Mar-83 10:05:29  By: AOF  Changes for Klamath.29-Jun-83 10:56:54  By: AOF  Added NoteBlock.