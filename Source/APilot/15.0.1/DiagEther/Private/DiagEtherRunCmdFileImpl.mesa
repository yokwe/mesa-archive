-- File: DiagEtherRunCmdFileImpl.mesa - last edit:-- MXT                 14-Oct-85 10:43:16-- Copyright (C) 1985 by Xerox Corporation. All rights reserved.DIRECTORY  DiagEtherBasicTest USING [EtherDriverNotResponding, TestNotAcceptable],  DiagEtherCmdDrive USING [ExecuteCmd],  DiagEtherDisplay USING [TempLog],  DiagEtherErrorCheck USING [ECStandard1, Error, PublicErrorCheckArray],  DiagEtherErrorMsgs USING [errors],  DiagEtherIOCmdMsgs USING [ioCmdMsgs],  DiagEtherLogAndTrace USING [logStep],  DiagEtherRunCmdFile,  DiagEtherGetCmdFile USING [commandArray, GetCommandFile],  DiagEtherTestControl USING [LoopOnError, ReturningAfterCommand, SetUpTestControl,    TCAll0s, TCRunCmdFile1, TCRunCmdFile2, TCRunCmdFile3],  OfflineDiagInterface USING [AbortCurrentTest, AnOptionLine, GetAHelpText, GetAnOption, GetAnOptionLine, GetAnOptionsRecord,     HelpText, HitAnyKeyToContinue, OfflineDiagnosticProc, OptionsRecord, PutMessage, PutTestParameters];  DiagEtherRunCmdFileImpl: PROGRAM   IMPORTS DiagEtherBasicTest, DiagEtherCmdDrive, DiagEtherErrorCheck, DiagEtherGetCmdFile,          DiagEtherErrorMsgs, DiagEtherDisplay, DiagEtherLogAndTrace, DiagEtherIOCmdMsgs, DiagEtherTestControl, OfflineDiagInterface  EXPORTS DiagEtherRunCmdFile =  BEGIN OPEN     DiagEtherIOCmdMsgs,    ErrorMsgs: DiagEtherErrorMsgs,    ODI: OfflineDiagInterface;  -- ================-- PUBLIC VARIABLES-- ================  validCmdFile: PUBLIC BOOLEAN _ FALSE;  runningUserCmdFile:	PUBLIC BOOLEAN_ FALSE;-- ================-- GLOBAL VARIABLES-- ================  loopWhenError:	BOOLEAN_ FALSE;-- ================-- PUBLIC PROCEDURE-- ================  BuildNewFile: PUBLIC ODI.OfflineDiagnosticProc = {    GetErrAction[];        DiagEtherGetCmdFile.GetCommandFile[];    validCmdFile _ TRUE;    DiagEtherErrorCheck.PublicErrorCheckArray _ DESCRIPTOR[DiagEtherErrorCheck.ECStandard1];    RunCmdFile [];    result_ none;    };      RunPriorFile: PUBLIC ODI.OfflineDiagnosticProc = {    yes: BOOLEAN_ FALSE;     IF validCmdFile THEN    { GetErrAction [];     DiagEtherErrorCheck.PublicErrorCheckArray_       DESCRIPTOR[DiagEtherErrorCheck.ECStandard1];     RunCmdFile [];    }     ELSE     ODI.PutMessage [       message: ErrorMsgs.errors[noCmdFileToRerun],       beep: TRUE,       clearMessageAreaFirst: TRUE];        result_ none;    };-- Private PROCEDUREs  GetErrAction: PROCEDURE = {    num: CARDINAL_ 0;    helpTextPtr: LONG POINTER TO ODI.HelpText;    cmdRcrdPtr:	LONG POINTER TO ODI.OptionsRecord;    optionLinePtr: LONG POINTER TO ODI.AnOptionLine;     cmdRcrdPtr_  ODI.GetAnOptionsRecord[numberOfLines: 5];    cmdRcrdPtr.optionMenuTiTle_ ioCmdMsgs[errActioN];        optionLinePtr _ ODI.GetAnOptionLine [optionsPerLine: 1];    optionLinePtr.optionsOnALine[0].position _ 2;    optionLinePtr.optionsOnALine[0].selectionNumberForThisItem_ 1;    optionLinePtr.optionsOnALine[0].option_ ioCmdMsgs[ignoreErrs];    optionLinePtr.optionsOnALine[0].helpForThisOption_ ioCmdMsgs[ignoreErrsExpl];    cmdRcrdPtr.linesOfOptions[0] _ optionLinePtr;    optionLinePtr _ ODI.GetAnOptionLine [optionsPerLine: 1];    optionLinePtr.optionsOnALine[0].position _ 2;    optionLinePtr.optionsOnALine[0].selectionNumberForThisItem_ 2;    optionLinePtr.optionsOnALine[0].option_ ioCmdMsgs[continueOnErr];    optionLinePtr.optionsOnALine[0].helpForThisOption_ ioCmdMsgs[continueOnErrExpl];    cmdRcrdPtr.linesOfOptions[1] _ optionLinePtr;       optionLinePtr _ ODI.GetAnOptionLine [optionsPerLine: 1];    optionLinePtr.optionsOnALine[0].position _ 2;    optionLinePtr.optionsOnALine[0].selectionNumberForThisItem_ 3;    optionLinePtr.optionsOnALine[0].option_ ioCmdMsgs[stopOnErr];    optionLinePtr.optionsOnALine[0].helpForThisOption_ ioCmdMsgs[stopOnErrExpl];    cmdRcrdPtr.linesOfOptions[2] _ optionLinePtr;    optionLinePtr _ ODI.GetAnOptionLine [optionsPerLine: 1];    optionLinePtr.optionsOnALine[0].position _ 2;    optionLinePtr.optionsOnALine[0].selectionNumberForThisItem_ 4;    optionLinePtr.optionsOnALine[0].option_ ioCmdMsgs[loopOnErr];    optionLinePtr.optionsOnALine[0].helpForThisOption_ ioCmdMsgs[loopOnErrExpl];    cmdRcrdPtr.linesOfOptions[3] _ optionLinePtr;       optionLinePtr _ ODI.GetAnOptionLine [optionsPerLine: 1];    optionLinePtr.optionsOnALine[0].position _ 2;    optionLinePtr.optionsOnALine[0].selectionNumberForThisItem_ 5;    optionLinePtr.optionsOnALine[0].option_ ioCmdMsgs[stepCmds];    optionLinePtr.optionsOnALine[0].helpForThisOption_ ioCmdMsgs[stepCmdsExpl];    cmdRcrdPtr.linesOfOptions[4] _ optionLinePtr;       helpTextPtr  _ ODI.GetAHelpText[numberOfLines: 1];    helpTextPtr.textBody[0]_ ioCmdMsgs[enterChoiceNumExpl];       loopWhenError_ FALSE;         num_ ODI.GetAnOption [optionTable: cmdRcrdPtr,			  optionPrompt: ioCmdMsgs[enterChoiceNum],			  optionHelp: helpTextPtr];        SELECT num FROM     1 => {DiagEtherTestControl.SetUpTestControl[	       controlData: DiagEtherTestControl.TCAll0s]; 	   DiagEtherLogAndTrace.logStep ¬ FALSE};     2 => {DiagEtherTestControl.SetUpTestControl[	      controlData: DiagEtherTestControl.TCRunCmdFile1];	   DiagEtherLogAndTrace.logStep ¬ FALSE};     3 => {DiagEtherTestControl.SetUpTestControl[	      controlData: DiagEtherTestControl.TCRunCmdFile2];	   DiagEtherLogAndTrace.logStep ¬ TRUE};     4 => { DiagEtherTestControl.SetUpTestControl[	      controlData: DiagEtherTestControl.TCRunCmdFile2];	    loopWhenError_ TRUE; 	    IF DiagEtherErrorCheck.Error THEN DiagEtherTestControl.LoopOnError_ TRUE ;	   DiagEtherLogAndTrace.logStep ¬ FALSE};     5 => {DiagEtherTestControl.SetUpTestControl[	      controlData: DiagEtherTestControl.TCRunCmdFile3];	 DiagEtherLogAndTrace.logStep ¬ TRUE};     ENDCASE;    }; -- of GetErrAction.  RunCmdFile: PROCEDURE = {    runningUserCmdFile_ TRUE;        ODI.PutTestParameters[]; -- clear screen.        DiagEtherCmdDrive.ExecuteCmd [      cmdArray: DESCRIPTOR[DiagEtherGetCmdFile.commandArray]      ! DiagEtherBasicTest.EtherDriverNotResponding => {	  IF loopWhenError THEN {             DiagEtherTestControl.LoopOnError_ TRUE; RESUME;	    };	  DiagEtherDisplay.TempLog [];	  GetErrAction []; RESUME;	  };	DiagEtherBasicTest.TestNotAcceptable => {	  --ODI.PutMessage["This test is only appricapable to DOVE hardware"L];	  GOTO exit};	DiagEtherTestControl.ReturningAfterCommand=> { 	  DiagEtherDisplay.TempLog [];	  GetErrAction []; RESUME};	ODI.AbortCurrentTest => GOTO exit];    runningUserCmdFile_ FALSE;        ODI.HitAnyKeyToContinue[beep: FALSE];        EXITS      exit => {runningUserCmdFile ¬ FALSE;	ODI.HitAnyKeyToContinue[beep: FALSE];};    }; -- of RunCmdFile.      END...LOGTime			By	Action12-Feb-85 17:45:52	MXT	Created.15-Apr-85 16:15:20	MXT	Added Catch Phrase in RunCmdFile.21-May-85 12:05:08	MXT	Added Catch Phrase for DiagEtherBasicTest.TestNotAcceptable.27-May-85 14:56:45	MXT	Added DiagEtherLogAndTrace.logStep in GetErrAction