$MOD186;Copyright (C) 1985, 1986 by Xerox Corporation. All rights reserved.;;-- stored as [BamBam:OSBU North:Xerox]<WMicro>Daisy>ParityHandlerDaisy.asm;-- created on 16-Apr-86 11:02:44;;-- Last edited by:;--	MXT		16-Apr-86 11:02:44	:Created;;;==========================  PARITY HANDLER  =================================	NAME	PrtyHdlr		;(Memory) Parity Error Handler	;==========================  INCLUDES  DECLARATIONS  ========================== $NOLIST$INCLUDE        (IOPDefs.asm)   ;This should always be INCLUDEd first$INCLUDE        (HardDefs.asm)	;$INCLUDE        (IOPMacro.asm)	;$INCLUDE        (RAMEEP.asm)	;$LIST				;==========================  DATA  SEGMENT  ====================================EXTRN parityInterrupt :ABSEXTRN ParityHandlerID :ABS;ParityIOR	SEGMENT		COMMON 		Assume DS:ParityIOR;---- EXTRNs for Parity handlerEXTRN parityTask	:TaskContextBlock;---- variables contained in  IORPrty.asmEXTRN parityErrStat 	:WORD		;contains faulted Mem Stat RegEXTRN parityErrOnMCC	:BYTE		;points to faulted MCCEXTRN parityIntrpCnt	:BYTE		;no. of interrupt  received so farEXTRN badParityIntrpCnt :BYTE		;no. of of bad intrp received so farEXTRN portAErrCnt	:BYTE		;port A Parity Err counterEXTRN portBErrCnt	:BYTE		;port B Parity Err counterEXTRN portCErrCnt	:BYTE		;port C Parity Err counterEXTRN badMSRErrCnt	:BYTE		;bad MSR error counterEXTRN tyliteZoneCnt	:BYTE		;tylitezone error counter	    EXTRN IOPErrCnt		:BYTE		;IOP access error counterEXTRN SChipErrCnt	:BYTE		;SChip access error counterParityIOR		 ENDS;---------------------------------------------------------------------------------;			ParitySTK	SEGMENT		COMMON 		Assume SS:ParitySTKEXTRN  ParityStack :WORDParitySTK		 ENDS;;-----------------------------------------------------------------------------------------;==========================  CODE  SEGMENT  ====================================IOPEInRAM	SEGMENT	PUBLIC		;codes reside in RAM		ASSUME  CS: IOPEInRAM		ASSUME  DS: ParityIOR		;-------------------------  CONSTANTS  DECLARATIONS  ---------------------------HaltMesaReg	EQU	WriteCSReg	;Reg to able/disable Mesa Processor (B0H)DiagLEDReg	EQU	WriteConfigReg	;Reg to control diagnostic LED (D0H)MSRBase		EQU	0ED20H		;Memory Status Reg(MSR) base addressMSR1Hi		EQU	MSRBase +1	;  Memory Controller Chip(MCC) #1MSR2Hi		EQU	MSRBase +3	;MSR3Hi		EQU	MSRBase +5	;  Memory Expansion Board (MEB)MSR4Hi		EQU	MSRBase +7	;  HaltMesaBit	EQU	0FDFFH		;HaltMesaReg Mask bit (bit9)  DiagLED3Bit	EQU	0100H		;DiagLEDReg  bit8 DiagLED2Bit	EQU	0200H		;DiagLEDReg  bit9 DiagLED1Bit	EQU	0400H		;DiagLEDReg  bit10 PEIntrpBit	EQU	0080H		;Parity Error Interrupt, bit7 Active loPAEnabled	EQU	0040H		;Port A EnabledPBEnabled	EQU	0020H		;Port B EnabledPCEnabled	EQU	0010H		;Port C EnabledBadMSRErr	EQU	0070H		;All ports Enable, caused by bad/non-existent MSRTYLiteZone	EQU	0F757H		;should not see this value!;Daisy ConstantsAChip0		EQU	08H		;high byte of AChip0 addressAChip1		EQU	09H		;high byte of AChip1 addressAChip2		EQU	0AH		;high byte of AChip2 addressAChip3		EQU	0BH		;high byte of AChip3 addressAddrPrtyReg	EQU	02H		;DebugRegister	EQU	16H		;InitDebugReg	EQU	6402H		;PEHiAndLo	EQU	000CH		;IOPvsSChip	EQU	0100H		;;-------------------------  PUBLIC DECLARATION  ---------------------------------PUBLIC		ParityInitPUBLIC		BadParityIntrp         ;========================== PARITY HANDLER  =====================================;***********************************;*                                 *;*        ParityHandlerInit        *;*                                 *;***********************************ParityInit  	PROC    FAR		%ReadEEProm(eePromHardwareBuild,01)			JC	InitParity	;If EEPROM bogus, assume not B1		CMP	AL, 1		; Test for B0/B1		JE	NoParityTask	; no parity for B0/B1InitParity:	%InitializeTask (ParityHandlerID, OFFSET parityTask, ParityTaskInit, OFFSET ParityStack)     NoParityTask:	RETParityInit  	ENDP;***********************************;*                                 *;*        ParityTaskInit           *;*                                 *;***********************************ParityTaskInit:	%ThisTaskServices (parityInterrupt,BadParityIntrp)		MOV 	badParityIntrpCnt, 0		;		MOV 	parityErrOnMCC, 0		;Initialize counters and		MOV 	parityIntrpCnt, 0		;  register		MOV 	parityErrStat, 0		;;It is assumed that A chip was initialized properly in IOP Init/booting code.BeginParityTask:		%DisableInterruptsTillNextWait	;Disable intrp until next Wait		%Enable (parityInterrupt)	;Enable parity intrp		   					;WaitForPEIntrp:	%WaitForInterrupt ()			;Wait for parity intrp and;**************************************;*                                    *;*      PARITY ERROR INTERRUPT	      *;*                                    *;**************************************PEIntrptEntry:	%Disable (parityInterrupt) ;disable PE intrpt		INC	parityIntrpCnt		;		MOV	DX, HaltMesaReg		;first, turn off  		IN	AX, DX			;  Mesa Processor		AND	AX, HaltMesaBit 	;  		OUT	DX, AX			;  		MOV	BX, 0			;;;Following codes check what A chip generated parity error interrupt.PollAchip0:	MOV	DH, AChip0		MOV	DL, DebugRegister		IN	AX, DX			;read debug register		TEST	AX, PEHiAndLo		;		JZ	PollAchip1		;no error on A chip0		PEIntAChip0:	MOV	parityErrOnMCC, 0	;log parity error info		OR	BX, DiagLED1Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;PollAchip1:	MOV	DH, AChip1		;DL is still set up		IN	AX, DX			;read debug register		TEST	AX, PEHiAndLo		;		JZ	PollAchip2		;no error on A chip1		PEIntAChip1:	MOV	parityErrOnMCC, 1	;log parity error info		OR	BX, DiagLED1Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;PollAchip2:	MOV	DH, AChip2		;DL is still set up		IN	AX, DX			;read debug register		TEST	AX, PEHiAndLo		;		JZ	PollAchip3		;no error on A chip2		PEIntAChip2:	MOV	parityErrOnMCC, 2	;log parity error info		OR	BX, DiagLED1Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;PollAchip3:	MOV	DH, AChip3		;DL is still set up		IN	AX, DX			;read debug register		TEST	AX, PEHiAndLo		;		JZ	UnidentParity		;no error on A chip3		PEIntAChip3:	MOV	parityErrOnMCC, 3	;log parity error info		OR	BX, DiagLED1Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;UnidentParity:	INC	tyliteZoneCnt		;Unindetified parity interrupt		MOV	parityErrStat, TYLiteZone	; Something strange here		OR	BX, DiagLED1Bit		;		OR	BX, DiagLED2Bit		;		OR	BX, DiagLED3Bit		;Lit all LEDs.ErrDisplay:	MOV	AX, BX					MOV 	DX, DiagLEDReg		OUT	DX, AX		CALL	BlinkLED		MOV	AX, 0		OUT 	DX, AX		CALL 	BlinkLED		JMP	ErrDisplayBlinkLED	PROC	NEAR				MOV	CX, 0FFFFH		;load counter valueBlinkLoop:	PUSHA				;do something time		POPA				;  consuming		LOOP	BlinkLoop		;		RET				;BlinkLED	ENDP				;;********************************;*				*;*	ParityErrDiag		*;*				*;********************************;; Parameters passed:;	AX  - contains contents of Memory Status Regr, hi byte;	DX  - on READ, contains port address of Memory Status Regr, hi byte;	DX  - on WRITE, contains port address to Clear Parity Error IntrpParityErrDiag	PROC	NEAR		OUT	DX, AX			;write same data to clear the interrupt		MOV	DL, AddrPrtyReg		;load AddressParity register address. DH is still set up		IN	AX, DX			;read AddressParity register		MOV	parityErrStat, AX	;save contents		TEST	AX, IOPvsSChip		;check the error is IOP or S chip		JNZ	ErrOnSChipAccess	;ErrOnIOPAccess:			INC	IOPErrCnt		;increment error count		RETErrOnSChipAccess:		INC	SChipErrCnt		RETParityErrDiag	ENDP;********************************;*				*;*	BadParityIntrp		*;*				*;********************************BadParityIntrp	PROC	FARBadInt:		%EstablishHandlerAccess (ParityHandlerID)		ASSUME ES:ParityIOR		INC	ES:badParityIntrpCnt	;Keeping track of bad intrpReadDebugRegister:		MOV	DH, AChip0		MOV	DL, DebugRegister		IN 	AX, DX		SetupInitializeConstant:		AND	AX, 7FF0H		OR	AX, InitDebugReg		MOV	CX, 4ResetDebugRegisterLoop:		OUT	DX, AX		INC	DH		LOOP	ResetDebugRegisterLoop		ASSUME ES:NOTHINGEndOfResetAChip:		RET				;WaitForInterrupt still in effectBadParityIntrp	ENDPIOPEInRAM	ENDS;********************************************************************************		END