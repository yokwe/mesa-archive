$MOD186$PAGELENGTH (72)$PAGEWIDTH  (136);Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved.;-- stored as [Iris]<WMicro>Dove>IOPData.asm;-- created on  27-Feb-84 11:15:44;;-- last edited by:;--	JAC	14-Mar-87 13:49:43	:new display parameters. add xCoordOffsetInit15 and yCoordOffsetInit15;--	JAC	 3-Mar-87 13:26:01	:fixup memory controller start up;--	JAC	 2-Mar-87 10:32:40	:PCE has no local RAM;--	JAC	 9-Feb-87 18:55:02	:Faster parameters for AFab4's;--	JAC	28-Jan-87 14:43:20	:add xCoordOffsetInit19 and yCoordOffsetInit19 which were hard wired into IOPInit;--	JAC	28-Jan-87 10:26:08	:Change HCursor and HSync0 for 19 inch display;--	RDH	23-Dec-86 14:30:37	:Change to parameters for AFab3A slow and for the 19 inch display, i.e. Debug256 Resp0 Wait0 ARDY0 CAS1 RAS0 Row0 Col1 Nib0 Nib1 and  HBorder019 HBlank019 VBlank119 HBorder119 HSync119.;--	KEK	20-Jun-86 14:55:08	:don't init ASID's from these tables.;--	KEK	27-May-86 11:03:31	:change AChip ARDY/ROW/RESP consts, per john dillon's word.;--	KEK	22-Apr-86  9:11:04	:add Daisy data, for IOPInit to use.;--	JPM	22-Jul-85 10:00:57	:Change IOPEInROM alignment to WORD.;--	JPM	 1-Jul-85  9:04:12	:Changed OpieIOR to COMMON.;--	JPM	28-Jun-85 13:52:11	:Generate only ROM-needed data from Controllers and Devices macros.;--	JPM	27-Jun-85 17:27:34	:Use enableMask parm in x macro (from Devices).;--	JPM	25-Jun-85  8:21:27	:added wordsInCBTable.;--	JPM	24-Jun-85  8:46:32	:changed printing directives.;--	JPM	15-May-85 14:24:24	:Opie redesign.;--	kEK	 3-Mar-85 14:16:28	:changed printing directives.;--	VXS	20-Nov-84 17:38:30	:Add INCLUDE of HardOpie.asm;--	VXS	18-Sep-84 20:22:53	: Add save, gen, restore around definitions inside macro expansions.;--	VXS	31-Aug-84 15:41:07	:Use new SystemCalls macro to generate SoftwareInterruptTable ;--	VXS	28-Aug-84 18:11:12	:extend hardware interrupt table - HACK!!! ;--	VXS	28-Aug-84 11:57:18	:Took out unnecessary include of IOPMacro;--	VXS	27-Aug-84 17:37:27	:Change EOIPort and EOIcommand macro args in Controllers to slaveEOIPort and slaveEOIcommand (for clarity);--	VXS	 7-Aug-84 17:31:34	:Rewrote ICB generation to use InterruptControllers macro;--	VXS	 6-Aug-84 17:23:41	:Change VctBase to VctType;--	VXS	 6-Aug-84 16:51:16	:Add new file location;--	VXS	16-Jul-84 15:57:52	:Get rid of INCLUDE of IOImport;--	VXS	12-Jul-84 16:35:54	:Moved Devices macro out to IOPDefs;--	VXS	 9-Jul-84 18:25:14	:Fixed prob in Devices macro;--	VXS	 5-Jul-84 14:59:43	:added Devices to generate interrupt info;						 Generate Interrupt Vector table automatically with;						 Devices macro;--	JPM	 3-Jul-84 14:09:39	:Added IOPE@ReadEEProm.;--	FXB	 2-Jul-84 13:53:29	:added space allocation for BindweedIntr;--	JMM 	27-Jun-84 15:15:43	:Opie Version 1 release;--	ETN	21-Jun-84 18:34:47	:changed init so tasks not needed.;--	JMM	21-Jun-84 18:34:47	:Misc. cleanup.;--	JMM	20-Jun-84 12:38:22	:Deleted Converts, etc.;--	JMM	18-Jun-84 17:51:51	:Version 1 release.NAME			IOPData;--------------------------------------------------------------------------------;Must be included in this order or else things get screwed up in IOPMacro.$NOLIST$INCLUDE		(IOPDefs.asm)$INCLUDE		(HardOpie.asm)$INCLUDE		(IOPMacro.asm)$INCLUDE		(OpieDefs.asm)$LIST;--------------------------------------------------------------------------------;;********************************************************************************OpieIOR			SEGMENT		COMMON;Generate CB EXTRNs%*DEFINE(Controller(name,intType,slaveEOIPort,PendPort,MaskPort))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (EXTRN			%name%(Controller): ControllerBlock)FI); end Controller macro definition$SAVE			%InterruptControllers$RESTORE;Generate ICB EXTRNs%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (EXTRN			%name%(ICB): InterruptContextBlock)FI); end Controller macro definition$SAVE			%Devices$RESTOREOpieIOR			ENDS;--------------------------------------------------------------------------------IOPEInROM		SEGMENT	WORD PUBLIC			Assume CS:IOPEInROMPUBLIC			beginCBTable, wordsInCBTablePUBLIC			beginICTable, numberOfICsForROMFunctions, sizeOfICInROMPUBLIC			beginHardwareIVTable, numberOfHardwareIVsForROMFunctionsPUBLIC			beginSoftwareIVTable, numberOfSoftwareIVsForROMFunctionsPUBLIC			codeToInsertIntoICBPUBLIC			AChip15InchDisplayControllerData, number15InchParametersPUBLIC			AChip19InchDisplayControllerData, number19InchParametersPUBLIC			AChip256MemoryControllerData, number256MemoryParametersPUBLIC			Debug64, MemMap10PUBLIC			xCoordOffsetInit19, yCoordOffsetInit19PUBLIC			xCoordOffsetInit15, yCoordOffsetInit15EXTRN			UnServiced: NEAREXTRN			GenericInterruptProcessing: FAR;--------------------------------------------------------------------------------;All the entry points below have to be in ROM so there is no need;to save the CS!;Generation of CB and ICB constant data; Appears in ROM and is copied down to CBs and ICBs in RAM.;Generate CB data%*DEFINE(Controller(name,intType,slaveEOIPort,PendPort,MaskPort))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (%name%(romCB)		ControllerBlock	<%slaveEOIport,%PendPort,%MaskPort>)FI); end Controller macro definitionbeginCBTable:$SAVE			%InterruptControllers$RESTOREendCBTable:sizeOfCBTable		EQU	(endCBTable-beginCBTable)wordsInCBTable		EQU	sizeOfCBTable/2;Generate IC data%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (			ORG	OFFSET ($-variableSizeOfIC)%name%(romIC)		InterruptContext <,,,,,,,%enableMask,%slaveEOIcommand,OFFSET %controlname%(Controller)>)FI); end x macro definition;Note that this depends on data being generated before here, since assembler won't; wrap backwards thru 0beginICTable:$SAVE			%Devices$RESTOREendICTable:sizeOfICInROM		EQU	(sizeOfIC-variableSizeOfIC) ;Size in bytes of rom ICsizeOfICTable		EQU	(endICTable-beginICTable)numberOfICsForROMFunctions	EQU	sizeOfICTable/sizeOfICInROM;Generate hardware interrupt vector data%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))( $GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (			DW	4*%controlname%(IntrptVctType)+4*(%channel)			DW	OFFSET %name%(ICB))FI)      beginHardwareIVTable:$SAVE			%Devices$RESTOREendHardwareIVTable: sizeOfHardwareIVTable	EQU	(endHardwareIVTable-beginHardwareIVTable)numberOfHardwareIVsForROMFunctions	EQU	sizeOfHardwareIVTable/4%*DEFINE(SystemCall(Name))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (EXTRN			%(IOPE@)%Name: NEAR			DW	OFFSET IOPE@%Name)FI)%' End %*DEFINE(SystemCall(Name))beginSoftwareIVTable:$SAVE			%SystemCalls$RESTOREendSoftwareIVTable:sizeOfSoftwareIVTable	EQU	(endSoftwareIVTable-beginSoftwareIVTable)numberOfSoftwareIVsForROMFunctions	EQU	sizeOfSoftwareIVTable/2codeToInsertIntoICB:			PUSHA			CALL	GenericInterruptProcessing						;--------------------------------------------------------------------------------;Daisy A-chip initialization parameters.;AChipBlock is defined in OpieDefs.BeginAChipData:AChip256MemoryControllerData:;note that the implicit high byte of the port addr must be all of [08,09,0A,0BH].MemHalt1smash	AChipBlock	<078H, 0FFFFH>RAMSize		AChipBlock	<000H, 0C400H>MemMap10	AChipBlock	<004H, 00000H>	;ALL map registers disabledMemMap32	AChipBlock	<006H, 00000H>MemMap54	AChipBlock	<008H, 00000H>MemMap76	AChipBlock	<00AH, 00000H>Debug256	AChipBlock	<016H, 00400H>	;for 256KDRAMs;oneASID	AChipBlock	<02EH, 00000H>	;overwritten later.RESP0		AChipBlock	<02CH, 08000H>CAS1		AChipBlock	<068H, 0C000H>RAS0		AChipBlock	<06AH, 0E000H>Wait0		AChipBlock	<06CH, 0E000H>ARDY0		AChipBlock	<06EH, 0F000H>Row0		AChipBlock	<070H, 0F000H>Col1		AChipBlock	<072H, 0FF80H>Nib0		AChipBlock	<074H, 0E000H>Nib1		AChipBlock	<076H, 0FC00H>MemHalt1a	AChipBlock	<078H, 07FFFH>MemHalt0a	AChipBlock	<07CH, 07FFBH>MemFSM0		AChipBlock	<07EH, 08004H>MemHalt1b	AChipBlock	<078H, 00000H>MemHalt0b	AChipBlock	<07CH, 00000H>AChip64MemoryControllerData:;note that the implicit high byte of the port addr must be 08H.Debug64		AChipBlock	<016H, 06412H>	;for 64KDRAMsAChipMultiASIDData:;for multi-chip development systems (used by MesaVM only);note that the implicit high byte of the port addr must be all of [08,09,0A,0BH].;MultiASID0	AChipBlock	<02EH, 00001H>	;overwritten later.;MultiASID1	AChipBlock	<02EH, 00000H>;MultiASID2	AChipBlock	<02EH, 00002H>;MultiASID3	AChipBlock	<02EH, 00003H>AChip15InchDisplayControllerData:;note that the implicit high byte of the port addr must be 08H.;if you change HBorder015 also change xCoordOffsetInit15 found at the end of  this module;if you change VBorder015 also change yCoordOffsetInit15 HBorder115	AChipBlock	<0A4H, 0703DH>HBorder015	AChipBlock	<0A6H, 02009H>HBlank015	AChipBlock	<0A8H, 00007H>HBlank115	AChipBlock	<0AAH, 00040H>HSync115	AChipBlock	<0ACH, 00045H>HSync015	AChipBlock	<0AEH, 00009H>HCursor		AChipBlock	<0A0H, 00013H>	VCursor		AChipBlock	<0B0H, 000C7H>	;not screen dependentVInt		AChipBlock	<0B2H, 00000H>	;not screen dependent YETVBorder115	AChipBlock	<0B4H, 002C0H>VBorder015	AChipBlock	<0B6H, 00047H>VBlank115	AChipBlock	<0B8H, 002DFH>VBlank015	AChipBlock	<0BAH, 00027H>VSync015	AChipBlock	<0BCH, 00027H>VSync115	AChipBlock	<0BEH, 002E0H>BaseP		AChipBlock	<0C0H, 00000H>	;not screen dependentQL15		AChipBlock	<0C2H, 09ECDH>Border1		AChipBlock	<0C4H, 0BBBBH>	;not screen dependentBorder0		AChipBlock	<0C6H, 0EEEEH>	;not screen dependent;Cursor[0..F]	AChipBlock	<080H, 0XXXXH>	;done by booting code; not here.;HBorder115a	AChipBlock	<0A4H, 0603EH>	;done by booting code; not here.AChip19InchDisplayControllerData:;note that the implicit high byte of the port addr must be 08H.;if you change HBorder019 also change xCoordOffsetInit19 below;if you change VBorder019 also change yCoordOffsetInit19 found belowHCursor19	AChipBlock	<0A0H, 02012H>HBorder119	AChipBlock	<0A4H, 0705AH>HBorder019	AChipBlock	<0A6H, 02012H>HBlank019	AChipBlock	<0A8H, 00010H>HBlank119	AChipBlock	<0AAH, 0005EH>HSync119	AChipBlock	<0ACH, 0005FH>HSync019	AChipBlock	<0AEH, 00012H>VBorder119	AChipBlock	<0B4H, 003B4H>VBorder019	AChipBlock	<0B6H, 00057H>VBlank119	AChipBlock	<0B8H, 003D3H>VBlank019	AChipBlock	<0BAH, 00037H>VSync019	AChipBlock	<0BCH, 00037H>VSync119	AChipBlock	<0BEH, 003D4H>QL19		AChipBlock	<0C2H, 0D7D2H>;HBorder119	AChipBlock	<0A4H, 0605CH>	;done by booting code; not here.EndAChipData:number256MemoryParameters	EQU	(AChip64MemoryControllerData-AChip256MemoryControllerData)/3number64MemoryParameters	EQU	(AChipMultiASIDData-AChip64MemoryControllerData)/3numberMultiASIDParameters	EQU	(AChip15InchDisplayControllerData-AChipMultiASIDData)/3number15InchParameters		EQU	(AChip19InchDisplayControllerData-AChip15InchDisplayControllerData)/3number19InchParameters		EQU	(EndAChipData-AChip19InchDisplayControllerData)/3xCoordOffsetInit19		EQU	120H	;16*lowByte of HBorder019yCoordOffsetInit19		EQU	057H	;lowByte of VBorder019xCoordOffsetInit15		EQU	090H	;16*lowByte of HBorder015yCoordOffsetInit15		EQU	047H	;lowByte of VBorder015IOPEInROM		ENDS;********************************************************************************			END