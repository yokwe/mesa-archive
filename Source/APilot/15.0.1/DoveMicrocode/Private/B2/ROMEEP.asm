;Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved.;-- stored as [Idun]<WMicro>Dove>ROMEEP.asm;-- created on  14-Feb-84 11:13:22;-- This file is intended to contain ROM-resident portion of EEProm constants.;;-- last edited by:;--	JPM	 2-Aug-85 17:20:34	:Make eePromLowMem and eePromHighMem ROM-resident (display handler uses them).;--	KEK	31-Jul-85 16:32:25	:created ROMEEP.asm from orig EEPDefs.asm;--	JPM	14-Nov-84 14:52:53	:Updated for new layout.;--	JPM	12-Oct-84 16:11:44	:Updated for new layout.;--	VXS	16-Aug-84 11:04:01	:made EEPromSegment COMMON. ;--	VXS	 8-Aug-84 15:43:40	:Made tempEEPromImage so we 		;know where this thing is. (fixes bug where if wordsInEEProm 		;wasn't on even 4 word boundary, would be overlap);--	JPM	19-Jul-84 11:04:57	:Added eePromLockMode.;--	VXS	11-Jul-84 16:28:56	:Creation. See IOPDefs.asm for earlier history.;--------------------------------------------------------------------------------;;Definitions for ROM-used offsets within EEProm:;(only the ROM-resident defs are contained here in uncommented-out form);(for actual RAM and BadPage contents, see latest RAMEEP.asm and BadPage.asm)eePromROMVersion	EQU	ROMSegment+wordEEPromOffset+0eePromRAMVersion	EQU	ROMSegment+wordEEPromOffset+2eePromBadPageVersion	EQU	ROMSegment+wordEEPromOffset+4eePromBooting		EQU	ROMSegment+wordEEPromOffset+6;	[0..3] = default boot device type;	[4..4] = with icons or without icons;	[5..5] = rigid booting allowed;	[6..6] = floppy booting allowed;	[7..7] = ethernet booting allowed;	[8..8] = rs-232-c booting allowed;	[9..15] = spareeePromDispType		EQU	ROMSegment+byteEEPromOffset+8;	[0..0] = 0=no display present, 1=display present;	[1..1] = 0=black and white display, 1= color display;	[2..6] = spare;	[7..7] = 0=bitmap display type, 1=non-bitmap display typeeePromXAlign		EQU	ROMSegment+byteEEPromOffset+9eePromYAlign		EQU	ROMSegment+byteEEPromOffset+10eePromKBType		EQU	ROMSegment+byteEEPromOffset+11eePromRigidSctPerTrk	EQU	ROMSegment+byteEEPromOffset+12eePromRigidHdPerCyl	EQU	ROMSegment+byteEEPromOffset+13eePromRigidCylCt	EQU	ROMSegment+wordEEPromOffset+14eePromRigidRWC		EQU	ROMSegment+wordEEPromOffset+16eePromRigidPCC		EQU	ROMSegment+wordEEPromOffset+18eePromRigidType		EQU	ROMSegment+byteEEPromOffset+20eePromSpare1		EQU	ROMSegment+byteEEPromOffset+21eePromLowMem		EQU	ROMSegment+wordEEPromOffset+22eePromHighMem		EQU	ROMSegment+byteEEPromOffset+24eePromFloppy		EQU	ROMSegment+wordEEPromOffset+42;--------------------------------------------------------------------------------;;Definitions for checksum offsets within EEProm:eePromChecksum		EQU	ROMSegment+wordEEPromOffset+124eePromInvChecksum	EQU	ROMSegment+wordEEPromOffset+126;--------------------------------------------------------------------------------;;Definitions for RAM-used offsets within EEProm:;(these are included in comment form just to be complete initially);(for actual RAM and BadPage contents, see latest RAMEEP.asm and BadPage.asm);eePromMemSize		EQU	RAMSegment+byteEEPromOffset+25;	[0..3] = encoded VM size (in increments of 64 map pages);		0 => none;		1 => 64 VM map pages;		2 => 128 VM map pages;		3 => 256 VM map pages;	[4..7] = encoded control store sizes (in increments of 4K pages);		0 => none;		1 => 4K control store;		2 => 8K control store;eePromHardwareBuild	EQU	RAMSegment+byteEEPromOffset+26;	0 => ?none;	1 => B0/B1;	2 => B2;	3-255 => spare incremental encodings;eePromMisc		EQU	RAMSegment+byteEEPromOffset+27;	[0..0] = Default boot type bit2 (with or without diagnostics);	[1..1] = Default diagnostic boot type bit (short or long);	[2..7] = spare;eePromRS232DCEtype	EQU	RAMSegment+byteEEPromOffset+28;eePromRS232DCEattr	EQU	RAMSegment+byteEEPromOffset+29;eePromRS232DTEtype	EQU	RAMSegment+byteEEPromOffset+30;eePromRS232DTEattr	EQU	RAMSegment+byteEEPromOffset+31;eePromPCEMemSize	EQU	RAMSegment+wordEEPromOffset+32;eePromPCEConfig	EQU	RAMSegment+wordEEPromOffset+34;eePromOption1		EQU	RAMSegment+wordEEPromOffset+36;eePromOption2		EQU	RAMSegment+wordEEPromOffset+38;eePromOption3		EQU	RAMSegment+wordEEPromOffset+40;this is actually defined in the ROM section above.;eePromFloppy		EQU	ROMSegment+wordEEPromOffset+42;eePromSpare2		EQU	RAMSegment+byteEEPromOffset+44;eePromSpare3		EQU	RAMSegment+byteEEPromOffset+45;eePromSpare4		EQU	RAMSegment+byteEEPromOffset+46;eePromSpare5		EQU	RAMSegment+byteEEPromOffset+47;eePromSpare6		EQU	RAMSegment+byteEEPromOffset+48;eePromSpare7		EQU	RAMSegment+byteEEPromOffset+49;eePromSpare8		EQU	RAMSegment+byteEEPromOffset+50;eePromSpare9		EQU	RAMSegment+byteEEPromOffset+51;eePromSpare10		EQU	RAMSegment+byteEEPromOffset+52;eePromSpare11		EQU	RAMSegment+byteEEPromOffset+53;eePromSpare12		EQU	RAMSegment+byteEEPromOffset+54;eePromSpare13		EQU	RAMSegment+byteEEPromOffset+55;eePromSpare14		EQU	RAMSegment+byteEEPromOffset+56;eePromSpare15		EQU	RAMSegment+byteEEPromOffset+57;eePromSpare16		EQU	RAMSegment+byteEEPromOffset+58;eePromSpare17		EQU	RAMSegment+byteEEPromOffset+59;eePromSpare18		EQU	RAMSegment+byteEEPromOffset+60;eePromSpare19		EQU	RAMSegment+byteEEPromOffset+61;eePromSpare20		EQU	RAMSegment+byteEEPromOffset+62;eePromSpare21		EQU	RAMSegment+byteEEPromOffset+63;eePromSpare22		EQU	RAMSegment+byteEEPromOffset+64;eePromSpare23		EQU	RAMSegment+byteEEPromOffset+65;eePromSpare24		EQU	RAMSegment+byteEEPromOffset+66;eePromSpare25		EQU	RAMSegment+byteEEPromOffset+67;--------------------------------------------------------------------------------;;Definitions for Bad Page offsets within EEProm:;(these are included in comment form just to be complete initially);(for actual RAM and BadPage contents, see latest RAMEEP.asm and BadPage.asm);eePromLastParityErrLow	EQU	badPageSegment+wordEEPromOffset+68;eePromLastParityErrHigh	EQU	badPageSegment+wordEEPromOffset+70;eePromBadPageLow1	EQU	badPageSegment+wordEEPromOffset+72;eePromBadPageHigh1	EQU	badPageSegment+wordEEPromOffset+76;eePromBadPageLow2	EQU	badPageSegment+wordEEPromOffset+74;eePromBadPageHigh2	EQU	badPageSegment+wordEEPromOffset+78;eePromBadPageLow3	EQU	badPageSegment+wordEEPromOffset+80;eePromBadPageHigh3	EQU	badPageSegment+wordEEPromOffset+82;eePromBadPageLow4	EQU	badPageSegment+wordEEPromOffset+84;eePromBadPageHigh4	EQU	badPageSegment+wordEEPromOffset+86;eePromBadPageLow5	EQU	badPageSegment+wordEEPromOffset+88;eePromBadPageHigh5	EQU	badPageSegment+wordEEPromOffset+90;eePromBadPageLow6	EQU	badPageSegment+wordEEPromOffset+92;eePromBadPageHigh6	EQU	badPageSegment+wordEEPromOffset+94;eePromBadPageLow7	EQU	badPageSegment+wordEEPromOffset+96;eePromBadPageHigh7	EQU	badPageSegment+wordEEPromOffset+98;eePromBadPageLow8	EQU	badPageSegment+wordEEPromOffset+100;eePromBadPageHigh8	EQU	badPageSegment+wordEEPromOffset+102;eePromBadPageLow9	EQU	badPageSegment+wordEEPromOffset+104;eePromBadPageHigh9	EQU	badPageSegment+wordEEPromOffset+106;eePromBadPageLow10	EQU	badPageSegment+wordEEPromOffset+108;eePromBadPageHigh10	EQU	badPageSegment+wordEEPromOffset+110;eePromBadPageLow11	EQU	badPageSegment+wordEEPromOffset+112;eePromBadPageHigh11	EQU	badPageSegment+wordEEPromOffset+114;eePromBadPageLow12	EQU	badPageSegment+wordEEPromOffset+116;eePromBadPageHigh12	EQU	badPageSegment+wordEEPromOffset+118;eePromBadPageLow13	EQU	badPageSegment+wordEEPromOffset+120;eePromBadPageHigh13	EQU	badPageSegment+wordEEPromOffset+122