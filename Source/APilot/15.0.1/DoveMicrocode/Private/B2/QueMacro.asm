;Copyright (C) 1984 by Xerox Corporation. All rights reserved.;-- stored as [Idun]<WDLion>Dove>QueMacro.asm;-- created on  20-Aug-84 16:12:01;;-- last edited by:;;--	JPM    .es		26-Jun-85 13:13:46	:Fixed parentheses mismatch.;--	JPM    .es		14-May-85 14:34:41	:Opie redesign.;--	JPM    .es		29-Oct-84 8:41:32	:Substituted generalMapRegister for systemMapNo.;--	JPM    .es		26-Oct-84 16:17:48	:Replaced constant offsets by OpieAddress field offsets.;--	JPM    .es		2-Oct-84 17:43:09	:Revised for new EstablishIOPAccess macro.;--	JPM    .es		12-Sep-84 15:16:59	:Added JumpIfMesaIOCBNextNil and JumpIfQueueNextNil.; These macros define queue operations used in the IOP.; Note: clients should call these macros only at system level.;----------------------------------------------------------------;-- Definition of STRUC QueueBlock is in QueDefs.asm;-- Definition of STRUC OpieAddress is in IOPDefs.asm;-- Additional macros referenced herein are in IOPMacro.asm;-- AdvanceMesaIOCB advances to the next IOCB in a Mesa-maintained chain.;--  (Note that only one word of the link is used, and locking must be done);-- mappedOrNot = "mapped" iff ES:DI points to the current IOCB, and;--  at end of macro, ES:DI points to that IOCB and (ZF) is 1 iff next = NIL%*DEFINE		(AdvanceMesaIOCB	(iocbNext, linkOffset, lockMask, mappedOrNot)) 			   LOCAL Lbl0 Lbl1			   ( %IF	(%NES (mapped,%mappedOrNot))				  THEN (%EstablishIOPAccess	(generalMapRegister,%iocbNext))  FI			    		MOV	AX, ES:[DI].%linkOffset.OpieAddressLow			     		MOV	BX, OFFSET %iocbNext.OpieAddressLow			     		MOV	CX, %lockMask			   	%Lbl0:	%MesaLockedOut	(MOV,BX,AX,CX)					OR	AX, AX					JNZ	%Lbl1					MOV	AX, ES:[DI].%linkOffset.OpieAddressLow					OR	AX, AX					JNZ	%Lbl0				%Lbl1:					);-- AdvanceQueue advances to the next IOCB in an IOP-maintained chain.;-- mappedOrNot = "mapped" iff ES:DI points to the current IOCB, and;--  at end of macro, ES:DI points to that IOCB and (ZF) is 1 iff next = NIL%*DEFINE		(AdvanceQueue	(queueBlock, linkOffset, mappedOrNot)) 			   ( %IF	(%NES (mapped,%mappedOrNot))				  THEN (%EstablishIOPAccess	(generalMapRegister,%queueBlock.queueNext))  FI			    		MOV	DX, ES:[DI].%linkOffset.OpieAddressLow					MOV	%queueBlock.queueNext.OpieAddressLow, DX					MOV	CX, ES:[DI].%linkOffset.OpieAddressHigh					MOV	%queueBlock.queueNext.OpieAddressHigh, CX					OR	CH, CH				);-- DeQueue removes the first IOCB from an IOP-maintained chain.;--  (caller must ensure that queueBlock.queueHead is not NIL)%*DEFINE		(DeQueue	(queueBlock, linkOffset, preserveESOrNot)) 			   LOCAL Lbl0			   ( %IF	(%EQS (%preserveESOrNot,preserveES))				  THEN (PUSH	ES)FI				  	%EstablishIOPAccess	(generalMapRegister,%queueBlock.queueHead)			    		MOV	DX, ES:[DI].%linkOffset.OpieAddressLow					MOV	CX, ES:[DI].%linkOffset.OpieAddressHigh			     %IF	(%EQS (%preserveESOrNot,preserveES))				  THEN (POP	ES)FI					MOV	%queueBlock.queueHead.OpieAddressLow, DX					MOV	%queueBlock.queueHead.OpieAddressHigh, CX					CMP	CH, nilOpieAddress					JNZ	%Lbl0					MOV	%queueBlock.queueTail.OpieAddressLow, DX					MOV	%queueBlock.queueTail.OpieAddressHigh, CX				%Lbl0:				);-- EnQueue adds an IOCB to the end of an IOP-maintained chain.;-- CX:DX contains the OpieAddress of the IOCB to be added%*DEFINE		(EnQueue	(queueBlock, linkOffset, preserveESOrNot)) 			   LOCAL Lbl0 Lbl1 Lbl2			   (		CMP	%queueBlock.queueHead.OpieAddressType, nilOpieAddress					JNZ	%Lbl0					MOV	%queueBlock.queueHead.OpieAddressLow, DX					MOV	%queueBlock.queueHead.OpieAddressHigh, CX					JMP	SHORT %Lbl1				%Lbl0:			     %IF	(%EQS (%preserveESOrNot,preserveES))				  THEN (PUSH	ES)FI					PUSH	CX					PUSH	DX					%EstablishIOPAccess	(generalMapRegister,%queueBlock.queueTail)			    		POP	DX					POP	CX					MOV	ES:[DI].%linkOffset.OpieAddressLow, DX					MOV	ES:[DI].%linkOffset.OpieAddressHigh, CX			     %IF	(%EQS (%preserveESOrNot,preserveES))				  THEN (POP	ES)FI				%Lbl1:	MOV	%queueBlock.queueTail.OpieAddressLow, DX					MOV	%queueBlock.queueTail.OpieAddressHigh, CX					CMP	%queueBlock.queueNext.OpieAddressType, nilOpieAddress					JNZ	%Lbl2					MOV	%queueBlock.queueNext.OpieAddressLow, DX					MOV	%queueBlock.queueNext.OpieAddressHigh, CX				%Lbl2:					);-- JumpIfMesaIOCBNextNil does a jump if the queueNext field is NIL.;-- Note: for Mesa queues, "NIL" means the low-order word is 0.%*DEFINE		(JumpIfMesaIOCBNextNil	(iocbNext, jumpLabel)) 			   ( 		CMP	%iocbNext.OpieAddressLow, 0					JZ	%jumpLabel				);-- JumpIfQueueNextNil does a jump if the queueNext field is NIL.;-- Note: for IOP queues, "NIL" means the high-order byte is nilOpieAddress.%*DEFINE		(JumpIfQueueNextNil	(queueBlock, jumpLabel)) 			   ( 		CMP	%queueBlock.queueNext.OpieAddressType, nilOpieAddress			   		JZ	%jumpLabel				)