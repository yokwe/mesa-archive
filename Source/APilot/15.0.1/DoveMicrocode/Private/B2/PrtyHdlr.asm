$MOD186;Copyright (C) 1985 by Xerox Corporation. All rights reserved.;;-- stored as [Idun]<WMicro>Dove>PrtyHdlr.asm;-- created on 17-Jun-85 16:34:32;;-- Last edited by:;--	JGS		 4-Sep-85 12:49:13	:May B2 version & put in RAM;--	JMA		17-Jun-85 16:34:32	:created file;--	JMA		 9-Aug-85  9:22:17	:readied for release;;;==========================  PARITY HANDLER  =================================	NAME	PrtyHdlr		;(Memory) Parity Error Handler	;==========================  INCLUDES  DECLARATIONS  ========================== $NOLIST$INCLUDE        (IOPDefs.asm)   ;This should always be INCLUDEd first$INCLUDE        (HardDefs.asm)	;$INCLUDE        (IOPMacro.asm)	;$LIST				;==========================  DATA  SEGMENT  ====================================EXTRN parityInterrupt :ABSEXTRN ParityHandlerID :ABS;ParityIOR		SEGMENT		COMMON 			Assume DS:ParityIOR;---- EXTRNs for Parity handlerEXTRN parityTask	:TaskContextBlock;---- variables contained in  IORPrty.asmEXTRN parityErrStat 	:WORD		;contains faulted Mem Stat RegEXTRN parityErrOnMCC	:BYTE		;points to faulted MCCEXTRN parityIntrpCnt	:BYTE		;no. of interrupt  received so farEXTRN badParityIntrpCnt :BYTE		;no. of of bad intrp received so farEXTRN portAErrCnt	:BYTE		;port A Parity Err counterEXTRN portBErrCnt	:BYTE		;port B Parity Err counterEXTRN portCErrCnt	:BYTE		;port C Parity Err counterEXTRN badMSRErrCnt	:BYTE		;bad MSR error counterEXTRN tyliteZoneCnt	:BYTE		;tylitezone error counter	    ParityIOR		 ENDS;---------------------------------------------------------------------------------;			ParitySTK		SEGMENT		COMMON 			Assume SS:ParitySTKEXTRN  ParityStack :WORDParitySTK		 ENDS;;-----------------------------------------------------------------------------------------;==========================  CODE  SEGMENT  ====================================IOPEInRAM       SEGMENT	PUBLIC		;codes reside in RAM                ASSUME  CS: IOPEInRAM		ASSUME  DS: ParityIOR		;-------------------------  CONSTANTS  DECLARATIONS  ---------------------------HaltMesaReg	EQU	WriteCSReg	;Reg to able/disable Mesa Processor (B0H)DiagLEDReg	EQU	WriteConfigReg	;Reg to control diagnostic LED (D0H)MSRBase		EQU	0ED20H		;Memory Status Reg(MSR) base addressMSR1Hi		EQU	MSRBase +1	;  Memory Controller Chip(MCC) #1MSR2Hi		EQU	MSRBase +3	;MSR3Hi		EQU	MSRBase +5	;  Memory Expansion Board (MEB)MSR4Hi		EQU	MSRBase +7	;  HaltMesaBit	EQU	0FDFFH		;HaltMesaReg Mask bit (bit9)  DiagLED3Bit	EQU	0100H		;DiagLEDReg  bit8 DiagLED2Bit	EQU	0200H		;DiagLEDReg  bit9 DiagLED1Bit	EQU	0400H		;DiagLEDReg  bit10 PEIntrpBit	EQU	0080H		;Parity Error Interrupt, bit7 Active loPAEnabled	EQU	0040H		;Port A EnabledPBEnabled	EQU	0020H		;Port B EnabledPCEnabled	EQU	0010H		;Port C EnabledBadMSRErr	EQU	0070H		;All ports Enable, caused by bad/non-existent MSRTYLiteZone	EQU	0F757H		;should not see this value!;-------------------------  PUBLIC DECLARATION  ---------------------------------PUBLIC		ParityInitPUBLIC		BadParityIntrp         ;========================== PARITY HANDLER  =====================================;***********************************;*                                 *;*        ParityHandlerInit        *;*                                 *;***********************************ParityInit  	PROC    FAR                %InitializeTask (ParityHandlerID, OFFSET parityTask, ParityTaskInit, OFFSET ParityStack)                     RETParityInit  	ENDP;***********************************;*                                 *;*        ParityTaskInit           *;*                                 *;***********************************ParityTaskInit:	  %ThisTaskServices (parityInterrupt,BadParityIntrp)		  MOV 	badParityIntrpCnt, 0		;		  MOV 	parityErrOnMCC, 0		;Initialize counters and		  MOV 	parityIntrpCnt, 0		;  register		  MOV 	parityErrStat, 0		;		  MOV 	AX, 0				;		  MOV 	DX, MSR1Hi			;Clear PEIntrp MCC1 		  OUT 	DX, AL				;  write to MSR LoByte		  MOV 	DX, MSR2Hi			;Clear PEIntrp MCC2		  OUT 	DX, AL				;  write to MSR LoByte		  MOV 	DX, MSR3Hi			;Clear PEIntrp MCC3		  OUT 	DX, AL				;  write to MSR LoByte		  MOV 	DX, MSR4Hi			;Clear PEIntrp MCC4		  OUT 	DX, AL				;  write to MSR LoByteResetSetPEIntrp:  %DisableInterruptsTillNextWait	;Disable intrp until next Wait		  %Enable (parityInterrupt)	;Enable parity intrp		   					;WaitForPEIntrp:   %WaitForInterrupt ()			;Wait for parity intrp and;**************************************;*                                    *;*      PARITY ERROR INTERRUPT	      *;*                                    *;**************************************PEIntrptEntry:	%Disable (parityInterrupt) ;disable PE intrpt		MOV	DX, HaltMesaReg		;first, turn off  		IN	AX, DX			;  Mesa Processor		AND	AX, HaltMesaBit 	;  		OUT	DX, AX			;  		INC	parityIntrpCnt		;		MOV	BX, 0			;			PollMSR1:	MOV	DX, MSR1Hi		;Check PE Intrpt on MCC#1		IN	AL, DX			;		TEST	AL, PEIntrpBit		;		JNZ	PollMSR2		;No parity intrp here		PEIntMCC1:	MOV	parityErrOnMCC, 1 	;Log Parity Err info		OR	BX, DiagLED1Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;PollMSR2:	MOV	DX, MSR2Hi		;Check PE Intrpt on MCC#2		IN	AL, DX			;		TEST	AL, PEIntrpBit		;		JNZ	PollMSR3		;No parity intrp here		PEIntMCC2:	MOV	parityErrOnMCC, 2 	;Log Parity Err info		OR	BX, DiagLED2Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;		PollMSR3:	MOV	DX, MSR3Hi		;Check PE Intrpt on MCC#3		IN	AL, DX			;		TEST	AL, PEIntrpBit		;		JNZ	PollMSR4		;No parity intrp here		PEIntMCC3:	MOV	parityErrOnMCC, 3 	;Log Parity Err info		OR	BX, DiagLED1Bit		;Set LEDs to be lit		OR	BX, DiagLED2Bit		;		CALL	ParityErrDiag		;		JMP	ErrDisplay		;PollMSR4:	MOV	DX, MSR4Hi		;Check PE Intrpt on MCC#4		IN	AL, DX			;		TEST	AL, PEIntrpBit		;		JNZ	UnidentParity		;No parity intrp here		PEIntMCC4:	MOV	parityErrOnMCC, 4 	;Log Parity Err info		OR	BX, DiagLED3Bit		;Set LED to be lit		CALL	ParityErrDiag		;		JMP	ErrDisplay		;UnidentParity:	INC	tyliteZoneCnt		;Unidentified parity interrupt		MOV	parityErrStat, TYLiteZone ;Something strange here		OR	BX, DiagLED1Bit		;Light LED #1		OR	BX, DiagLED2Bit		;Light LED #2		OR	BX, DiagLED3Bit		;Light LED #3		ErrDisplay:	MOV	AX, BX			;		MOV	DX, DiagLEDReg		;Light Diag LED(s)		OUT	DX, AX			;Turn ON LED		CALL	BlinkLED		;Delay by some time		MOV	AX,  0			;ready to turn off LED		OUT	DX, AX			;Turn ON LED		CALL	BlinkLED		;Delay by some time		JMP	ErrDisplay		;Loop forever			BlinkLED	PROC	NEAR				MOV	CX, 0FFFFH		;load counter valueBlinkLoop:	PUSHA				;do something time		POPA				;  consuming		LOOP	BlinkLoop		;		RET				;BlinkLED	ENDP				;;********************************;*				*;*	ParityErrDiag		*;*				*;********************************;; Parameters passed:;	AL  - contains contents of Memory Status Regr, hi byte;	DX  - on READ, contains port address of Memory Status Regr, hi byte;	DX  - on WRITE, contains port address to Clear Parity Error IntrpParityErrDiag	PROC	NEAR		OUT	DX, AL			;Any IO write clears PE Intrp 		MOV	AH, AL			;Save contents MSR, hi byte		DEC	DX			;Ready to read MSR, lo byte 		IN	AL, DX			;Get Mem. fault address, MSR lo byte		MOV	parityErrStat, AX 	;Save complete MSR in reserved location;Perform diagnostics from this point on		TEST	AH, BadMSRErr		;Exceptional condition, all ports enabled		JZ	BadMSRLabel		;				TEST	AH, PBEnabled		;Parity Err on Port B (MESA)?		JZ	PErrOnPortB		;		TEST	AH, PAEnabled		;Parity Err on Port A (IOP)?		JZ	PErrOnPortA		;		TEST	AH, PCEnabled		;Parity Err on Port C (DISPLAY)?		JZ	PErrOnPortC		;		JMP	BadMSRLabel		;Exectional err, no ports enabled		PErrOnPortB:	INC	portBErrCnt		;Incr counter		RET				;				PErrOnPortA:	INC	portAErrCnt		;Incr counter		RET				;						PErrOnPortC:	INC	portCErrCnt		;Incr counter		RET				;				BadMSRLabel:    INC	badMSRErrCnt		;Exeptional condition,  all/no ports		RET				;  enabledParityErrDiag	ENDP;********************************;*				*;*	BadParityIntrp		*;*				*;********************************BadParityIntrp    PROC	FAR		  INC	badParityIntrpCnt	;Keeping track of bad intrp		  MOV 	AX, 0			;		  MOV 	DX, MSR1Hi		;Clear PEIntrp MCC1 		  OUT 	DX, AL			;  write to MSR LoByte		  MOV 	DX, MSR2Hi		;Clear PEIntrp MCC2		  OUT 	DX, AL			;  write to MSR LoByte		  MOV 	DX, MSR3Hi		;Clear PEIntrp MCC3		  OUT 	DX, AL			;  write to MSR LoByte		  MOV 	DX, MSR4Hi		;Clear PEIntrp MCC4		  OUT 	DX, AL			;  write to MSR LoByte		  RET				;WaitForInterrupt still in effectBadParityIntrp	  ENDPIOPEInRAM	ENDS;********************************************************************************			END