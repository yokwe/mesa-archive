$MOD186$PAGELENGTH (95)$PAGEWIDTH  (136);Copyright (C) 1984, 1985 by Xerox Corporation. All rights reserved.;-- This task notifies other tasks of new work (for tasks which call GetWorkMaskForCondition);-- Its known clients are the Mesa interrupt handler and the Remote Heads facility through Bindweed;-- stored as [Idun]<WDLion>Dove>WorkNtfr.asm;-- last edited by:;--	JPM			22-Jul-85 10:35:32	:Change IOPEInROM alignment to WORD;--	JPM			26-Jun-85 16:41:59	:Opie redesign;--	FXB			28-Sep-84 14:50:53	:added Initialize Task;--	JPM			23-Jul-84 12:57:11	:CreatedNAME			WorkNtfr;--------------------------------------------------------------------------------; $NOLIST$INCLUDE		(IOPDefs.asm)$INCLUDE		(IOPMacro.asm)$INCLUDE		(OpieDefs.asm)$LIST;--------------------------------------------------------------------------------; ;;********************************************************************************OpieIOR			SEGMENT		COMMON 			Assume DS:OpieIOREXTRN			workNotifierCondition: ConditionEXTRN			workNotifierBitsPtr: WORDEXTRN			workMaskCount: BYTEEXTRN			workMaskConditionPtrs: WORDOpieIOR			ENDS;--------------------------------------------------------------------------------IOPEInROM		SEGMENT	WORD PUBLIC			ASSUME	CS:IOPEInROMPUBLIC			WorkNotifierTaskInitWorkNotifierTaskInit:; system-level task waits for notify from client, picks up data & clears it,;  then tests bits to check for individual notifies; no specific initialization requiredWorkNotifierWait:			%WaitForCondition	(OFFSET workNotifierCondition,noTimeout)			XOR	AX, AX		; prepare to exchange data with 0			MOV	SI, workNotifierBitsPtr	; get data address			MOV	DI, OFFSET workMaskConditionPtrs	; prepare to step through conditionPtr table			MOV	DH, 0			;set DX to end			MOV	DL, workMaskCount	; of occupied			SHL	DX, 1			;  condition ptr			ADD	DX, DI			;   tableWorkNotifyWordLoop:			CMP	DI, DX			JGE	WorkNotifierWait			XCHG	[SI], AX	; do exchange			MOV	CX, 16		; set up word loop control; test bits by rotating into carry (note that CF=0 because of TEST below)WorkNotifyLoop:		TEST	AX, AX			JZ	WorkNotifyWordDone			RCL	AX, 1	; rotate MSB into carry (and 0 into LSB)			JNC	WorkNotifyLoop1	; if bit=0, skip notify			PUSH	AX			MOV	BX, [DI]			MOV	AH, 0			MOV	AL, BH			SHR	AL, 1			AND	BH, HIGH MASK workMaskConditionOffset			%NotifyHandlerCondition	(AX,BX)	; do notify on conditionPtr from table			POP	AXWorkNotifyLoop1:	ADD	DI, sizeOfCondition	; advance table entry ptr (addition will not carry)			CMP	DI, DX			JGE	WorkNotifierWait	; end of table, go back and wait			LOOP	WorkNotifyLoop	; loopWorkNotifyWordDone:	SHL	CX, 1			ADD	DI, CX			INC	SI			JMP	WorkNotifyWordLoopIOPEInROM		ENDS			END