$MOD186$PAGELENGTH (95)$PAGEWIDTH  (136);Copyright (C) 1985 by Xerox Corporation. All rights reserved.;-- stored as [Idun]<WMicro>Dove>EEPProcs.asm;-- created on  18-Feb-85 17:31:33;-- last edited by:;--	JPM		17-Jul-85 10:09:20	:Made procs NEAR.;--	KEK	 	14-Jun-85 18:45:40	:remove HardEEP.;--	JPM		19-Feb-85  8:35:22	:Fixed bug in ReadEEProm (forgot to copy BX to AX at end).;--	JPM		18-Feb-85 17:31:33	:Created.NAME			EEPProcs;--------------------------------------------------------------------------------$NOLIST$INCLUDE		(HardDefs.asm)$LISTIOPEInRAM		SEGMENT		PUBLIC			ASSUME	CS:IOPEInRAMPUBLIC			ReadEEProm, WriteEEProm, EraseEEPromPUBLIC			EWEnableEEProm, EWDisableEEProm, ResetEEProm; Read EEProm;	at entry, BX = EEProm word address (0-63);	at exit, AX = EEProm data (16 bits)ReadEEProm		PROC	NEARReadBegin:		PUSH	BX			PUSH	CX			OR	BL, EEPCmdRead			CALL	SendCommand			XOR	BX, BX			MOV	CX, 16ReadLoop:		MOV	AX, EEPEnable+EEPClk			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			IN	AX, ReadInputPort			TEST	AX, EEPReadDataMask			JZ	ReadShiftData			STCReadShiftData:		RCL	BX, 1			LOOP	ReadLoop			MOV	AX, EEPEnable+EEPClk			OUT	WriteConfigReg, AX			XOR	AX, EEPEnable			OUT	WriteConfigReg, AX			MOV	AX, 0			OUT	WriteConfigReg, AX			MOV	AX, BX			POP	CX			POP	BXReadEnd:		RETReadEEProm		ENDP; Write EEProm (Erase or Reset must preceed call);	at entry, BX = EEProm word address (0-63), AX = EEProm data (16 bits)WriteEEProm		PROC	NEARWriteBegin:		PUSH	BX			PUSH	CX			PUSH	AX			OR	BL, EEPCmdWrite			CALL	SendCommand			POP	BX			PUSH	BX			MOV	CX, 16WriteLoop:		SHL	BX, 1			JC	WriteData1WriteData0:		AND	AX, NOT EEPWriteDataMask			JMP	SHORT WriteDataWriteData1:		OR	AX, EEPWriteDataMaskWriteData:		OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			LOOP	WriteLoop			MOV	AX, 0			OUT	WriteConfigReg, AX			XOR	AX, EEPEnable			OUT	WriteConfigReg, AXWriteLoop2:		IN	AX, ReadInputPort			TEST	AX, EEPStatusReady			JZ	WriteLoop2			MOV	AX, 0			OUT	WriteConfigReg, AX			POP	AX			POP	CX			POP	BXWriteEnd:		RETWriteEEProm		ENDP; Erase EEProm (word set to FFFF);	at entry, BX = EEProm word address (0-63)EraseEEProm		PROC	NEAREraseBegin:		PUSH	AX			PUSH	BX			PUSH	CX			OR	BL, EEPCmdErase			CALL	SendCommand			MOV	AX, 0			OUT	WriteConfigReg, AX			XOR	AX, EEPEnable			OUT	WriteConfigReg, AXEraseLoop:		IN	AX, ReadInputPort			TEST	AX, EEPStatusReady			JZ	EraseLoop			MOV	AX, 0			OUT	WriteConfigReg, AX			POP	CX			POP	BX			POP	AXEraseEnd:		RETEraseEEProm		ENDP; Erase/Write Enable EEProm;	no parametersEWEnableEEProm		PROC	NEAREWEnableBegin:		PUSH	AX			PUSH	BX			PUSH	CX			MOV	BL, EEPCmdEWEnable			CALL	SendCommand			MOV	AX, 0			OUT	WriteConfigReg, AX			POP	CX			POP	BX			POP	AXEWEnableEnd:		RETEWEnableEEProm		ENDP; Erase/Write Disable EEProm;	no parametersEWDisableEEProm		PROC	NEAREWDisableBegin:		PUSH	AX			PUSH	BX			PUSH	CX			MOV	BL, EEPCmdEWDisable			CALL	SendCommand			MOV	AX, 0			OUT	WriteConfigReg, AX			POP	CX			POP	BX			POP	AXEWDisableEnd:		RETEWDisableEEProm		ENDP; Reset EEProm (all words set to FFFF);	no parametersResetEEProm		PROC	NEARResetBegin:		PUSH	AX			PUSH	BX			PUSH	CX			MOV	BL, EEPCmdReset			CALL	SendCommand			MOV	AX, 0			OUT	WriteConfigReg, AX			XOR	AX, EEPEnable			OUT	WriteConfigReg, AXResetLoop:		IN	AX, ReadInputPort			TEST	AX, EEPStatusReady			JZ	ResetLoop			MOV	AX, 0			OUT	WriteConfigReg, AX			POP	CX			POP	BX			POP	AXResetEnd:		RETResetEEProm		ENDP;--------------------------------------------------------------------------------; Send command to EEProm;	command in BL; AX and CX trashedSendCommand		PROC	NEARSCBegin:		MOV	AX, EEPEnable			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			OR	AX, EEPWriteDataMask			MOV	CX, 9SCLoop:			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			XOR	AX, EEPClk			OUT	WriteConfigReg, AX			SHL	BL, 1			JC	SCData1SCData0:		AND	AX, NOT EEPWriteDataMask			JMP	SHORT SCEndLoopSCData1:		OR	AX, EEPWriteDataMaskSCEndLoop:		LOOP	SCLoopSCEnd:			RETSendCommand		ENDP;--------------------------------------------------------------------------------IOPEInRAM		ENDS;********************************************************************************									END