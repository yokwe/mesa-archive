$MOD186$PAGELENGTH (72)$PAGEWIDTH  (136);Copyright (C) 1985 by Xerox Corporation. All rights reserved.;-- stored as [Iris]<WMicro>Dove>RAMData.asm;;-- last edited by:;--	kek	11-Aug-86 16:17:18	:changes for multiple options support;--	JPM	17-Sep-85 14:28:36	:Remove software vectors (to use this with initialization routine during booting).;--	JPM	17-Sep-85 11:19:22	:Add extra hardware IV for non-vectored i8274.;--	JPM	12-Aug-85  9:12:21	:Change IOPEInRAM alignment to WORD.;--	JPM	 8-Aug-85 10:29:44	:Fixed controller offsets in IC table.;--	JPM	29-Jul-85 16:02:53	:Changed OpieIORinRAM to COMMON.;--	JPM	 1-Jul-85  9:04:59	:Changed OpieIOR to COMMON.;--	JPM	28-Jun-85 13:52:22	:Created from IOPData.asm.NAME			RAMData;--------------------------------------------------------------------------------$NOLIST$INCLUDE		(IOPDefs.asm)$INCLUDE		(HardOpie.asm)$INCLUDE		(OpieDefs.asm)$LIST;--------------------------------------------------------------------------------;;********************************************************************************OpieIOR			SEGMENT		COMMON;Generate CB EXTRNs%*DEFINE(Controller(name,intType,slaveEOIPort,PendPort,MaskPort))($GENONLY%IF(%EQS(%whereDefined,ROM)) THEN (EXTRN			%name%(Controller): ControllerBlock)FI); end Controller macro definition$SAVE			%InterruptControllers$RESTOREOpieIOR			ENDS;--------------------------------------------------------------------------------OpieIORinRAM		SEGMENT		WORD COMMON;Generate CB EXTRNs%*DEFINE(Controller(name,intType,slaveEOIPort,PendPort,MaskPort))($GENONLY%IF(%EQS(%whereDefined,RAM)) THEN (EXTRN			%name%(Controller): ControllerBlock)FI); end Controller macro definition$SAVE			%InterruptControllers$RESTORE;Generate ICB EXTRNs%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))($GENONLY%IF(%EQS(%whereDefined,RAM)) THEN (EXTRN			%name%(ICB): InterruptContextBlock)FI); end x macro definition$SAVE			%Devices$RESTOREOpieIORinRAM		ENDSOpieIORComplete		GROUP	OpieIOR, OpieIORinRAM;--------------------------------------------------------------------------------IOPEInRAM		SEGMENT		WORD PUBLIC			ASSUME	CS:IOPEInRAM;--------------------------------------------------------------------------------;PUBLIC			beginCBTable, wordsInCBTablePUBLIC			beginICTable, numberOfICsForRAMFunctions, sizeOfICInRAMPUBLIC			beginHardwareIVTable, numberOfHardwareIVsForRAMFunctions;--------------------------------------------------------------------------------;Generation of CB and ICB constant data; Appears in code-segment RAM and is copied to CBs and ICBs in Opie's IOR.;Generate CB data%*DEFINE(Controller(name,intType,slaveEOIPort,PendPort,MaskPort))($GENONLY%IF(%EQS(%whereDefined,RAM)) THEN (%name%(ramCB)		ControllerBlock	<%slaveEOIport,%PendPort,%MaskPort>)FI); end Controller macro definitionbeginCBTable:$SAVE			%InterruptControllers$RESTOREendCBTable:sizeOfCBTable		EQU	(endCBTable-beginCBTable)wordsInCBTable		EQU	sizeOfCBTable/2;Generate IC data%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))($GENONLY%IF(%EQS(%whereDefined,RAM)) THEN (			ORG	OFFSET ($-variableSizeOfIC)%name%(RamIC)		InterruptContext <,,,,,,,%enableMask,%slaveEOIcommand,OFFSET OpieIORComplete:%controlname%(Controller)>)FI); end x macro definition;Note that this depends on data being generated before here, since assembler won't; wrap backwards thru 0beginICTable:$SAVE			%Devices$RESTOREendICTable:sizeOfICInRAM		EQU	(sizeOfIC-variableSizeOfIC) ;Size in bytes of rom ICsizeOfICTable		EQU	(endICTable-beginICTable)numberOfICsForRAMFunctions	EQU	sizeOfICTable/sizeOfICInRAM;Generate hardware interrupt vector data%*DEFINE(x(name,controlname,channel,slaveEOIcommand,enableMask))( $GENONLY%IF(%EQS(%whereDefined,RAM)) THEN (			DW	4*%controlname%(IntrptVctType)+4*(%channel)			DW	OFFSET OpieIORComplete:%name%(ICB))FI)      beginHardwareIVTable:$SAVE			%Devices;the options and the RS232 interrupts are handled differently --; their interrupt line into their immediate master is programmed below,; and software then diverts control to the specific ICB as defined above; before it transfers to GenericInterruptProcessing.			DW	4*i8259SlaveIntrptVctType+4*(6)			DW	OFFSET OpieIORComplete: options0ICB			%IF(%i8274NonVectored) THEN (;extra IV for non-vectored i8274			DW	4*i8259MasterIntrptVctType+4*(4)			DW	OFFSET OpieIORComplete:TTYTxICB) FI$RESTOREendHardwareIVTable: sizeOfHardwareIVTable	EQU	(endHardwareIVTable-beginHardwareIVTable)numberOfHardwareIVsForRAMFunctions	EQU	sizeOfHardwareIVTable/4IOPEInRAM		ENDS;********************************************************************************			END