$MOD186$PAGELENGTH (72)$PAGEWIDTH  (136);Copyright (C) 1985 by Xerox Corporation. All rights reserved.;-- stored as [BammBam]<WMicro>Dove>MemHInt8.asm;-- created on  10-Mar-87 18:27:52;-- last edited by:;--	JMA	10-Mar-87 18:26:52	;created from MemHInit.asm;--	JPM	 7-Jan-87  9:06:40	;add call to GermInit.;--	KEK	16-Mar-86 13:42:22	;add PROC'ness, etc; org'd at 0.NAME		MemHInit$NOLIST$INCLUDE	(IOPDefs.asm)$INCLUDE	(OpieDefs.asm)$INCLUDE	(ROMBDefs.asm)$LIST;********************************************************************************IOPELocalRam		SEGMENT		AT 0			EXTRN	HandlerInitProcTable: SegmentAndOffset			EXTRN	device: WORDIOPELocalRam		ENDS;********************************************************************************IOPEInRAM		SEGMENT	WORD PUBLIC			ASSUME	CS:IOPEInRAM			ORG	0			$INCLUDE	(RAMHnds8.asm)	;file specifying which handlers we link with.EXTRN			GermInit: NEARPUBLIC	InitializeMemFunctionsInitializeMemFunctions 	PROC FAR			CALL	GermInit			MOV	AX, IOPELocalRam			MOV	ES, AX			ASSUME	ES:IOPELocalRam$NOGEN;The following macro enumerates those which are expected to be linked.%' RAMHands.asm defines a macro called HandlersLinked, which calls the%' %Handler macro for the names of all handlers the author provided.%*DEFINE(Handler(name,id,initProcAction,codeLocation))	(			PUBLIC	%name%(HandlerID)%name%(HandlerID)	EQU	%id				%IF (%EQS (%codeLocation,MEMORY)) THEN (	    %IF (%EQS (%initProcAction,CALL))	        THEN (EXTRN	%name%(Init): NEAR	  	      PUSH	ES%name%(StartMe:)      PUSH	CS	  	      CALL	%name%(Init)	  	      POP	ES	        ) ELSE	            (	            %IF (%EQS (%initProcAction,PROC))		        THEN (EXTRN	%name%(Init): NEAR			      MOV	DI, SIZE SegmentEntry * %id%name%(StoreMe:)	      MOV	HandlerInitProcTable[DI].segmentValue, CS			      MOV	HandlerInitProcTable[DI].offsetValue, OFFSET %name%(Init)		        ) ELSE		            (			    %IF (%EQS (%initProcAction,CALLPROC))			        THEN (MOV	DI, SIZE SegmentEntry * %id				      PUSH	ES%name%(StartMe:)		      CALL	DWORD PTR HandlerInitProcTable[DI]				      POP	ES			        ) ELSE			            (				    %IF (%EQS (%initProcAction,BOOTPROC))				        THEN (CMP	device, %name					      JE	%name%(SkipMe)					      MOV	DI, SIZE SegmentEntry * %id					      PUSH	ES%name%(StartMe:)			      CALL	DWORD PTR HandlerInitProcTable[DI]					      POP	ES%name%(SkipMe:)				        ) FI			        ) FI		        ) FI	        ) FI	) FI);Generate calls to Init Routines$GENONLY			%HandlersLinked			RETInitializeMemFunctions	ENDPIOPEInRAM		ENDS			END