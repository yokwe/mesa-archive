$MOD186$PAGELENGTH (72)$PAGEWIDTH  (136);Copyright (C) 1985 by Xerox Corporation. All rights reserved.;-- stored as [Iris]<WMicro>Dove>XtndOpie.asm;-- last edited by:;--	KEK	24-Oct-86 16:39:32	:fix fatfinger in turning on the options interrupt into the slave 8259. poo.;--	KEK	11-Aug-86 17:05:54	:changes to support multiple options;--	KEK	16-Mar-86 19:35:02	:add reset expansion channel.;--	JAC	 3-Dec-85 15:17:16	:Changed code at SetUpOptionsSlavei8259;--	JPM	 7-Oct-85 15:26:26	:Get around B2 EPROM bug;--	JPM	18-Sep-85 10:40:12	:Created from RAMInit.asmNAME			ExtendOpie;--------------------------------------------------------------------------------$NOLIST$INCLUDE		(IOPDefs.asm)$INCLUDE		(OpieDefs.asm)$INCLUDE		(HardOpie.asm)$INCLUDE		(IOPMacro.asm)$INCLUDE		(OpieMac.asm)$LIST%SET(i8259InitOK,0)	;B2 init code sets up i8259 wrong;--------------------------------------------------------------------------------IOPELocalRAM		SEGMENT	AT 0EXTRN			IOROpieSegmentAddress: WORDIOPELocalRAM		ENDS;--------------------------------------------------------------------------------OpieIOR			SEGMENT	COMMONEXTRN			mesaPageMapOffset: WORDEXTRN			mesaPageMapSegment: WORDEXTRN			workNotifierBitsPtr: WORDEXTRN			workMaskLimit: BYTEOpieIOR			ENDS;--------------------------------------------------------------------------------OpieIORinRAM		SEGMENT	WORD COMMONEXTRN			RAMCBbaseLocation: WORD, RAMICBbaseLocation: WORDEXTRN			RAMworkNotifierBits: WORDEXTRN			RAMworkMaskLimit: ABSEXTRN			DMAQueue: IOPEQueueOpieIORinRAM		ENDSOpieIORComplete		GROUP	OpieIOR, OpieIORinRAM;********************************************************************************IOPEInRAM		SEGMENT		WORD PUBLIC			Assume CS:IOPEInRAM; EXTRNs from RAMDataEXTRN			beginCBTable: WORD, wordsInCBTable: ABSEXTRN			beginICTable: WORD, numberOfICsForRAMFunctions: ABS, sizeOfICInRAM: ABSEXTRN			beginHardwareIVTable: WORD, numberOfHardwareIVsForRAMFunctions: ABS;--------------------------------------------------------------------------------PUBLIC InitOpieExtensionsInitOpieExtensions	PROC	FAR			PUSH	DS			MOV	DX, IOPELocalRAM			MOV	DS, DX		;to load interrupt vectors.			ASSUME	DS:IOPELocalRAM; program the interrupt controllers used by RAM handlers%IF(%i8274NonVectored AND %i8259InitOK) THEN () ELSE (SetUpMasteri8259:			CLI			MOV	AL, i8259MasterICW1	;Set up the 8259 operation			OUT	i8259MasterAddr0, AL	;by writing ICW1 to control reg 0			MOV	AL, i8259MasterIntrptVctType ;and ICW2-4 to control reg 1			OUT	i8259MasterAddr1, AL			MOV	AL, i8259MasterICW3			OUT	i8259MasterAddr1, AL			MOV	AL, i8259MasterICW4			OUT	i8259MasterAddr1, AL;Policy of Interrupts is to have each individual handler enable its own interrupt.; However, Opie is responsible for initially enabling the 8259 channels which have; slave interrupt controllers on them (either 8259 or internal 186), as well as; channels which do not belong to individual handlers (8274, umbilical receive).			MOV	AL, (i80186SlaveIntrptOn AND umbilicalRecEnable)			OUT	i8259MasterIntrptMaskPort, AL;Now, we must give the read register command to the master 8259 so that the; ISR (in-service register) bits are available			MOV	AL, i8259ISRread	;read ISR on subsequent reads			MOV	DX, i8259MasterAddr0			OUT	DX, AL			STI) FISetUpOptionsSlavei8259:		%Reset	(resetExpansionChannel) 	;hardware reset		MOV	AL, i8259OptionsSlaveICW1	;Set up the 8259 operation		OUT	i8259OptionsSlaveAddr0, AL	;by writing ICW1 to control reg 0		MOV	AL, i8259OptionsSlaveICW2	;and ICW2, ICW4 to control reg 1		OUT	i8259OptionsSlaveAddr1, AL		MOV	AL, i8259OptionsSlaveICW4			OUT	i8259OptionsSlaveAddr1, AL		MOV	AL, i8259AllInhibited	;All interrupts are inhibited		OUT	i8259OptionsSlaveIntrptMaskPort, AL	;until we turn them on later;Now, we must give the read register command to the options slave 8259 so that the; IP (in progress) bits are available		MOV	AL, i8259ISRread	;setup to read IS (in service) on subsequent reads		MOV	DX, i8259OptionsSlaveAddr0		OUT	DX, AL  ;Turn on i8259OptionsSlave IR6 interrupt into i8259Slave		IN	AL, i8259SlaveIntrptMaskPort		AND	AL, i8259EnableIR6		OUT	i8259SlaveIntrptMaskPort, ALSetUpSlavei8274:						%Reset	(resetRS232CController)	;hardware reset of 8274.						MOV	DX, i8274DCommACtlrAddr	;initialize channel A!			MOV	AL, i8274RstChannelCommand			OUT	DX, AL			;wait for channel A to be reset.			NOP			NOP			NOP			NOP			MOV	AL, i8274RstErrorCommand			OUT	DX, AL			; --reset errors			MOV	AL, i8274WriteRegister4			OUT	DX, AL			; --select WR4			MOV	AL, 0			OUT	DX, AL			; --WR4 ¬ dontCare (like, zero)			MOV	AL, i8274WriteRegister2			OUT	DX, AL			; --select WR2			MOV	AL, i8274OpieInitCommand			OUT	DX, AL			; --WR2 ¬ initial programming			MOV	AL, i8274RstRxCRCCommand			OUT	DX, AL			; --reset rcvr errors			MOV	AL, i8274RstTxCRCCommand			OUT	DX, AL			; --reset txr errors			MOV	AL, i8274RstErrorCommand			OUT	DX, AL			; --reset errors			MOV	DX, i8274DCommBCtlrAddr	;initialize channel B!			MOV	AL, i8274RstChannelCommand			OUT	DX, AL			;wait for channel B to be reset.			NOP			NOP			NOP			NOP			MOV	AL, i8274WriteRegister4			OUT	DX, AL			; --select WR4			MOV	AL, 0			OUT	DX, AL			; --WR4 ¬ dontCare (like, zero)			MOV	AL, i8274WriteRegister2			OUT	DX, AL			; --select WR2%IF(%i8274NonVectored) THEN (			MOV	AL, 0) ELSE (			MOV	AL, i8274SlaveIntrptVctType) FI			OUT	DX, AL			; --WR2 ¬ interrupt vector value			MOV	AL, i8274WriteRegister1			OUT	DX, AL			; --select WR1			MOV	AL, i8274VarVect			OUT	DX, AL			; --WR1 ¬ variable vector mode			MOV	AL, i8274RstRxCRCCommand			OUT	DX, AL			; --reset rcvr errors			MOV	AL, i8274RstTxCRCCommand			OUT	DX, AL			; --reset txr errors			MOV	AL, i8274RstErrorCommand			OUT	DX, AL			; --reset errors	;load additional hardware vectors from data tablesHardwareVectors:	MOV	BX, IOROpieSegmentAddress			MOV	CX, numberOfHardwareIVsForRAMFunctions			JCXZ	InitializeOpieIOR			MOV	SI, OFFSET beginHardwareIVTableInitializeHardwareVectors:			MOV	DI, CS:[SI]			MOV	AX, CS:[SI]+2			MOV	[DI].offsetValue, AX			MOV	[DI].segmentValue, BX			ADD	SI, 4			LOOP	InitializeHardwareVectors ;Loop until done; now get Opie's IOR extensions initializedInitializeOpieIOR:	MOV	DS, BX			ASSUME	DS:OpieIORComplete; initialize CBs			MOV	CX, wordsInCBTable			JCXZ	InitializeICBs			MOV	SI, OFFSET beginCBTable			MOV	DI, OFFSET OpieIORComplete:RAMCBbaseLocation			MOV	ES, BX	;for string moves			CLICBTableLoop:	REP	MOVS	WORD PTR ES:[DI], CS:[SI]			STI; initialize ICBsInitializeICBs:		MOV	CX, numberOfICsForRAMFunctions			JCXZ	FinishOpieIORInit			MOV	SI, OFFSET beginICTable			MOV	DI, OFFSET OpieIORComplete:RAMICBbaseLocation			MOV	AX, CS			MOV	ES, AX	;for init callsICTableLoop:		%InitializeICB			ADD	DI, SIZE interruptContextBlock			ADD	SI, sizeOfICInRAM			LOOP	ICTableLoopFinishOpieIORInit:	;init RAM-defined options DMA channel queue.			MOV	DMAQueue.handlerIDforHead, nilHandlerID			MOV	DMAQueue.handlerIDforTail, nilHandlerID			;init IOROpie's VMM ptr -- note that already did this as part of booting!			MOV	mesaPageMapOffset, 0			MOV	mesaPageMapSegment, ((mesaVMMapRegister AND 7H) SHL 13)	; 128KB block / 16			MOV	workNotifierBitsPtr, OFFSET OpieIORComplete:RAMworkNotifierBits			MOV	workMaskLimit, LOW RAMworkMaskLimitInitDone:		POP	DS			RETInitOpieExtensions	ENDPIOPEInRAM		ENDS;********************************************************************************			END