{File name: Extensions.dfnDefinitions for initialization, escape code configuration, and bank switchingCreated: July 16, 1986 by JPMLast Revised:SxO/TxH	12-Sep-88 17:53:42	add addrPCEMedRes, addrBank2ESCx, addrNMAD and addrCLR.				delete Set[xxx, thereAreTwoBanks] macros.TXM	13-Jul-88 10:32:23  add addrByteBLT, addrBLTsIntRet and addrBLTsFltRetTXM	 6-Jun-88  9:08:59  add addrBandBLT and addrBandBIntDispOctober 15, 1987 -- JPM -- take codes F0 - FF out of bank 1 (so that IBEmpty trap won't cause bank switch)October 8, 1987 -- JPM -- change addressesAugust 18, 1987 -- JPM -- change address of addrBank1ESCx, put unassigned codes into bank 1November 24, 1986 -- JPM -- remove FPTEnabled (correct value in SingleBank.dfn/DualBank.dfn)August 4, 1986 -- JPM -- add BandBLT linkage addressesJuly 29, 1986 -- JPM -- add addrLinkage and FPTEnabled; reserve kernel space}{ 	Copyright (C) 1986, 1987 by Xerox Corporation.  All rights reserved.}Reserve[0F6F, 0FFF];	{Kernel}{Hard-wired addresses in bank 0 -- always needed}Set[addrDISPNIonly,	0DA3],Set[addrESCc,		0BEF],Set[addrESCHi,		0C00],Set[addrRefillInt,	0B1E],Set[addrSaveRegs,	0CB6];Set[addrBLTsIntRet,	02CC];Set[addrBLTsFltRet,	02CD];Set[addrLinkage,	0004];{IfEqual[thereAreTwoBanks,0,SkipTo[DoneWithBankStuff],]; ***}{Bank constants}Set[bank0,		0],Set[bank1,		0C];Set[bank2,		0A];Set[bank3,		09];{Hard-wired addresses in bank 0, for conditional BandBLT code}SetLabel[LSEPReturn, 03A8],Set[addrTrapzReturn, Or[03A8{LSEPReturn}, 1{Type.LSEP}]];{Hard-wired addresses in bank 1}Set[addrBank1ESCx,	0000];Set[addrBandBLTIntEntry, 0009];Set[addrBandBLTNormalEntry, 000A];{Hard-wired addresses in bank 1}Set[addrBandBLT, 000C];Set[addrByteBLT, 000D];Set[addrPCEMedRes, 000E];Set[addrNMAD, 000F];Set[addrCLR, 0010];{Hard-wired addresses in bank 2}Set[addrBank2ESCx,	0000];{Macros for cross-bank jumps}MacroDef[GOTOBANK3,GOTOABS[addr#1]];MacroDef[GOTOBANK2,GOTOABS[addr#1]];MacroDef[GOTOBANK1,GOTOABS[addr#1]];MacroDef[GOTOBANK0,GOTOABS[addr#1]];{DoneWithBankStuff! ***}{Escape code configuration: 0 = implemented in bank 0 (see Misc.mc for specifics) 1 = implemented in bank 1 when present (see Bank1Misc.mc for specifics)}{Set[ESC0nInBank1,0],			emulator -- always in bank 0}{Set[ESC1nInBank1,0],			emulator -- always in bank 0}{Set[ESC2nInBank1,0],			emulator -- always in bank 0}{Set[ESC3nInBank1,0],			emulator -- always in bank 0}{Set[ESC4nInBank1,thereAreTwoBanks],}	{floating point}{Set[ESC5nInBank1,thereAreTwoBanks];}	{floating point -- unused}Set[ESC6nInBank1,0],			{Cedar}{Set[ESC7nInBank1,0],			emulator -- always in bank 0}{Set[ESC8nInBank1,0],			processor-dependent -- always in bank 0}{Set[ESC9nInBank1,0],			processor-dependent -- always in bank 0}{Set[ESCAnInBank1,thereAreTwoBanks],}	{image processing}{Set[ESCBnInBank1,thereAreTwoBanks],}	{RES support}{Set[ESCCnInBank1,thereAreTwoBanks],}	{unassigned}{Set[ESCDnInBank1,thereAreTwoBanks],}	{unassigned}{Set[ESCEnInBank1,thereAreTwoBanks],}	{floating point}{Set[ESCFnInBank1,0];}			{unassigned -- don't use (IBEmpty trap here)}