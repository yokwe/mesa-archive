{RESSupport.dfnCreated:	 8-Oct-87 16:08:34,	JPMLast Edited:	13-Nov-87 13:14:31,	JPM,	comment out register definitions which are common to other IP functions (marked with <-)}{	Copyright (C) 1987 by Xerox Corporation.  All rights reserved. }{R AND RH REGISTER DEFINITIONS}RegDef[rOffset,		R,	0];RegDef[rStatus,		R,	0];RegDef[rWpl,		R,	0];{RegDef[rSrcWord,	R,	1];<-}{RegDef[rSrcReal,	R,	2];<-}{RegDef[rhSrcReal,	RH,	2];<-}{RegDef[rDstReal,	R,	6];<-}{RegDef[rhDstReal,	RH,	6];<-}RegDef[rLength,		R,	6];RegDef[rSrcBits,	R,	9];{RegDef[rTemp,		R,	9];}RegDef[rDstBits,	R,	0B];{RegDef[rVirtualL,	R,	0B];<-}{RegDef[rhVirtualH,	RH,	0B];<-}RegDef[rCode,		R,	0C];RegDef[rRun,		R,	0C];RegDef[rPut2N,		R,	0C];RegDef[rCarryover,	R,	0C];RegDef[rhCode,		RH,	0C];{RegDef[rDstWord,	R,	0E];<-}{RegDef[rMaskN,		R,	0E];<-}{U REGISTER DEFINITIONS}{U REGISTER BLOCK 0 -- EMULATOR STACK}RegDef[uScanLineVL,	U,	2];RegDef[uScanLineVH,	U,	3];RegDef[uLength,		U,	4];RegDef[uIMGVL,		U,	4];RegDef[uIMGVH,		U,	5];RegDef[uWpl,		U,	6];RegDef[uScanLineWord,	U,	7];RegDef[uScanLineBits,	U,	8];RegDef[uStreamVL,	U,	9];RegDef[uStreamVH,	U,	0A];RegDef[uStreamWord,	U,	0B];RegDef[uStreamBits,	U,	0C];{---------------------------------------------------------}{Link register values}{LoadLocalStream}Set[L0.GetRuns, 0];Set[L0.PredictEncode, 1];{CheckLocalStream}{Set[L0.GetRuns, 0];}{Set[L0.PredictEncode, 1];}{StoreLocalStream}{Set[L0.GetRuns, 0];}{Set[L0.PredictEncode, 1];}{MapSrc}MacroDef[RMapSrcRet, at[#1,10,RMapSrcRtn]];MacroDef[RMapSrcF, at[#1,10,RMapSrcFault]];{Set[L0.GetRuns, 0];}{Set[L0.PredictEncode, 1];}{MapDst}MacroDef[RMapDstRet, at[#1,10,RMapDstRtn]];MacroDef[RMapDstF, at[#1,10,RMapDstFault]];{Set[L0.GetRuns, 0];}{Set[L0.PredictEncode, 1];}Set[L0.BumpRemap, 2];Set[L0.RippleXOR, 5]; {must be 1 MOD 4}{MapReadFix}Set[L1.GetN, 2];Set[L1.PrEn, 4];Set[L1.MapSrc, 5];{MapWriteFix}Set[L1.LoadLocal, 0];Set[L1.CheckLocal, 1];Set[L1.PutN, 3];Set[L1.MapDst, 6];{GetN}Set[L3.CodeHigh, 0];Set[L3.C8Low, 4];Set[L3.C12Low, 0E];Set[L3.C12Mid, 0F];{PutN}Set[L3.C12ZLow, 1]; {must be 1 MOD 2}Set[L3.Last1or2, 4]; {must be 0 MOD 2}Set[L3.FaultZ, 8];Set[L3.FaultC12Low, 9];{Put2N}Set[L3.C12ZHighMid, 3];{Set[L3.Last1or2, 4];}Set[L3.C12HighMid, 5];{constants}Set[L2.Predict, 0];Set[L2.Encode, 2];Set[GetRuns.status.ok, 0],Set[GetRuns.status.soiInData, 1],Set[GetRuns.status.scanTooLong, 2],Set[GetRuns.status.illegalGin12bit, 3];	{ End }