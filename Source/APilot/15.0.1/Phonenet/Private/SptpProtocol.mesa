-- File: SptpProtocol.mesa - last edit:-- AOF                 15-Jan-88  9:38:25-- Copyright (C) 1987, 1988 by Xerox Corporation. All rights reserved.DIRECTORY  Buffer USING [Buffer, DeviceType, QueueObject],  Environment USING [Byte],  Driver USING [Device],  NewRS232CFace USING [TransferStatus],  PhoneNet USING [EntityClass],  RS232CEnvironment USING [Duplexity],  System USING [GreenwichMeanTime, HostNumber];SptpProtocol: DEFINITIONS =  BEGIN  EntityClass: TYPE = PhoneNet.EntityClass;      ProtocolVersion: TYPE = MACHINE DEPENDENT {    null(0),  old(1), version2(2), version3(3), version4(4),    (LAST[Environment.Byte])};  Encapsulation: TYPE = LONG POINTER TO EncapsulationObject;  EncapsulationObject: TYPE = MACHINE DEPENDENT RECORD[    var(0): SELECT packetType(0: 0..7): PacketType FROM      control => [      --control(0)--        LTA(0:8..8): BOOLEAN,	reserved(0:9..9): BOOLEAN,	control(0:10..15): ControlType],      pup, ns, arpa, iso => [      --pup(4), ns(12), arpa(13), iso(14)--        LTA(0:8..8): BOOLEAN,	more(0:9..9): BOOLEAN,	fragment(0:10..15): Fragment],      siuSet, siuEcho, siuDetermineLS => [      --siuSet(16), siuEcho(17), siuDetermineLS(18)--	LTA(0:8..8): BOOLEAN,	reserved(0:9..15): [0..127],	immedDest(1:0..47): System.HostNumber],      ENDCASE];  Fragment: TYPE = RECORD[n, of: CARDINAL[0..8)];      Control: TYPE = LONG POINTER TO ControlBody;  ControlBody: TYPE = MACHINE DEPENDENT RECORD [    body(0): SELECT COMPUTED ControlType FROM      addressReject => [],      areYouThere => [],      classReject => [],      iAmHere => [],      myOptions => [        highestVersionNumber(0:0..7): ProtocolVersion,        lowestVersionNumber(0:8..15): ProtocolVersion,        sourceHost(1:0..47): System.HostNumber,        entityClass(4:0..7): EntityClass,        maxPktSizeHiByte(4:8..15): Environment.Byte,	maxPktSizeLowByte(5:0..7): Environment.Byte,        -- 'cause compiler can't handle        -- a word size field that doesn't start at bit 0 in a word        spareByte1(5:8..15): Environment.Byte ¬ 0],      null => [],      optionsAck => [destinationHost(0:0..47): System.HostNumber],      sizeReject => [],      terminateReply => [],      terminateRequest => [],      versionReject => [        highestVersionNumber(0:0..7): ProtocolVersion,        spareByte1(0:8..15): Environment.Byte ¬ 0],      ENDCASE];  ControlType: TYPE = MACHINE DEPENDENT{    null(1), terminateRequest(2), terminateReply(3), areYouThere(4), iAmHere(5),    myOptions(10), optionsAck(11), versionReject(12), classReject(13),    addressReject(14), sizeReject(15), (63)};  PacketType: TYPE = MACHINE DEPENDENT{control(0), pup(4), ns(12),    arpa(13), iso(14), siuSet(16), siuEcho(17), siuDetermineLS(18), (255)};  DriverInformation: TYPE = MACHINE DEPENDENT RECORD [    length(0:0..15): CARDINAL,  --in bytes, including encapsulation    iocb(1:0..31): LONG POINTER,  --pointer to control block (drivers only)    faceStatus(3:0..15): SELECT device(3:0..3): Buffer.DeviceType FROM      phonenet => [status(3:4..15): NewRS232CFace.TransferStatus], ENDCASE];  OkayEntityClasses: TYPE = ARRAY EntityClass OF ARRAY EntityClass OF BOOLEAN;  okayEntityClasses: OkayEntityClasses = [    -- internetworkRouter clusterRouter   siu   remoteHost    --internetworkRouter-- [TRUE, TRUE, --TRUE--FALSE, FALSE],    --clusterRouter-- [TRUE, FALSE, FALSE, TRUE],    --siu-- [--TRUE--FALSE, FALSE, FALSE, TRUE],    --remoteHost-- [FALSE, TRUE, TRUE, TRUE]];  MasterSlaveRelationship: TYPE = {undetermined, me, him};  ProtocolInfo: TYPE = LONG POINTER TO ProtocolObject;  ProtocolObject: TYPE = RECORD[    state: State,  --realtime state of the connection    master: MasterSlaveRelationship,  --of the current circuit    started, established: System.GreenwichMeanTime,  --for this connection    me, him: System.HostNumber,  --host IDs of the connection    protocolVersion: ProtocolVersion,  --with some local extensions    lineNumber: CARDINAL, duplex: RS232CEnvironment.Duplexity,    ourEntityClass, theirEntityClass: EntityClass];  --from the connection  State: TYPE = {    idle,        -- awaiting physical medium    option1,     -- active negotiation    option2,     -- passive negotiation    option3,     -- awaiting options    option4,     -- awaiting optionsAck    data,        -- data transfer    terminate1,  -- await terminateReply    terminate2   -- termination dally    };  EncapsulationFromBlock: PROC[    block: LONG POINTER TO PACKED ARRAY INTEGER[0..0) OF Environment.Byte]    RETURNS[Encapsulation] = INLINE {RETURN[LOOPHOLE[block]]};  Protocol: TYPE = LONG POINTER TO ProtocolRecord;  ProtocolRecord: TYPE =  RECORD[    q: Buffer.QueueObject,    myDevice: Driver.Device,    lock: LONG POINTER TO MONITORLOCK,    watcher: PROCESS, engine: CONDITION,    sendControlFrame: PROC[b: Buffer.Buffer, size: NATURAL],    sppAllocationWindow: NATURAL, object: ProtocolObject];  ProtocolProc: TYPE = PROC[protocol: Protocol, lta: BOOLEAN ¬ TRUE];  WaitForControl: PROC[protocol: Protocol, timeout: LONG CARDINAL]    RETURNS[Buffer.Buffer];  ProcessControl: PROC[protocol: Protocol, b: Buffer.Buffer];  SendTerminateRequest, SendNull, ActiveNegotiation: ProtocolProc;  PassiveNegotiation, AwaitingOptions, AwaitingOptionAck: ProtocolProc;  AwaitTerminateReply, SendAreYouThere, TerminationDally: ProtocolProc;  END....  --SptpProtocol