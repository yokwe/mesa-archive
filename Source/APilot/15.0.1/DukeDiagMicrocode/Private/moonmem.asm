$	DEBUG MOD186;MoonMemoryTest.asm	NAME	MoonMemoryTest$	TITLE(Memory Test)$	NOLIST		;Next line includes Daisy.def	$	INCLUDE(MoonSys.def)$	INCLUDE(MOONLINK.def);-----------------------------------------------------------------MTCBlock  STRUC  MMesaIntCount 		DB  0MInterFaceControl 	DB  0MPageParity 		DB  0MBankParity 		DB  0MIOPErrorControl 	DB  0MTimeOut		DB  0MMemoryControl 		DB  0MDisplayControl 	DB  0MCSAddress 		DW  0MEndIOPPage		DB  0MEndIOPBank 		DB  0MEndIOPWord		DB  0MEndIOPDataType		DB  0MIOPStartPassData	DW  0MIOPExpectedData	DW  0MIOPObservedData	DW  0MPassCount		DB  0MSpare0			DB  0MStartPage		DB  0MStartBank		DB  0MEndPage		DB  0MEndBank		DB  0MEndWord		DB  0MStartWord		DB  0MStartMapPage		DB  0MStartMapBank		DB  0MEndMapPage		DB  0MEndMapBank		DB  0MStartData		DW  0MTestControl		DB  0MStartDataType		DB  0MMesaErrorControl	DB  0MDataControl		DB  0MDelayTime		DW  0MTCBlock ENDS;Have to split struc because of assemblerMRMCTBLoc equ 40 ;OffSet to add to TCBPointer infoMTCBlock0  STRUC  MEndMesaPage		DB  0MEndMesaBank		DB  0MEndMesaWord		DB  0MEndMesaDataType	DB  0MMesaStartPassData	DW  0MMesaExpectedData	DW  0MMesaObservedData	DW  0MSpare1			DB  0MMesaFault		DB  0MTCBlock0 ENDSSMTCBlock  STRUC  SSMTCBPattern		DW  0SInterFaceControl	DB  0SPassCount		DB  0SStartBank		DB  0SStartPage		DB  0SEndBank		DB  0SEndPage		DB  0SStartWord		DB  0SEndWord		DB  0SStartMapBank		DB  0SStartMapPage		DB  0SEndMapBank		DB  0SEndMapPage		DB  0SStartData		DW  0SStartDataType		DB  0STestControl		DB  0SDataControl		DB  0SMesaErrorControl	DB  0SDelayTime		DW  0SMemSize		DW  0SMemSize1		DW  0SMTCBlock ENDSRMTCBlock  STRUC  RRMTCBPattern		DW  0REndMesaBank		DB  0REndMesaPage		DB  0REndMesaDataType	DB  0REndMesaWord		DB  0RMesaStartPassData	DW  0RMesaExpectedData	DW  0RMesaObservedData	DW  0RSpare1			DB  0RMesaFault		DB  0RMTCBlock ENDS;InterFace ControlMRunMesaOnly	equ 0MRunMesaAndIOP	equ 1MRunIOPOnly	equ 2MRunPCOnly	equ 3MNoStopStartMesa	equ 40H;State CounterMNoInterrupts	equ 0;Error ControlMStopOnError		equ 0MStopOnPhaseDone	equ 1MReStartOnError		equ 2MReStartOnPhaseDone	equ 3MNoCSAddOnTimeOut	equ 8 ;(IOP Only)MNoMemoryParityErrors	equ 80h ;(IOP Only);Display ControlMDisplayOn		equ 1;Memory Control;SMCTBPatternSMCTBPattern		equ 0E88EH ;8EE8H in Memory;RMCTBPatternRMCTBPattern		equ 0C44CH ;4CC4H in Memory;Data Type ControlMBlockType		equ 0MAddressType		equ 1MRandomPlusType		equ 2MRandomXORType		equ 3MBankType		equ 4;Test ControlMStore			equ 0MCheck			equ 1MStoreAndCheck		equ 2MMapStore		equ 3MMapCheck		equ 4MMapStoreAndCheck	equ 5MSizeStore		equ 6MSizeCheck		equ 7MSizeStoreAndCheck	equ 8;Data ControlMIncData		equ 1MIncDataType		equ 2;Fault ControlMNoError		equ 0MDataError		equ 1MMapDataError		equ 2MMemSizeError		equ 8MemDataInc equ 01h;-----------------------------------------------------------------$	LIST		;Previous line included Daisy.def;--------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode, ES:MonitorCode	ORG TestCodeLoc ;-----------------------------------------------------------------         jmp MemStart	 jmp MemPreProcess	 jmp MemFRUList	 jmp ExClearLog  	 jmp ExParityDataLog	 jmp ExParityAddressLog	 jmp ExAnalize	  	ORG  MemTestCodeLoc   MemTemp0    DW  0	    MemStart:   Mov bx,[si].TCBPointer ;Get Index to TCB	    CALL SetVectors	    CALL TCBSetUp	    CALL ExtStopDisplay	    TEST  [bx].MDisplayControl,MDisplayOn	    jz NoDisplay   	    CALL ExtStartDisplayNoDisplay:  mov al, [bx].MInterFaceControl	    and al,0FH	    cmp AL,MRunMesaAndIOP	    jg IopOnlyTestMemStart1:  CALL ExtNewStartM	    Mov bx,[si].TCBPointer ;Get Index to TCB	    CALL StopStoping              jmp   DoMemTest    ;-----------------------------------------------------------------	    IopOnlyTest: CALL IOPSetUp	     CALL Store ;Routines at lower match check for Keyboard	     CALL SizeStore	     cmp  [di].IOPFault,NoIOPFault	     jz IopOnlyTest1	     TEST  [bx].MIOPErrorControl,MReStartOnError	     jnz IopOnlyTestIopOnlyTest1:CALL MDelay	     CALL IOPSetUp	     CALL Check	     CALL SizeCheck	     TEST  [bx].MIOPErrorControl,MReStartOnError	     jnz IopOnlyTest	     cmp  [di].IOPFault,NoIOPFault	     jnz IOPDoneRetCkIOPOnlyPassDone:dec [bx].MSpare0	     jz IOPDoneRet	     CALL IncData	     CALL IncDataType	     jmp IopOnlyTestIOPDoneRet:  jmp  Done2	    DoMemTest:  CALL ExtInterruptCp	    CALL WaitForRmtcb ;this will post error if cp times out	    mov ES:RRMTCBPattern,1111H            TEST  [di].IOPFault,IOTimeOutError	    jz StartTest	    TEST  [bx].MIOPErrorControl,MReStartOnError	    jz DoMemTest1	    jmp NoDisplayDoMemTest1: CALL GetCSAddress            jmp  Done2StartTest:  CALL SetSmtcb	    CALL ExtInterruptCp	    TEST [bx].MInterFaceControl,MRunMesaAndIOP	    jnz StartIOPTestMesaOnlyLoop:Call ExtDoRunTimeWork            cmp  [di].IOPFault,NoIOPFault	    jz MesaOnlyLoop1	    TEST  [bx].MIOPErrorControl,MStopOnPhaseDone	    jz DoneMesaOnlyLoop1:cmp [bx].MMesaIntCount,MNoInterrupts	    je MesaOnlyLoop	    jmp Done    StartIOPTest:CALL IOPSetUp	     CALL Store  ;Routines at lower match check for CP interrupts/Keyboard	     CALL SizeStore	     Call InterFaceControl	     CALL MDelay	     CALL WaitForRmtcb ;this will post error if cp times out	     mov ES:RRMTCBPattern,2222H              cmp  [di].IOPFault,NoIOPFault	     jz StartPhase1	     jmp  DoneStartPhase1: CALL IOPSetUp	     CALL Check	     CALL SizeCheck	     Call InterFaceControl	     CALL WaitForRmtcb	     mov ES:RRMTCBPattern,3333H	     cmp  [di].IOPFault,NoIOPFault	     jz CkPassDone	     jmp DoneCkPassDone:  TEST  [bx].MIOPErrorControl,MReStartOnError	     jnz Done             dec [bx].MSpare0	     jz Done	     CALL IncData	     CALL IncDataType	     jmp StartIOPTest	     Done:        CALL ExtInterruptCp	     CALL WaitForRmtcb ;this will post error if cp times out	     TEST  [di].IOPFault,IOTimeOutError	     jnz CheckCanStop	     CALL GetRmtcbCheckCanStop:TEST  [bx].MIOPErrorControl,MReStartOnError	     jz Done1	     jmp NoDisplayDone1:	     CALL GetCSAddressDone2:       TEST  [bx].MIOPErrorControl,MReStartOnError	     jz Done3	     jmp NoDisplayDone3:	     ;Test [DI].FileControl,BurdockFile	     ;jnz Done4	     ;RetDone4:	     jmp ExAnalize;MaybeClearLog:Test [DI].FileControl,BurdockFile	     ;jnz MaybeClearLog1	    ; Ret;MaybeClearLog1:jmp ExClearLog;MaybeParityDataLog:Test [DI].FileControl,BurdockFile	     ;jnz MaybeParityDataLog1	     ;Ret;MaybeParityDataLog1:jmp ExParityDataLog;MaybeParityAddressLog:Test [DI].FileControl,BurdockFile	     ;jnz MaybeParityAddressLog1	    ; Ret;MaybeParityAddressLog1:jmp ExParityAddressLog	    IncData: TEST  [bx].MDataControl,MIncData	 jz IncDataRet	 mov ax, [bx].MIOPStartPassData	 add al,MemDataInc	 add ah,MemDataInc	 mov [bx].MIOPStartPassData, axIncDataRet: Ret	 IncDataType: TEST  [bx].MDataControl,MIncDataType	 jz IncDataTypeRet	 inc [bx].MEndIOPDataType	 cmp [bx].MEndIOPDataType,MBankType	 jle IncDataTypeRet	 mov [bx].MEndIOPDataType,MBlockTypeIncDataTypeRet: RetSetSmtcb:    MOV	AX,4000H  ;This is equal to map reg 2	     MOV	ES, AX	     mov al,[bx].MInterFaceControl	     and al,0FH 	     mov ES:SInterFaceControl,al 	     mov al,[bx].MPassCount	     mov ES:SPassCount,al 	     mov al,[bx].MStartBank	     mov ES:SStartBank,al 	     mov al,[bx].MStartPage	     mov ES:SStartPage,al 	     mov al,[bx].MEndBank	     mov ES:SEndBank,al 	     mov al,[bx].MEndPage	     mov ES:SEndPage,al 	     mov al,[bx].MStartWord	     mov ES:SStartWord,al 	     mov al,[bx].MEndWord	     mov ES:SEndWord,al 	     mov al,[bx].MStartMapBank	     mov ES:SStartMapBank,al 	     mov al,[bx].MStartMapPage	     mov ES:SStartMapPage,al 	     mov al,[bx].MEndMapBank	     mov ES:SEndMapBank,al 	     mov al,[bx].MEndMapPage	     mov ES:SEndMapPage,al 	     	     mov ax,[bx].MStartData	     xchg al,ah	     mov ES:SStartData,ax 	     	     mov al,[bx].MStartDataType	     mov ES:SStartDataType,al 	     mov al,[bx].MTestControl	     mov ES:STestControl,al 	     mov al,[bx].MDataControl	     mov ES:SDataControl,al 	     mov al,[bx].MMesaErrorControl	     mov ES:SMesaErrorControl,al 	     	     mov ax,[bx].MDelayTime	     xchg al,ah	     mov ES:SDelayTime,ax 	     	     cmp [bx].MTestControl,MMapStoreAndCheck	     jle SendMemConf	     mov ax,0	     mov dx,WORD PTR [DI][ExtMemConf]	     Call CountBanks	     mov dx,WORD PTR [DI][ExtMemConf1]	     Call CountBanks	     jmp SendBankCount	     SendMemConf: mov ax,WORD PTR [DI][ExtMemConf]SendBankCount:xchg al,ah	     mov ES:SMemSize,ax 	     	     mov ax,WORD PTR [DI][ExtMemConf1]	     xchg al,ah	     mov ES:SMemSize1,ax 	     mov ax,SMCTBPattern	     mov ES:SSMTCBPattern,ax 	     RetGetRmtcb:   MOV	AX,4000H  ;This is equal to map reg 2	    MOV	ES, AX	    cmp ES:RRMTCBPattern,RMCTBPattern	    je GetRmtcbok	    or [di].IOPFault,IOTimeOutError	    retGetRmtcbok: add bx,MRMCTBLoc 	    mov al,ES:REndMesaBank 	    mov [bx].MEndMesaBank,al	    mov al,ES:REndMesaPage 	    mov [bx].MEndMesaPage,al	    mov al,ES:REndMesaDataType 	    mov [bx].MEndMesaDataType,al	    mov al,ES:REndMesaWord 	    mov [bx].MEndMesaWord,al	    mov ax,ES:RMesaStartPassData 	    xchg al,ah	    mov [bx].MMesaStartPassData,ax	    mov ax,ES:RMesaExpectedData 	    xchg al,ah	    mov [bx].MMesaExpectedData,ax	    mov ax,ES:RMesaObservedData 	    xchg al,ah	    mov [bx].MMesaObservedData,ax	    mov al,ES:RMesaFault 	    or [bx].MMesaFault,al	    or [di].MesaFault,al	    mov ax,6655H	    mov ES:RRMTCBPattern,2222H	    Mov bx,[si].TCBPointer ;Get Index to TCB            Ret	    TCBSetUp:   mov al,[bx].MPassCount	    mov [bx].MSpare0,al	    mov al,[bx].MStartDataType	    mov [bx].MEndIOPDataType,al	    mov ax,[bx].MStartData	    mov [bx].MIOPStartPassData,ax	    mov [bx].MBankParity,0	    mov [bx].MPageParity,0	    mov [bx].MMesaIntCount,0            add bx,MRMCTBLoc	    mov [bx].MMesaFault,0	    Mov bx,[si].TCBPointer ;Get Index to TCB	    call ProgramAllACReg ;based on MEndIOPBank bank info	    MOV	AX,4000H  ;This is equal to map reg 2	    MOV	ES, AX	    mov ES:SSMTCBPattern,0	    Ret	    	    IOPSetUp:   mov al,[bx].MTestControl	    cmp al,MMapStoreAndCheck	    jle IOPOk	    mov ah,3FH	    jmp IOPSizeTestIOPOk:      mov ah,[bx].MStartBankIOPSizeTest:mov [bx].MEndIOPBank,ah	    call GetESBankValue	    mov al,[bx].MTestControl	    cmp al,MStoreAndCheck	    jle IOPNoMap1	    cmp al,MMapStoreAndCheck	    jg IOPNoMap1	    mov dh,[bx].MEndMapBank	    mov dl,[bx].MEndMapPage     ;dx is ending address in words	    jmp IOPMap1	   IOPNoMap1:  mov dh,[bx].MEndPage	    mov dl,[bx].MEndWord     ;dx is ending address in wordsIOPMap1:    mov ax,[bx].MIOPStartPassData	    mov [bx].MIOPExpectedData,ax            Ret	                	    MDelay:      mov cx,[bx].MDelayTimeMDelayLoop:  LOOP MDelayLoop	     Ret	    	    GetESBankValue:mov al,[bx].MTestControl	    cmp al,MStoreAndCheck	    jle NoMap	    cmp al,MMapStoreAndCheck	    jg  NoMap	    mov ah,[bx].MStartMapBank	    mov [bx].MEndIOPPage,ah	    mov ah,[bx].MStartMapPage	    mov [bx].MEndIOPWord,ah	    jmp MapNoMap:      mov ah,[bx].MStartWord            mov [bx].MEndIOPWord,ah            mov ah,[bx].MStartPage	    mov [bx].MEndIOPPage,ah	    Map:	    mov ah,3MergePageBit:mov AL,[bx].MEndIOPPage	    shr ax,3	    xchg ah,al	    and ax,0F000h	    MOV	ES, AX	    call ProgramAllACReg ;based on MEndIOPBank bank info	    mov ax,0	    mov al,[bx].MEndIOPBank	    add ax,1	    add MemTemp0,ax	    mov ch,[bx].MEndIOPPage	    mov cl,[bx].MEndIOPWord  ;cx is starting addres	    ret	    		 ProgramAllACReg:	   ; Set Map reg 2 of First A-Chip To bank 0 and enabled            PUSH dx            mov al,0	    mov dx,Map2IOP	    OUT dx,al            mov al,[bx].MEndIOPBank            mov dx,Map3IOP	    OUT dx,al	    POP dx            Ret    ;----------------STORE ROUTINE----------------------------;cx = current page word	    ;dx = ending page word ;current bank and ending bank maintained in TCB;on store es = bank + top bit of page align correctly I hope;on store bx =7 bits of page and word left shifted by one for word store   Store:      mov al, [bx].MTestControl	    cmp al,MStore	    je StoreGood	    cmp al,MStoreAndCheck	    je StoreGood	    cmp al,MMapStore	    je StoreGood	    cmp al,MMapStoreAndCheck	    je StoreGood	    ret	    StoreGood:  mov al, [bx].MEndIOPDataType	    cmp al,MAddressType	    je SSetAddType	    cmp al,MRandomPlusType	    je SSetRandomPlusType	    mov MemTemp0,0	    cmp al,MBankType	    je Store1	    jmp Store2 SSetAddType: mov [bx].MIOPExpectedData,cx	    jmp Store2SSetRandomPlusType: mov ax,[bx].MIOPExpectedData	    mov MemTemp0,ax	    jmp Store2	    	    Store1:     MOV al,[bx].MEndIOPDataType	    cmp al,MAddressType	    je SModAddType	    cmp al,MRandomPlusType	    je SModRandomPlusType	    cmp al,MRandomXORType	    je SModRandomXORType	    cmp al,MBankType	    je SModBankType	    jmp Store2	    SModAddType: mov [bx].MIOPExpectedData,cx	    jmp Store3SModRandomPlusType: mov ax,[bx].MIOPExpectedData	    add ax,MemTemp0	    jmp SCommType	 SModRandomXORType: mov ax,[bx].MIOPExpectedData	    xor ax,MemTemp0	    xor ax,0FFFFH	    jmp SCommType	 SModBankType:mov ah,[bx].MEndIOPBank	    mov al,ah	    xor ah,0FFHSCommType:  mov [bx].MIOPExpectedData,ax	    jmp Store2	    Store3:     MOV	ax, ES	    push ax	    AND ax ,0E000H	    xor cx,0FFFFH	    jns Store3NoSign	    OR ax ,1000HStore3NoSign:cmp cx,dx	    jg Store3Exit            MOV ES, AX	    mov ax,cx	    xchg  ah,al	    mov  bx,cx	    shl bx,1	    mov WORD PTR ES:[bx],axStore3Exit: Mov bx,[si].TCBPointer ;Get Index to TCB	    pop ax	    MOV	ES, AX	    xor cx,0FFFFHStore2:     mov ax,[bx].MIOPExpectedData	    xchg  ah,al	    mov  bx,cx	    shl bx,1	    mov WORD PTR ES:[bx],ax	    Mov bx,[si].TCBPointer ;Get Index to TCB	    cmp cx,dx	    je SLowMatch	    inc cx	    jns Store2Loop	    MOV	ax, ES	    OR ax ,1000H	    MOV	ES, AXStore2Loop: jmp Store1	    ;Check Keyboard and MesaInt and ErrorsSLowMatch:  Call LowMatch	    jmp Store1        ;----------------CHECK ROUTINE----------------------------;cx = current page word	    ;dx = ending page word ;current bank and ending bank maintained in TCB;on check es = bank + top bit of page align correctly I hope;on check bx =7 bits of page and word left shifted by one for word storeCheck:      mov al, [bx].MTestControl	    cmp al,MCheck	    je CheckGood	    cmp al,MStoreAndCheck	    je CheckGood	    cmp al,MMapCheck	    je CheckGood	    cmp al,MMapStoreAndCheck	    je CheckGood            ret	    CheckGood:  mov al, [bx].MEndIOPDataType	    cmp al,MAddressType	    je CSetAddType	    cmp al,MRandomPlusType	    je CSetRandomPlusType	    mov MemTemp0,0	    cmp al,MBankType	    je Check1	    jmp Check2 CSetAddType: mov [bx].MIOPExpectedData,cx	    jmp Check2CSetRandomPlusType: mov ax,[bx].MIOPExpectedData	    mov MemTemp0,ax	    jmp Check2	    	    Check1:     MOV al,[bx].MEndIOPDataType	    cmp al,MAddressType	    je CModAddType	    cmp al,MRandomPlusType	    je CModRandomPlusType	    cmp al,MRandomXORType	    je CModRandomXORType	    cmp al,MBankType	    je CModBankType	    jmp Check2CModAddType: mov [bx].MIOPExpectedData,cx	    jmp Check2CModRandomPlusType: mov ax,[bx].MIOPExpectedData	    add ax,MemTemp0	    jmp CCommType	 CModRandomXORType: mov ax,[bx].MIOPExpectedData	    xor ax,MemTemp0	    xor ax,0FFFFH	    jmp CCommType	 CModBankType:  mov ah,[bx].MEndIOPBank	    mov al,ah	    xor ah,0FFHCCommType:  mov [bx].MIOPExpectedData,ax	    jmp Check2		     Check2:     mov  bx,cx	    shl bx,1	    mov ax ,WORD PTR ES:[bx]	    Mov bx,[si].TCBPointer ;Get Index to TCB	    xchg  ah,al	    cmp Ax,[bx].MIOPExpectedData	    JE CContinue	    mov [bx].MIOPObservedData,ax	    mov [bx].MEndIOPWord,cl	    mov [bx].MEndIOPPage,ch	    or [di].IOPFault,IOPDataError            TEST [bx].MIOPErrorControl,MStopOnPhaseDone	    jnz CContinue	    jmp FaultCheckCContinue:  cmp cx,dx	    je CLowMatch	    inc cx	    jns Check1	    MOV	ax, ES	    OR ax ,1000H	    MOV	ES, AX	    jmp Check1	    ;Check Keyboard and MesaInt CLowMatch:  Call LowMatch	    jmp Check1    LowMatch:   Call ExtDoRunTimeWork	    mov al, [bx].MInterFaceControl	    and al,0FH	    cmp AL,MRunMesaAndIOP	    jne LowMatch1	    cmp [bx].MMesaIntCount,MNoInterrupts	    je LowMatch1	    or [di].IOPFault,EarlyExpectedInterrupt	    jmp HighMatchLowMatch1:  mov ah,[bx].MEndIOPBank	    cmp ah,[bx].MEndBank	    je HighMatch	    inc ah	    inc [bx].MEndIOPBank 	    call GetESBankValue	    push cx	    mov cx,0	    mov cl,[bx].MEndIOPBank	    mov ax,1	    Test [bx].MEndIOPBank,10H	    jnz UpperBank	    Test cl,0FH	    jz ShiftBankBit1ShiftBankBit:shl ax,1	    loop ShiftBankBitShiftBankBit1:pop cx             and ax,WORD PTR [DI][ExtMemConf]ShiftBankBitRet:jz LowMatch1	    retUpperBank:  and cl,0FH	    jz UpperBank1UShiftBankBit:shl ax,1	    loop UShiftBankBitUpperBank1: pop cx            and ax,WORD PTR [DI][ExtMemConf1]	    JMP ShiftBankBitRet	    	    HighMatch:  pop ax ; pop one near call	    jmp FaultCheck	    FaultCheck: cmp [di].IOPFault,NoIOPFault	    jnz Stop	    cmp [di].MesaFault,NoMesaFault	    jnz StopFaultCheckRet:RetStop:       pop ax ; pop one near call and return to monitor            TEST [bx].MInterFaceControl,MRunMesaAndIOP	    jz Stop1	    jmp DoneStop1:      jmp Done2;----------------SizeSTORE ROUTINE----------------------------;cx = current page word	    ;dx = ending page word ;current bank and ending bank maintained in TCB;on store es = bank + top bit of page align correctly I hope;on store bx =7 bits of page and word left shifted by one for word store	    SizeStore:  cmp [bx].MTestControl,MSizeStore	    je SizeStore1	    cmp [bx].MTestControl,MSizeStoreAndCheck	    je SizeStore1	    retSizeStore1: mov ah,[bx].MEndIOPBank	    mov al,ah	    xor ah,0FFH	    mov [bx].MIOPExpectedData,axSizeStore2: mov ax,[bx].MIOPExpectedData	    xchg  ah,al	    mov  bx,cx	    shl bx,1	    mov WORD PTR ES:[bx],ax	    Mov bx,[si].TCBPointer ;Get Index to TCBSizeLowMatch:cmp [bx].MEndIOPBank,0	     je SizeSHighMatch	     dec [bx].MEndIOPBank 	     call GetESBankValue	     jmp SizeStore1SizeSHighMatch:jmp FaultCheck    	    ;----------------SizeCHECK ROUTINE----------------------------;cx = current page word	    ;dx = ending page word ;current bank and ending bank maintained in TCB;on check es = bank + top bit of page align correctly I hope;on check bx =7 bits of page and word left shifted by one for word store	     SizeCheck:  mov [bx].MIOPObservedData,0	    cmp [bx].MTestControl,MSizeCheck	    je SizeCheck1	    cmp [bx].MTestControl,MSizeStoreAndCheck	    je SizeCheck1	    retSizeCheck1: mov ah,[bx].MEndIOPBank	    mov al,ah	    xor ah,0FFH	    mov [bx].MIOPExpectedData,axSizeCheck2: mov  bx,cx	    shl bx,1	    mov ax ,WORD PTR ES:[bx]	    Mov bx,[si].TCBPointer ;Get Index to TCB	    xchg  ah,al	    cmp Ax,[bx].MIOPExpectedData	    JNE SizeCLowMatch	    inc [bx].MIOPObservedData	    ;Check Keyboard and MesaInt SizeCLowMatch:cmp [bx].MEndIOPBank,0	     je SizeCHighMatch	     dec [bx].MEndIOPBank 	     call GetESBankValue	     jmp SizeCheck1	     SizeCHighMatch:Call GetBankCount             cmp ax,[bx].MIOPObservedData	     je SizeCHighMatch1	     or [di].IOPFault,IOPMemorySizeErrorSizeCHighMatch1:jmp FaultCheck	    GetBankCount:mov ax,0	     mov dx,WORD PTR [DI][ExtMemConf]	     Call CountBanks	     mov dx,WORD PTR [DI][ExtMemConf1]	     Call CountBanks	     mov [bx].MIOPExpectedData,ax	     ret	     CountBanks:  mov cx,16CountBanksLoop:shl dx,1	     jnc CountBanks1	     inc axCountBanks1: LOOP CountBanksLoop	     ret	    StopStoping:TEST  [bx].MInterFaceControl,MNoStopStartMesa	    jz StopStopingRet	    or [di].TestControl,NoStopStartMesaStopStopingRet:RetGetCSAddress:TEST  [bx].MIOPErrorControl,MNoCSAddOnTimeOut	     jnz GetCSAddressRet   	     CALL ExtReadShift	     CALL ExtStartCp	     Mov ax,[di].InCSAddress	     Mov bx,[si].TCBPointer ;Get Index to TCB	     Mov [bx].MCSAddress,axGetCSAddressRet: RetWaitForRmtcb:   or [di].IOPFault,IOTimeOutError                xor [di].IOPFault,IOTimeOutError                MOV	AX,4000H  ;This is equal to map reg 2	        MOV	ES, AX	        mov ch,[bx].MTimeOutWaitThisTimeO:  push cx                mov cx,1000WaitThisTimeI:  LOOP WaitThisTimeI		pop cx                cmp ES:RRMTCBPattern,RMCTBPattern		je WaitForRmtcbRet	        LOOP WaitThisTimeO		or [di].IOPFault,IOTimeOutErrorWaitForRmtcbRet:Ret InterFaceControl: MOV	AX,4000H  ;This is equal to map reg 2	          MOV	ES, AX	          mov ax,SMCTBPattern	          mov ES:SSMTCBPattern,ax 	          Ret	    SetVectors: CLI ;this should temp disable interrupts.             push bx	    MOV AX,0	    MOV  DS,AX	    MOV  BX, ExtInterruptV1		    MOV  AX, OFFSET MemParityInt	    MOV  [bx].ParityV, AX	    MOV  BX, ExtInterruptV2		    MOV  AX, OFFSET MesaPInt	    MOV  [bx].MesaV, AX	    MOV  AX,CS	    MOV  DS,AX	    AND  [di].EnableIntC1C2,ParityIntEnAble             AND  [di].EnableIntC1C2,MesaIntEnAble	    MOV ParityCount,0	    CALL  ExtResetMesaInt	    CALL ExtReadMemStatus    	    CALL ExtReadMemStatus    	    CALL ExtReadMemStatus    	    CALL ExtEnableIntSetVectorRet:pop bx	    STI ;Re-Enable the Interrupts	    Ret	    MemParityInt:ClI					;disable interrupts	    PUSHA	    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    TEST [bx].MIOPErrorControl,MNoMemoryParityErrors	    jnz MemParityIntRet 	    or [di].IOPFault,MemoryParityErrorMemParityIntRet:MOV  AL, nonSpecificEOI			;Reset IS0	    OUT  i8259MasterAddr0, Al		;  OCW2_ 061h 	    cmp ParityCount,00FFH	    JE MemParityRet            CALL ExtReadMemStatus	    inc  ParityCount    MemParityRet:POPA            STI					;Reanable the interrupts	    IRet ParityCount Dw 0MesaPInt:   ClI					;disable interrupts	    PUSHA	    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    inc [bx].MMesaIntCountMesaPIntRet:MOV  AL, nonSpecificEOI			;Reset IS5	    OUT  i8259SlaveAddr0, Al		;  OCW2_ 061h 	    MOV  AL, 00Bh			;Set up to read IS register	    OUT  i8259SlaveAddr0, Al		;OCW3_ 00Bh	    IN   AL, i8259SlaveAddr0		;Read Slave 8259 IS register	    CMP  AL, 0				;Check if another interrupt is	    JNZ  MesaPIntRt			;  in service	    MOV  AL, nonSpecificEOI		;Write an EOI command for the 		    OUT  i8259MasterAddr0, AL		;  Master 8259MesaPIntRt: CALL  ExtResetMesaInt            POPA	    STI					;Reanable the interrupts	    IRet	    	    MemPreProcess: mov cl,0            MOV  ax,[DI].AccuWord	    TEST [DI].FileControl,BurdockFile            jnz LookAtTCB            TEST [DI].TestControl,AlagInProcess	    jz LookAtTCB 	    mov al,BYTE PTR [DI][ExtBootConf]	    LookAtTCB:  mov [SI].TestN,cl            mov dl,al            CALL ExtSetTCBPointer	    mov al,dl	    Mov bx,[si].TCBPointer ;Get Index to TCB    LookAtTCB2: mov dh,[bx].MInterFaceControl	    or dh,SkipTestBit	    xor dh,SkipTestBit	    mov ch,dh	    mov dl,[bx].MPassCount	    mov bh,dh	    mov bl,dl	    mov ah,dl            cmp  cl,05H	    jne Not5	    or dh,SkipTestBitNot5:	    cmp  cl,06H	    jne Not6	    or dh,SkipTestBit	    or bh,SkipTestBitNot6:	    cmp  cl,07H	    jne Not7	    or dh,SkipTestBit	    mov bl,16	    mov ah,128Not7:	    cmp  cl,08H	    jne Not8	    or dh,SkipTestBit	    or bh,SkipTestBitNot8:	    cmp  cl,09H	    jne Not9	    or dh,SkipTestBit	    or bh,SkipTestBitNot9:	    cmp  cl,0AH	    jne Not0A	    mov dl,1	    mov bl,2	    mov ah,4Not0A:	    cmp  cl,0BH	    jne Not0B	    or dh,SkipTestBit	    or bh,SkipTestBitNot0B:	    cmp  cl,0CH	    jne Not0C	    or dh,SkipTestBit 	    or bh,SkipTestBitNot0C:	    cmp  cl,0DH	    jne Not0D	    or dh,SkipTestBit	    mov bl,1	    mov ah,2Not0D:	    cmp  cl,0EH	    jne Not0E	    or dh,SkipTestBit	    mov bl,16	    mov ah,128	Not0E:	    cmp  cl,0FH	    jne Not0F	    or dh,SkipTestBit	    mov bl,1	    mov ah,2		    Not0F:	    cmp  cl,10H	    jne Not10	    mov dl,1	    mov bl,16		    mov ah,128	    Not10:	    cmp  cl,13H	    jne LookAtAccu	    or dh,SkipTestBit	    mov bl,2	    mov ah,5LookAtAccu: cmp al,1	    je  LongAlag	    jle  NewValues	    mov dl,ah	    mov dh,ch	    jmp NewValuesLongAlag:   mov dh,bh	    mov dl,bl 	    jmp NewValuesNewValues:  Mov bx,[si].TCBPointer ;Get Index to TCB            mov [bx].MInterFaceControl,dh	    mov [bx].MPassCount,dl            inc cl	    cmp  cl,14H    	    jg  MemPreProcessRet	    jmp LookAtTCBMemPreProcessRet: Ret	    	    MemFRUList:Mov bx,[si].TCBPointer ;Get Index to TCB	   cmp  [di].MesaFault,NoMesaFault 	   jnz GetMesaBank	   Test [di].IOPFault,IOPDataError	   jnz GetIOPBank	   mov ax, 2301H	   Test [di].IOPFault,MemoryParityError+IOPMemorySizeError	   jnz MemFRUList1	   mov ax, 0123HMemFRUList1:jmp MemDataOut1	   GetIOPBank: mov dx,[bx].MIOPExpectedData           xor dx,[bx].MIOPObservedData	   mov cl,[bx].MEndIOPBank	   mov ax,2013H	   jmp MergeChipComm	   GetMesaBank: add bx,MRMCTBLoc           mov dx,[bx].MMesaExpectedData           xor dx,[bx].MMesaObservedData	   mov cl,[bx].MEndMesaBank	   mov ax,2103H	   MergeChipComm:cmp cl,11	   jle MergeChipComm1	   xor ax,1001HMergeChipComm1:mov MemListData,dx	   mov MemListBank,clMemFRUOut: CALL ExtMessageMemFRUList2:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne MemFRUList2	   MemChipOut: mov ah,0	    mov al, MemListBank	    CALL ExtMessageMemChipOut1:CALL ExtDoRunTimeWork            cmp [di].CurrentInputByte,KSP	    jne MemChipOut1	    MemDataOut: mov ax, MemListDataMemDataOut1:CALL ExtMessageMemDataOut2:CALL ExtDoRunTimeWork            cmp [di].CurrentInputByte,KSP	    jne MemDataOut2MemDataOutRet:Ret	   MemListBank DB  00HMemListData DW  0000H                 MonitorCode	ENDS	END 