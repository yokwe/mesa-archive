$	DEBUG MOD186;MOONDayBreakLoader.asm	NAME	DayBreakL$	TITLE(DayBreak Loader)$	NOLIST		;Next line includes Daisy.def	$	INCLUDE(MoonSys.def)$	INCLUDE(MOONLINK.def)$	LIST		;Previous line included Daisy.def;--------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode	ORG LoaderCodeLoc		 ;-----------------------------------------------------------------         jmp DownLoader         jmp ReadShift         jmp WriteShift         jmp WriteCSWord         jmp ReadCSWord	 jmp StopCp         jmp StartCp	 jmp ResetCp	 jmp InterruptCp         jmp ResetMesaInt	 jmp DoInToOutD	 jmp WriteNewAdd	 jmp WriteBranches	 jmp NewStartCp	 jmp NewStartM	 DownLoader: CALL ResetCp  ;This is the reset loop            CALL WriteCSWordSDownLoaderRet:MOV AL, al            RetNewStartCp: TEST  [di].TestControl,NoStopStartMesa	    jnz DownLoaderRet		    CALL ResetCp            MOV [di].OutCSData3,0            CALL SetStartAddress	    jmp NewStartM1NewStartM:  TEST  [di].TestControl,NoStopStartMesa	    jnz DownLoaderRet		    CALL ResetCpNewStartM1: MOV [di].OutCSAddress,0	    MOV [di].OutCSAddress1,2FH	    MOV [di].OutCSData3,0            jmp  StartCp  SetStartAddress:MOV  ax,[di].OutCSAddress	    push ax	    MOV  [di].OutCSAddress,2FH            CALL DoInToOutD	    or ax,100H	    or al,[si].TestN	    CALL WriteNewAddSetStartDone:pop ax	    MOV  [di].OutCSAddress,ax	    Ret	    	    DoInToOutD: CALL ReadCSWord ;will read loc at OutCSAddress            Mov ax,[di].InCSData0	    Mov  [di].OutCSData0,ax	    Mov ax,[di].InCSData1	    Mov  [di].OutCSData1,ax	    Mov al,[di].InCSData3	    Mov  [di].OutCSData3,al	    Mov ax,[di].InCSData2	    and ax,0F000H	    Ret	    WriteNewAdd:xor ax,0FH	    MOV [di].OutCSData2,ax	    mov dl,0	    MOV cx, 12CountOutLoop:SHR ax,1	    jnc CountOutOk	    inc dlCountOutOk: LOOP CountOutLoop	    Mov ax,[di].InCSData2	    MOV cx, 12CountInLoop:SHR ax,1	    jnc CountInOk	    dec dlCountInOk:  LOOP CountInLoop	    TEST dl,1	    jz SetStartAddressRet	    xor [di].OutCSData1,8000HSetStartAddressRet:Call WriteCSWord ;will write loc at OutCSAddress	    RET	    WriteBranches:TEST  [di].TestControl,DoBranches	      jnz DoWriteBranches	      RETDoWriteBranches:CALL ResetCp            MOV cx, 0FFFH             MOV [di].OutCSData0,0071H	    MOV [di].OutCSData1,8480HBranchLoop: MOV [di].OutCSAddress,Cx	    MOV [di].OutCSAddress1,Cx	    MOV ax, CX 	    or ax,8000H	    xor ax,0FH	    MOV [di].OutCSData2,ax	    push cx            MOV cx, 12CSParityLoop:SHR ax,1	    jnc CSParityOk	    xor [di].OutCSData1,8000HCSParityOk: LOOP CSParityLoop	    Call WriteCSWord	    pop cx	    LOOP BranchLoop	    RET	    WriteCSWordS:cmp [si].FileType,FileType8	     je GetFile8	     cmp [si].FileType,FileType9	     je GetFile9             cmp [si].FileType,FileType11	     je GetFile11             jmp GetFile10             	     GetFile8:   MOV bx, IndexMOONBUS	    CALL GotCodeStart            MOV bx, IndexMOONSUN1	    CALL GotCodeStart	    MOV bx, IndexMOONSUN2	    jmp CpRet	    	    GetFile9:   MOV bx, IndexMOONSUN3	    CALL GotCodeStart            MOV bx, IndexMOONSUN4	    CALL GotCodeStart	    MOV bx, IndexMOONSUN5	    jmp CpRet	    GetFile11:  MOV bx,IndexMOONTIME	    CALL GotCodeStart            MOV bx, IndexMOONMR	    jmp CpRet	    CpRet:      CALL GotCodeStart	    retGetFile10:  MOV bx, IndexMOONDMMC            	    GotCodeStart:MOV cx, WORD PTR [bx] 	    add bx,4	    sub cx,4	    CodeLoop:   Call ExtDoRunTimeWork	    MOV ax, WORD PTR [bx] 	    MOV [di].OutCSAddress,ax	    add bx,2	    MOV ax, WORD PTR [bx] 	    MOV [di].OutCSData0,ax	    add bx,2	    MOV ax, WORD PTR [bx] 	    MOV [di].OutCSData1,ax	    add bx,2	    MOV ax, WORD PTR [bx] 	    xor ax,0Fh	    MOV [di].OutCSData2,ax	    add bx,2	    push cx	    Call WriteCSWord	    pop cx	    sub cx,8	    jz LoadingDone	    jnc CodeLoopFileError:  or [di].IOPFault,FileErrorCodeLoadingDone: Ret  	         ResetCp: CALL StopCp          MOV	Ax, RstMesaP            ;Assert Halt and Reset	 CALL   ExtOffWrRstCtlReg	 CALL   ExtStartCp	 MOV	Ax, RstMesaP	 CALL    ExtOnWrRstCtlReg	 CALL   ExtStopCp         RetInterruptCp:MOV	Ax,  NoBits+IntMasaOnBit ;Assert IOPInt		OUT	DayBreakPort, Ax			NOP					MOV	Ax,  NoBits	;Deassert IOPInt	OUT	DayBreakPort, Ax        Ret	    Delay: shl ax,15       Ret       		StopCp: MOV	Ax, HaltOnBit	;Assert Halt	OUT	DayBreakPort, Ax	CALL Delay  ;WAIT 38 cycles        Ret	StartCp:MOV	Ax, NoBits	;Deassert Halt	OUT	DayBreakPort, Ax	;which allows first uInstr to be fetched        RetResetMesaInt:	in	ax,DayBreakPort		;A In Reset Mesa Int Latch        Ret ;***************************************************************************;SUBROUTINE: ReadShiftReadShift: MOV	AX, HaltOnBit+ReadPNIA	;Assert Halt	   OUT DayBreakPort,ax	   CALL Delay	;WAIT 38 cycles           CALL ReadCSWord			;WAIT 38 cycles	   MOV ax,[di].INCSData2  	   and ax,0FFFH           xor ax,0FH     	   MOV [di].InCSAddress,ax           Ret	;***************************************************************************;SUBROUTINE: WriteShift 	WriteShift:     CALL ResetCp ;Should set back to zero adderss                Ret;******************************************************************************;SUBROUTINE: ReadCSWord;; Read a 48-bit word from control store and store it at the address pointed to by DI;;Register usage:ReadCSWord:	CALL	SetPortAddress ;Set DX = to OutCSAddress*6 + CSStartPort	CALL	Read2Bytes	MOV	[DI].InCSData0,AX 	;	CALL	Read2Bytes	MOV	[DI].InCSData1,AX 	;	CALL	Read2Bytes	MOV	[DI].InCSData2,AX 	;        Ret	;********************************************************************************;SUBROUTINE: WriteCSWord;; cycles: 2981;WriteCSWord:	CALL	SetPortAddress ;Set DX = to OutCSAddress*6 + CSStartPort	MOV	AX, [DI].OutCSData0	;	CALL 	Write2Bytes	MOV	AX, [DI].OutCSData1	        CALL	Write2Bytes			MOV	AX, [DI].OutCSData2	        CALL	Write2Bytes		        Ret	;*******************************************************************************;SUBROUTINE: SetPortAddressSetPortAddress: 	MOV	dx,[DI].OutCSAddress	and   dx,03000H ;strip off lower address	MOV	al,00h	cmp dH,0	je SetPort	MOV	al,0Ch	cmp dH,10H	je SetPort	MOV	al,0Ah	cmp dH,20H	je SetPort	MOV	al,09hSetPort: 	MOV dx,BankPort	OUT dx,al 	MOV	DX,[DI].OutCSAddress	and   dx,0FFFH ;strip off bank info	add dx,CSStartPort 	Ret	;********************************************************************************	;*******************************************************************************;SUBROUTINE: Read2BytesRead2Bytes: 	IN	al,  dx		;read Control Store Data 	MOV	ah, al	add dx,1000h	IN	al, dx		;read Control Store Data 	add dx,1000h        Ret	;********************************************************************************			;********************************************************************************;SUBROUTINE: Write2BytesWrite2Bytes: 	MOV	cl, al	MOV	al, ah	OUT	dx, al		;Write Control Store Data 	MOV	al, cl	add dx,1000h	OUT	dx, al		;Write Control Store Data 	add dx,1000h        Ret	;**************************************************************************       	MonitorCode	ENDS	END 