$	DEBUG MOD186;; moonPCE.asm; Last Edited by U. Khulusi   7-16-85 ;;This PCE diagnostic program is used to troubleshoot the PCE and its interfaces; to the rest of the Daybreak system.	NAME	PCE$	TITLE (Test diagnostics code for PCE board);$	NOLIST 		;Next lines includes Moonsys.def and Moonlink.def	$	INCLUDE(MoonSys.def)$	INCLUDE(MoonLink.def);;;;;**********************************************************************;  ;;-------------------------------------------------------------------------;			~~~~~~~~~~~~~~~~~~~~~~~~~;			*     Equate Table...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~PCEMmcsReg	EQU 0FFA6HPCEMpcsReg	EQU 0FFA8HMpcsBlockSize	EQU 88B8HDisplaySeg	EQU 0B000HRomAddressByteOffset	EQU 64NMIVectorsLoc	EQU 08HIntVectorsLoc	EQU 20HDirty2AddByteOffset EQU 640DirtyAddressByteOffset EQU 320;EvenIOAdd	EQU 800HOddIOAdd	EQU 801H;;*************************************************************************;*************************************************************************;  ;;-------------------------------------------------------------------------;			~~~~~~~~~~~~~~~~~~~~~~~~~;			*     Equate Table...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~;AllowPCECmd		EQU 0F8h;LastTestIndex		EQU 16		;Index for last test in TestType TablePCENoStop		EQU 01H		;Don't stop for ErrorMailboxSize		EQU 40HEnableTimer0		EQU 4000hWriteResetReg		EQU 0C0hPCEToIOPIntEnAble	EQU 03FFFh	;PCETOIOPIntEnable and Timer0IntEnable;;Registers locations for Timer 0i186Timer0CountAAddr	EQU 0FF52h 	;Max Count Reg Ai186Timer2CountAAddr	EQU 0FF62h	;Max Count Ai186Timer0CountBAddr	EQU 0FF54h 	;Max Count Reg Bi186Timer0MCWAddr	EQU 0FF56h 	;Mode/Control word for timer 0i186Timer2MCWAddr	EQU 0FF66h	;Mode/Control Word for timer 2i186Timer0CountRegAddr	EQU 0FF50h	;Count register addressi186Timer2CountRegAddr	EQU 0FF60h	;Count Regi186Timer0CtlAddr	EQU 0FF32h 	;Interrupt controller Control address for timer 0i186Timer2CtlAddr	EQU 0FF3Ah	;Timer 2 Control Register;;Registers locations for PCE PITPCE8254Count0Addr	EQU 188h 	;Counter Reg 0PCE8254Count1Addr	EQU 18Ah 	;Counter Reg 2PCE8254Count2Addr	EQU 18Ch 	;Counter Reg 3PCE8254CmdAddr		EQU 18Eh 	;Command address for PCE PICPCEClrTim0Int		EQU 1CEh	;Timer 0 Int latch address;Int0Val			EQU 0h		;value loaded in ExpInt and obsInt at failureInt1Val			EQU 1h		;Int2Val			EQU 2h		;Int3Val			EQU 3h		;Int4Val			EQU 4h		;Int5Val			EQU 5h		;Int6Val			EQU 6h		;Int7Val			EQU 7h		;Int8Val			EQU 8h		;NMIVal			EQU 9h		;;;Registers definitions for PCE PITi8254IntOnTC		EQU 00H  	;Mode0 = Interrupt on Terminal Counti8254RetOneShot		EQU 02H	 	;Mode1= Retriggerable one-shoti8254NoOutNull		EQU 40H  	;Status has Out=0 and Null=1i8254NoOutNoNull	EQU 00H  	;Status has Out=0 and Null=0i8254OutNoNull		EQU 80H 	;Status has Out=1 and Null=0i8254OutNull		EQU 0C0H	;Status has Out=1 and Null=0i8254ReadBackCmd	EQU 0C0H	;Read-Back Commandi8254NoStatusLatch	EQU 10H		;Latch onlyStatusi8254NoCountLatch	EQU 20H		;Latch onlyStatusi8254RBSelCount0	EQU 02H		; Select Counter 0i8254RBSelCount1	EQU 04H		; Select Counter 1i8254RBSelCount2	EQU 08H		; Select Counter 2;;Registers locations for Speaker portEmulSpeakerPort		EQU 0190H	;Speaker emulation port;;Registers locations for PCE PICPCE8259Addr0		EQU 180hPCE8259Addr1		EQU 182h;;Interrupt simulation addressesNMIReg			EQU 1E0hIntReg1			EQU 1E2hIntReg2			EQU 1E4hIntReg3			EQU 1E6hIntReg4			EQU 1E8hIntReg5			EQU 1EAhIntReg6			EQU 1EChIntReg7			EQU 1EEh;;Registers locations for PCE IO TrapperStatusReg		EQU 1C0hLowAddressReg		EQU 1C2hHighAddressReg		EQU 1C4hLowDataReg		EQU 1C6hHighDataReg		EQU 1C8h;;Registers definition for PCE PICPCE8259ICW1		EQU 13hPCE8259ICW2		EQU 8hPCE8259ICW3		EQU 0		;not used in this mode setupPCE8259ICW4		EQU 11h		;SFNM not Buffered, Normal EOI, 86/88 modePCEIntsEnable		EQU 01h		;all interrupts except timer 0PCEIntsDisable		EQU 0FFhPCETimer0Enable		EQU 00h		;all InterruptsPCE8259NSEOI		EQU 20h		;non specific EOI;i8259EOIforIR0		EQU 060h	;A Specific EOI for IR0i8259EOIforIR1		EQU 061h	;A Specific EOI for IR1i8259EOIforIR2		EQU 062h	;A Specific EOI for IR2i8259EOIforIR3		EQU 063h	;A Specific EOI for IR3i8259EOIforIR4		EQU 064h	;A Specific EOI for IR4i8259EOIforIR5		EQU 065h	;A Specific EOI for IR5i8259EOIforIR7		EQU 067h	;A Specific EOI for IR7;;ByteInFromEvenLoc 	EQU 5ByteInFromOddLoc  	EQU 3WordInFromEvenLoc 	EQU 1WordInFromOddLoc 	EQU 0DHByteOutToEvenLoc  	EQU 4ByteOutToOddLoc   	EQU 2WordOutToEvenLoc  	EQU 0WordOutToOddLoc   	EQU 0CH;i186EOItimer0  		EQU 0hi186EOIRegAddr		EQU 0FF22hi186InServiceRegAddr	EQU 0FF2ChDisplayTrapStartReg	EQU 100hInitialCount		EQU 0F0FhResetPCE		EQU 80h$	LIST		;Previous lines included Moonsys.def and Moonlink.def;;-------------------------------------------------------------------------;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     TEST CONTROL BLOCK (TCB)...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;PCETCBlock	STRUC;;Input fieldsTestType	DB 00H		;starting sub-block to be tested				;=0= Arbitration/Mailbox/PCE186 Test				;=1= I/O Trapper Test				;=2= Memory Pattern Test				;=3= Memory Address Test				;=4= Memory Bank Test				;=5= Display Trapper Test				;=6= PCE Programmable Interrupt Controller (PIC) Test				;=7= PCE Programmable Interval Timer (PIT) Test				;=8= Speaker Port TestTestCntrl	DB 00H		;=0= one test and exit				;=1= execute from starting test till the endErrorCntrl	DB 00H		;Continue/don't continue if errorPassCount	DB 00H		;number of passes to loop on testStartingBank	DB 00H		;Bank start used for memory testEndingBank	DB 00H		;Bank end used for memory testStartingWord	DB 00H		;Word start used for memory testStartingPage	DB 00H		;Page start used for memory testEndingWord	DB 00H		;Word end used for memory testEndingPage	DB 00H		;Page end used for memory testPCEMemMapReg	DB 00H		;PCE map register used for memory testIOPMemMapReg	DB 00H		;IOP map register used for memory testPCECodeBank	DB 00H		;Bank of memory at which the PCE code is loadedPCEDisplayBank	DB 00H		;PCE Display Bank of memoryMemPattern	DW 00H		;pattern used for memory pattern testPCETCBlock	ENDS		;Test Control Block Structure End;;Output fieldsPCETCBlockOut	STRUC;;ExpectedStatus	DB 00H		;Expected status of I/O at testObservedStatus	DB 00H		;observed Status of I/O test at failure;ExpectedLowData	DB 00H		;Expected Low data of I/O at testExpectedHighData DB 00H		;Expected High data of I/O at test;ObservedLowData	DB 00H		;observed Low data of I/O test at failureObservedHighData DB 00H		;observed High data of I/O test at failure;ExpectedLowAdd	DB 00H		;Expected Low Address of I/O at testExpectedHighAdd DB 00H		;Expected High Address of I/O at test;;ObservedLowAdd	DB 00H		;observed Low Address of I/O test at failureObservedHighAdd DB 00H		;observed High Address of I/O test at failure;ExpectedBank	DB 00H		;Expected bank of memory testObservedBank	DB 00H		;Observed bank of memory bank test at failure;ExpectedWord	DB 00H		;Expected Word of I/O test at failureExpectedPage	DB 00H		;Expected Page of I/O test at failure;;ObservedWord	DB 00H		;observed Word of I/O test at failureObservedPage 	DB 00H		;observed Page of I/O test at failure;ExpDirtyNibble	DB 00H		;Expected dirty nibbleObsDirtyNibble	DB 00H		;Observed dirty nibble at failure;DirtyRapSheet	DB 00H		;number of Display failures (= up to 5)FaultyDispReg	DB 00H		;Display register number at fault (from 0 to 64);ContDispReg1	DB 00H		;Content of display at faultFaultyDispReg1	DB 00H		;Bits 7 to 2 = Display register number at fault (from 0 to 64)				;Bits 1 to 0 = The dirty bit number at faultContDispReg2	DB 00H		;Content of display at faultFaultyDispReg2	DB 00H		;Bits 7 to 2 = Display register number at fault (from 0 to 64)				;Bits 1 to 0 = The dirty bit number at faultContDispReg3	DB 00H		;Content of display at faultFaultyDispReg3	DB 00H		;Bits 7 to 2 = Display register number at fault (from 0 to 64)				;Bits 1 to 0 = The dirty bit number at faultContDispReg4	DB 00H		;Content of display at faultFaultyDispReg4	DB 00H		;Bits 7 to 2 = Display register number at fault (from 0 to 64)				;Bits 1 to 0 = The dirty bit number at faultContDispReg5	DB 00H		;Content of display at faultFaultyDispReg5	DB 00H		;Bits 7 to 2 = Display register number at fault (from 0 to 64)				;Bits 1 to 0 = The dirty bit number at fault;ExpInterrupt	DB 00H		;Expected interrupt of PIC test and PCETOIOPInt				;=0 = PCE Int0					;=1 = PCE Int1					;=2 = PCE Int2					;=3 = PCE Int3					;=4 = PCE Int4					;=5 = PCE Int5					;=6 = PCE Int6					;=7 = PCE Int7					;=8 = PCE NMI					;=9 = PCEToIOP Int	ObsInterrupt	DB 00H		;Observed interrupt of PIC test at failureUnexpectedInt	DB 00H		;number of unexpected interrupt;ObservedPasses	DB 00H		;number of passes at failurePCEFault	DB 00H		;Fault type at failure				;= 1h = PCEHoldError				;= 2h = AllowPCEError				;= 3h = PCE186Error				;= 4h = NMITimError				;= 5h = OutTimError				;= 6h = PCEOverrrunError				;= 7h = MInTimError				;= 8h = InNMIError				;= 9H = MailboxError				;= AH = MailboxAddressError				;= BH = StatusError				;= CH = LowByteAddError				;= DH = HighByteAddError				;= EH = LowByteDataError				;= FH = HighByteDataError				;= 10H = InAddressError				;= 11H = IOPCheckError				;= 12H = IOSinkError				;= 13H = DirtyBitError				;= 14H = DirtyNibbleSetError				;= 15H = DirtyNibOverError				;= 16H = DirtyNibble5Error				;= 17H = DirtyNibbleAError				;= 18H = ASecondIntError				;= 19H = UnexpectedNMIError				;= 1AH = UnexpectedInt1Error				;= 1BH = UnexpectedInt2Error				;= 1CH = UnexpectedInt3Error				;= 1DH = UnexpectedInt4Error				;= 1EH = UnexpectedInt5Error				;= 1FH = UnexpectedInt6Error				;= 20H = UnexpectedInt7Error				;= 21H = PCETim0Error				;= 22H = PCETim0OutStaRstError				;= 23H = PCETim0OutStaSetError				;= 24H = PCETim1Error				;= 25H = PCETim1OutStaRstError				;= 26H = PCETim1OutStaSetError				;= 27H = PCETim2Error				;= 28H = PCETim2OutStaRstError				;= 29H = PCETim2OutStaSetError				;= 2AH = PCETim0IntError				;= 2BH = PCESpeakerDriverSetError				;= 2CH = PCESpeakerDriverRstError				;= 2DH = OutNMIError				;= 2EH = PCEToIOPIntError				;= 2FH = PendingIntError				;= 30H = AnotherIntError				;= 31H = PCEMemCheckError				;= 32H = UCSError				;= 33H = PCETim2GateError				;= 34H = KeyBoardIntError				;= 35H = NoPCEErrorPCESpare2	DB 00HPCETCBlockOut	ENDS		;Test Control Block Structure End;;;;;-------------------------------------------------------------------------MonitorCode	SEGMENT	COMMON		ASSUME	CS:MonitorCode, SS: MonitorCode, DS: MonitorCode, ES:MonitorCode                   ORG 	TestCodeLoc;		JMP	IOPStart		JMP 	PCEPreProcess		JMP 	PCEFRUList		JMP 	PCEDummy		JMP 	PCEDummy		JMP 	PCEDummy		JMP 	PCEDummy						ORG	PCETestCodeLoc;;-------------------------------------------------------------------------$	NOLIST		;;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     IOP SCRATCH PAD...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;TCB Input Copy;CTestType	DB 00H		;starting sub-block to be testedCTestControl	DB 00H		;number of su-blocks to be testedCErrorControl	DB 00H		;loop/don't loop if errorCPassCount 	DB 00H		;number of passes at failureCStartingBank	DB 00H		;Bank start used for memory testCEndingBank	DB 00H		;Bank end used for memory testCStartingPageWord LABEL	WORD	;Even Address start used for memory testCStartingWord	DB 00H		CStartingPage	DB 00HCEndingPageWord LABEL	WORD 	;Even Address end used for memory testCEndingWord	DB 00H		CEndingPage	DB 00HCPCEMemMapReg	DB 00H		;PCE Map Reg used by to access memoryCIOPMemMapReg	DB 00H		;Map Reg used by IOP to access memoryCPCECodeBank	DB 00H		;Bank of memory at which the PCE code is loadedCPCEDisplayBank	DB 00H		;PCE display Bank of memoryCMemPattern	DW 00H		;Memory pattern used for memory pattern test;;;TCB Output CopyCDirtyRapSheet	DW 00HCContDispReg1	DB 00HCFaultyDispReg1	DB 00HCContDispReg2	DB 00HCFaultyDispReg2	DB 00HCContDispReg3	DB 00HCFaultyDispReg3	DB 00HCContDispReg4	DB 00HCFaultyDispReg4	DB 00HCContDispReg5	DB 00HCFaultyDispReg5	DB 00HCFaultyDispReg	DW 00H;;TestType Table Indexes;StartTestIndex	DW 0		;Index to the first test for this passTestInProcessIndex DW 0		;Index to test in processIntsEnabledSave	DW 00HIOPFirstPageWord DW 00HIOPLastPageWord	DW 00HIOPPageWord	DW 00HTCBIndex	DW 00H		;Index to test control blockSaveDIReg	DW 00H		;Save DI RegExitPointer	DW 00H		;Pointer to Stack TOP for exitPCEToIOPUnexpInt DW 00H		;Timer0UnexpInt 	DW 00H		;DispTrapRegPointer DW 0TrapperAdd	DW 0TrapperData	DW 0TrapperStatus	DB 00HCurrentBank	DB 00HDirtyBitNum	DW 00HCMCSLine	DW 00HKBInterruptPCE	DW 00HIOAddExp	DW 00HErrorOtherInt	DB 00HNoPCEToIOPInt	DB 00H;;;;-------------------------------------------------------------------------;;$	LIST			;include MoonSys.def and MoonLink.def;;TestType TableTestTable	LABEL WordTest0		DW StartUpTest		;Arbitration/Mailbox/PCE186 TestTest1		DW IOTrapperTest      	;I/O Trapper TestTest2		DW MemPatternTest      	;Memory Pattern TestTest3		DW MemAddressTest      	;Memory Address TestTest4		DW MemBankTest      	;Memory Bank TestTest5		DW DisplayTrapperTest   ;Display Trapper TestTest6		DW PICTest      	;PCE PIC TestTest7		DW PITTest      	;PCE PIT TestTest8		DW SpeakerPortTest      ;Speaker Port TestTest9		DW UCSTest	      	;UCS Test;PCEMapTable	LABEL WordPCEMap0		DW PCEMap0SetUpPCEMap1		DW PCEMap1SetUpPCEMap2		DW PCEMap2SetUpPCEMap3		DW PCEMap3SetUpPCEMap4		DW PCEMap4SetUpPCEMap5		DW PCEMap5SetUpPCEMap6		DW PCEMap6SetUp;IOPMapTable	LABEL WordIOPMap0		DW IOPMap0SetUpIOPMap1		DW IOPMap1SetUpIOPMap2		DW IOPMap2SetUpIOPMap3		DW IOPMap3SetUpIOPMap4		DW IOPMap4SetUpIOPMap5		DW IOPMap5SetUp;$	LIST		;;;-------------------------------------------------------------------------;;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     INITIALIZE IOP...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;;Initialize parameters from Control BlockIOPStart:		MOV	ExitPointer, SP		;Store TOP of Stack point to exit		CALL	TCBCopy		CALL	SetPCEToIOPIntVectors	;Set vectors for PCE Int IOP						;and Timer 0 vectors Int 		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	SetKBVectors		;reroute KeyBoard vectors to PCE program		JMP	JumpTestStart;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Arbitration/Mailbox/PCE186 Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~StartUpTest:		CALL	Set55Mailbox		CALL	SetUpTimer0		CALL	StartUpCheck		CALL	StopTimer0		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	StartUpTestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~;			* I/O Trapper Test... *;			~~~~~~~~~~~~~~~~~~~~~~~IOTrapperTest:		CALL	IOTrapStatusCheck		CALL	OutAddDataCheck		CALL	InAddressCheck		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Pattern Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~MemPatternTest:		CALL	StoreCheckMemPat		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Address Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~MemAddressTest:		CALL	StoreCheckMemAdd		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Bank Test... *;			~~~~~~~~~~~~~~~~~~~~~~~MemBankTest:		CALL	StoreCheckMemBank		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Display Trapper Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~DisplayTrapperTest:		CALL	InitDisplayTrapper		CALL	CheckDirtyBits		CALL	Check5DirtyDisplay		CALL	CheckADirtyDisplay		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* PCE Programmable Interrupt Controller (PIC) Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PICTest:		CALL	SimulatePCEInt		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* PCE Programmable Interval Timer (PIT) Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PITTest:		CALL	InitPIT0		CALL	InitPIT1		CALL	InitPIT2		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~;			* Speaker Port Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~SpeakerPortTest:		CALL	InitTimer2		CALL	CheckSpeakerData		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	TestLoopBack;;			~~~~~~~~~~~~~~~~~~~~~~~~;			* Speaker Port Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~UCSTest:		CALL	UCSCheck		CALL	TestLoopBack;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ;	;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     IOP Subroutines...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;*     INITIALIZE IOP Subroutines...   *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;;TCBCopy:		MOV	BX,[SI].TCBPointer	;Get Index to Test Control Block		MOV	TCBIndex, BX		;save test control block index		ADD	TCBIndex, 16		;for the returned TCB		MOV	SaveDIReg, DI		;save DI Reg		MOV	Al, [BX].TestType			MOV	CTestType, Al		CMP	Al, 9		JLE	TCBCopyCont1		JMP	IOPStartRetTCBCopyCont1:		TEST	Al, 80H		JZ	TCBCopyCont2		JMP	IOPStartRetTCBCopyCont2:		MOV	Al, [BX].TestCntrl			MOV	CTestControl, Al		TEST	Al, 0FEH		JZ	TCBCopyCont3		JMP	IOPStartRetTCBCopyCont3:		MOV	Al, [BX].ErrorCntrl			MOV	CErrorControl, Al			TEST	Al, 0FEH		JLE	TCBCopyCont4		JMP	IOPStartRet	TCBCopyCont4:		MOV	Al, [BX].PassCount			MOV	CPassCount, Al			MOV	Al, [BX].StartingBank		MOV	CStartingBank, Al			TEST	Al, 0E0h		JZ	TCBCopyCont5		JMP	IOPStartRet	TCBCopyCont5:		CMP	Al, 5		JG	TCBCopyCont6		JMP	IOPStartRet	TCBCopyCont6:		MOV	Cl, [BX].StartingWord		MOV	CStartingWord, Cl		MOV	Ch, [BX].StartingPage		MOV	CStartingPage, Ch		MOV	Dl, [BX].EndingWord		MOV	CEndingWord, Dl		MOV	Dh, [BX].EndingPage		MOV	CEndingPage, Dh		MOV	Al, [BX].EndingBank		MOV	CEndingBank, Al			TEST	Al, 0E0h		JNZ	IOPStartRet			CMP	Al, [BX].StartingBank		JL	IOPStartRet			CMP	Al, [BX].StartingBank		JNZ	TCBCopyCont7		CMP	CX, DX		JG	IOPStartRetTCBCopyCont7:		MOV	Al, [BX].PCEMemMapReg		MOV	CPCEMemMapReg, Al			TEST	Al, 0FFH		JZ	IOPStartRet		JS	IOPStartRet		CMP	Al, 6		JG	IOPStartRet		MOV	Al, [BX].IOPMemMapReg		MOV	CIOPMemMapReg, Al			TEST	Al, 0FFH		JZ	IOPStartRet		JS	IOPStartRet		CMP	Al, 5		JG	IOPStartRet		mov dx,Map0IOP		in	Al, dx		MOV	CPCECodeBank, Al			TEST	Al, 0E0h		JNZ	IOPStartRet		MOV	Cl, [BX].PCEDisplayBank		CMP	Al, Cl		JZ	IOPStartRet		MOV	CPCEDisplayBank, Cl			TEST	Cl, 0E0h		JNZ	IOPStartRet		CMP	Cl, 3		JLE	IOPStartRet		CMP	Cl, 5		JZ	IOPStartRet		MOV	AX, [bx].MemPattern		MOV	CMemPattern, AX		RET	;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPStartRet:		MOV	SP, ExitPointer		;Restore stack pointer		MOV	Al, FileErrorCode	;		OR	[di].IOPFault, Al	; Skip test		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;SetPCEToIOPIntVectors subroutine: Set vectors for PCE Int IOP which occurs;when PCE I/O instruction is executed , and set Vectors for IOP Timer 0;SetPCEToIOPIntVectors:		CLI				;mask all irqs		MOV 	AX,0                MOV  	DS,AX		MOV	BX, ExtInterruptV1	;		MOV	AX, OFFSET PCEToIOPIntHandler ;Set BX,AX to		MOV	[BX].PCV, AX 		;and the new IP		MOV 	BX, ExtTimerDMAV			MOV	AX, OFFSET Timer0IntHandler ;Set BX,AX to		MOV	[BX].Timer0V, AX 	;and the new IP		MOV  	AX,CS		MOV  	DS,AX		AND  	[di].EnableIntC1C2,PCEToIOPIntEnAble 	        CALL	ExtEnableInt		;Enable all Int in Monitor Control						;Block that have a zero in them		STI				;Re-enable interrupts		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;SetKBVectors:			CLI 				;this should temp disable interrupts. 		MOV 	AX,0                MOV  	DS,AX	    	MOV  	BX, ExtInterruptV1		    	MOV  	AX, OFFSET ExcKeyWakeHandler	;	    	MOV  	[bx].KeyBoardV, AX	;		MOV  	AX,CS		MOV  	DS,AX	    	STI 				;Re-Enable the Interrupts	    	RET;;~~~~~~~~~~~~~~~~~~~~~~~~;JumpTestStart:;initialize data segment register to point to PCE code		MOV	AX, CS		;use of Map6IOP		MOV	ES, AX;now program Map7PCE so that PCE rom area is at PCECodeBank of physical memoryTestStart:		CALL	PCEReset                MOV	PCEToIOPUnexpInt, 1		XOR	AX, AX		MOV	Al, CTestType		SHL	AX, 1		MOV	StartTestIndex, AX		MOV	TestInProcessIndex, AX		MOV	DI, AX			;		CALL	IOTrapDump		CALL	PCE8259InitTestStartCont:		CALL	PCE186BootInit		JMP	TestTable[DI]		;;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEReset:;send PCE reset pulse to a low, wait a while , and then send reset to a high		MOV	AX, ResetPCE		;		CALL    ExtOffWrRstCtlReg	;		MOV	CX, 0FFFFhWaitForReset:		LOOP	WaitForReset		MOV	AX, ResetPCE		;		CALL    ExtOnWrRstCtlReg	;reset pulse to a high		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE8259Init:		MOV	Al, PCE8259ICW1		;Single, Edge Triggered, ICW4 needed		MOV	DX, PCE8259Addr0		OUT	DX, Al		MOV	Al, PCE8259ICW2		;Interrupt type		MOV	DX, PCE8259Addr1		OUT	DX, Al		MOV	Al, PCE8259ICW4		;SFNM, Normal EOI, 86/88 mode		MOV	DX, PCE8259Addr1		OUT	DX, Al		MOV	Al, PCEIntsEnable		MOV	DX, PCE8259Addr1		OUT	DX, Al		MOV	Bl, Al		IN	Al, DX		CMP	Al, Bl		JNZ	NOPCEERROR		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;NoPCEERROR:		MOV	Al, 35H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE186BootInit:		MOV	Al, CTestType		CMP	Al, 0h		JNZ	PCE186BootInitCont1		JMP	PCE186BootInitRetPCE186BootInitCont1:		MOV	MPCETestType, Al		MOV	IOAddExp, 0FFA6h		CMP	Al, 1		JZ	PCE186BootInitCont2		CALL	AllowPCEToRun		MOV	IOAddExp, 0FFA8h		CALL	AllowPCEToRun		MOV	IOAddExp, 0FF38h		CALL	AllowPCEToRun		RET;PCE186BootInitCont2:		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 0A6H		JZ	PCE186BootInitCont3		JMP	LowByteAddErrorPCE186BootInitCont3:		CMP	Ah, 0FFH		JZ	PCE186BootInitCont4		JMP	HighByteAddErrorPCE186BootInitCont4:                MOV     AX, TrapperData		CMP	Al, 0F8H		JZ	PCE186BootInitCont5		JMP	LowByteDataErrorPCE186BootInitCont5:		CMP	Ah, 0B1H		JZ	InitDisplay		JMP	HighByteDataErrorInitDisplay:		MOV	IOAddExp, 0FFA8h		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 0A8H		JZ	InitDisplayCont1		JMP	LowByteAddErrorInitDisplayCont1:		CMP	Ah, 0FFH		JZ	InitDisplayCont2		JMP	HighByteAddErrorInitDisplayCont2:                MOV     AX, TrapperData		CMP	Al, 0B8H		JZ	InitDisplayCont3		JMP	LowByteDataErrorInitDisplayCont3:		CMP	Ah, 088H		JZ	SetPCE186Int0		JMP	HighByteDataErrorSetPCE186Int0:		MOV	IOAddExp, 0FF38h		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 038H		JZ	SetPCE186Int0Cont1		JMP	LowByteAddErrorSetPCE186Int0Cont1:		CMP	Ah, 0FFH		JZ	SetPCE186Int0Cont2		JMP	HighByteAddErrorSetPCE186Int0Cont2:                MOV     AX, TrapperData		CMP	Al, 060H		JZ	SetPCE186Int0Cont3		JMP	LowByteDataErrorSetPCE186Int0Cont3:		CMP	Ah, 00H		JZ	PCE186BootInitRet		JMP	HighByteDataErrorPCE186BootInitRet:		RET;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Arbitration/Mailbox/PCE186 Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;Set55Mailbox:		MOV	DI, SaveDIReg		;		MOV	BX, OFFSET Mailbox		MOV	CX, MailboxSize		MOV	AX, 05555hSet55MailboxLoop:			MOV	WORD PTR ES:[BX], AX		ADD	BX, 2		LOOP	Set55MailboxLoop		RET;;;~~~~~~~~~~~~~~~~~~~~~~~~; SUBROUTINE : SetupTimer0 ; Turn timer 0 on and unmask timer 0 to interruptSetUpTimer0:		CLI		MOV	AX, [di].EnableIntC1C2		MOV	IntsEnabledSave, AX		MOV  	[di].EnableIntC1C2,PCEToIOPIntEnAble 	        CALL	ExtEnableInt		;Enable Int		STI		MOV	AX, 0		;Set A counter to 0		MOV	DX, i186Timer2CountRegAddr		OUT	DX, AX		MOV	AX, 05Fh	;A's limit to 0FFFFh		MOV	DX, i186Timer2CountAAddr		OUT	DX, AX		MOV	AX, 0C001h	;Enable and Set to continue with no interrupt		MOV	DX, i186Timer2MCWAddr		OUT	DX, AX		MOV	AX, 0		;Set A counter to 0		MOV	DX, i186Timer0CountRegAddr		OUT	DX, AX		MOV	AX, 0FFFFh	;A's limit to 0FFFFh		MOV	DX, i186Timer0CountAAddr		OUT	DX, AX		MOV	AX, 0E008h	;Enable and Set to Interrupt		MOV	DX, i186Timer0MCWAddr		OUT	DX, AX		MOV	AX, 0h		;Un-mask the interrupt at priority 0		MOV	DX, i186Timer0CtlAddr		OUT	DX, AX		MOV	AX, 0C000h		;enable timer0 and memory		MOV	DX, WrCtlReg		OUT	DX, AX			;SetUpTimer0Ret:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;StartUpCheck Subroutine: ;Allow PCE to run and check if Return from PCE is due to a dummy PCE;Out or that timer 0 has interrupted;StartUpCheck:			MOV	Al, 0		MOV	MPCETestType, Al		MOV	Timer0UnexpInt, 1		MOV	IOAddExp, 400h		MOV	Bl, 0FFh		IN	AX, AllowPCECmd		;Allow PCE to run		TEST	MAllowPCETim, Bl	;had 55 in it before PCE run and 0 after		JZ	PCEDidRun;		CALL	Delay2		TEST	PCEToIOPUnexpInt, 0FFh		JZ	AllowPCEError		TEST	Timer0UnexpInt, 0FFh	;did Timer 0 interrupt?		JZ	PCE186Error	        ;Fault when exercising the PCE186		JMP	PCEHoldError		;IOP continued running and						;possibly PCE did not take control						;of bus, or PCE ran in a wrong area in memory;PCEDidRun:		CALL	IOTrapDump		MOV	Al, 0FFh		TEST	MPCE186ErLog, Al      	;did PCE take control and PCE186						;run successfuly		JNZ	PCE186Error		;Fault when exercising the PCE186 		CALL	IOPMailboxCheck		CALL	WaitforPCEToIOPIntPCEDidRunCont:		MOV	Bl, 0h		CMP 	MInTim, Bl		;Set to 0 after the PCE In		JZ	PCEOverrrunError	;PCE did not stop on an I/O instruction		CMP 	MOutTim, Bl		;Set to 055h with Mailbox init. set-up		JZ	OutTimError		;instuction following the Out was	       					;executed before PCE Hold and IOP InTimCheck:		MOV	IOAddExp, 402h		IN	AX, AllowPCECmd		;Allow PCE to run		CALL	WaitforPCEToIOPInt		CMP 	MInTim, Bl		;Set to 0 after the PCE In		JZ	MInTimError		;PCE did not stop on an I/O instructionInTimCheckRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;IOP still running while PCE was on Hold or PCE executed from wrong location in memoryPCEHoldError:		CALL	ReenableInt		MOV	Al, 1		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;IOP did not give  control of bus to PCE on timeAllowPCEError:		CALL	ReenableInt		MOV	Al, 2		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;Fault when exercising the PCE186PCE186Error:		CALL	ReenableInt		MOV	Al, 3		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;OutTimError:		CALL	ReenableInt		MOV	Al, 5		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEOverrrunError:		CALL	ReenableInt		MOV	Al, 6		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;MInTimError:		CALL	ReenableInt		MOV	Al, 7		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;StopTimer0:		MOV	AX, 06003h		;disable Timer 0		MOV	DX, i186Timer0MCWAddr		OUT	DX, AX		MOV	AX, 8h			;mask Timer 0 interrupt		MOV	DX, i186Timer0CtlAddr		CALL	ReenableInt		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;ReenableInt:		CLI		MOV	AX, IntsEnabledSave		MOV	[di].EnableIntC1C2, AX	        CALL	ExtEnableInt		;Enable all Int in Monitor Control		STI		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPMailboxCheck:		MOV	Al, 0		CMP	MMailboxErLog, Al		JZ	MailboxError		MOV	BX, OFFSET Mailbox		ADD	BX, 4		MOV	CX, MailboxSize -2MailboxCheckLoop:			MOV	AX, WORD PTR ES:[BX]		CMP	AX, 0AAAAh		JNZ	MailboxAddressError		ADD	BX, 2		LOOP	MailboxCheckLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE found an error in testing the mailboxMailboxError:		CALL	ReenableInt		MOV	BX, TCBIndex		MOV	AX, MMemObsData		MOV	[BX]. ObservedLowData, Al		MOV	[BX]. ObservedHighData, Ah		MOV	AX, MMemExpData		MOV	[BX]. ExpectedLowData, Al		MOV	[BX]. ExpectedHighData, Ah		MOV	AX, MPageWord		MOV	[BX]. ExpectedWord, Al		MOV	[BX]. ExpectedPage, Ah		MOV	Al, CPCECodeBank		MOV	[BX]. ExpectedBank, Al		MOV	Al, 9h		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE could not address mailbox properlyMailboxAddressError:		CALL	ReenableInt		MOV	BX, TCBIndex		MOV	[BX]. ObservedLowData, Al		MOV	[BX]. ObservedHighData, Ah		MOV	[BX]. ExpectedLowData, 0AAh		MOV	[BX]. ExpectedHighData, 0AAh		MOV	Al, 0Ah		JMP 	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;Timer0IntHandler:		CLI		PUSHA		MOV	SI, ExtMFCBlock 	;Index to Monitor File Control Block; Now do EOIs to the i8259 master and the internal interrupt controller,; ;DoEOIs:		DEC	Timer0UnexpInt		;		MOV	AX, i186EOItimer0	;Send an EOI to timer0		MOV	DX, i186EOIRegAddr		OUT	DX, AX			;		MOV	DX,i186InServiceRegAddr 		IN	AX, DX			;Get the ISR word		CMP	AX, 0			;Check for ISR = 0		JNZ	Timer0IntHandlerRet	;We're done		MOV	AL, nonSpecificEOI	;Write an EOI command for the   		OUT	i8259MasterAddr0, AL	;Master i8259Timer0IntHandlerRet:		POPA		STI				;Reenable the interrupts		IRET 	;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* I/O Trapper Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;IOTrapStatusCheck:		MOV	DI, SaveDIReg		;		MOV	Al, 1		MOV	MPCETestType, Al		MOV	Al, 0		MOV	MNMITimErLog, AlInAl0Start:		MOV	IOAddExp, EvenIOAdd		CALL	TrapIOAndReturn		TEST	MNMITimErLog, Cl		JZ	InAl0Check		JMP	NMITimErrorInAl0Check:		MOV	Al, 1		MOV	MUnexpectedNMI, Al		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, ByteInFromEvenLoc		CMP	Al, Bl		JZ	InAl1Start		JMP	StatusErrorInAl1Start:		MOV	IOAddExp, OddIOAdd		CALL	TrapIOAndReturn		MOV	Cl, 0FFh		TEST	MNMITimErLog, Cl		JZ	InAl1Check		JMP	NMITimErrorInAl1Check:		TEST	MUnexpectedNMI, Cl		JZ	InAl1CheckCont1		JMP	InNMIErrorInAl1CheckCont1:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, ByteInFromOddLoc		CMP	Al, Bl		JZ	InAx0Start		JMP	StatusErrorInAx0Start:		MOV	Al, 1		ADD	MUnexpectedNMI, Al	;		MOV	IOAddExp, EvenIOAdd +2		CALL	TrapIOAndReturn		AND	Al, 0FH		TEST	MNMITimErLog, Cl		JZ	InAx0Check		JMP	NMITimErrorInAx0Check:		TEST	MUnexpectedNMI, Cl		JZ	InAx0CheckCont1		JMP	InNMIErrorInAx0CheckCont1:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, WordInFromEvenLoc		CMP	Al, Bl		JZ	InAx1Start		JMP	StatusErrorInAx1Start:		MOV	Al, 1		ADD	MUnexpectedNMI, Al	;		MOV	IOAddExp, OddIOAdd +3		CALL	TrapIOAndReturn		TEST	MNMITimErLog, Cl		JZ	InAx1Check		JMP	NMITimErrorInAx1Check:		TEST	MUnexpectedNMI, Cl		JZ	InAx1CheckCont1		JMP	InNMIErrorInAx1CheckCont1:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, WordInFromOddLoc		CMP	Al, Bl		JZ	OutAl0Start		JMP	StatusErrorOutAl0Start:		MOV	Al, 1		ADD	MUnexpectedNMI, Al	;		MOV	IOAddExp, EvenIOAdd + 4		CALL	TrapIOAndReturn		TEST	MNMITimErLog, Cl		JZ	OutAl0Check		JMP	NMITimErrorOutAl0Check:		TEST	MUnexpectedNMI, Cl		JZ	OutAl0CheckCont1		JMP	InNMIErrorOutAl0CheckCont1:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, ByteOutToEvenLoc		CMP	Al, Bl		JZ	OutAl1Start		JMP	StatusErrorOutAl1Start:		MOV	IOAddExp, OddIOAdd + 4		CALL	TrapIOAndReturn		MOV	Cl, 0		TEST	MUnexpectedNMI, Cl		JZ	OutAl1Check		JMP	OutNMIErrorOutAl1Check:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, ByteOutToOddLoc		CMP	Al, Bl		JZ	OutAx0Start		JMP	StatusErrorOutAx0Start:		MOV	IOAddExp, EvenIOAdd + 6		CALL	TrapIOAndReturn		TEST	MUnexpectedNMI, Cl		JZ	OutAx0Check		JMP	OutNMIErrorOutAx0Check:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, WordOutToEvenLoc		CMP	Al, Bl		JZ	OutAx1Start		JMP	StatusErrorOutAx1Start:		MOV	IOAddExp, OddIOAdd + 7		CALL	TrapIOAndReturn		TEST	MUnexpectedNMI, Cl		JZ	OutAx1Check		JMP	OutNMIErrorOutAx1Check:		MOV	Al, TrapperStatus		AND	Al, 0FH		MOV	Bl, WordOutToOddLoc		CMP	Al, Bl		JNZ	StatusErrorIOTrapStatusCheckRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;NMITimError:		MOV	Dl, Bl		MOV	BX, TCBIndex		MOV	[BX]. ExpectedStatus, Dl		CALL	IOTrapFaultLog		MOV	AX, 4H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;InNMIError:			MOV	Dl, Bl		MOV	BX, TCBIndex		MOV	[BX]. ExpectedStatus, Dl		CALL	IOTrapFaultLog		MOV	Al, MUnexpectedNMI		MOV	[BX].UnexpectedInt, Al		MOV	[BX].ExpInterrupt, NMIVal		MOV	AX, 8H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;NMIFaultLog:			CALL	IOTrapDump		MOV	Dl, Bl		MOV	BX, TCBIndex		MOV	[BX]. ExpectedStatus, Dl		CALL	IOTrapFaultLog		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;OutNMIError:		MOV	Dl, Bl		MOV	BX, TCBIndex		MOV	[BX]. ExpectedStatus, Dl		CALL	IOTrapFaultLog		MOV	Al, MUnexpectedNMI		MOV	[BX]. UnexpectedInt, Al		MOV	[BX]. ExpInterrupt, NMIVal		MOV	AX, 2DH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;I/O trapper encounterd status errorStatusError:		MOV	Dl, Bl		MOV	BX, TCBIndex		MOV	[BX]. ExpectedStatus, Dl		CALL	IOTrapFaultLog		MOV	AX, 0BH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;OutAddDataCheck:		CALL	ExtDoRunTimeWork	;allow keyboard control		MOV	IOAddExp, 403H		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 03H		JZ	OutAddDataCheckCont1		JMP	LowByteAddErrorOutAddDataCheckCont1:		CMP	Ah, 4H		JZ	OutAddDataCheckCont2		JMP	HighByteAddErrorOutAddDataCheckCont2:                MOV     AX, TrapperData		CMP	Ah, 022H		JZ	OutAddDataCheckCont3		JMP	HighByteDataErrorOutAddDataCheckCont3:		MOV	IOAddExp, 0AAAAH		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 0AAH		JZ	OutAddDataCheckCont4		JMP	LowByteAddErrorOutAddDataCheckCont4:		CMP	Ah, 0AAH		JZ	OutAddDataCheckCont5		JMP	HighByteAddErrorOutAddDataCheckCont5:                MOV     AX, TrapperData		CMP	Al, 055H		JZ	OutAddDataCheckCont6		JMP	HighByteDataErrorOutAddDataCheckCont6:		MOV	IOAddExp, 05556H		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, 56H		JNZ	LowByteAddError		CMP	Ah, 55H		JNZ	HighByteAddError                MOV     AX, TrapperData		CMP	Al, 0CDH		JNZ	LowByteDataError		CMP	Ah, 0EFH		JNZ	HighByteDataError                MOV     CX, 16                MOV     BX, 1                MOV     DX, 05A5AhOutAddDataLoop:		MOV	IOAddExp, 0h		CALL	TrapIOAndReturn		MOV	IOAddExp, 05A5Ah		CALL	TrapIOAndReturn                MOV     AX, TrapperAdd		CMP	Al, Dl		JNZ	LowByteAddError		CMP	Ah, Dh		JNZ	HighByteAddError                MOV     AX, TrapperData		CMP	Al, Bl		JNZ	LowByteDataError		CMP	Ah, Bh		JNZ	HighByteDataError                SHL     BX, 1		LOOP	OutAddDataLoop;		MOV	IOAddExp, 0A55Ah		CALL	TrapIOAndReturn                MOV     AX, TrapperData		CMP	Al, 0AAh		JNZ	LowByteDataError		CMP	Ah, 0AAh		JNZ	HighByteDataError;		MOV	IOAddExp, 0500Ah		CALL	TrapIOAndReturn                MOV     AX, TrapperData		CMP	Al, 55h		JNZ	LowByteDataError		CMP	Ah, 55h		JNZ	HighByteDataErrorOutAddDataCheckRet:                RET;;~~~~~~~~~~~~~~~~~~~~~~~~;LowByteAddError:		CALL	IOTrapFaultLog		MOV	Al, 0CH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;HighByteAddError:		CALL	IOTrapFaultLog		MOV	Al, 0DH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;LowByteDataError:		CALL	IOTrapFaultLog		MOV	Al, 0EH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;HighByteDataError:		CALL	IOTrapFaultLog		MOV	Al, 0FH		JMP	PCEError;;;~~~~~~~~~~~~~~~~~~~~~~~~;IOTrapFaultLog:		MOV	BX, TCBIndex		MOV	AX, MExpIOAdd		MOV	[BX].ExpectedLowAdd, Al		MOV	[BX].ExpectedHighAdd, Ah                MOV     AX, TrapperAdd		MOV	[BX].ObservedLowAdd, Al		MOV	[BX].ObservedHighAdd, Ah		MOV	AX, MMemExpData		MOV	[BX].ExpectedLowData, Al		MOV	[BX].ExpectedHighData, Ah		MOV	AX, TrapperData		MOV	[BX].ObservedLowData, Al		MOV	[BX].ObservedHighData, Ah		MOV	Al, TrapperStatus		MOV	[BX].ObservedStatus, Al		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;InAddressCheck:		MOV	IOAddExp, 055AAh		CALL	TrapIOAndReturnInAddressCont:		MOV	AX, TrapperAdd                CMP     AX, 055AAh                JNZ     InAddressErrorInAddressCheckRet:                RET                   ;;~~~~~~~~~~~~~~~~~~~~~~~~;InAddressError:		CALL	IOTrapFaultLog		MOV	Al, 10H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Memory Pattern Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;StoreCheckMemPat:		MOV	Al, 2		MOV	MPCETestType, Al		CALL	StoreCheckMemStoreCheckMemPatRet:		RET       ;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Memory Address Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;StoreCheckMemAdd:		MOV	Al, 3		MOV	MPCETestType, Al		CALL	StoreCheckMemStoreCheckMemAddRet:		RET         ;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Memory Bank Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;StoreCheckMemBank:		MOV	MPCEMemEnd, 0		MOV	Al, 4		MOV	MPCETestType, Al		CALL	StoreCheckMemStoreCheckMemBankRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckPCEMap:		MOV	Al, CEndingBank		MOV	DX, Map1PCE		OUT	DX, Al		MOV	DX, Map2PCE		OUT	DX, Al		MOV	DX, Map3PCE		OUT	DX, Al		MOV	DX, Map4PCE		OUT	DX, Al		MOV	DX, Map5PCE		OUT	DX, Al		MOV	DX, Map6PCE		OUT	DX, Al		MOV	IOAddExp, 41CH		CALL	TrapSinkAndReturn		MOV	Bl, 0FFh		TEST	MMapErLog, Bl		JNZ	MappingError		CMP	IOAddExp, 0FFFFH		JNZ	MappingRet		JMP	IOSinkErrorRetMappingRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;MappingError:		MOV	BX, TCBIndex		MOV	Al, MObservedBank		MOV	[bx].ObservedBank, Al		MOV	Al, CurrentBank		MOV	[bx].ExpectedBank, Al		MOV	AX, MPageWord		MOV	[bx].ExpectedWord, Al		MOV	[bx].ExpectedPage, Ah		MOV	Al, 34H		JMP	PCEError		                ORG TestCodeLoc2;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Memory Common Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;StoreCheckMem:		MOV	DI, SaveDIReg		;		MOV	Al, CStartingBank		MOV	CurrentBank, AlCurrentBankTest:		CMP	Al, CPCECodeBank		JZ	NextBankTest		CALL	BankTestInit		CALL	PCEMapSet		CALL	IOPMapSet		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	PCEOneBankStartTest		CALL	IOPCheckOneBankNextBankTest:		MOV	Al, CurrentBank		INC	Al		MOV	CurrentBank, Al		CMP	Al, CEndingBank		JLE	CurrentBankTest		MOV	MPCEMemEnd, 0FFH		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;BankTestInit:;IF FirstBank then MFirstPageWord= PageWordStart ELSE MFirstPageWord = 0FirstAddInit:		MOV	Al, 0		MOV	MCheckErLog, Al		MOV	Al, CurrentBank		MOV	MCurrentBank, Al		CMP	Al, CStartingBank		JNZ	FirstWordSetUp		MOV	CX, CStartingPageWord		MOV	MFirstPageWord, CX		MOV	IOPFirstPageWord, CX		JMP	LastAddInitFirstWordSetUp:		MOV	MFirstPageWord, 0		MOV	IOPFirstPageWord, 0;If LastBank then MLastPageWord = PageWordEnd ELSE MLastPageWord = 0FFFFhLastAddInit:		CMP	Al, CEndingBank		JNZ	LastWordSetUp		MOV	AX, CEndingPageWord		MOV	MLastPageWord, AX		MOV	IOPLastPageWord, AX		JMP	BankTestInitRetLastWordSetUp:		MOV	MLastPageWord, 0FFFFh		MOV	IOPLastPageWord, 0FFFFhBankTestInitRet:		MOV	AX, CMemPattern		MOV	MMemExpData, AX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEMapSet:		XOR	AX, AX		MOV	Al, CPCEMemMapReg		MOV	MPCEMemMapReg, Al		SHL	AX, 1		MOV	DI, AX		MOV	Al, CurrentBank		JMP	PCEMapTable[DI]PCEMap0SetUp:		MOV	SP, ExitPointer		;Restore stack pointer		MOV	DI, SaveDIReg		;		MOV	Al, FileErrorCode	;		OR	[di].IOPFault, Al	; Skip test		RETPCEMap1SetUp:		MOV	DX, Map1PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETPCEMap2SetUp:		MOV	DX, Map2PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETPCEMap3SetUp:		MOV	DX, Map3PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETPCEMap4SetUp:		MOV	DX, Map4PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETPCEMap5SetUp:		MOV	DX, Map5PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETPCEMap6SetUp:		MOV	DX, Map6PCE		OUT	DX, Al		MOV	DI, SaveDIReg		;		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPMapSet:		XOR	AX, AX		MOV	Al, CIOPMemMapReg		SHL	AX, 1		MOV	DI, AX		MOV	Al, CurrentBank		JMP	IOPMapTable[DI]IOPMap0SetUp:		MOV	SP, ExitPointer		;Restore stack pointer		MOV	DI, SaveDIReg		;		MOV	Al, FileErrorCode	;		OR	[di].IOPFault, Al	; Skip test		RETIOPMap1SetUp:		MOV	DX, Map1IOP		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETIOPMap2SetUp:		MOV	DX, Map2IOP		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETIOPMap3SetUp:		MOV	DX, Map3IOP		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETIOPMap4SetUp:		MOV	DX, Map4IOP		OUT	DX, Al		MOV	DI, SaveDIReg		;		RETIOPMap5SetUp:		MOV	DX, Map5IOP		OUT	DX, Al		MOV	DI, SaveDIReg		;		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEOneBankStartTest:		MOV	IOAddExp, 0		CALL	AllowPCEToRun		MOV	IOAddExp, 418H		CALL	TrapSinkAndReturnPCEOneBankStartTestRet:                RET                 		;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPCheckOneBank:		MOV	DX, IOPFirstPageWordIOPCheckMemBank:		MOV	Al, 0FFh		TEST	MCheckErLog, Al		JNZ	PCEMemCheckError		CMP	IOAddExp, 0FFFFH		JNZ	IOPCurrentBankTest		JMP	IOSinkErrorRetIOPCurrentBankTest:		CALL	IOPCheckBankIOPCheckOneBankRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEMemCheckError:				MOV	BX, TCBIndex		CMP	MPCEtestType, 2		JNZ	PCEMemCheckErrorCont1		MOV	AX, MMemObsData		MOV	[BX]. ObservedLowData, Al		MOV	[BX]. ObservedHighData, Ah		JMP	PCEMemCheckErrorCont3PCEMemCheckErrorCont1:		CMP	MPCEtestType, 3		JNZ	PCEMemCheckErrorCont2		MOV	AX, MObservedPageWord		MOV	[BX]. ObservedLowAdd, Al		MOV	[BX]. ObservedHighAdd, Ah		JMP	PCEMemCheckErrorCont3PCEMemCheckErrorCont2:		MOV	Al, MObservedBank		MOV	[bx].ObservedBank, AlPCEMemCheckErrorCont3:		MOV	AX, MMemExpData		MOV	[BX]. ExpectedLowData, Al		MOV	[BX]. ExpectedHighData, Ah		MOV	AX, MPageWord		MOV	[BX]. ExpectedWord, Al		MOV	[BX]. ExpectedPage, Ah		MOV	Al, MCurrentBank		MOV	[bx].ExpectedBank, Al		MOV	Al, 31H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPCheckBank:		PUSH	ES		XOR	BX, BX		MOV	Bl, CIOPMemMapReg		SHL	BX, 5		XCHG	Bh, Bl		MOV	ES, BX		MOV	DX, IOPFirstPageWord		MOV	IOPPageWord, DXIOPCheckMem:		MOV	AX, 0FFFFh		XOR	AX, IOPPageWord		JS	IOPCheckCont1		MOV	BX, ES		OR	BX, 1000h		MOV	ES, BXIOPCheckCont1:		MOV	BX, IOPPageWord		SHL	BX, 1		MOV	Al, 2		CMP	CTestType, Al		JNZ	IOPCheckPageWord		MOV	AX, CMemPattern		JMP	IOPCheckCont2IOPCheckPageWord:		MOV	Al, 3		CMP	CTestType, Al		JNZ	IOPCheckBank1		MOV	AX, IOPPageWord		JMP	IOPCheckCont2IOPCheckBank1:		MOV	Ah, 0		MOV	Al, CurrentBankIOPCheckCont2:		MOV	DX, WORD PTR ES:[BX]		CMP	AX, DX		JNZ	IOPCheckError		MOV	DX, IOPPageWord		XOR	DX, IOPLastPageWord		JZ	IOPCheckMemRet		INC	IOPPageWord		JMP	IOPCheckMemIOPCheckMemRet:		POP	ES		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;IOPCheckError:		POP	ES		MOV	BX, TCBIndex		CMP	CTestType, 2		JNZ	IOPCheckErrorCont1		MOV	[BX]. ObservedLowData, Al 		MOV	[BX]. ObservedHighData, Ah 		JMP	IOPCheckErrorCont3IOPCheckErrorCont1:		CMP	CTestType, 3		JNZ	IOPCheckErrorCont2		MOV	[bx].ObservedWord, Al		MOV	[bx].ObservedPage, Ah		JMP	IOPCheckErrorCont3IOPCheckErrorCont2:		MOV	[bx].ObservedBank, AlIOPCheckErrorCont3:		MOV	[BX]. ExpectedLowData, Dl		MOV	[BX]. ExpectedHighData, Dh		MOV	AX, IOPPageWord		MOV	[bx].ExpectedWord, Al		MOV	[bx].ExpectedPage, Ah		MOV	Al, CurrentBank		MOV	[bx].ExpectedBank, Al		MOV	Al, 11H		JMP	PCEError;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Display Trapper Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;InitDisplayTrapper:		MOV	DI, SaveDIReg		;		MOV     Al, CPCEDisplayBank                MOV     DX, Map5PCE		OUT	DX, Al		MOV	Al, 5                MOV	MPCETestType, Al                CALL    ClearDirtyNibblesInitDisplayTrapperRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;ClearDirtyNibbles:		MOV	DX, DisplayTrapStartReg	;100h		MOV	CX, 64ClearDirtyNibLoop:			IN	Al, DX		ADD	DX, 2		LOOP	ClearDirtyNibLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckDirtyBits:		CALL	CheckNoDirtyOverflow		MOV	DX, 160h		;160h		MOV	DispTrapRegPointer, 30h ;		MOV	CMCSLine, 3		CALL	CheckOneDirtyMCS		MOV	DX, 140h		;140h		MOV	DispTrapRegPointer, 20h	;		MOV	CMCSLine, 2		CALL	CheckOneDirtyMCS		MOV	DX, 120h		;140h		MOV	DispTrapRegPointer, 10h	;		MOV	CMCSLine, 1		CALL	CheckOneDirtyMCS		MOV	DX, DisplayTrapStartReg	;100h		MOV	DispTrapRegPointer, 0		MOV	CMCSLine, 0		CALL	CheckOneDirtyMCS		CMP	CDirtyRapSheet, 0		JZ	CheckDirtyBitsRet		JMP	DirtyBitErrorCheckDirtyBitsRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckNoDirtyOverflow:		PUSH	CX		PUSH	DX		MOV	IOAddExp, 430H		CALL	AllowPCEToRunCheckNoDirtyCont:		MOV	CFaultyDispReg, 0		MOV	DX, DisplayTrapStartReg 		MOV	CX, 64CheckAllDirtyLoop:			IN	Al, DX		CMP	Al, 70h		JNZ	DirtyNibOverError		ADD	DX, 2		INC	CFaultyDispReg               	LOOP    CheckAllDirtyLoop		POP	DX		POP	CX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibOverError:				MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 070h		MOV	[BX]. ObsDirtyNibble, Al		MOV	DX, DispTrapRegPointer		MOV	CFaultyDispReg, DX		MOV	[bx].FaultyDispReg, Dl		MOV	Al, 15H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckOneDirtyMCS:		MOV	IOAddExp, 500H		MOV	CX, 13CheckOneDirtyNibLoop:		CALL	CheckOneDirtyNibble		ADD	DX, 2		INC	DispTrapRegPointer		LOOP	CheckOneDirtyNibLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckOneDirtyNibble:		MOV	Bl, 0F8h		MOV	DirtyBitNum, 3		CALL	CheckOneDirtyBit		MOV	Bl, 0F4h		MOV	DirtyBitNum, 2		CALL	CheckOneDirtyBit		MOV	Bl, 0F2h		MOV	DirtyBitNum, 1		CALL	CheckOneDirtyBit		MOV	Bl, 0F1h		MOV	DirtyBitNum, 0		CALL	CheckOneDirtyBitCheckOneDirtyNibbleRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckOneDirtyBit:		PUSH	CX		MOV	CX, 5CheckDirtyBitLoop:  		CALL	AllowPCEToRun		ADD	IOAddExp, 2CheckDirtyBitCont1:		IN	Al, DX		CMP	Al, Bl		JNZ	DirtyBitErLog		CMP	Bl, 0F1h		JNZ	CheckDirtyBitCont2		MOV	AX, DispTrapRegPointer	;		AND	AX,0Fh		CMP	AX, 0Ch			;13th register of an MCS line		JNZ	CheckDirtyBitCont2		MOV	CX, 1CheckDirtyBitCont2:		CALL	DirtyNibbleReset               	LOOP    CheckDirtyBitLoop		POP	CXCheckOneDirtyBitRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyBitErLog:		PUSH	DX		PUSH	BX		MOV	BX, TCBIndex		INC	CDirtyRapSheet		MOV	DX, DispTrapRegPointer		SAL	DX, 2		OR	DX, DirtyBitNum		CMP	CDirtyRapSheet, 1		JNZ	DirtyBitErCont1		MOV	CContDispReg1, Al		MOV	[bx].ContDispReg1, Al		MOV	CFaultyDispReg1, Dl		MOV	[bx].FaultyDispReg1, Dl		POP	BX		POP	DX		JMP	CheckDirtyBitCont2DirtyBitErCont1:			CMP	CDirtyRapSheet, 2		JNZ	DirtyBitErCont2		MOV	CContDispReg2, Al		MOV	[bx].ContDispReg2, Al		MOV	CFaultyDispReg2, Dl		MOV	[bx].FaultyDispReg2, Dl		POP	BX		POP	DX		JMP	CheckDirtyBitCont2DirtyBitErCont2:			CMP	CDirtyRapSheet, 3		JNZ	DirtyBitErCont3		MOV	CContDispReg3, Al		MOV	[bx].ContDispReg3, Al		MOV	CFaultyDispReg3, Dl		MOV	[bx].FaultyDispReg3, Dl		POP	BX		POP	DX		JMP	CheckDirtyBitCont2DirtyBitErCont3:			CMP	CDirtyRapSheet, 4		JNZ	DirtyBitErCont4		MOV	CContDispReg4, Al		MOV	[bx]. ContDispReg4, Al		MOV	CFaultyDispReg4, Dl		MOV	[bx].FaultyDispReg4, Dl		POP	BX		POP	DX		JMP	CheckDirtyBitCont2DirtyBitErCont4:			MOV	CContDispReg5, Al		MOV	[bx].ContDispReg5, Al		MOV	CFaultyDispReg5, Dl		MOV	[bx].FaultyDispReg5, Dl;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyBitError:		MOV	AX, CDirtyRapSheet		MOV	[bx]. DirtyRapSheet, Al		MOV	Al, 13H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibbleReset:		PUSH	CX		PUSH	DX		CALL	ExtDoRunTimeWork	;allow keyboard control		MOV	DX, DisplayTrapStartReg		MOV	CFaultyDispReg, 0 		MOV	CX, 64CheckAllClearedLoop:			IN	Al, DX		CMP	Al, 70h		JNZ	DirtyNibbleSetError		ADD	DX, 2		INC	CFaultyDispReg                	LOOP    CheckAllClearedLoop		POP	DX		POP	CX		MOV	CFaultyDispReg, 0		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibbleSetError:		MOV	BX, TCBIndex		MOV	[BX]. ObsDirtyNibble, Al		MOV	[BX]. ExpDirtyNibble, 70h		MOV	AX, CFaultyDispReg		MOV	[BX]. FaultyDispReg, Al		MOV	Al, 14H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;Check5DirtyDisplay:		CALL	ExtDoRunTimeWork	;allow keyboard control		MOV	IOAddExp, 432h		CALL	AllowPCEToRun		MOV	DX, DisplayTrapStartReg	;100h		MOV	CFaultyDispReg, 0		MOV	CX, 4Check5DirtyNibLoop:			PUSH	CX		CMP	CFaultyDispReg, 0		JZ	Check5DirtyNibCont		MOV	CX, 13		JMP	Check5DirtyNibLoop1Check5DirtyNibCont:			IN	Al, DX		CMP	Al, 0F5h		JNZ	DirtyNibble5ErLog1		MOV	CX, 12Check5DirtyNibLoop1:			INC	CFaultyDispReg		ADD	DX, 2		IN	Al, DX		CMP	Al, 075h		JNZ	DirtyNibble5ErLog2		LOOP	Check5DirtyNibLoop1		MOV	CX, 3Check5DirtyNibLoop2:			INC	CFaultyDispReg		ADD	DX, 2		IN	Al, DX		CMP	Al, 070h		JNZ	DirtyNibble5ErLog3		LOOP	Check5DirtyNibLoop2		POP	CX		LOOP	Check5DirtyNibLoop		CALL	DirtyNibbleReset		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibble5ErLog1:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 0F5h		JMP	DirtyNibble5Error;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibble5ErLog2:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 075h		JMP	DirtyNibble5Error;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibble5ErLog3:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 070hDirtyNibble5Error:		MOV	[BX]. ObsDirtyNibble, Al		MOV	DX, CFaultyDispReg		MOV	[bx].FaultyDispReg, Dl		MOV	Al, 16H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckADirtyDisplay:		CALL	ExtDoRunTimeWork	;allow keyboard control		MOV	IOAddExp, 434h		CALL	AllowPCEToRun		MOV	DX, DisplayTrapStartReg	;100h		MOV	CFaultyDispReg, 0		MOV	CX, 4CheckADirtyNibLoop:			PUSH	CX		CMP	CFaultyDispReg, 0		JZ	CheckADirtyNibCont		MOV	CX, 13		JMP	CheckADirtyNibLoop1CheckADirtyNibCont:			IN	Al, DX		CMP	Al, 0FAh		JNZ	DirtyNibbleAErLog1		MOV	CX, 12CheckADirtyNibLoop1:			INC	CFaultyDispReg		ADD	DX, 2		IN	Al, DX		CMP	Al, 07Ah		JNZ	DirtyNibbleAErLog2		LOOP	CheckADirtyNibLoop1		MOV	CX, 3CheckADirtyNibLoop2:			INC	CFaultyDispReg		ADD	DX, 2		IN	Al, DX		CMP	Al, 070h		JNZ	DirtyNibbleAErLog3		LOOP	CheckADirtyNibLoop2		POP	CX		LOOP	CheckADirtyNibLoop		CALL	DirtyNibbleReset		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibbleAErLog1:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 0FAh		JMP	DirtyNibbleAError;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibbleAErLog2:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 07Ah		JMP	DirtyNibbleAError;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyNibbleAErLog3:		MOV	BX, TCBIndex		MOV	[BX]. ExpDirtyNibble, 070hDirtyNibbleAError:		MOV	[BX]. ObsDirtyNibble, Al		MOV	DX, CFaultyDispReg		MOV	[bx].FaultyDispReg, Dl		MOV	Al, 17H		JMP	PCEError		RET;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Programmable Interrupt Controller (PIC) Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;SimulatePCEInt:		MOV	DI, SaveDIReg		;		MOV	Al, 1		MOV	MPCETimer0UnexpInt, Al		MOV	MUnexpectedInt1, Al		MOV	MUnexpectedInt2, Al		MOV	MUnexpectedInt3, Al		MOV	MUnexpectedInt4, Al		MOV	MUnexpectedInt5, Al		MOV	MUnexpectedInt6, Al		MOV	MUnexpectedInt7, Al		MOV	MUnexpectedNMI, Al		MOV	Al, 6		MOV	MPCETestType, Al		CALL	ServiceInt1Req		CALL	PCENonSpecEOI		CALL	ServiceInt2Req		CALL	PCENonSpecEOI		CALL	ServiceInt3Req		CALL	ExtDoRunTimeWork	;allow keyboard control		CALL	PCENonSpecEOI		CALL	ServiceInt4Req		CALL	PCENonSpecEOI		CALL	ServiceInt5Req		CALL	PCENonSpecEOI		CALL	ServiceInt6Req		CALL	PCENonSpecEOI		CALL	ServiceInt7Req		CALL	PCENonSpecEOI		CALL	ServiceNMIReq		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCENonSpecEOI:		MOV	Al, nonSpecificEOI	;Write an EOI command to the    		MOV	DX, PCE8259Addr0	;PCE 8259 PIC		OUT	DX, Al		MOV	DX, PCE8259Addr0		MOV	Al, 0Ah		OUT	DX, Al		IN	Al, DX		TEST	Al, 0FEh		JNZ	PendingIntError		RET	   ;;~~~~~~~~~~~~~~~~~~~~~~~~;	PendingIntError:		MOV	BX, TCBIndex		MOV	[BX]. ExpInterrupt, Al		MOV	[BX]. UnexpectedInt, 1		MOV	Al, 2FH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;	MaskPCEInt:		MOV	AL, PCEIntsDisable	;mask all interrupts to the		MOV	DX, PCE8259Addr1	;PCE 8259 PIC		OUT	DX, Al		RET	   ;;~~~~~~~~~~~~~~~~~~~~~~~~;	ServiceTimer0IntReq:		MOV	IOAddExp, 0		CALL	AllowPCEToRun		MOV	DX, PCEClrTim0Int		IN	Al, DX		MOV	Al, PCETimer0Enable		MOV	DX, PCE8259Addr1		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceTimer0IntReqCont:		MOV	Al, 0		MOV	MIntNum, Al		MOV	Al, MPCETimer0UnexpInt		CMP	Al, 0		JZ	ServiceTimer0IntReqRet		JMP	PCETim0IntErrorServiceTimer0IntReqRet:		MOV	Al, 1		MOV	MPCETimer0UnexpInt, Al		CALL	CheckNoOtherInt		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt1Req:		MOV	Al, 1		MOV	MIntNum, Al		MOV	DX, IntReg1		OUT	DX, Al		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	IOAddExp, 436H 		CALL	AllowPCEToRunServiceInt1ReqCont:		MOV	Al, 0		CMP	MUnexpectedInt1, Al		JNZ	UnexpectedInt1Error		MOV	Al, 1		MOV	MUnexpectedInt1, Al		CALL	CheckNoOtherIntServiceInt1ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt1Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1AH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt2Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 2		MOV	MIntNum, Al		MOV	DX, IntReg2		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt2ReqCont1:		MOV	Al, MUnexpectedInt2		CMP	Al, 0		JNZ	UnexpectedInt2Error		MOV	Al, 1		MOV	MUnexpectedInt2, Al		CALL	CheckNoOtherIntServiceInt2ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt2Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1BH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt3Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 3		MOV	MIntNum, Al		MOV	DX, IntReg3		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt3ReqCont:		MOV	Al, MUnexpectedInt3		CMP	Al, 0		JNZ	UnexpectedInt3Error		MOV	Al, 1		MOV	MUnexpectedInt3, Al		CALL	CheckNoOtherIntServiceInt3ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt3Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1CH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt4Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 4		MOV	MIntNum, Al		MOV	DX, IntReg4		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt4ReqCont:		MOV	Al, MUnexpectedInt4		CMP	Al, 0		JNZ	UnexpectedInt4Error		MOV	Al, 1		MOV	MUnexpectedInt4, Al		CALL	CheckNoOtherIntServiceInt4ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt4Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1DH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt5Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 5		MOV	MIntNum, Al		MOV	DX, IntReg5		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt5ReqCont:		MOV	Al, MUnexpectedInt5		CMP	Al, 0		JNZ	UnexpectedInt5Error		MOV	Al, 1		MOV	MUnexpectedInt5, Al		CALL	CheckNoOtherIntServiceInt5ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt5Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1EH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt6Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 6		MOV	MIntNum, Al		MOV	DX, IntReg6		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt6ReqCont:		MOV	Al, MUnexpectedInt6		CMP	Al, 0		JNZ	UnexpectedInt6Error		MOV	Al, 1		MOV	MUnexpectedInt6, Al		CALL	CheckNoOtherIntServiceInt6ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt6Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 1FH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceInt7Req:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 7		MOV	MIntNum, Al		MOV	DX, IntReg7		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceInt7ReqCont1:		MOV	Al, MUnexpectedInt7		CMP	Al, 0		JNZ	UnexpectedInt7Error		MOV	Al, 1		MOV	MUnexpectedInt7, Al		CALL	CheckNoOtherIntServiceInt7ReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedInt7Error:		CALL	CheckAnotherIntAndLog		MOV	Al, 20H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;		ServiceNMIReq:		MOV	IOAddExp, 0H 		CALL	AllowPCEToRun		MOV	Al, 8		MOV	MIntNum, Al		MOV	DX, NMIReg		OUT	DX, Al		MOV	IOAddExp, 436H		CALL	AllowPCEToRunServiceNMIReqCont:		MOV	Al, MUnexpectedNMI		CMP	Al, 0		JNZ	UnexpectedNMIError		MOV	Al, 1		MOV	MUnexpectedNMI, Al		CALL	CheckNoOtherIntServiceNMIReqRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UnexpectedNMIError:		CALL	CheckAnotherIntAndLog		MOV	Al, 19H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckNoOtherInt1:		MOV	BX, OFFSET MUnexpIntTable		MOV	DX, 0		MOV	CX, 9		JMP	NoOtherIntLoop;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckNoOtherInt:		MOV	BX, OFFSET MUnexpectedInt1		MOV	DX, 0		MOV	CX, 8NoOtherIntLoop:		MOV	Al, BYTE PTR ES:[BX]		CMP	Al, 1		JNZ	ASecondIntError		INC	BX		INC	DX		LOOP	NoOtherIntLoopCheckNoOtherIntRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;ASecondIntError:		MOV	BX, TCBIndex		MOV	[BX]. UnexpectedInt, Al		MOV	Al, MIntNum		MOV	[BX]. ExpInterrupt, Al		MOV	[BX]. ObsInterrupt, Dl		MOV	Al, 18H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckAnotherIntAndLog:		MOV	BYTE PTR ES:[BX], 1		MOV	BX, TCBIndex		MOV	[BX]. UnexpectedInt, Al		MOV	Al, MIntNum		MOV	[BX]. ExpInterrupt, Al		MOV	BX, OFFSET MUnexpIntTable		MOV	DX, 0		MOV	CX, 9CheckAnotherIntLoop:		MOV	Al, BYTE PTR ES:[BX]		CMP	Al, 1		JNZ	AnotherIntError		INC	BX		INC	DX		LOOP	CheckAnotherIntLoopCheckAnotherIntRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;AnotherIntError:		MOV	BX, TCBIndex		MOV	Al, MIntNum		MOV	[BX]. ObsInterrupt, Dl		MOV	Al, 30H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Programmable Interval Timer (PIT) Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;; SUBROUTINE :  InitPIT0;	Input clock freq is  1.932MHz;InitPIT0:;    Timer 0		MOV	DI, SaveDIReg		;		MOV	Al, 7		MOV	MPCETestType, Al		MOV	Al, PCETimer0Enable		MOV	DX, PCE8259Addr1		OUT	DX, Al		MOV	DX, PCEClrTim0Int		IN	Al, DX;		MOV	AL, i8254SelCount0 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al		CALL	Delay2		MOV	IOAddExp, 438H		CALL	AllowPCEToRun;PIT0Cont1:		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 80h		JNZ	PCETim0OutStaRstError			CLI		MOV	AL, i8254SelCount0 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al;Load low byte count into counter register		MOV	AX, InitialCount		MOV	DX, PCE8254Count0Addr	;ls byte		OUT	DX, Al;Load high byte count into counter register, and check status		XCHG	Ah, Al		MOV	DX, PCE8254Count0Addr	;ms byte		OUT	DX, Al;PIT0Cont2:		CALL	Delay2		MOV	AL, i8254ReadBackCmd + i8254RBSelCount0		MOV	DX, PCE8254CmdAddr	;		OUT	DX, Al		MOV	DX, PCE8254Count0Addr	;		IN	Al, DX		CMP	Al, i8254NoOutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim0Error;check latched count for smaller than initial countPIT0Cont3:		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		MOV	BX, AX		CMP	BX, InitialCount		JZ	PCETim0Error		MOV	DX, PCE8254CmdAddr	;		MOV	AL, i8254ReadBackCmd + i8254NoStatusLatch + i8254RBSelCount0		OUT	DX, Al		MOV	DX, PCE8254Count0Addr	;		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		CMP	AX, BX		JZ	PCETim0Error		STI;enable timer 0 to interrupt PCE,wait a while in PCE and then come back to ;check if interrupt  and if the status of out bit changedPIT0Cont4:		CALL	EnableTim0Int		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 80h		JZ	PCETim0OutStaSetError;PIT0Cont5:		MOV	DX, PCE8254CmdAddr	;		MOV	Al, i8254ReadBackCmd + i8254NoCountLatch + i8254RBSelCount0		OUT	DX, AL		MOV	DX, PCE8254Count0Addr	;		IN	Al, DX		CMP	Al, i8254OutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim0Error		RET	;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim0Error:		STI		MOV	Al, 21H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim0OutStaRstError:		STI		MOV	Al, 22H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim0OutStaSetError:		STI		MOV	Al, 23H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;enable timer 0 to interrupt PCE,wait a while in PCE and then come back to check;if interruptEnableTim0Int:		MOV	Al, 1		MOV	MPCETimer0UnexpInt, Al		MOV	MUnexpectedInt1, Al		MOV	MUnexpectedInt2, Al		MOV	MUnexpectedInt3, Al		MOV	MUnexpectedInt4, Al		MOV	MUnexpectedInt5, Al		MOV	MUnexpectedInt6, Al		MOV	MUnexpectedInt7, Al		MOV	MUnexpectedNMI, Al		MOV	DX, PCEClrTim0Int	;clear the interrupt latch		IN	Al, DX		CALL	IOTrapDump		CALL	PCENonSpecEOI		MOV	IOAddExp, 43AH		CALL	AllowPCEToRunEnableTim0IntCont:		MOV	Al, MPCETimer0UnexpInt		CMP	Al, 0		JNZ	PCETim0IntErrorEnableTim0IntRet:		MOV	Al, 1		MOV	MPCETimer0UnexpInt, Al		CALL	CheckNoOtherInt1		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim0IntError:		MOV	BX, TCBIndex		MOV	Al, MIntNum		MOV	[BX]. ExpInterrupt, Al		MOV	Al, MUnexpectedNMI		MOV	[BX]. UnexpectedInt, Al		MOV	Al, 2AH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;Delay:		MOV	CX, 0FFhDelayLoop:		LOOP	DelayLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;Delay1:		MOV	CX, 0FFFFhDelayLoop1:		LOOP	DelayLoop1		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;Delay2:		MOV	CX, 0FhDelayLoop2:		LOOP	DelayLoop2		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;; SUBROUTINE :  InitPIT1;	Input clock freq is  1.932MHz;InitPIT1:;    Timer 1		MOV	AL, i8254SelCount1 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al		CALL	Delay2		MOV	IOAddExp, 43CH		CALL	AllowPCEToRun;;PIT1Cont1:		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 40h		JNZ	PCETim1OutStaRstError			CLI		MOV	AL, i8254SelCount1 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al;Load low byte count into counter register		MOV	AX, InitialCount		MOV	DX, PCE8254Count1Addr	;ls byte		OUT	DX, Al;Load high byte count into counter register, and check status		XCHG	Ah, Al		MOV	DX, PCE8254Count1Addr	;ms byte		OUT	DX, AlPIT1Cont2:		CALL	Delay2		MOV	AL, i8254ReadBackCmd + i8254RBSelCount1		MOV	DX, PCE8254CmdAddr	;		OUT	DX, Al		MOV	DX, PCE8254Count1Addr	;		IN	Al, DX		CMP	Al, i8254NoOutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim1Error;check latched count for smaller than initial countPIT1Cont3:		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		MOV	BX, AX		CMP	BX, InitialCount		JZ	PCETim1Error		CALL	Delay2		MOV	DX, PCE8254CmdAddr	;		MOV	AL, i8254ReadBackCmd + i8254NoStatusLatch + i8254RBSelCount1		OUT	DX, Al		MOV	DX, PCE8254Count1Addr	;		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		CMP	AX, BX		JZ	PCETim1Error		STI;enable timer 1 ,wait a while in PCE and then come back to;check if the status of out bit changedPIT1Cont4:		CALL	Delay1		MOV	IOAddExp, 43EH		CALL	AllowPCEToRun		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 40h		JZ	PCETim1OutStaSetError;PIT1Cont5:		MOV	DX, PCE8254CmdAddr	;		MOV	Al, i8254ReadBackCmd + i8254NoCountLatch + i8254RBSelCount1		OUT	DX, AL		MOV	DX, PCE8254Count1Addr	;		IN	Al, DX		CMP	Al, i8254OutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim1Error		RET	;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim1Error:		STI		MOV	Al, 24H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim1OutStaRstError:		STI		MOV	Al, 25H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim1OutStaSetError:		STI		MOV	Al, 26H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;; SUBROUTINE :  InitPIT2;	Input clock freq is  1.932MHz;InitPIT2:;    Timer 2;enable input gate for timer 2		MOV	Al, 1		MOV	DX, EmulSpeakerPort		OUT	DX, Al		MOV	AL, i8254SelCount2 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al		CALL	Delay2		MOV	IOAddExp, 440H		CALL	AllowPCEToRun;;PIT2Cont1:		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 20h		JZ	PIT2Cont2		JMP	PCETim2OutStaRstError	PIT2Cont2:		CLI		MOV	AL, i8254SelCount2 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al;Load low byte count into counter register		MOV	AX, InitialCount		MOV	DX, PCE8254Count2Addr	;ls byte		OUT	DX, Al;Load high byte count into counter register, and check status		XCHG	Ah, Al		MOV	DX, PCE8254Count2Addr	;ms byte		OUT	DX, AlPIT2Cont3:		CALL	Delay2		MOV	AL, i8254ReadBackCmd + i8254RBSelCount2		MOV	DX, PCE8254CmdAddr	;		OUT	DX, Al		MOV	DX, PCE8254Count2Addr	;		IN	Al, DX		CMP	Al, i8254NoOutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim2Error;check latched count for smaller than initial countPIT2Cont4:		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		MOV	BX, AX		CMP	BX, InitialCount		JZ	PCETim2Error		CALL	Delay2		MOV	DX, PCE8254CmdAddr	;		MOV	AL, i8254ReadBackCmd + i8254NoStatusLatch + i8254RBSelCount2		OUT	DX, Al		MOV	DX, PCE8254Count2Addr	;		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		CMP	AX, BX		JZ	PCETim2Error		STI;enable timer 2 , wait a while in PCE and then come back to;check if the status of out bit changedPIT2Cont5:		CALL	Delay1		MOV	IOAddExp,442H 		CALL	AllowPCEToRun		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 20h		JZ	PCETim2OutStaSetError;PIT2Cont6:		MOV	DX, PCE8254CmdAddr	;		MOV	Al, i8254ReadBackCmd + i8254NoCountLatch + i8254RBSelCount2		OUT	DX, AL		MOV	DX, PCE8254Count2Addr	;		IN	Al, DX		CMP	Al, i8254OutNoNull + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount		JNZ	PCETim2ErrorPIT2Cont7:		MOV	Al, 0		MOV	DX, EmulSpeakerPort		OUT	DX, Al		MOV	AL, i8254SelCount2 + i8254LSBthenMSB + i8254IntOnTC + i8254BinaryCount;Load command register		MOV	DX, PCE8254CmdAddr		OUT	DX, Al;Load low byte count into counter register		MOV	AX, InitialCount		MOV	DX, PCE8254Count2Addr	;ls byte		OUT	DX, Al;Load high byte count into counter register, and check status		XCHG	Ah, Al		MOV	DX, PCE8254Count2Addr	;ms byte		OUT	DX, AlPIT2Cont8:		CALL	Delay2		MOV	DX, PCE8254CmdAddr	;		MOV	AL, i8254ReadBackCmd + i8254NoStatusLatch + i8254RBSelCount2		OUT	DX, Al		MOV	DX, PCE8254Count2Addr	;		IN	Al, DX			;ls byte		XCHG	Ah, Al		IN	Al, DX			;ms byte		MOV	BX, AX		CMP	BX, InitialCount		JNZ	PCETim2GateError		RET	;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim2Error:		STI		MOV	Al, 27H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim2OutStaRstError:		STI		MOV	Al, 28H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim2OutStaSetError:		STI		MOV	Al, 29H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCETim2GateError:		MOV	Al, 33H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Speaker Port Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;InitTimer2:		MOV	DI, SaveDIReg		;		MOV	Al, 8		MOV	MPCETestType, Al;disable gate input for timer 2		MOV	Al, 0		MOV	DX, EmulSpeakerPort		OUT	DX, Al;Load command register		MOV	AL, i8254SelCount2+i8254LSBthenMSB+ i8254RetOneShot+i8254BinaryCount		MOV	DX, PCE8254CmdAddr		OUT	DX,AL		CALL	Delay2		MOV	AL, i8254ReadBackCmd + i8254NoCountLatch + i8254RBSelCount2		MOV	DX, PCE8254CmdAddr	;		OUT	DX, Al		MOV	DX, PCE8254Count2Addr	;		IN	Al, DX		TEST	Al, 80H		JNZ	InitTimer2Ret		JMP	PCETim0ErrorInitTimer2Ret:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckSpeakerData:;enable speaker data;check Speaker Status driver output = 1		MOV	IOAddExp, 444H		CALL	AllowPCEToRun		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 10h		JNZ	PCESpeakerDriverRstError;disable speaker data		MOV	Al, 2		MOV	DX, EmulSpeakerPort			OUT	DX, Al		CALL	Delay;check Speaker Status driver output = 0		MOV	IOAddExp, 446H		CALL	AllowPCEToRun		MOV	DX, StatusReg		IN	Al, DX		TEST	Al, 10h		JZ	PCESpeakerDriverSetError		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCESpeakerDriverSetError:		MOV	Al, 2BH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;PCESpeakerDriverRstError:		MOV	Al, 2CH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~;* UCS Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;UCSCheck:		MOV	DI, SaveDIReg		;		MOV	Al, 9		MOV	MPCETestType, Al		MOV  	AX,01000H		MOV 	ES,AX		MOV 	BX,0		MOV	WORD PTR ES:[BX], 0H		MOV	IOAddExp, 0FFA0h		CALL	AllowPCEToRun		MOV	IOAddExp, 448H		CALL	AllowPCEToRun		TEST	WORD PTR ES:[BX],0FFFFH		JNZ	UCSError		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;UCSError:		MOV	Al, 32H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* IOP Common Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;TrapSinkAndReturn:		PUSH	AX		PUSH	CX		PUSH	BX		MOV	BX, IOAddExp		MOV	CX, 04FhSinkTrapIOLoop:		IN	AX, AllowPCECmd		CALL	IOTrapDumpSinkTrapIOCheck:		CMP	BX, TrapperAdd		JZ	TrapSinkAndRetCont		LOOP	SinkTrapIOLoop		MOV	BX, TCBIndex		MOV	IOAddExp, AX		MOV	[BX].ExpectedLowAdd, Al		MOV	[BX].ExpectedHighAdd, Ah                MOV     AX, TrapperAdd		MOV	[BX].ObservedLowAdd, Al		MOV	[BX].ObservedHighAdd, Ah		MOV	AX, TrapperData		MOV	[BX].ObservedLowData, Al		MOV	[BX].ObservedHighData, Ah		MOV	Al, TrapperStatus		MOV	[BX].ObservedStatus, Al		MOV	IOAddExp, 0FFFFHTrapSinkAndRetCont:		CMP	PCEToIOPUnexpInt, 0		JZ	TrapSinkAndReturnRet		CMP	CTestType, 0		JNZ	PCEToIOPIntError		CALL	ReenableInt		JMP	PCEToIOPIntErrorTrapSinkAndReturnRet:		INC	PCEToIOPUnexpInt		POP	BX		POP	CX		POP	AX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;AllowPCEToRun:		PUSH	AX		PUSH	CX		PUSH	BX		MOV	BX, IOAddExp		MOV	CX, 03FhWaitForTrapIOLoop:		IN	AX, AllowPCECmd		CALL	IOTrapDumpTrapIOCheck:		CMP	BX, TrapperAdd		JZ	AllowPCEToRet		LOOP	WaitForTrapIOLoop		JMP	IOSinkErrorAllowPCEToRet:		CMP	PCEToIOPUnexpInt, 0		JZ	AllowPCEToRunRet		CMP	CTestType, 0		JNZ	PCEToIOPIntError		CALL	ReenableInt		JMP	PCEToIOPIntErrorAllowPCEToRunRet:		INC	PCEToIOPUnexpInt		POP	BX		POP	CX		POP	AX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEToIOPIntError:		MOV	BX, TCBIndex		MOV	[BX].ExpInterrupt, 0AH		MOV	AX, PCEToIOPUnexpInt		MOV	[BX].UnexpectedInt, Al;		MOV	AX, TrapperAdd 		CALL	IOTrapFaultLog		MOV	Al, 2EH		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;WaitforPCEToIOPInt:		PUSH	CX		CALL	IOTrapDump		MOV	CX, 01FhPCEToIOPIntLoop:		CMP	PCEToIOPUnexpInt, 0		JZ	WaitforPCEToIOPIntRet		LOOP	PCEToIOPIntLoop		CMP	CTestType, 0		JNZ	PCEToIOPIntError		CALL	ReenableInt		JMP	PCEToIOPIntErrorWaitForPCEToIOPIntRet:		INC	PCEToIOPUnexpInt		POP	CX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;TrapIOAndReturn:		PUSH	AX		PUSH	CX		MOV	KBInterruptPCE, 0		MOV	AX, 03FFH		MOV	CX, 0FFFFHWaitForKBFirstInt:		TEST	KBInterruptPCE, 0FFH		JNZ	WaitForKBFirstIntCont		LOOP	WaitForKBFirstInt		MOV	CX, 0FFFFH		DEC	AX		JNZ	WaitForKBFirstInt		JMP	KeyBoardIntErrorWaitForKBFirstIntCont:		MOV	KBInterruptPCE, 0		IN	AX, AllowPCECmd		CALL	IOTrapDumpTrapIOAndReturnCont:		CMP	PCEToIOPUnexpInt, 0		JNZ	PCEToIOPIntErrorTrapIOAndReturnRet:		INC	PCEToIOPUnexpInt		POP	CX		POP	AX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;KeyBoardIntError:		MOV	Al, 34H		JMP	PCEError;;~~~~~~~~~~~~~~~~~~~~~~~~;IOSinkError:		MOV	BX, TCBIndex		MOV	IOAddExp, AX		MOV	[BX].ExpectedLowAdd, Al		MOV	[BX].ExpectedHighAdd, Ah                MOV     AX, TrapperAdd		MOV	[BX].ObservedLowAdd, Al		MOV	[BX].ObservedHighAdd, Ah		MOV	AX, TrapperData		MOV	[BX].ObservedLowData, Al		MOV	[BX].ObservedHighData, Ah		MOV	Al, TrapperStatus		MOV	[BX].ObservedStatus, AlIOSinkErrorRet:		MOV	Al, 12H		JMP	PCEError;;;~~~~~~~~~~~~~~~~~~~~~~~~;IOTrapDump:		PUSH	AX		PUSH	DX		MOV	DX, HighAddressReg		IN	Al, DX		XCHG	Ah, Al		MOV	DX, LowAddressReg		IN	Al, DX		MOV	TrapperAdd, AX		MOV	DX, HighDataReg		IN	Al, DX		XCHG	Ah, Al		MOV	DX, LowDataReg		IN	Al, DX		MOV	TrapperData, AX		MOV	DX, StatusReg		IN	Al, DX		MOV	TrapperStatus, Al		POP	DX		POP	AXIOTrapDumpRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEToIOPIntHandler:		CLI		PUSHA		DEC	PCEToIOPUnexpInt		MOV	SI, ExtMFCBlock 	;Index to Monitor File Control Block		MOV	AL, nonSpecificEOI	;Write an EOI command to the    		OUT	i8259MasterAddr0, AL	;master i8259		POPA		STI				;Reenable the interruptsPCEToIOPIntHandlerRet:		IRET;;~~~~~~~~~~~~~~~~~~~~~~~~;ExcKeyWakeHandler: 		CLI   		PUSHA		MOV	SI, ExtMFCBlock 	;Index to Monitor File Control Block		MOV	KBInterruptPCE, 1ExcKeyWakeHandlerRet:		POPA	   	JMP   ExtPutNextKey;;~~~~~~~~~~~~~~~~~~~~~~~~;StartUpTestLoopBack:		MOV	SP, ExitPointer		;Restore stack pointer		MOV	Al, 0		CMP	CTestControl, Al		JZ	LastPassCheck		CMP	CTestType, 9		JZ	LastPassCheckTestLoopBackCont1:		INC	CTestType		CALL	PCE186BootInit		XOR	AX, AX		MOV	Al, CTestType		SHL	AX, 1		MOV	TestInProcessIndex, AX		JMP	NextTest;;~~~~~~~~~~~~~~~~~~~~~~~~;TestLoopBack:		MOV	SP, ExitPointer		;Restore stack pointer		MOV	Al, 0		CMP	CTestControl, Al		JZ	LastPassCheck		CMP	CTestType, 9		JZ	LastPassCheckTestLoopBackCont:		INC	CTestType		XOR	AX, AX		MOV	Al, CTestType		SHL	AX, 1		MOV	TestInProcessIndex, AXNextTest:		MOV	DI, TestInProcessIndex		JMP	TestTable [DI]LastPassCheck:		MOV	Al, CPassCount		DEC	Al		MOV	CPassCount, Al		CMP	Al, 0		JZ	TestEnd		MOV	AX, StartTestIndex		SHR	AX, 1		MOV	CTestType, Al		JMP	JumpTestStart;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEError:		MOV	SI, ExtMFCBlock 	;Index to Monitor File Control Block 		MOV	BX, TCBIndex		;Get Index to Test Control Block              	MOV	[bx].PCEFault, Al	;		MOV	DI, SaveDIReg		;		MOV	[di].MesaFault, Al	;		MOV	SP, ExitPointer		;Restore stack pointer		MOV	Al, PCENoStop;		TEST	CErrorControl,Al	;		JNZ	ReStartTestEnd:		RET;ReStart:        		JMP 	IOPStartPCEPreProcess:   mov bx,16		 CALL ExtReadEEProm		 cmp al,0	         jnz PCEPreProcess1 		 mov BX,[SI].TCBPointer		 mov AL,[SI].TestNS		 mov [SI].TestN,al		 mov [SI].TestNE,al		 or BYTE PTR [BX][1],SkipTestBit		 Ret  PCEPreProcess1:	mov 	dx,Map0IOP		in 	al,dx		mov 	dx,Map0PCE		out 	dx,al		mov 	dx,Map7PCE		out 	dx,al		mov 	dx,Map6IOP		out 	dx,al		MOV	AX,0D000H		MOV	ES,AX		MOV	BX, 0FFF0h	;point to IP at Reset		MOV	Al, 0EAh		MOV	BYTE PTR ES:[BX], Al		inc 	bx		mov  	ax,TestCodeLoc3		MOV	WORD PTR ES:[BX], AX		add 	bx,2		MOV	AX,cs		MOV	WORD PTR ES:[BX], Ax		RETPCEFRUList:		MOV	DI, ExtMCBlock		;		MOV	Bl, [di].MesaFault	;		MOV	Bh, 0		SHL	BX, 1	   	MOV	AX, WORD PTR PCEList1 [BX]	   	CALL 	ExtMessagePCEFRUList1:	CALL 	ExtDoRunTimeWork	  	CMP	[di].CurrentInputByte,KSP	   	JNE 	PCEFRUList1		RETPCEList1 	DW 042DH 	DW 042DH 	DW 4012H	DW 4102H 	DW 402DH 	DW 402DH 	DW 402DH 	DW 4102H 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 4102H 	DW 402DH 	DW 4012H 	DW 4012H 	DW 4012H 	DW 4102H 	DW 4102H 	DW 402DH 	DW 4102H 	DW 402DH 	DW 402DH	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 40DDH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 402DH 	DW 142DH 	DW 402DHPCEDummy:		RET				ORG 	TestCodeLoc3                JMP  	PCEStart;$	NOLIST		;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE SCRATCH PAD...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;PCETestTable	LABEL WordPCETest0	DW PCEInitStart		;Arbitration/Mailbox/PCE186 TestPCETest1	DW IOTrapperStart      	;I/O Trapper TestPCETest2	DW MemPatternStart      ;Memory Pattern TestPCETest3	DW MemAddressStart      ;Memory Address TestPCETest4	DW MemBankStart      	;Memory Bank TestPCETest5	DW DisplayTrapperStart  ;Display Trapper TestPCETest6	DW PICStart      	;PCE PIC TestPCETest7	DW PITStart      	;PCE PIT TestPCETest8	DW SpeakerStart      	;Speaker TestPCETest9	DW UCSStart      	;UCS Test;	;-------------------------------------------------------------------------;			~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE Mailbox...   *;			~~~~~~~~~~~~~~~~~~~~~~~~;PCETestInProg 	DB 00HPCESpare1	DB 00HPCESPSave	DW 00H;Mailbox		LABEL WordMPCETestType	DB 00H		;PCE test type to be performed				;=0= Arbitration/Mailbox/PCE186 Test				;=1= I/O Trapper Test				;=2= Memory Pattern Test				;=3= Memory Address Test				;=4= Memory Bank Test				;=5= Display Trapper Test				;=6= PCE Programmable Interrupt Controller (PIC) Test				;=7= PCE Programmable Interval Timer (PIT) Test				;=8= Speaker Port TestMAllowPCETim	DB 00HMPCE186ErLog 	DB 00HMOutTim		DB 00HMInTim		DB 00HMNMITim		DB 00HMMailboxErLog   DB 00HMCheckErLog	DB 00HMMapErLog	DB 00HMObservedBank	DB 00HMFirstPageWord	LABEL WordMFirstPage	DB 00HMFirstWord	DB 00HMLastPageWord	LABEL WordMLastPage	DB 00HMLastWord	DB 00HMPageWord 	LABEL WordMPage		DB 00HMWord		DB 00HMObservedPageWord LABEL WordMObservedPage	DB 00HMObservedWord	DB 00HMMemExpData	DW 0HMMemObsData 	DW 00HMExpIOAdd	DW 0HMPCEMemEnd	DW 0HMPCEMemMapReg	DB 00HMIntNum		DB 00HMCurrentBank	DB 00HMCurrentMapReg	DB 00HMCurrentMCSStartLoc DW 00HMCurrentDispByteLoc DW 00HMUCSData	DW 0HMNMITimErLog 	DB 00H;;MUnexpIntTable	LABEL	WordMPCETimer0UnexpInt DB 00HMUnexpectedInt1 DB 00HMUnexpectedInt2 DB 00HMUnexpectedInt3 DB 00HMUnexpectedInt4 DB 00HMUnexpectedInt5 DB 00HMUnexpectedInt6 DB 00HMUnexpectedInt7 DB 00HMUnexpectedNMI 	DB 00H$	LIST		;Previous lines included Moonsys.def and Moonlink.def	            ORG TestCodeLoc3+100H;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE INITIALIZATION...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;Initialize parameters from Control BlockPCEStart:;Initialize stack		MOV	AX, CS		;stack is in the same bank as PCCode		MOV	SS, AX		MOV	DS, AX		MOV	BX, OFFSET TopOfStack		MOV	SP, BX					;Data is in the same bank as PCCode;		MOV	Bl, 0		MOV	MAllowPCETim, Bl		;Reset timing is OK		MOV	Bl, 0FFh		MOV	MPCE186ErLog, Bl;;		CALL	SetNMIVectors		CALL	SetIntVectors		JMP	JumpPCETestStart;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Arbitration/Mailbox/PCE186 Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PCEInitStart:		CALL	PCE186Exec		CALL	MailboxCheckExec		CALL	PCE186TestRet;;			~~~~~~~~~~~~~~~~~~~~~~~;			* I/O Trapper Test... *;			~~~~~~~~~~~~~~~~~~~~~~~IOTrapperStart:		CALL	TrapStatusExec		CALL	OutAddDataExec		CALL	InAddressExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Pattern Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~MemPatternStart:		CALL	PCEStoreCheckMemExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Address Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~MemAddressStart:		CALL	PCEStoreCheckMemExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~;			* Memory Bank Test... *;			~~~~~~~~~~~~~~~~~~~~~~~MemBankStart:		CALL	PCEStoreCheckMemExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* Display Trapper Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~DisplayTrapperStart:		CALL	WriteHalfDispBank		CALL	OneDirtyBitExec		CALL	DirtyDisplay5Exec		CALL	DirtyDisplayAExec		CALL	PCETestRet;;		        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* PCE Programmable Interrupt Controller (PIC) Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PICStart:		CALL	PICTestExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* PCE Programmable Interval Timer (PIT) Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PITStart:		CALL    PITTestExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~;			* Speaker Test... *;			~~~~~~~~~~~~~~~~~~~SpeakerStart:		CALL    SpeakerTestExec		CALL	PCETestRet;;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			* PCE Programmable Interval Timer (PIT) Test... *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~UCSStart:		CALL    UCSTestExec		CALL	PCETestRet;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ;	;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE Subroutines...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~~;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;*     INITIALIZE PCE Subroutines...   *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;	;~~~~~~~~~~~~~~~~~~~~~~~~;SetNMIVectors:		PUSH	ES		CLI		MOV	AX, 0			;point to low memory		MOV	ES, AX		MOV	BX, CS		MOV	SI, NMIVectorsLoc;		MOV	AX, OFFSET NMIHandler		MOV	ES:[SI], AX		;Store the vector offset		MOV	ES:[SI + 2], BX		;Store the vector segment		STI		POP	ES		RET;	;~~~~~~~~~~~~~~~~~~~~~~~~;SetIntVectors:		PUSH	ES		CLI		MOV	AX, 0			;point to low memory		MOV	ES, AX		MOV	BX, CS		MOV	SI, IntVectorsLoc;		MOV	AX, OFFSET PCETimer0IntHandler		MOV	ES:[SI ], AX		;Store the vector offset		MOV	ES:[SI + 2], BX		;Store the vector segment;		MOV	AX, OFFSET Int1Handler		MOV	ES:[SI + 4], AX		;Store the vector offset		MOV	ES:[SI + 6], BX		;Store the vector segment;		MOV	AX, OFFSET Int2Handler		MOV	ES:[SI + 8], AX		;Store the vector offset		MOV	ES:[SI + 10], BX	;Store the vector segment;		MOV	AX, OFFSET Int3Handler		MOV	ES:[SI + 12], AX	;Store the vector offset		MOV	ES:[SI + 14], BX	;Store the vector segment;		MOV	AX, OFFSET Int4Handler		MOV	ES:[SI + 16], AX	;Store the vector offset		MOV	ES:[SI + 18], BX	;Store the vector segment;		MOV	AX, OFFSET Int5Handler		MOV	ES:[SI + 20], AX	;Store the vector offset		MOV	ES:[SI + 22], BX	;Store the vector segment;		MOV	AX, OFFSET Int6Handler		MOV	ES:[SI + 24], AX	;Store the vector offset		MOV	ES:[SI + 26], BX	;Store the vector segment;		MOV	AX, OFFSET Int7Handler		MOV	ES:[SI + 28], AX	;Store the vector offset		MOV	ES:[SI + 30], BX	;Store the vector segment;		POP	ES		STI		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;JumpPCETestStart Subroutine: Jump to test to be executedJumpPCETestStart:		MOV	PCESPSave, SP		MOV	Al, MPCETestType		CMP	Al, 0		JZ	JumpPCETestStartContJumpPCE186TestInit:		CALL	PCE186InitJumpPCETestStartCont:		XOR	AX, AX		MOV	Al, MPCETestType		SHL	AX, 1		MOV	DI, AX			;		JMP	PCETestTable[DI]	;;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE186Init:		PUSH	AX		MOV     DX, PCEMmcsReg       	;MMCS register                MOV     AX, 0B1F8h           	;PCE address 0B000h                OUT     DX, AX                MOV     DX, PCEMpcsReg          ;MPCS register                  MOV     AX, MpcsBlockSize	;4 X 16K for each MCS line                OUT     DX, AX		MOV	DX, 0FF38h		;INT0 Control Register		MOV	AX, 60h			;SFNM and Cascade 		OUT	DX, AX		STI		POP	AX		RET;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Arbitration/Mailbox/PCE186 Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;This subroutine is just a PCE186 exercise;PCE186Exec:		MOV	Al, 1		MOV	PCETestInProg, Al		MOV	AX, 0FFFFH		MOV	BX, 0FFFFH		MOV	DX, 0			;no error yet		PUSH	DX		POP	BX		TEST	AX, BX		JZ	PCE186Cont1		MOV	DX, 0FFh		;186 errorPCE186Cont1:		CALL	PCE186Call		MOV	DX, 0FFh		;186 errorPCE186Cont2:		OR	AX, BX		CMP	AX, 0FE01h		JE	PCE186Cont3		MOV	DX, 0FFh		;186 errorPCE186Cont3:		MOV	CX, 1OnSelf:		DEC	Al		LOOP	OnSelf		CMP	CX, 0		JG	PCE186ErrorLog		CMP	Al, 0		JNZ	PCE186Cont4				MOV	DX, 0FFh		;186 errorPCE186Cont4:		AND	AX, 0FFFFh		CMP	AX, 0FE00h		JL	PCE186ErrorLog		JMP	PCE186Cont5		MOV	DX, 0FFh		;186 error		PCE186Call:		POP	AX		PUSH	OFFSET PCE186Cont5		XOR	AX, AX		MOV	BX, 0FF00h		OR	AX, BX		INC	AX		DEC	BX		RETPCE186ErrorLog:			MOV	Dl, 0FFh		;PCE186 error logPCE186Cont5:		MOV	MPCE186ErLog, Dl	;FF= error, 00 =no error		RET;	;~~~~~~~~~~~~~~~~~~~~~~~~;MailboxCheckExec:		MOV	Al, 2		MOV	PCETestInProg, Al		MOV	BX, OFFSET Mailbox		MOV	DX, OFFSET Mailbox		ADD	BX, 4		ADD	DX, 4		MOV	CX, MailboxSize -2		MOV	AX, CS		MOV	ES, AX			;Extra seg is in the same bank as PCCodePCEMailboxCheck:			MOV	AX, WORD PTR ES:[BX]		CMP	AX, 5555h		JZ	PCEMailboxCheckCont1		MOV	DX, 5555h		JMP	MailboxErrorLogPCEMailboxCheckCont1:			MOV	AX, DX		XOR	AX, DX		MOV	WORD PTR ES:[BX], AX		MOV	WORD PTR ES:[BX], DX		MOV	AX, WORD PTR ES:[BX]		CMP	AX, DX		JNZ	MailboxErrorLog		MOV	AX, 0AAAAh		MOV	WORD PTR ES:[BX], AX		MOV	AX, WORD PTR ES:[BX]		CMP	AX, 0AAAAh		JZ	PCEMailboxCheckCont2		MOV	DX, 0AAAAh		JMP	MailboxErrorLogPCEMailboxCheckCont2:			ADD	BX, 2		ADD	DX, 2		LOOP	PCEMailboxCheck		RET;	;~~~~~~~~~~~~~~~~~~~~~~~~;MailboxErrorLog:		MOV	MMemExpData, DX		MOV	MMemObsData, AX		MOV	Cl, 0H		MOV	MMailboxErLog, Cl		SHR	BX, 1		MOV	MPageWord, BX		MOV	AX, 5AH		MOV 	DX, 410HMailboxErrorLogRet:		OUT	DX, AX		;Dummy out		JMP	MailboxErrorLogRet		;	;~~~~~~~~~~~~~~~~~~~~~~~~;PCE186TestRet:		MOV	Al, 3		MOV	PCETestInProg, Al		MOV	Bl, 0		MOV     DX, 400H		MOV     AX, 0ABCDh           	;PCE address 0B000h                OUT     DX, AX		MOV	MOutTim, Bl		STI		MOV	AX, 0ABCDh		MOV	DX, 402H		IN	AX, DX			;Dummy In		MOV	MInTim, Bl		MOV	SP, PCESPSave		JMP	JumpPCETestStart		MOV	DX, 414HOverrunHold:		OUT	DX, AX		JMP	OverrunHold;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* I/O Trapper Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;TrapStatusExec:		MOV	Al, 4		MOV	PCETestInProg, Al		MOV	Bl, 0FFh		MOV	Cl, 0		MOV	MNMITim, Bl		MOV	AX, 5AA5h		MOV	MMemExpData, AXInAl0Test:		MOV	MExpIOAdd, EvenIOAdd		MOV	DX, EvenIOAdd		MOV	MExpIOAdd, EvenIOAdd		IN	Al, DX		CMP	MNMITim, Cl		JZ	InAl1Test		JMP	NMITimErrorLogInAl1Test:		MOV	MNMITim, Bl		MOV	MExpIOAdd, OddIOAdd		MOV	MExpIOAdd, OddIOAdd		MOV	DX, OddIOAdd		IN	Al, DX		CMP	MNMITim, Cl		JZ	InAx0Test		JMP	NMITimErrorLogInAx0Test:		MOV	MNMITim, Bl		MOV	MExpIOAdd, EvenIOAdd +2		MOV	DX, EvenIOAdd + 2		IN	AX, DX		CMP	MNMITim, Cl		JNZ	NMITimErrorLogInAx1Test:		MOV	MNMITim, Bl		MOV	MExpIOAdd, OddIOAdd +3		MOV	DX, OddIOAdd +2		IN	AX, DX		CMP	MNMITim, Cl		JNZ	NMITimErrorLogOutAl0Test:		MOV	MNMITim, Bl		MOV	MExpIOAdd, EvenIOAdd + 4		MOV	DX, EvenIOAdd + 4		MOV	AX, 12H		MOV	MMemExpData, AX		OUT	DX, AlOutAl1Test:		MOV	MExpIOAdd, OddIOAdd + 4		MOV	DX, OddIOAdd + 4		MOV	Ah, 34H		MOV	MMemExpData, AX		OUT	DX, AlOutAx0Test:		MOV	MExpIOAdd, EvenIOAdd + 6		MOV	DX, EvenIOAdd + 6		MOV	AX, 5678H		MOV	MMemExpData, AX		OUT	DX, AXOutAx1Test:		MOV	MExpIOAdd, OddIOAdd + 7		MOV	DX, OddIOAdd + 6		MOV	AX, 9ABCH		MOV	MMemExpData, 0BC9AH		OUT	DX, AX		RET;	;~~~~~~~~~~~~~~~~~~~~~~~~;NMITimErrorLog:		MOV	Al, 0FFH		MOV	MNMITimErLog, Al		MOV	AX, 0F001H		MOV	DX, 416HNMITimErrorLogRet:		OUT	DX, AX		;Dummy Out		JMP	NMITimErrorLogRet		;;~~~~~~~~~~~~~~~~~~~~~~~~;OutAddDataExec: 		MOV	Al, 5		MOV	PCETestInProg, Al              	MOV     AX, 022H		MOV	MMemExpData, 05500H		MOV	DX, 403H 		MOV	MExpIOAdd, DX		OUT	DX, Al			        MOV     AX, 055H		MOV	MMemExpData, 055H		MOV	DX, 0AAAAH		MOV	MExpIOAdd, DX 		OUT	DX, Al		                MOV     AX, 0CDEFH		MOV	DX, 5555H		MOV	MExpIOAdd, DX		MOV	MMemExpData, 0EFCDH 		OUT	DX, AX		                MOV     CX, 16                MOV     BX, 1		MOV	DX, 05A5Ah		MOV	MExpIOAdd, DXPCEOutAddDataLoop:		MOV	DX, 0h		MOV	AX, 0h		OUT	DX, AX				MOV	DX, 05A5Ah		MOV	AX, BX		MOV	MMemExpData, AX		OUT	DX, AX		                SHL     BX, 1                LOOP    PCEOutAddDataLoop          		MOV	DX, 0A55Ah                MOV     AX, 0AAAAh		MOV	MMemExpData, AX		OUT	DX, AX				MOV	DX, 0500Ah                MOV     AX, 5555H		MOV	MMemExpData, AX		OUT	DX, AX		                RET;;~~~~~~~~~~~~~~~~~~~~~~~~;InAddressExec:		MOV	Al, 6		MOV	PCETestInProg, Al		MOV	AX, 0		MOV	DX, 055AAh			MOV	MExpIOAdd, DX               	IN      AX, DX                RET                   ;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Memory Pattern Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;PCE Store and check a bank at a time from MBankStart to MBankEnd except for the ;bank where PCE code resides. Map7PCE is reserved because PCE code logical ;location is at PCE rom area.;PCEStoreCheckMemExec:		MOV	Al, 7		MOV	PCETestInProg, Al;compute the value of ES from MapXPCE used for memory test		MOV	AX, 0H		MOV	DX, 0H		OUT	DX, AX		;Dummy Out		XOR	BX, BX		MOV	Bl, MPCEMemMapReg		SAL	BX, 5		XCHG	Bh, Bl		MOV	ES, BXPCEStoreCheckCont:		MOV	DX, MFirstPageWord		MOV	MPageWord, DX		CALL	Store		MOV	AX, ES			AND	AX, 0EFFFh		MOV	ES, AX		MOV	DX, MFirstPageWord		MOV	MPageWord, DX		CALL	Check		MOV	AX, 0E002H		MOV	DX, 418H		OUT	DX, AX		;Dummy Out		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;Store:		MOV	Al, 8		MOV	PCETestInProg, Al		MOV	AX, 0FFFFh		XOR	AX, MPageWord		JS	StoreCont1		MOV	AX, ES		OR	AX, 1000h		MOV	ES, AXStoreCont1:		MOV	BX, MPageWord		SHL	BX, 1		MOV	Al, 2		CMP	MPCETestType, Al		JNZ	StorePageWord		MOV	AX, MMemExpData		JMP	StoreCont2StorePageWord:		MOV	Al, 3		CMP	MPCETestType, Al		JNZ	StoreBank		MOV	AX, MPageWord		XOR	AX, 0FFFFh		;load the inverse of page word		JMP	StoreCont2StoreBank:		MOV	Ah, 0		MOV	Al, MCurrentBankStoreCont2:		MOV	WORD PTR ES:[BX], AX		MOV	Dl, 3		CMP	MPCETestType, Dl		JNZ	StoreCont3		MOV	AX, MPageWord		;load page word		MOV	WORD PTR ES:[BX], AXStoreCont3:		MOV	DX,MPageWord 		XOR	DX, MLastPageWord		JZ	StoreRet		INC	MPageWord		JMP	StoreStoreRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;Check:		MOV	Al, 9		MOV	PCETestInProg, Al		MOV	AX, 0FFFFh		XOR	AX, MPageWord		JS	CheckCont1		MOV	BX, ES		OR	BX, 1000h		MOV	ES, BXCheckCont1:		MOV	BX, MPageWord		SHL	BX, 1		MOV	Al, 2		CMP	MPCETestType, Al		JNZ	CheckPageWord		MOV	AX, MMemExpData		JMP	CheckCont2CheckPageWord:		MOV	Al, 3		CMP	MPCETestType, Al		JNZ	CheckBank		MOV	AX, MPageWord		JMP	CheckCont2CheckBank:		MOV	Ah, 0		MOV	Al, MCurrentBankCheckCont2:		MOV	DX, WORD PTR ES:[BX]		CMP	AX, DX		JNZ	CheckErrorLog		MOV	DX, MPageWord		MOV	DX, MPageWord		XOR	DX, MLastPageWord		JZ	StoreRet		INC	MPageWord		JMP	CheckCheckRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;CheckErrorLog:		CMP	MPCEtestType, 2		JNZ	CheckErrorLogCont1		MOV	MMemObsData, DX		JMP	CheckErrorLogCont3CheckErrorLogCont1:		CMP	MPCEtestType, 3		JNZ	CheckErrorLogCont2		MOV	MObservedPageWord, DX		JMP	CheckErrorLogCont3CheckErrorLogCont2:		MOV	MObservedBank, DlCheckErrorLogCont3:		MOV	Al, 0FFH		MOV	MCheckErLog, Al		MOV	AX, 0F003H		MOV	DX, 41AHCheckErrorLogRet:		OUT	DX, AX		;Dummy Out		JMP	CheckErrorLogRet;;~~~~~~~~~~~~~~~~~~~~~~~~;PCEMapExec:		CMP	MPCEMemEnd, 0		JZ	PCEMapExecRet		MOV	Al, 0		MOV	MMapErLog, Al		MOV	Al, 0Ah		MOV	PCETestInProg, Al		MOV	BX, MLastPageWord		SHL	BX, 1		MOV	Al, 0		MOV	MCurrentMapReg, Al		MOV	CX, 6PCENextMapLoop:		XOR	AX, AX		MOV	Al, MCurrentMapReg		SAL	AX, 5		XCHG	Ah, Al		MOV	ES, AX		MOV	DX, 0FFFFh		XOR	DX, MLastPageWord		JS	PCEMapExecCont		MOV	DX, ES		OR	DX, 1000h		MOV	ES, DXPCEMapExecCont:		MOV	DX, WORD PTR ES:[BX]		CMP	Dl, MCurrentBank		JNZ	MapErrorLog		MOV	Dl, 1		ADD	MCurrentMapReg, Dl		LOOP	PCENextMapLoop		MOV	AX, 0E003H		MOV	DX, 41CH		OUT	DX, AX		;Dummy OutPCEMapExecRet:		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;MapErrorLog:		MOV	MObservedBank, Dl		MOV	Al, 0FFH		MOV	MMapErLog, Al		MOV	AX, 0F004H		MOV	DX, 42AH		OUT	DX, AX		;Dummy OutMapErrorLogRet:			OUT	DX, AX		;Dummy Out		JMP	MapErrorLogRet;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* Display Trapper Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;WriteHalfDispBank:		MOV	Al, 0Bh		MOV	PCETestInProg, Al		MOV     AX, 0A000h   	;AX= 0A000h		MOV     ES, AX    	;ES= 0A000h                MOV     BX, 0		MOV     DX, 2222h		MOV     CX, 205		;The dirty bits cover the adjacent					;64KB in memory, write 64kB in this					;half of the bank and check that 					;there are no dirty bits setWriteHalfDispBankLoop:  		MOV	WORD PTR ES:[BX], DX                ADD     BX, DirtyAddressByteOffset   ; = 320 Bytes                LOOP    WriteHalfDispBankLoop		MOV	AX, 0E004H		MOV	DX, 430H		OUT	DX, AX		;Dummy Out		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;OneDirtyBitExec:		MOV	Al, 0Ch		MOV	PCETestInProg, Al		MOV     AX, DisplaySeg   ;AX= 0B000h		MOV     ES, AX    	 ;ES= 0B000h		MOV	MCurrentMCSStartLoc, 0		CALL	DispByteWrService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DispByteWrService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DispByteWrService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DispByteWrService		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyDisplay5Exec:		MOV	Al, 0Dh		MOV	PCETestInProg, Al		MOV     AX, DisplaySeg   ;AX= 0B000h		MOV     ES, AX    	 ;ES= 0B000h 		MOV	MCurrentMCSStartLoc, 0		CALL	DirtyDispWr5Service		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWr5Service		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWr5Service		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWr5Service		MOV	AX, 5555H		MOV	DX, 432H		OUT	DX, AX		;Dummy Out		RET		;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyDisplayAExec:				MOV	Al, 0Eh		MOV	PCETestInProg, Al		MOV     AX, DisplaySeg   ;AX= 0B000h		MOV     ES, AX    	 ;ES= 0B000h		MOV	MCurrentMCSStartLoc, 0		CALL	DirtyDispWrAService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWrAService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWrAService		ADD	MCurrentMCSStartLoc,4000h	;add 16kBytes		CALL	DirtyDispWrAService		MOV	AX, 0AAAAH		MOV	DX, 434H		OUT	DX, AX		;Dummy Out		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DispByteWrService:		MOV	Al, 0Fh		MOV	PCETestInProg, Al                MOV     BX, MCurrentMCSStartLoc                MOV     MCurrentDispByteLoc, BX		MOV	DX, 500H		MOV     CX, 256		;each MCS line corresponds to 52 					;consecutive dirty nibbles that covers					;a range of 64x256 display bytes. WriteDispByteLoop:                  MOV     AX, 055AAh		MOV	WORD PTR ES:[BX], AX		MOV	AX, 0E005H		OUT	DX, AX		;Dummy Out		ADD	DX, 2                ADD     BX, RomAddressByteOffset    	; = 64 Bytes                MOV     MCurrentDispByteLoc, BX                LOOP    WriteDispByteLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyDispWr5Service:		MOV	Al, 10h		MOV	PCETestInProg, Al                MOV     BX, MCurrentMCSStartLoc 		ADD	BX, DirtyAddressByteOffset    	; = 320 Bytes		MOV     DX, 089ABh		MOV     CX, 26		;each MCS line corresponds to 52 					;consecutive dirty nibbles that covers					;51 x 320 display bytes + an					;additional 64 display bytes					;for a total of 16KBWrite5DispByteLoop:  		MOV	WORD PTR ES:[BX], DX                ADD     BX, Dirty2AddByteOffset    	; = 640 Bytes                LOOP    Write5DispByteLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~;DirtyDispWrAService:		MOV	Al, 11h		MOV	PCETestInProg, Al                MOV     BX, MCurrentMCSStartLoc		MOV     DX, 0CDEFh		MOV     CX, 32		;each MCS line corresponds to 52 					;consecutive dirty nibbles that covers					;52 x 320 display bytes + an					;additional 64 display bytes					;for a total of 16KBWriteADispByteLoop:  		MOV	WORD PTR ES:[BX], DX                ADD     BX, Dirty2AddByteOffset    ; = 640 Bytes                LOOP    WriteADispByteLoop		RET;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Programmable Interrupt Controller (PIC) Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;;~~~~~~~~~~~~~~~~~~~~~~~~;PICTestExec:		MOV	Al, 12h		MOV	PCETestInProg, Al		MOV	AX, 0H		MOV	DX, 0H		OUT	DX, AX		;Dummy Out		MOV	CX, 03FFH		MOV	AX, 0E006H		MOV	DX, 436H		MOV	CX, 03FFHPICTestExecLoop:		LOOP	PICTestExecLoop		OUT	DX, AX		;Dummy Out		RET;	;~~~~~~~~~~~~~~~~~~~~~~~~;	PCETimer0IntHandler:		PUSH	AX		MOV	Al, 0		MOV	MPCETimer0UnexpInt, Al		POP	AX		IRETInt1Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt1, Al		POP	AX		IRETInt2Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt2, Al		POP	AX		IRETInt3Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt3, Al		POP	AX		IRETInt4Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt4, Al		POP	AX		IRETInt5Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt5, Al		POP	AX		IRETInt6Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt6, Al		POP	AX		IRETInt7Handler:		PUSH	AX		MOV	Al, 1		SUB	MUnexpectedInt7, Al		POP	AX		IRET;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Programmable Interval Timer (PIT) Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;PITTestExec:		STI		MOV	Al, 13h		MOV	PCETestInProg, Al		MOV	AX, 0E007H		MOV	DX, 438H		OUT	DX, AX		;Dummy Out		MOV	CX, 0FFFFhPITTestExecLoop:		CMP	MPCETimer0UnexpInt, 0		JZ	PITTestExecRet		LOOP	PITTestExecLoop		PITTestExecRet:		MOV	AX, 0E008H		MOV	DX, 43AH		OUT	DX, AX		;Dummy Out		MOV	AX, 0E009H		MOV	DX, 43CH		OUT	DX, AX		;Dummy Out		MOV	AX, 0E00AH		MOV	DX, 43EH		OUT	DX, AX		;Dummy Out		MOV	AX, 0E00BH		MOV	DX, 440H		OUT	DX, AX		;Dummy Out		MOV	AX, 0E00CH		MOV	DX, 442H		OUT	DX, AX		;Dummy Out		RET;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Speaker Port Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;SpeakerTestExec:		MOV	Al, 14h		MOV	PCETestInProg, Al		MOV	AX, 0E00DH		MOV	DX, 444H		OUT	DX, AX		;Dummy Out		MOV	AX, 0E00EH		MOV	DX, 446H		OUT	DX, AX		;Dummy Out		RET;;~~~~~~~~~~~~~~~~~~~~~~;* UCS Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~;UCSTestExec:		MOV	Al, 15h		MOV	PCETestInProg, Al		MOV	AX, 0F038h	;Address 0F000h		MOV	DX, 0FFA0h	;UMCS register		OUT	DX, AX		mov 	ax,0F000h		MOV 	DS,AX		MOV	BX,0		MOV	WORD PTR [BX], 0FFFFH		MOV	AX, 0E00Fh	;		MOV	DX, 448h	;Dummy Out		OUT	DX, AX;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;* PCE Common Subroutines... *;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;PCETestRet:		MOV	Al, 16h		MOV	PCETestInProg, Al		MOV	SP, PCESPSave		JMP	JumpPCETestStartCont;	;	;~~~~~~~~~~~~~~~~~~~~~~~~;NMIHandler:		PUSH	BX		MOV	Bl, 0		MOV	MNMITim, Bl		MOV	Bl, 1		SUB	MUnexpectedNMI, Bl		POP	BX		IRET				;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE Reset Area...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~ 		;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ;	;			~~~~~~~~~~~~~~~~~~~~~~~~~~~;			*     PCE Code Stack...   *;			~~~~~~~~~~~~~~~~~~~~~~~~~~~		ORG	0E600hStackArea	DW	130hTopOfStack	LABEL	WORD;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MonitorCode	ENDSEND