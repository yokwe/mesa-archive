$	DEBUG MOD186;MoonCS.asm;;last edited by TXM		21-Sep-88 14:56:39;	NAME	CSTest$	TITLE(CS Test)$	NOLIST		;Next line includes Daisy.def	$	INCLUDE(MoonSys.def)$	INCLUDE(MOONLINK.def);-----------------------------------------------------------------CSTCBlock  STRUC  CSErrorControl DB  0CSTestControl DB  0CSAddressStart DW  0CSAddressEnd DW  0CSDataType DB  0CSDataControl DB  0CSStartData DW  0CSEndAddress DW  0CSWord DB  0CSEndDataType DB  0CSEndData DW  0CSExpected DW  0CSObserved DW  0CSFault DB  0CSPasses DB  0CSTCBlock ENDS;Test ControlCSShiftRegTest equ 0CSRegTest equ 1;Error ControlCSStopOnLast equ 1CSNoStop equ 2;Data Control CSIncData equ 1CSIncDataType equ 2CSWriteEnable equ 4CSReadEnable equ 8;Fault ControlCSDataError equ 1CSNoError equ 0;Data IncramentCSDataInc equ 0101h;Data Type ControlCS0Type equ 0CS1Type equ 1CS2Type equ 2CS3Type equ 3CS4Type equ 4CS5Type equ 5;Shift Reg PatternsCS0Data equ 0000hCS1Data equ 0FFFFhCS2Data equ 0AAAAhCS3Data equ 05555hCS4Data equ 0CCCChCS5Data equ 03333h;CSWord in errorWord0 equ 0 ;InCSAddressWord1 equ 1 ;InCSAddress1Word2 equ 2 ;InCSData0Word3 equ 3 ;InCSData1Word4 equ 4 ;InCSData2Word5 equ 5 ;InCSData3CSLastTest equ 7 ;-----------------------------------------------------------------MapTCBlock  STRUC  MapDataControl DB  0MapTestControl DB  0MapErrorControl DB  0MapDataTypeControl DB  0MapStartingData DB  0MapPassCount DB  0MapStartPort DW  0MapEndPort DW  0MapSpare0 DB  0MapSpare1 DB  0MapSpare2 DW  0MapSpare3 DB  0MapPassData DB  0MapCurrentPort DW  0MapExpectedData DB  0MapObservedData DB  0MapFault DB  0MapCurrentDataType DB  0MapTCBlock ENDS;Test ControlMapIOPMapTest equ 2 ;----MUST BE A 2;Data ControlMapIncData equ 1MapIncDataType equ 2MapNoWrite equ 4MapNoRead equ 8;Error ControlMapNoStop equ 1;Data Type ControlMapBlock equ 0MapAddress equ 1;Fault ControlMapDataError equ 1;-----------------------------------------------------------------DVTCBlock  STRUC  DVErrorControl DB  0DVTestControl DB  0DVIntCount DW  0DVWaitTime DW  0DVObservedIntCount DW  0DV17IntCountH DW  0DV17IntCountL DW  0DV19IntCountH DW  0DV19IntCountL DW  0DVFault DB  0DVSpare0 DB  0DVSpare1 DW  0DVSpare2 DW  0DVTCBlock ENDSDVNoCount equ 0;Test ControlDispVTest equ 4;Error ControlDVNoStop equ 1;Fault ControlDVNoError equ 0DVNointerrups equ 1DVIntTooLow equ 2DVIntTooHigh equ 4DVIntInBetween equ 8;-----------------------------------------------------------------HTCBlock  STRUC  HErrorControl	DB  0HTestControl	DB  0HCurPassCount	DB  0HPassCount	DB  0HostByte1	DB  0HostByte0	DB  0HostByte3	DB  0HostByte2	DB  0HostByte5	DB  0HostByte4	DB  0HNotCsums	DB  0HCsums		DB  0HSpare0		DW  0HSpare1		DW  0HSpare2		DW  0HExpectedData	DB  0HObservedData	DB  0HSpare3		DB  0HFault		DB  0HTCBlock ENDSHost0	EQU	090h	;1st byte of Host Address PROMHost1	EQU	092h	;2nd byte of Host Address PROMHost2	EQU	094h	;3rd byte of Host Address PROMHost3	EQU	096h	;4th byte of Host Address PROMHost4	EQU	098h	;5th byte of Host Address PROMHost5	EQU	09Ah	;6th byte of Host Address PROMHost6	EQU	09Ch	;CheckSum byte of Host Address PROMHost7	EQU	09Eh	;CheckSum' byte of Host Address PROM;Test ControlHTest equ 8;Error ControlHNoStop equ 1;Fault ControlHNoError equ 0HCsumsError equ 1HNotCsumsError equ 2$	LIST		;Previous line included Daisy.def;--------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode	ORG TestCodeLoc		 ;-----------------------------------------------------------------         jmp CSStart	 jmp CSPreProcess	 jmp CSFRUList	 jmp CSDummy	 jmp CSDummy	 jmp CSDummy	 jmp CSDummy         	ORG CSTestCodeLocCSDummy:    Ret	CSStart:    CALL ExtStopCp             Mov bx,[si].TCBPointer ;Get Index to TCB	    cmp [bx].HTestControl,HTest	    jne  CSStart1	    jmp  ChkHostAddrCSStart1:   cmp [bx].DVTestControl,DispVTest	    jne  CSStart2	    jmp  DisplayVTestCSStart2:   cmp [bx].MapTestControl,MapIOPMapTest	    jne  CSStart3	    jmp  MapTestCSStart3:   cmp  [bx].CSTestControl,CSRegTest	    je   DoCSTest	    ;-----------------------------------------------------------------	    DoShiftTest:IN AL ,InputPort	    TEST al,DayBreakType	    jnz DoShiftRet 	    CALL TCBSetUp    DoShiftLoop:CALL SetOutData	    CALL ExtWriteShift            CALL ExtReadShift	    CALL CheckInOutA	    CALL CheckInOutD	    CALL CheckInOutFDecPass:    dec [di].Spare0	    jz DoShiftRet	    CALL IncDataType	    Call ExtDoRunTimeWork	    jmp DoShiftLoopDoShiftRet: mov [di].Spare0,1	    TEST [bx].CSErrorControl,CSNoStop	    jnz   DoShiftLoop             Ret	    DoCSTest:   CALL TCBSetUpCSTest:     TEST [bx].CSDataControl,CSWriteEnable	    jz   CSRead	    Call InitilizePass	    CSWriteLoop:CALL SetOutCSData	    CALL ExtWriteCSWord	    Mov ax,[bx].CSEndAddress	    cmp [bx].CSAddressEnd,ax	    je CSRead	    inc [bx].CSEndAddress	    inc [di].OutCSAddress	    jmp CSWriteLoop	    	   CSRead:     TEST [bx].CSDataControl,CSReadEnable	    jz   CSDecPass	    Call InitilizePass	    CSReadLoop: CALL SetOutCSData            CALL ExtReadCSWord	    CALL CheckInOutD	    Mov ax,[bx].CSEndAddress	    cmp [bx].CSAddressEnd,ax	    je CSDecPass	    inc [bx].CSEndAddress	    inc [di].OutCSAddress	    jmp CSReadLoopCSDecPass:  cmp [bx].CSFault,CSNoError	    jne CSTestRet            sub [di].Spare0,1	    jz CSTestRet	    CALL IncDataType	    CALL IncData	    Call ExtDoRunTimeWork	    jmp CSTest	    CSTestRet:  Call ExtDoRunTimeWork	    mov [di].Spare0,1	    TEST [bx].CSErrorControl,CSNoStop	    jnz   CSTest            Ret	    InitilizePass:Mov ax,[bx].CSAddressStart	    Mov [bx].CSEndAddress,ax	    Mov [di].OutCSAddress,ax	    Mov [di].OutCSAddress1,ax	    Mov ax,[bx].CSEndData	    Mov [bx].CSExpected,ax	    Ret;Set StartAddress and Move CSEndData into CsExpectedSetOutCSData:Mov ax,[di].OutCSAddress ;Address Data	     cmp  [bx].CSEndDataType,CS1Type	     je SetOutCSDataRet 	     	     Mov ax,[bx].CSExpected	     add ax,CSDataInc	     xor ax,[bx].CSEndData ;Random Xor	     cmp  [bx].CSEndDataType,CS2Type	     je SetOutCSDataRet	     Mov ax,[bx].CSExpected	     add ax,CSDataInc	     add ax,[bx].CSEndData ;Random add	     cmp  [bx].CSEndDataType,CS3Type	     je SetOutCSDataRet	     Mov ax,[bx].CSExpected ;Block Data	     jmp SetOutCSDataRet   SetOutCSDataRet:Mov [bx].CSExpected,ax	        Mov [di].OutCSData0,ax	        Mov [di].OutCSData1,ax	        Mov [di].OutCSData2,ax	        Ret IncData:   TEST [bx].CSDataControl,CSIncData	   jz   IncDataRet	   add [bx].CSEndData,CSDataIncIncDataRet: Ret ;TCBSetUp:   Mov al,[bx].CSPasses	    Mov [di].Spare0,al ;Use Spare0 for temp storage	    Mov al,[bx].CSDataType	    Mov [bx].CSEndDataType,al	    Mov ax,[bx].CSStartData	    Mov [bx].CSEndData,ax	    Mov [bx].CSExpected,ax	    Mov ax,[bx].CSAddressStart	    Mov [bx].CSEndAddress,ax	    Mov [bx].CSFault,CSNoError	    Ret	    SetOutData: Mov ax,[bx].CSEndData	    Mov  [di].OutCSData0,ax	    Mov  [di].OutCSData1,ax	    Mov  [di].OutCSData2,ax	    and ax,3FFFH	    Mov  [di].OutCSAddress,ax	    Mov  [di].OutCSAddress1,ax	    and al,3	    Mov  [di].OutCSData3,al	    Ret	      IncDataType: TEST [bx].CSDataControl,CSIncDataType	     jz IncDataTypeRet 	     inc  [bx].CSEndDataType	     cmp  [bx].CSEndDataType,CS5Type	     jle SetData 	     Mov  [bx].CSEndDataType,CS0TypeIncDataTypeRet:Ret	     SetData:     Mov ax,CS0Data	     cmp  [bx].CSEndDataType,CS0Type	     je SetDataRet 	     	     Mov ax,CS1Data	     cmp  [bx].CSEndDataType,CS1Type	     je SetDataRet 	     	     Mov ax,CS2Data	     cmp  [bx].CSEndDataType,CS2Type	     je SetDataRet 	     	     Mov ax,CS3Data	     cmp  [bx].CSEndDataType,CS3Type	     je SetDataRet 	     	     Mov ax,CS4Data	     cmp  ax,CS4Type	     je SetDataRet 	     Mov ax,CS5Data	     SetDataRet:  Mov [bx].CSEndData,ax	     Ret	     CheckInOutA: Mov ax,[di].OutCSAddress	     Mov  cx,[di].InCSAddress	     Mov dl,Word0	     cmp  ax,cx	     jne InOutError	     Mov ax,[di].OutCSAddress1	     Mov  cx,[di].InCSAddress1	     Mov dl,Word1	     cmp  ax,cx	     jne InOutError	     Ret	     CheckInOutD: Mov ax,[di].OutCSData0	     Mov  cx,[di].InCSData0	     Mov dl,Word2	     cmp  ax,cx	     jne InOutError	     Mov ax,[di].OutCSData1	     Mov  cx,[di].InCSData1	     Mov dl,Word3	     cmp  ax,cx	     jne InOutError	     Mov ax,[di].OutCSData2	     Mov  cx,[di].InCSData2	     Mov dl,Word4	     cmp  ax,cx	     jne InOutError	     Ret	     CheckInOutF: Mov al,[di].OutCSData3	     Mov  cl,[di].InCSData3	     Mov dl,Word5	     and ax,3	     and cx,3	     cmp  ax,cx	     jne InOutError	     Ret	     InOutError: Mov [bx].CSExpected,ax	    Mov [bx].CSObserved,cx	    Mov [bx].CSWord,dl	    or [bx].CSFault,CSDataError 	    or [di].MesaFault,CSDataError	    TEST [bx].CSErrorControl,CSStopOnLast + CSNoStop	    jz   InOutErrorRet	    RetInOutErrorRet: Pop ax ;pull one call from stack and return to Monitor                Ret	    MapTest:    IN AL ,InputPort	    TEST al,DayBreakType	    jnz MapTest1 	    jmp MapTestRetMapTest1:    Call MapTCBSetUPMapWriteTest:TEST [bx].MapDataControl,MapNoWrite	    JNZ MapRead	    CALL MapInitilizePass	    MapWriteLoop:Mov dx,[bx].MapCurrentPort	    Mov al,[bx].MapExpectedData	    OUT DX,AL	    cmp [bx].MapEndPort,Dx	    je MapRead	    inc [bx].MapCurrentPort	    Mov al,[bx].MapSpare1	    add [bx].MapExpectedData,al	    jmp MapWriteLoop	    	   MapRead:     TEST [bx].MapDataControl,MapNoRead	     JNZ MapDecPass	     Call MapInitilizePassMapReadLoop:Mov dx,[bx].MapCurrentPort            IN AL,DX	    Mov [bx].MapObservedData,al	    cmp al,[bx].MapExpectedData	    je MapNoError	    or [bx].MapFault,MapDataError 	    or [di].MesaFault,MapDataError	    jmp MapTestRet	    MapNoError: cmp [bx].MapEndPort,Dx	    je MapDecPass	    inc [bx].MapCurrentPort	    Mov al,[bx].MapSpare1	    add [bx].MapExpectedData,al	    jmp MapReadLoopMapDecPass: sub [di].Spare0,1	    jz MapTestRet	    TEST [bx].MapDataControl,MapIncDataType	    JZ MapIData	    INC [bx].MapCurrentDataType	    AND [bx].MapCurrentDataType,1MapIData:   TEST [bx].MapDataControl,MapIncData	    JZ MapNextPass	    inc [bx].MapPassDataMapNextPass:jmp MapWriteTestMapTestRet: CALL ExtDoRunTimeWork	    TEST [bx].MapErrorControl,MapNoStop	    jnz   MapTest1                Ret    MapTCBSetUP:Mov al,[bx].MapDataTypeControl	    Mov [bx].MapCurrentDataType,al	    Mov al,[bx].MapStartingData	    Mov [bx].MapPassData,al	    Mov al,[bx].MapPassCount	    Mov [bx].MapSpare0,al	    RET   	     MapInitilizePass:Mov ax,[bx].MapStartPort	    Mov [bx].MapCurrentPort,ax		    Mov al,[bx].MapPassData	    Mov [bx].MapExpectedData,al	    Mov [bx].MapSpare1,0	    TEST [bx].MapCurrentDataType,MapAddress	    JZ MapInitilizePassRet	    Mov [bx].MapSpare1,1	    Mov ax,[bx].MapStartPort	    Mov [bx].MapExpectedData,al	    MapInitilizePassRet:RET  DisplayVTest:IN AL ,InputPort	    TEST al,DayBreakType	    jz DisplayVTestRet 	    CALL SetVectors	    Mov [bx].DVIntCount,DVNoCount	    CALL WaitThisTime	    Mov ax,[bx].DVIntCount	    Mov [bx].DVObservedIntCount,ax	    cmp ax,DVNoCount	    jnz CheckDV17	    mov dl,DVNointerrupsDisplayVTest1:CALL DisplayVError	    JMP DisplayVTestCheckDV17:  cmp ax,[bx].DV17IntCountH	    jg CheckDV19	    cmp ax,[bx].DV17IntCountL	    jg DisplayVTestRet	    mov dl,DVIntTooLow	    jmp DisplayVTest1CheckDV19:  cmp ax,[bx].DV19IntCountH	    jle CheckDV19L	    mov dl,DVIntTooHigh	    jmp DisplayVTest1CheckDV19L: cmp ax,[bx].DV19IntCountL	    jg DisplayVTestRet	    mov dl,DVIntInBetween	    jmp DisplayVTest1	    DisplayVTestRet:MOV AL,AL                 Ret	    DisplayVError: or [bx].DVFault,dl 	       or [di].MesaFault,dl	       TEST [bx].DVErrorControl,DVNoStop	       jz   DisplayVErrorRet	       Ret	       DisplayVErrorRet: Pop ax ;pull one call from stack and return to Monitor                RetChkHostAddr:    IN AL ,InputPort	        TEST al,DayBreakType	        jz    ChkHostAddrRet 	        MOV	al,[bx].HPassCount		MOV	[bx].HCurPassCount,AL		MOV	[bx].HFault,0		ChkHostAddr1:	Call ExtDoRunTimeWork                IN	AX,Host0	 		;get Host0		MOV	[bx].HostByte0,AL		;save it in TCB		MOV	CX,AX			;save it in CX		IN	AX,Host1			;get Host1		MOV	[bx].HostByte1,AL		;save it in TCB		CALL	HCheck			;Go do a Check		IN	AX,Host2			;get Host2		MOV	[bx].HostByte2,AL		;save it in TCB		CALL	HCheck			;Go do a Check		IN	AX,Host3			;get Host3		MOV	[bx].HostByte3,AL		;save it in TCB		CALL	HCheck			;Go do a Check		IN	AX,Host4			;get Host4		MOV	[bx].HostByte4,AL		;save it in TCB		CALL	HCheck			;Go do a Check		IN	AX,Host5			;get Host5		MOV	[bx].HostByte5,AL		;save it in TCB		CALL	HCheck			;Go do a Check		IN	AX,Host6			;get CheckSum		MOV	[bx].HCsums,AL		;save it in TCB		CMP	Al,CL			;check that Csums compare		JE	HCsumsOk		MOV	dl,HCsumsError				CALL     HErrorHCsumsOk:	NOT	CL			;create Csum'		IN	AX,Host7		;get CheckSum'		MOV	[bx].HNotCsums,AL	;save it in TCB		CMP	Al,CL			;check that Csums compare		JE	HPassDone			;go indicate an error		MOV	dl,HNotCsumsError				CALL     HErrorHPassDone:	TEST [bx].HErrorControl,HNoStop	        jnz   ChkHostAddr1		dec   [bx].HCurPassCount		jnz   ChkHostAddr1ChkHostAddrRet: Ret				HError:		MOV	[bx].HObservedData,AL		;save it in TCB		MOV	[bx].HExpectedData,CL		;save it in TCB		or [bx].HFault,DL 	        or [di].MesaFault,DL                TEST [bx].HErrorControl,HNoStop	        jz   HErrorRet	        Ret	       HErrorRet:      Pop ax ;pull one call from stack and return to Monitor                RetHCheck:		XOR	AX,CX			;Do the B5 XOR B4		ROL	Al,1			;Do LROT 1		MOV	CL,Al			;save result in CL		RET	    	    WaitThisTime:   mov cx,[bx].DVWaitTimeWaitThisTimeO:  push cx                mov cx,1000WaitThisTimeI:  LOOP WaitThisTimeI		pop cx                LOOP WaitThisTimeO                Ret	    	       SetVectors: CLI ;this should temp disable interrupts.             PUSHA	    MOV AX,0                MOV  DS,AX			    MOV  BX, ExtInterruptV2		    MOV  AX, OFFSET DisplayInt	    MOV  [bx].DEventV, AX	    MOV  AX,CS		MOV  DS,AX	    AND  [di].EnableIntC1C2,DisplayIntEnAble 	    MOV  dx,DVIntLatch	    IN AX,DX	    CALL ExtEnableIntSetVectorRet:POPA	     STI ;Re-Enable the Interrupts	     Ret	     DisplayInt:  ClI					;disable interrupts	     PUSHA	     MOV SI, ExtMFCBlock ;Index to Monitor File Control Block	     Mov bx,ExtTCBlock ;Get Index to My TCB Only             MOV  AL, nonSpecificEOI			;Reset IS5	     OUT  i8259SlaveAddr0, Al		;  OCW2_ 061h 	     MOV  AL, 00Bh			;Set up to read IS register	     OUT  i8259SlaveAddr0, Al		;OCW3_ 00Bh	     IN   AL, i8259SlaveAddr0		;Read Slave 8259 IS register	     CMP  AL, 0				;Check if another interrupt is	     JNZ  DisplayPIntRt			;  in service	     MOV  AL, nonSpecificEOI		;Write an EOI command for the 		     OUT  i8259MasterAddr0, AL		;  Master 8259DisplayPIntRt:MOV  dx,DVIntLatch	     IN AX,DX	     inc [bx].DVIntCount             POPA	     STI				;Reanable the interrupts	     IRet	     CSPreProcess:   mov 	bx,12		CALL 	ExtReadEEProm		SUB	AH,10H		OR 	AX,0FFFH	   	mov 	dl,4		MOV	CX, 7 UpdateTCB:	  	mov 	[SI].TestN,dl		PUSHA            	CALL 	ExtSetTCBPointer		POPA	    	Mov 	bx,[si].TCBPointer ;Get Index to TCB	    	MOV 	[bx].CSAddressEnd, AX		INC	Dl		LOOP	UpdateTCB		MOV    BX, 13	        Call   ExtReadEEProm	        cmp    al,1 	        jne     CSPreProcessRet		mov 	[SI].TestN,0		CALL 	ExtSetTCBPointer		Mov 	bx,[si].TCBPointer ;Get Index to TCB	    	MOV 	[bx].DV19IntCountH, 0B1H		MOV 	[bx].DV19IntCountL, 0AFHCSPreProcessRet:RetCSFRUList: mov Bx,0 	   mov BL, [SI].TestN	   SHL Bx,1	   mov ax, WORD PTR CSList0 [bx]	   Mov bx,[si].TCBPointer ;Get Index to TCB	   CALL ExtMessageCSFRUList1:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne CSFRUList1	   cmp  [SI].TestN,3	   jle CSFRUListRet	   cmp  [bx].CSFault,0	   je CSFRUListRet	   mov ax,[bx].CSEndAddress	   CALL ExtMessageCSFRUList2:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne CSFRUList2	   mov ah,0	   mov al,[bx].CSWord	   CALL ExtMessageCSFRUList3:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne CSFRUList3	   mov ax,[bx].CSExpected	   xor ax,[bx].CSObserved	   CALL ExtMessageCSFRUList4:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne CSFRUList4CSFRUListRet:Ret CSList0 DW  020FEHCSList1 DW  001EFHCSList2 DW  080FEHCSList3 DW  010FEHCSList4 DW  010FEHCSList5 DW  010FEHCSList6 DW  010FEHCSList7 DW  010FEHCSList8 DW  010FEHCSList9 DW  010FEHCSListA DW  010FEH	       MonitorCode	ENDS	END 