This document contains a sample program with all the elements needed to run a program as an overlay under the diagnostic monitor.STEP ONEThis is the Heading for a program and you must include MoonSys.def and moonlink.def.  STEP TWOThis is a sample Test Control Block Struc. All programs must be driven by at lease one control block. Its length, content,and the number of them are up to you.The Test Control Byte should be in the same position as the sample and if bit 7 is on the monitor will skip the block. The ProgramPageParity and ProgramBankParity should be in the same position as the sample so parity errors will be logged.You only need these if you chose to enable the memory parity interrupt.STEP THREEThis is the SEGMENT your program will run in. The first thing in the segment is a jump to the first exicutable instruction. The Monitor maintains the Stack and the DI and SI registors are reserved. STEP FOURThis is a CALL to the monitor to download or restart a Mesa processor program.STEP FIVEThis is a CALL to the monitor to allow for keyboard control. If you are looping on an error or have some long run times, insert this call into the program flow. STEP SIXThis will move a pointer to the start of the current Test Control Block into the BX reg. By using [bx].ProgramLable you can access anything in the Test Control Block.STEP SEVENYour program will be Called by the Monitor and this is the type of RETURN you must do when you wish to return to the monitor.STEP EIGHTThis is a sample error routine that could be called within a program.It is logging an error in its Test Control Block and in the Monitor Control Block. It then checks to see if it wants to stop and return to the Monitor or to continue to run.STEP NINEThis is a sample of how to re-rout a master interrupt vector to your program. Vector names are in moonlink.def.STEP TENThis is a sample of how to re-rout a slave interrupt vector to your program. Vector names are in moonlink.def.STEP ELEVENThis is a sample of how to turn on interrupts in the Monitor Control Block. STEP TWELVEThis Call to the Monitor will enable all interrupts in the Monitor Control Block  that have a zero in them. STEP THIRTEENThis is a sample of a master interrupt service routine. Notice that the Controller is cleared first and then the interrupt latch is cleared.STEP FOURTEENThis is a sample of a slave interrupt service routine. Notice that the Slave Controller is cleared first and then the Master Controller is then checked to see if we want to clear it or not then the interrupt latch is cleared.STEP FIFTEENThis is how you end your program.STEP SIXTEENLoad moonprogram.cm moonp.com MoonDayBreakftToasm.bcd MoonF1.lnkCopy file MoonF1.lnk to VaxSTEP SEVENTEENIf you will have CP code name your def file to MOONP.dfn and your source file to MOONPMC.mc and run moonprogram.cm in the Exc.Copy file MOONPMC.asm to Vax STEP EIGHTEENBuild a File Control Block named MoonFCBP.asm (Set File Type to 0AH )Build a Test Control Block named MoonPTCB.asmName your program MoonP.asmIf you do not have CP Code in your program Edit moonp.com and remove $ASM86 MOONPMC.asm and MOONPMC.obj, from command line Copy file MoonFCBP.asm,MoonPTCB.asm, MoonP.asm and moonp.com to VaxSTEP NINETEENConnect to Vax and Type @moonpWhen it is done,Retrieve MoonFP.lm and run it under IOPBermuda. ;-----------------------------------------------------------------STEP ONE;-----------------------------------------------------------------$	DEBUG MOD186;MoonProgramTest.asm	NAME	ProgramTest$	TITLE(Program Test)$	NOLIST			$	INCLUDE(MoonSys.def)$	INCLUDE(MOONLINK.def)STEP TWO;-----------------------------------------------------------------ProgramTCBlock  STRUC  ProgramCSControl DB  0ProgramTestControl DB  0ProgramPageParity DB  0ProgramBankParity DB  0ProgramExpectedIntCount DB  0ProgramMIntCount DB  0ProgramWaitTime DW  0ProgramEndingData3 DB  0ProgramParityData3 DB  0ProgramErrorControl DB  0ProgramSpare0 DB  0ProgramExpectedCS DW  0ProgramObservedCS DW  0ProgramExpectedData DW  0ProgramObservedData DW  0ProgramFault DB  0ProgramIntControl DB  0ProgramTCBlock ENDS;Test ControlProgramParityTest equ 1;Program Loader ControlProgramNoDownLoad equ 1 ;This gets moved to MCB Test Control;Interrupt ControlProgramDoCountAndInt equ 0ProgramDoCountOnly equ 1;Error ControlProgramStopOnLast equ 1ProgramNoStop equ 2ProgramNoMemParity equ 80hProgramNoMesaIntError equ 8;Fault ControlProgramNoError equ 0ProgramDataError equ 1ProgramCSAddressError equ 2ProgramIntCountError equ 4ProgramCSNoParityData3 equ 8ProgramCSEndingData3 equ 10HProgramMemoryParity equ 20HProgramLoopCount equ 48ProgramNoCount equ 0;-----------------------------------------------------------------$	LIST		STEP THREE;-----------------------------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode	ORG TestCodeLoc        jmp StartOfProgram			STEP Four;-----------------------------------------------------------------StartOfProgram: CALL ExtDownLoaderSTEP Five;-----------------------------------------------------------------                Call ExtDoRunTimeWorkSTEP SIX;-----------------------------------------------------------------	        Mov bx,[si].TCBPointer ;Get Index to TCB					       				STEP SEVEN;-----------------------------------------------------------------ProgramInterSegRet0	PROC	FAR                RetProgramInterSegRet0 	ENDP   STEP EIGHT;-----------------------------------------------------------------ProgramError: or [bx].ProgramFault,al 	 or [di].MesaFault,al	 TEST [bx].ProgramErrorControl,ProgramStopOnLast + ProgramNoStop	 jz   ProgramErrorRet	 RetProgramErrorRet: Pop ax ;pull one call from stack and return to MonitorProgramInterSegRet1	PROC	FAR                RetProgramInterSegRet1 	ENDPSTEP NINE;-----------------------------------------------------------------SetVectors: CLI ;this should temp disable interrupts.             MOV  BX, ExtInterruptV1		    MOV  AX, OFFSET MemParityInt	;	    MOV  [bx].ParityV, AX	    MOV  ax, SEG MemParityInt	    MOV  [bx].ParityVS, AX	    STEP TEN;-----------------------------------------------------------------	    	    MOV  BX, ExtInterruptV2		    MOV  AX, OFFSET MesaPInt	;	    MOV  [bx].MesaV, AX	    MOV  ax, SEG MesaPInt	    MOV  [bx].MesaVS,AX	    	    STEP ELEVEN;-----------------------------------------------------------------	    	    AND  [di].EnableIntC1C2,ParityIntEnAble             AND  [di].EnableIntC1C2,MesaIntEnAble 	    CALL  ExtResetMesaInt            CALL ExtReadMemStatus  ;There has to be three of these            CALL ExtReadMemStatus            CALL ExtReadMemStatus 	    	    STEP TWELVE;-----------------------------------------------------------------	       	    CALL ExtEnableIntSetVectorRet:STI ;Re-Enable the Interrupts	    Ret	    	    STEP THIRTEEN;-----------------------------------------------------------------	    MemParityInt:ClI	;disable interrupts	    PUSHA	    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    TEST [bx].CPErrorControl,CPNoMemParity	    jnz MemParityIntRet 	    or [bx].CPFault,CPMemoryParity 	    or [di].MesaFault,CPMemoryParity MemParityIntRet:MOV  AL, nonSpecificEOI	;Reset IS0	    OUT  i8259MasterAddr0, Al		;  OCW2_ 061h             CALL ExtReadMemStatus            POPA            STI					;Reanable the interrupts	    IRet 	    	    	    STEP FOURTEEN;-----------------------------------------------------------------MesaPInt:   ClI					;disable interrupts	    PUSHA	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    inc [bx].CPMIntCountMesaPIntRet:MOV  AL, nonSpecificEOI			;Reset IS5	    OUT  i8259SlaveAddr0, Al		;  OCW2_ 061h 	    MOV  AL, 00Bh			;Set up to read IS register	    OUT  i8259SlaveAddr0, Al		;OCW3_ 00Bh	    IN   AL, i8259SlaveAddr0		;Read Slave 8259 IS register	    CMP  AL, 0				;Check if another interrupt is	    JNZ  ClearMesaInt			;  in service	    MOV  AL, nonSpecificEOI		;Write an EOI command for the 		    OUT  i8259MasterAddr0, AL		;  Master 8259ClearMesaInt:TEST [bx].CPMIntCount,080h	    jnz	  MesaPIntRt              CALL  ExtResetMesaInt            TEST [bx].CPIntControl,CPDoCountOnly	    jnz MesaPIntRt 	    CALL ExtInterruptCpMesaPIntRt: POPA	    STI					;Reanable the interrupts	    IRet	    STEP FIFTEEN;-----------------------------------------------------------------MonitorCode	ENDS	END 	