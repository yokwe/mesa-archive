$      MOD186  name	newrs232test$	nolist$	INCLUDE(MoonSys.def)$	include(MoonLink.def) ; of the IOP Daybreak. The program transmit characters ;   this is the list of the equate tables        ;---------------------------------------------------------------------         	error1			equ	1    ;unable to transmit data	error2			equ	2    ;data not received	error3			equ     3    ;parity or framing or overrun error	error4			equ	4    ;trans data and rec don't match	error5			equ	5    ;not used at present	error6			equ	6    ;not used at present	error7			equ	7    ;framing/crc error	error8			equ	8    ;Receiver overrun error	error9			equ	9    ;end of frame not detected	error10			equ	10   ;carrier detect loss	error13			equ	13   ;ChA ExtStat Int	error14			equ	14   ;A Receive Data Error	error15			equ	15   ;ChA Special Int	error16			equ	16   ;ChB ExtStat Int        error17			equ	17   ;B Receive Data Error	error18			equ	18   ;ChB Special Int	  ;these are the parameters for wr0 and other miscleneous        	RstTxIntPending		equ	028h	RstExtInterupt		equ	010h	RstCrcCheck		equ	040h	RstCrcGenerator		equ	080h	RstTxEomLatch		equ	0c0h	  ;these are the parameters for wr1 register 		ExtIntEnable		equ	01	VarVector		equ	04	RxInteruptAll		equ	018h	TxIntEnable		equ	02 	 ;these are the parameters for the wr2 register  	BothInterupt		equ	0	Mode8086		equ	010h	VectorInterupt		equ	020h	NoInterupt		equ	0	RxPriority	        EQU	004h	;these are constants for wr3 register	receiver section        RxCRCEnable	EQU	008h	Hunt			EQU	010h	RxEnable		equ	1 	AutoEnable		equ	020h	RxFiveBitChar		equ	0h	RxSixBitChar		equ	080h	RxSevenBitChar		equ	040h	RxEightBitChar		equ	0c0h	AddressSrch		equ	4h	 ;these are constants for wr4 register 	ParityEnable		equ	01	EvenParity		equ	02h	OddParity		equ	0 	OneStopBit		equ 	04h	OneAndHalfStopBit	equ	08h	TwoStopBit		equ	0ch	X1Clock			equ	0h	X16Clock       		equ	040h 	X32Clock		equ	080h	X64Clock		equ	0c0h 	SyncMode		equ	0	SDLCFlagMode		equ	020h	  ;these are parameters for wr5 register transmit section        CRC16		EQU	004h        TxCRCEnable	EQU	001h  	EnableRts		equ	02h	EnableDtr		equ	080h	EnableRtsDtr		equ	082h	TxEnable		equ	08h	TxFiveBitChar		equ	0h 	TxSevenbitChat		equ	020h	TxSixBitChar		equ	040h	TxEightBitChar		equ	060h ;these are constants for wr7 register 	SDLCFlag		equ	07Eh  ;these are parameters for rr0 register    	RxCharReady		equ	01h	TxBufferEmpty		equ	04h	  ;these are parameters for  rr1  register      	AllSent         	equ	01	RecOverRun		equ	020h	CrcError		equ	040h  	CarrierDetect		equ 	08	ClearToSend		equ	020h			;---------------------------------------------------------------------------- ;this is the testblock for the rs232 program RSTCBlock	STRUCRSDataandError		db	0  				;Bits 0= 0= Stop on Error				;0= 1= Don't stop but restart				;1= 0= Block Patterns				;1= 1= Inc Data each Byte				;2= 0= Txa to Rxb and Txb to Rxa				;2= 1= Txa to Rxa and Txb to Rxb				;7= 1= Don't log parity errorsRsTest			db	0RsPageParity		 DB  0RsBankParity		 DB  0RsDataA			db	0 RsDataB			db	0RSWaitTime		dw	0 RsACount	 	dW	0 RsBCount		dW	0RsCTxACount	 	dW	0 RsCRxBCount		dW	0RsCTxBCount		dW	0RsCRxACount	 	dW	0 RsTxABufP	 	dW	0 RsRxBBufP		dW	0RsTxBBufP		dW	0RsRxABufP	 	dW	0  RsTimerValue		db	0RsFault			db	0				  RSTCBlock	 ENDS    RsNoStop	EQU 01H			;Don't stop for ErrorRsIncData	EQU 02H			;Inc dataRsDataFlow	EQU 04H			;Transfer TXA TO RXARsNoMemParity	EQU 80H			;Don't Log Parity Errors;;---------------------------------------------------------------------	       ;this is the timer macro        ;agr1 is the  channel address for the format of the timer       ;arg2 is the  the division rate port address 2 bytes           %*define(timer(arg1,arg2))(    	 mov	al,%arg1+i8254lsbthenMsb+i8254Sqwave+I8254BinaryCount	 out	i8254Ctlr,al	 mov	al,[bx].RsTimerValue	 out	%arg2,al	 mov	al,0	 out	%arg2,al	 ) 	        ;this is the rs232 macro        ;arg1 is the chanel address       ;arg2 is the  internal register address  wr0..wr5       ;arg3 is the   actual  register format             %*define(rs232command(arg1,arg2,arg3))(           mov	dx,%arg1 	   mov	al,%arg2	   out	dx,al	   mov	al,%arg3	   out	dx,al 	   )	     	   $	list	   ;---------------------------------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode, ES:MonitorCode	ORG TestCodeLoc		 	 	 jmp	startofprogram 		 jmp RS232PreProcess		 jmp RS232FRUList		 jmp RS232Dummy		 jmp RS232Dummy		 jmp RS232Dummy		 jmp RS232Dummy		 	ORG RS232TestCodeLoc	limitcounter	dw	0 		 	  ;first initialize the timers on the iop board ;now initialize the rs232 dte and dce ports RS232Dummy:    Retstartofprogram:		mov	aX,SelChAIntclk+EnDCEclk 		Call    ExtOnWrCtlReg		call	intel8254Init		mov	bx,[si].TCBPointer		mov	al,[bx].RsTest	;check which test to run 		cmp	al,0		je	init0			;initialize for test 0		cmp	al,1		je	init1			;initialize for test 1		cmp	al,2		je	init2			;initialize for test 2		cmp	al,3		je	init3			;initialize for test 3		cmp	al,4		je	init4			;initialize for test 4		cmp	al,5		je	init5			;initialize for test 5		cmp	al,6		je	init6		cmp	al,7		je	init7		jmp	terminate		init0:		call	intel8274init0		jmp	CommTransFer				init1:		call	intel8274init1		jmp	CommTransFer		init2:		call	intel8274init2		jmp	CommTransFer		init3:		call	intel8274init3		jmp	CommTransFer		init4:		call	intel8274init4		jmp	CommTransFerinit5:		call	intel8274init5		jmp	CommTransFerCommTransFer:		 			 			Call    CommSetUp		call	TransmitReceive		jmp terminate				init6:		call	I8274VectorSetUp	;set up rs232 vectors     	        Call    CommSetUp		call	intel8274init6 		Call    SendPackets		jmp terminate		init7:		mov	aX,SelChAIntclk		Call    ExtOffWrCtlReg		;Enable rs232 tx and rx clock		mov	aX,EnDCEclk		Call    ExtOnWrCtlReg		call	intel8254Init		call	I8274VectorSetUp	;set up rs232 vectors     	        Call    CommSetUp		MOV	BX, DataTxAWriteBuff		MOV	al,BYTE PTR [BX]		MOV	BX, DataTxBWriteBuff		MOV	ah,BYTE PTR [BX]		Mov bx,[si].TCBPointer ;Get Index to TCB		Mov     [bx].RsDataA,al		Mov     [bx].RsDataB,ah		call	intel8274init7 		Call    SendPackets		jmp terminate				terminate:	Call    StopALL		ret		CommSetUp:      mov	[bx].RsFault,0		Mov	Ax,DataTxAWriteBuff		Mov	[bx].RsTxABufP,ax		Mov	Ax,DataTxBWriteBuff		Mov	[bx].RsTxBBufP,ax		Mov	Ax,DataRxAReadBuff		Mov	[bx].RsRxABufP,ax		Mov	Ax,DataRxBReadBuff		Mov	[bx].RsRxBBufP,ax		Mov	[bx].RsCTxACount,0		Mov	[bx].RsCTxBCount,0		Mov	[bx].RsCRxACount,0		Mov	[bx].RsCRxBCount,0		                Call   ClearBuff 		Call   GenWrDataBuff		Ret				SendPackets:	                ;set active 		Test [bx].RSDataandError,RsDataFlow		jnz   SendPackets1		CMP    [bx].RsACount,0		JE      CkBCount		INC     [bx].RsTxABufP                Mov     AX,[bx].RsACount		Mov	[bx].RsCRxBCount,Ax		dec     ax		Mov	[bx].RsCTxACount,Ax		Mov     Al,[bx].RsDataA		OUT	Chanladata,AL		Mov	Al,RstTxEomLatch ;reset Tx latch		OUT	chanlacommand,alCkBCount:	cmp   [bx].RsBCount, 0		JE      AllActive		INC     [bx].RsTxBBufP		Mov     AX,[bx].RsBCount		Mov	[bx].RsCRxACount,Ax		dec     ax		Mov	[bx].RsCTxBCount,Ax		Mov     Al,[bx].RsDataB		OUT	Chanlbdata,AL		Mov	Al,RstTxEomLatch ;reset Tx latch		OUT	chanlbcommand,alAllActive:      Call WaitForPacket		Cmp [di].MesaFault,0                jne SendPacketsRet		Call   CmprDataBuffsSendPacketsRet:	RetSendPackets1:	                ;set active 		CMP    [bx].RsACount,0		JE      CkBCount1		INC     [bx].RsTxABufP                Mov     AX,[bx].RsACount		Mov	[bx].RsCRxACount,Ax		dec     ax		Mov	[bx].RsCTxACount,Ax		Mov     Al,[bx].RsDataA		OUT	Chanladata,AL		Mov	Al,RstTxEomLatch ;reset Tx latch		OUT	chanlacommand,alCkBCount1:	cmp   [bx].RsBCount, 0		JE      AllActive		INC     [bx].RsTxBBufP		Mov     AX,[bx].RsBCount		Mov	[bx].RsCRxBCount,Ax		dec     ax		Mov	[bx].RsCTxBCount,Ax		Mov     Al,[bx].RsDataB		OUT	Chanlbdata,AL		Mov	Al,RstTxEomLatch ;reset Tx latch		OUT	chanlbcommand,al		JMP     AllActive		StopALL:	cli		mov	        al,ChanelReset                 out		ChanlaCommand,al                 out		ChanlbCommand,al                 or	[di].EnableIntC1C2,Rs232IntDisable		call	ExtEnableInt		;now disable interupts		sti		Ret		 		 WaitForPacket:	mov cx,[bx].RSWaitTime	WaitThisTimeO:  push cx                Call ExtDoRunTimeWork                mov cx,1000WaitThisTimeI:  LOOP WaitThisTimeI		pop cx		cmp [di].MesaFault,0		jne WaitForPacketRet                LOOP WaitThisTimeOWaitForPacketRet:Ret			       	 ;this routine transmit and receive number 0..255 to both chanals and receive it ;like a ping pong game with two balls        			    TransmitReceive:                Test [bx].RSDataandError,RsDataFlow	        jnz   TransmitReceive1 	        Mov     AX,[bx].RsACount		Mov	[bx].RsCRxBCount,Ax		Mov	[bx].RsCTxACount,Ax		Mov     AX,[bx].RsBCount		Mov	[bx].RsCRxACount,Ax		Mov	[bx].RsCTxBCount,Ax		JMP     TxAStatusTransmitReceive1:                Mov     AX,[bx].RsACount		Mov	[bx].RsCRxACount,Ax		Mov	[bx].RsCTxACount,Ax		Mov     AX,[bx].RsBCount		Mov	[bx].RsCRxBCount,Ax		Mov	[bx].RsCTxBCount,Ax		TxAStatus:	CMP    [bx].RsCTxACount,0		JE      TxBStatus		mov	limitcounter,0		 ;reset limit countert1:		in	al,chanlastatus      		inc	limitcounter		cmp	limitcounter,03000h      ;is it timed out yet ?		jne	t2		mov	al,error1		jmp	Rs232Error		t2:		test    al,TxBufferEmpty  		jz	t1		TxBStatus:	CMP    [bx].RsCTxBCount,0		JE      TxASend		mov	limitcounter,0 		;reset limit counterw1:		in	al,chanlbstatus  		inc	limitcounter		cmp	limitcounter,03000h	;is it timed out yet ?		jne	w2		mov	al,error1		jmp	Rs232Errorw2:		test	al,TxBufferEmpty   		jz	w1		TxASend:        CMP    [bx].RsCTxACount,0		JE      TxBSend		push    bx		dec    [bx].RsCTxACount		inc     [bx].RsTxABufP   		Mov     BX,[bx].RsTxABufP		dec     BX 		Mov	Al, BYTE PTR[BX]		OUT	Chanladata,AL 		Pop     bx			TxBSend:        CMP    [bx].RsCTxBCount,0		JE      RxAStatus		push    bx		dec    [bx].RsCTxBCount		inc     [bx].RsTxBBufP   		Mov     BX,[bx].RsTxBBufP		dec     BX 		Mov	Al, BYTE PTR[BX]		OUT	Chanlbdata,AL 		Pop     bx		;now check both receivers to see they have received data yet 		RxAStatus:	CMP    [bx].RsCRxACount,0		JE      RxBStatus		mov	limitcounter,0		 ;reset limit countert3:		in	al,Chanlastatus  		inc	limitcounter		cmp	limitcounter,03000h		jne	t4		mov	al,error2		jmp	Rs232Errort4:		test	al,RxCharReady  		jz	t3		;now we check the status register for abnormal conditions		mov	al,1			;point to rr1		out	chanlacommand,al	;chanal a		in	al,chanlastatus		test	al,01110000b		;parity+overrun+framing  errors		jz	RxBStatus		mov	al,error3		jmp	Rs232Error		;now chanal a has received its character do the same for chanal b		RxBStatus:	CMP    [bx].RsCRxBCount,0		JE      RxARec				mov	limitcounter,0		;reset limit counterw3:		in	al,chanlbstatus   		inc	limitcounter		cmp	limitcounter,03000h		jne	w4		mov	al,error2		jmp	Rs232Errorw4:		test	al,RxcharReady   		jz	w3			;repeat until character is readyt5:		mov	al,1			;point to rr1		out	chanlbcommand,al	;chanal b		in	al,chanlbstatus		test	al,01110000b		;parity+overrun+framing  errors		jz	RxARec		mov	al,error3		jmp	Rs232Error		RxARec:         CMP     [bx].RsCRxACount,0		JE      RxBRec		push    bx		in      AL,Chanladata		dec     [bx].RsCRxACount		inc     [bx].RsRxABufP   		Mov     BX,[bx].RsRxABufP		dec     BX 		Mov	BYTE PTR[BX],AL		Pop     bx		RxBRec:         CMP     [bx].RsCRxBCount,0		JE      CkAllDone		push    bx		in      AL,Chanlbdata		dec     [bx].RsCRxBCount		inc     [bx].RsRxBBufP   		Mov     BX,[bx].RsRxBBufP		dec     BX 		Mov	BYTE PTR[BX],AL		Pop     bx		CkAllDone:      Mov     ax,[bx].RsCRxACount		or      ax,[bx].RsCRxBCount		CMP     ax,0		JE      CheckBuf		jmp	TxAStatus		CheckBuf:       Call   CmprDataBuffs                ret			Rs232Error:    	mov	[bx].RsFault,al		mov	[di].MesaFault,al		ret   ;--------------------------------------------------------------------------------ClearBuff:	PUSH	BX			;		MOV	BX, DataTxAWriteBuff		;		MOV	CX, 4000H		;		MOV	Al,0			;ClearDataByte:		MOV	BYTE PTR [BX], Al		;		INC	BX			;		LOOP	ClearDataByte		;		POP	BX			;		RET;;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~GenWrDataBuff:	PUSH	BX					MOV	Al, [bx].RsDataA			MOV	Cx, [bx].RsACount		MOV	dl, [bx].RSDataandError		and     dl,RsIncData		shr    dl,1		cmp    Cx, 0		je      GenNextBuff                MOV	BX, DataTxAWriteBuffGenTxAWrite:    MOV	BYTE PTR [BX], Al				INC	BX					add	Al,dl					LOOP	GenTxAWriteGenNextBuff:	pop	BX		PUSH	BX					MOV	Al, [bx].RsDataB			MOV	CX, [bx].RsBCount		cmp    CX, 0		je      GENDone                MOV	BX, DataTxBWriteBuffGenTxBWrite:    MOV	BYTE PTR [BX], Al				INC	BX					add	Al,dl					LOOP	GenTxBWriteGENDone:	pop	BX		RET;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CmprDataBuffs:	PUSH	BX			Test [bx].RSDataandError,RsDataFlow		jz   CmprDataAToB		jmp   CmprDataAToACmprDataAToB:	MOV	Al, [bx].RsDataB			MOV	Cx, [bx].RsBCount		MOV	dl, [bx].RSDataandError		and     dl,RsIncData		shr    dl,1		cmp    Cx, 0		je      CmpNextBuff                MOV	BX, DataRxAReadBuffCmprRxARead:    cmp	Al,BYTE PTR [BX]		je      AGood		mov     dl,error14		jmp     BufErrorAGood:		INC	BX					add	Al,dl					LOOP	CmprRxAReadCmpNextBuff:	pop	BX		PUSH	BX					MOV	Al, [bx].RsDataA			MOV	CX, [bx].RsACount		cmp    CX, 0		je      CmpDone                MOV	BX, DataRxBReadBuffCmprRxBRead:    cmp	Al,BYTE PTR [BX]		je      BGood		mov     dl,error17		jmp     BufError		BGood:		INC	BX					add	Al,dl					LOOP	CmprRxBReadCmpDone:	pop	BX		RETBufError:	pop	BX		Cmp [di].MesaFault,0                jne BufErrorRet		mov	[bx].RsFault,Dl		mov	[di].MesaFault,DlBufErrorRet:	RET;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CmprDataAToA:	MOV	Al, [bx].RsDataA			MOV	Cx, [bx].RsACount		MOV	dl, [bx].RSDataandError		and     dl,RsIncData		shr    dl,1		cmp    Cx, 0		je      CmpNextBuff1                MOV	BX, DataRxAReadBuffCmprRxARead1:   cmp	Al,BYTE PTR [BX]		je      AGood1		mov     dl,error14		jmp     BufErrorAGood1:		INC	BX					add	Al,dl					LOOP	CmprRxARead1CmpNextBuff1:	pop	BX		PUSH	BX					MOV	Al, [bx].RsDataB			MOV	CX, [bx].RsBCount		cmp    CX, 0		je      CmpDone1                MOV	BX, DataRxBReadBuffCmprRxBRead1:   cmp	Al,BYTE PTR [BX]		je      BGood1		mov     dl,error17		jmp     BufError		BGood1:		INC	BX					add	Al,dl					LOOP	CmprRxBRead1CmpDone1:	pop	BX		RET				;---------------X16 One stop bit------------------------------------------------intel8274init0:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,OneStopBit+X16Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)	    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneStopBit+X16Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    %rs232command(ChanlbCommand,1,RxInteruptAll+ExtIntEnable+TxIntEnable)      			RET;--------------x32  One and half stop ----------------------------intel8274init1:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,OneAndHalfStopBit+X32Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar);--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneAndHalfStopBit+X32Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    %rs232command(ChanlbCommand,1,RxInteruptAll+ExtIntEnable+TxIntEnable)               			RET;--------------x64 one stop bit-------------------------------------------------intel8274init2:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al     %rs232command(ChanlaCommand,4,OneStopBit+X64Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneStopBit+X64Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    %rs232command(ChanlbCommand,1,RxInteruptAll+ExtIntEnable+TxIntEnable)               			RET;----------------x64 one and half stop bit-----------------------------------------------intel8274init3:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al     %rs232command(ChanlaCommand,4,OneAndHalfStopBit+X64Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,1,0)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)	    ;--------------   Transmit section second    B  ---------------------------    out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneAndHalfStopBit+X64Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,1,0)    %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)       			RET;--------------x16 one and half stop -------------------------------------------------intel8274init4:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,OneAndHalfStopBit+X16Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)	    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneAndHalfStopBit+X16Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    %rs232command(ChanlbCommand,1,RxInteruptAll+ExtIntEnable+TxIntEnable)     			RET;--------------x32 two stop bit -------------------------------------------------intel8274init5:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,TwoStopBit+X32Clock)                    %rs232command(ChanlaCommand,2,BothInterupt+Mode8086)    %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)        %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)	    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,TwoStopBit+X32Clock)                  %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)    %rs232command(ChanlbCommand,1,RxInteruptAll+ExtIntEnable+TxIntEnable)       			RET;-----------this is the test for the expected interupts--------------------intel8274init6:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,OneAndHalfStopBit+X16Clock)                   %rs232command(ChanlaCommand,1,RxInteruptAll+VarVector+TxIntEnable)    %rs232command(ChanlaCommand,2,Mode8086+RxPriority)          %rs232command(ChanlaCommand,3,Rxenable+RxEightBitChar+AutoEnable)       %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)	    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,OneAndHalfStopBit+X16Clock)    %rs232command(ChanlbCommand,1,RxInteruptAll+VarVector+TxIntEnable)     %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+RxEightBitChar+AutoEnable)     %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar)          RETintel8274init7:    mov	        al,ChanelReset     out		ChanlaCommand,al     mov		al,ErrorReset    out		ChanlaCommand,al    %rs232command(ChanlaCommand,4,SDLCFlagMode)                   %rs232command(ChanlaCommand,1,RxInteruptAll+VarVector+TxIntEnable)    %rs232command(ChanlaCommand,2,Mode8086+RxPriority)          %rs232command(ChanlaCommand,3,Rxenable+AddressSrch+RxEightBitChar+AutoEnable+Hunt+RxCRCEnable)    %rs232command(ChanlaCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar+TxCRCEnable) %rs232command(ChanlaCommand,6,[bx].RsDataA) %rs232command(ChanlaCommand,7,SDLCFlag) %rs232command(ChanlaCommand,0,RstCrcCheck+ResetExt) %rs232command(ChanlaCommand,0,RstCrcGenerator+ResetExt)%rs232command(ChanlaCommand,0,ErrorReset)	    ;--------------   Transmit section second    B  ---------------------------    mov	        al,ChanelReset     out		ChanlbCommand,al     mov		al,ErrorReset    out		ChanlbCommand,al    %rs232command(ChanlbCommand,4,SDLCFlagMode)    %rs232command(ChanlbCommand,1,RxInteruptAll+VarVector+TxIntEnable)     %rs232command(ChanlbCommand,2,0)     %rs232command(ChanlbCommand,3,Rxenable+AddressSrch+RxEightBitChar+AutoEnable+Hunt+RxCRCEnable)    %rs232command(ChanlbCommand,5,TxEnable+EnableRts+EnableDtr+TxEightBitChar+TxCRCEnable) %rs232command(ChanlbCommand,6,[bx].RsDataB) %rs232command(ChanlbCommand,7,SDLCFlag) %rs232command(ChanlbCommand,0,RstCrcCheck+ResetExt) %rs232command(ChanlbCommand,0,RstCrcGenerator+ResetExt)%rs232command(ChanlbCommand,0,ErrorReset)          RET  ;------------------timer init----------------------------------------------- intel8254Init: 	   	;for dte port		 	    %timer(i8254selcount0,i8254count0)		    	;for dce port		    %timer(i8254selcount1,i8254count1)   	             ret 		     ;----------------------------timer initialization has finished-----------------;------------------8274 interupt vector setup-------------------------------I8274VectorSetUp: 		CLI		PUSHA		MOV AX,0                MOV  DS,AX		MOV  BX, ExtInterruptV1			MOV  AX, OFFSET MemParityInt	;		MOV  [bx].ParityV, AX		MOV  AX, OFFSET RS232CommInt	;		MOV  [bx].Rs232CV, AX		MOV  AX,CS		MOV  DS,AX		mov	        al,ChanelReset                 out		ChanlaCommand,al                 out		ChanlbCommand,al	        AND  [di].EnableIntC1C2,ParityIntEnAble         	and	[di].EnableIntC1C2,Rs232IntEnable		MOV ParityCount,0		CALL ExtReadMemStatus    	        CALL ExtReadMemStatus    	        CALL ExtReadMemStatus    	        call	ExtEnableInt			;now enable interupts		POPA		STI		RET;--------------------------------------------------------------------		MemParityInt:ClI					;disable interrupts	    PUSHA	    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    TEST [bx].RSDataandError,RsNoMemParity	    jnz MemParityIntRet 	    or [di].IOPFault,MemoryParityErrorMemParityIntRet:MOV  AL, nonSpecificEOI			;Reset IS0	    OUT  i8259MasterAddr0, Al		;  OCW2_ 061h 	    cmp ParityCount,00FFH	    JE MemParityRet            CALL ExtReadMemStatus	    inc  ParityCount    MemParityRet:POPA            STI					;Reanable the interrupts	    IRet ParityCount Dw 0	     ;----------------This is the main subroutine   ----------------------------ChASpecial:	  		Mov	Al,1		OUT	chanlacommand,al		in	al,chanlacommand		mov dl,al	        Mov	Al,ErrorReset		OUT	chanlacommand,al		Test   dl,80h		jz     ChASpecialRet		Test   dl,70h		jnz     ChASpecialRet		JMP	Rs232IntHandlerAChASpecialRet:  mov	DL,error15		JMP     IntError	 ChATxEmpty:	  		CMP    [bx].RsCTxACount,0		je     CAExit		dec    [bx].RsCTxACount		inc     [bx].RsTxABufP   		Mov     BX,[bx].RsTxABufP		dec     BX 		Mov	Al, BYTE PTR[BX]		OUT	Chanladata,AL 		Mov	Al,RstTxEomLatch ;		OUT	chanlacommand,al		JMP	Rs232IntHandlerACAExit:	        in	al,chanlacommand		Mov	Al,RstTxIntPending ;		OUT	chanlacommand,al		JMP	Rs232IntHandlerAChAExtStat:	  		Mov	Al,ResetExt	; Reset External Interrupt of Ch-A	        OUT	chanlacommand,al	        mov	DL,error13		JMP     IntError                	ChAReceive:  	  		in    AL,Chanladata		cmp    [bx].RsCRxACount,0		je     ChAReceiveRet		dec    [bx].RsCRxACount		inc     [bx].RsRxABufP   		Mov     BX,[bx].RsRxABufP		dec     BX 		Mov	BYTE PTR[BX],ALChAReceiveRet:	JMP	Rs232IntHandlerA  	         RS232CommInt:  		CLI	        PUSHA		Call SetReg                Mov	Al,2		OUT	chanlbcommand,al		in	al,chanlbcommand		and al,7		jz ChBTxEmpty		cmp al,1		je ChBExtStat		cmp al,2		je ChBReceive		cmp al,3		je ChBSpecial		cmp al,4		je ChATxEmpty		cmp al,5		je ChAExtStat		cmp al,6		je ChAReceive		jmp ChASpecial		ChBTxEmpty:  				cmp    [bx].RsCTxBCount,0		je     CBExit		dec    [bx].RsCTxBCount		inc     [bx].RsTxBBufP   		Mov     BX,[bx].RsTxBBufP		dec     BX 		Mov	Al, BYTE PTR[BX] 		OUT	Chanlbdata,AL 		Mov	Al,RstTxEomLatch ;		OUT	chanlbcommand,al                JMP	Rs232IntHandlerACBExit:	        in	al,chanlbcommand                Mov	Al,RstTxIntPending ;		OUT	chanlbcommand,al                JMP	Rs232IntHandlerAChBExtStat:  			Mov	Al,ResetExt	; Reset External Interrupt of Ch-b	        OUT	chanlbcommand,al	        mov	DL,error16		JMP     IntErrorChBReceive:  	  		in    AL,Chanlbdata		cmp    [bx].RsCRxBCount,0		je     ChBReceiveRet		dec    [bx].RsCRxBCount		inc     [bx].RsRxBBufP   		Mov     BX,[bx].RsRxBBufP		dec     BX 		Mov	BYTE PTR[BX],ALChBReceiveRet:	JMP	Rs232IntHandlerA	ChBSpecial:  	  		Mov	Al,1		OUT	chanlbcommand,al		in	al,chanlbcommand		mov     dl,al	        Mov	Al,ErrorReset		OUT	chanlbcommand,al		Test    dl,80h		jz      ChBSpecialRet		Test    dl,70h		jnz     ChBSpecialRet		JMP	Rs232IntHandlerAChBSpecialRet:  mov	DL,error18		JMP     IntError		IntError:       Cmp [di].MesaFault,0                jne Rs232IntHandlerA		mov	[bx].RsFault,Dl		mov	[di].MesaFault,DlRs232IntHandlerA: 		mov	al,i8274EOI		out	chanlacommand,al		;IN	Al, chanlacommand	;Is there another interrupt	        ;TEST	Al, i8274IntPending	;pending?	        ;JNZ	Rs232IntRet		;Yes, there is		mov	al,nonspecificeoi	 	out	i8259MasterAddr0,al	;clear 8259 int latchRs232IntRet: 	POPA	        STI		IRET						SetReg:         MOV	DI, ExtMCBlock ;Index to Monitor Control Block	        MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	        Mov bx,[si].TCBPointer ;Get Index to TCB		RETRS232PreProcess: MOV    BX, 13	         Call   ExtReadEEProm	         cmp    al,1 	         jne     RS232PreProcess1		 mov 	dl,0		 MOV	CX, 1EH UpdateTCB:	  	mov 	[SI].TestN,dl		PUSHA            	CALL 	ExtSetTCBPointer    	        POPA	    	Mov 	bx,[si].TCBPointer ;Get Index to TCB	    	OR 	[bx].RSDataandError, 80H		INC	Dl		LOOP	UpdateTCB		 RS232PreProcess1:TEST [DI].FileControl,BurdockFile		 jnz RS232PreProcessRet		 TEST [DI].TestControl,AlagInProcess	         jz RS232PreProcessRet		 mov AL,[SI].TestNS		 mov [SI].TestN,al		 mov [SI].TestNE,al		 CALL 	ExtSetTCBPointer	    	 Mov 	bx,[si].TCBPointer ;Get Index to TCB		 or BYTE PTR [BX][1],SkipTestBitRS232PreProcessRet:RetRS232FRUList: mov Bx,0 	   mov BL, [SI].TestN	   SHL Bx,1	   mov ax, WORD PTR RS232List0 [bx]	   CALL ExtMessageRS232FRUList1:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne RS232FRUList1	   Ret RS232List0 DW  0F02EHRS232List1 DW  00F2EHRS232List2 DW  00F2EHRS232List3 DW  00F2EHRS232List4 DW  00F2EHRS232List5 DW  00F2EHRS232List6 DW  00F2EHRS232List7 DW  00F2EHRS232List8 DW  00F2EHRS232List9 DW  00F2EHRS232ListA DW  0F02EHRS232ListB DW  00F2EHRS232ListC DW  00F2EHRS232ListD DW  00F2EHRS232ListE DW  00F2EHRS232ListF DW  00F2EHRS232List10 DW  00F2EHRS232List11 DW  00F2EHRS232List12 DW  00F2EHRS232List13 DW  00F2EHRS232List14 DW  0F02EHRS232List15 DW  00F2EHRS232List16 DW  00F2EHRS232List17 DW  00F2EHRS232List18 DW  00F2EHRS232List19 DW  00F2EHRS232List1A DW  00F2EHRS232List1B DW  00F2EHRS232List1C DW  00F2EHRS232List1D DW  00F2EH				DataTxAWriteBuff	DW StartTxAData	DataRxBReadBuff		DW StartRxBData	DataTxBWriteBuff	DW StartTxBData	DataRxAReadBuff		DW StartRxAData						ORG TestCodeLoc2		StartTxAData	DB 1000H DUP (?)   ;TxA write data bufferStartRxBData	DB 1000H DUP (?)   ;RxB Read data bufferStartTxBData	DB 1000H DUP (?)   ;TxB write data bufferStartRxAData	DB 1000H DUP (?)   ;RxA Read data bufferMonitorCode	ENDS	END