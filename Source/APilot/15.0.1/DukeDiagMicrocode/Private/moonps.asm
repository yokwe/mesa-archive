$	DEBUG MOD186$	TITLE (DASH Printer)	NAME	DASH$	NOLIST		$	INCLUDE(MoonSys.def)$	INCLUDE(MoonLink.def)$	LIST;;-------------------- Constants declarations ---------------------------------;;Register addresses;ConfigReg	EQU	4000H		;Read-Write Byte RegrCommandReg	EQU	4002H		;Read-Write Byte RegrPortStatReg	EQU	4004H		;Read Only Word RegrPSOStatReg	EQU	4006H		;Read Only Byte RegrIntrpSelReg	EQU	4008H		;Read Only Byte RegrDataReg		EQU	400AH		;Write Only Word RegrMaintReg	EQU	400CH		;Read Only Byte Regr;RESETCtrlReg	EQU	00C0HChannel1DMA86	EQU	0FFD0HTransferCount	EQU	0FFD8H;i186DMAMaskReg	EQU	0FF28Hi186EOIReg	EQU	0FF22Hi186InServReg	EQU	0FF2CHUnMaskDMA1	EQU	0035Hi186EOIdma1	EQU	0003H;PSOReset	EQU	00H		;these 2 should be togglesPSOResetcom	EQU	01HClearInt	EQU	00HClearIntcom	EQU	02H;PSOgo		EQU	0BH		;PSOGo enablePSONogo		EQU	03H		;PSOGo Disable   ;PSOConfig1	EQU	00C6H		;6-BusyforEOX-NonMaintmode-Int-DMAPSOConfig2	EQU     0046H		;6-BusyforEOX-NonMaintmode-Int-NonDMA PROMerror	EQU	04046H		;Will generates Fault error as Prom errorPSOMaintenance	EQU	0066H		;6-BusyforEOX-Maintmode-Int-NonDMA;DMAEnable	EQU	0BFFFHEXPIntEnable	EQU	0DFBFHPSOIntEnable	EQU	0FDHSetEXPslot	EQU	0400Hi8259Poll	EQU	00CH		;Put option slave in Polling mode;WordTransfer	EQU	017A7HByteTransfer	EQU	017A6H;NumberofLine	EQU	010H		;16 linesNumberofColumn	EQU	07FH		;127 characters per linesLF		EQU	0AH		;Linefeed & CRFFeed		EQU	0AH		;2 linefeeds;-----------------------------------------------------------------------------;PSOTCBblock	STRUC			;PSO Test Control Block;ErrorLoop	DB	00H		;TESType		DB	00HPageParity	DB	00H		;BankParity	DB	00HWORDPattern	DW	04142H		;ASCII of ABNUMBERofPass	DB	00HLASTpass	DB	00HPORTstatus	DW	00HPSOstatus	DB	00HPSOFault	DB	00H		;Information on PSO faultPSOTCBblock	ENDS;;-----------------------------------------------------------------------------MonitorCode	SEGMENT	COMMON		ASSUME	CS:MonitorCode, SS: MonitorCode, DS: MonitorCode , ES: MonitorCode		                ORG 	TestCodeLoc		JMP	PSOStart		jmp	PSOPreProcess		jmp	PSOFRUList		jmp	PSODummy		jmp	PSODummy		jmp	PSODummy		jmp	PSODummy						ORG PSOtestCodeLoc;PSOStart:	MOV	AX,SP		MOV	MonitorPtr,AX		;Store return address to		MOV	AX,CS			;Katz Environment		MOV	ES,AX		MOV	DS,AX				MOV	DMAIntCount,00H		;Counter initialization.		MOV	PassCounter,00H		MOV	FAULTintCount,00H				CALL 	IntVectorSetUp				Proceed:	MOV	BX,[SI].TCBPointer		CMP	[BX].TESType,00H	;DMA word transfer		JNE	Down01		JMP	DMAtransDown01:		CMP	[BX].TESType,01H	;DMA byte transfer		JNE	Down02		JMP	DMAtransDown02:		CMP	[BX].TESType,02H	;Fault generate		JNE	Down03		JMP	FaultGenerateDown03:		CMP	[BX].TESType,03H	;Maintenance mode byte trans		JNE	Down04		JMP	MaintenanceBDown04:		JMP	MaintenanceW		;Maintenance mode word trans		;===========================================================================================				DMAtrans:	MOV	AX,PSOConfig1		MOV	ConfigPara,AX		;6-BusyforEOX-NonMaintmode-Int-DMA		CALL	PSOSetUp				GoAgain:	CMP	[BX].TESType,01H	;Check if DMA Byte transfer. 1=Byte 0=word		JE	ByteTrans				MOV	AX,WordTransfer		MOV	Transtype,AX 		;Transfer word		MOV	AX,Blockcount		;Transfer count = 256 = 100H		CALL	DMASetUp		JMP	DownPSO		Bytetrans:	MOV	AX,Bytetransfer		MOV	Transtype,AX		;Transfer bytes		MOV	AX,Blockcount		;Transfer count = 256x2 = 512 = 200H		SHL	AX,1		CALL 	DMASetUp		DownPSO:	INC	PassCounter				CALL	PSOReady		;DMA transfer Starts...				CALL	WaitForDMA		CMP	DMAIntCount,01H		;Check if any errors occured.		JE	DMAallRight		;More than 1 or never interrupted.		MOV	AX,01H		JMP	TestError		DMAallright:	Call WaitForBusy		MOV	DX,PortStatReg		IN	AX,DX		cmp	ax,7EF2H		je      CkPSOStat		MOV	AX,08H		JMP	TestErrorCkPSOStat:	MOV	DX,PSOStatReg				IN	AL,DX		cmp	al,21H		je      DMAallright1		MOV	AX,09H		JMP	TestError			DMAallright1:	MOV	DMAIntCount,00H		MOV	AL,[BX].NUMBERofPass		CMP	PassCounter,AL		JNE	GoAgain		JMP	EndOfPSO		;--------------------------------- ByTe MAINteNANCE  -------------------------------------MaintenanceB:	MOV	AX,PSOMaintenance				MOV	ConfigPara,AX		CALL	PSOSetup		;6-BusyforEOX-Maintmode-Int-NonDMA				CALL	PSOReady				MBagain:	INC	PassCounter		MOV	CX,08H		MOV	Al,01H		MOV	Temp,ALBitMove:	MOV	DX,DataReg		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX			CMP	AL,Temp		JNE	DataError		SHL	Al,1		MOV	Temp,AL		LOOP	BitMove		BitAlter:	MOV	DX,DataReg		MOV	Al,0055H		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		CMP	AL,055H		JNE	DataError		AA:		MOV	DX,DataReg		MOV	Al,00AAH		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	AL,DX		CMP	AL,0AAH		JNE	DataError		A5:		MOV	DX,DataReg		MOV	Al,00A5H		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		CMP	AL,0A5H		JNE	DataError		FiveA:		MOV	DX,DataReg		MOV	Al,005AH		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		CMP	AL,05AH		JNE	DataError		Call    CkTheStatus				MOV	AL,[BX].NUMBERofPass		CMP	PassCounter,AL		JNE	MBagainEndofMaint:	JMP	EndOfPSO		DataError:	MOV	AX,04H		JMP	TestError				;-------------------------------- WoRD MAINTeNANCE --------------------------------MaintenanceW:	MOV	AX,PSOMaintenance				MOV	ConfigPara,AX		CALL	PSOSetup		;6-BusyforEOX-Maintmode-Int-NonDMA				CALL	PSOReady			MWagain:	INC	PassCounter		MOV	CX,010H			;Shift 1 16 times for bit testing.		MOV	AX,01H			;First bit loaded.		MOV	Tempo,AX		BitMoveW:	MOV	DX,DataReg		;Send byte to get lower byte.		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	Temp,AL				MOV	DX,DataReg		;Send word to et higher byte		OUT	DX,AX		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX	        MOV	DL,AL		MOV	AL,TEMP		MOV	AH,DL					CMP	AX,Tempo		;Compare results.		JE	DownLup		JMP	DataErrorWDownLup:	SHL	AX,1		MOV	Tempo,AX					LOOP	BitMoveW		BitAlterW:	MOV	DX,DataReg		MOV	AX,05555H		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	Temp,AL				MOV	DX,DataReg		OUT	DX,AX		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	DL,AL		MOV	AL,TEMP		MOV	AH,DL				CMP	AX,05555H		JE	AAW		JMP	DataErrorW		AAW:		MOV	DX,DataReg		MOV	AX,0AAAAH		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	AL,DX		MOV	Temp,AL				MOV	DX,DataReg		OUT	DX,AX		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	DL,AL		MOV	AL,TEMP		MOV	AH,DL				CMP	AX,0AAAAH		JE	A5W		JMP	DataErrorW		A5W:		MOV	DX,DataReg		MOV	AX,0A5A5H		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	Temp,AL				MOV	DX,DataReg		OUT	DX,AX		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	DL,AL		MOV	AL,TEMP		MOV	AH,DL				CMP	AX,0A5A5H		JE	FiveAW		JMP	DataErrorW		FiveAW:		MOV	DX,DataReg		MOV	AX,05A5AH		OUT	DX,Al		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	Temp,AL				MOV	DX,DataReg		OUT	DX,AX		CALL	Wait5Micro		MOV	DX,MaintReg		IN	Al,DX		MOV	DL,AL		MOV	AL,TEMP		MOV	AH,DL				CMP	AX,05A5AH		JNE	DataErrorW		Call    CkTheStatus		MOV	AL,[BX].NUMBERofPass		CMP	PassCounter,AL		JNE	MWDownEndofMaintW:	JMP	EndOfPSOMWDown:		JMP	MWagain		DataErrorW:	MOV	AX,05H		JMP	TestError		CkTheStatus:	MOV	DX,PortStatReg		IN	AX,DX		cmp	ax,7EF2H		je      CkPSOStatus		cmp	ax,7FF6H		je      CkPSOStatus		MOV	AX,08H		JMP	TestError		CkPSOStatus:MOV	DX,PSOStatReg				IN	AL,DX		cmp	al,21H		je      CkTheStatusRet		MOV	AX,09H		JMP	TestError			CkTheStatusRet: Ret		Wait5Micro:	PUSHA				;50 micro second wait loop		MOV	CX,03HLUP:		LOOP	LUP		POPA		Ret								Temp		DB	00HTempo		DW  	00H;------------------------------------ Fault Generate -----------------------------------		FaultGenerate:	MOV	AX,PSOConfig2		MOV	ConfigPara,AX		CALL	PSOSetUp		;6-BusyforEOX-NonMaintmode-Int-NonDMA		Faultagain:	MOV	Ax,PSOIntEnable		OUT 	i8259OptionsSlaveAddr1,Al	;PSO interrupt enable		MOV	DX,IntrpSelReg		;Select level 1 interrupts in pso board		MOV	AL,02H		OUT	DX,AL				CALL	PSOReady				INC	PassCounter		MOV     FAULTintCount,00H  				MOV	AL,NonSpecificEOI		;Write an EOI command to the 		OUT	i8259OptionsSlaveAddr0,AL	;EOI to Option Slave				MOV	DX,ConfigReg		;Set Configuration Register		MOV	AX,PROMerror		;Will generates Fault error as Prom error		OUT	DX,AX			;Switch printer to scanner, temporarily generates				MOV	CX,0FFFFHWaitPromError:	CMP	FAULTintCount,01H	;Prom error		JE	FAULTallright		LOOP	WaitPromError	      					OutLoop:	MOV	AX,02H		JMP	TestError			FAULTallright:	MOV	AL,[BX].NUMBERofPass		CMP	PassCounter,AL		JE	EndOfPSO		MOV	FAULTintCount,00H		JMP	Faultagain					;----------------------------	 Test Error   -------------------------------			TestError:	MOV	BX,[SI].TCBPointer		MOV	[DI].MesaFault,AL		MOV	[BX].PSOFault,AL	;Information saved in TCB		MOV	DX,PortStatReg		;Error=1 : DMA int not detected.		IN	AX,DX			;Error=2 : No PRMerror detected.		MOV	[BX].PORTstatus,AX	;Error=3 : Fault from printer.		MOV	DX,PSOStatReg		;Error=4 : Mismatched data in		IN	AL,DX			;          Byte maintenance mode		MOV	[BX].PSOstatus,AL	;Error=5 : Mismatched data in		MOV	AL,PassCounter		;	   Word maintenance mode		MOV	[BX].LASTpass,AL	;Error=6 : Printer is not ready    EndOfPSO:	MOV	AX,MonitorPtr		MOV	SP,AX		MOV	AL,PSONoGo		;Disable PSOgo		MOV	DX,CommandReg		OUT	DX,AL		CMP	[BX].ErrorLoop,00H		JE	TestErrorRet		jmp	PSOStartTestErrorRet:	Ret;;-----------------------------  Wait For DMA  --------------------------------WaitForDMA:	MOV	cx,32WaitForDMA1:	push    cx		MOV	cx,0WaitForDMA2:	LOOP	WaitForDMA2	        pop    cx		MOV	DX,TransferCount		IN	AX,DX		CMP	AX,0000H		JE	AfterTC		LOOP	WaitForDMA1		MOV	AX,07H		JMP	TestError		AfterTC:	MOV	CX,0FFFFHAfterTC1:	LOOP	AfterTC1		Ret		;;------------------ Set up interrupt Vectors ---------------------------------IntVectorSetUp:			CLI		PUSHA								MOV	AX,0H		MOV	DS,AX		MOV	BX, ExtTimerDMAV		MOV	AX, OFFSET EndofDMA		;Eof DMA interrupt Vector		MOV	[BX].DMA1V,AX				MOV	BX, ExtInterruptV2		MOV	AX, OFFSET FaultHandler		;Printer Error interrupt		MOV	[BX].ExpansionCV,AX									MOV     AX,CS		MOV     DS,AX        	AND     [di].EnableIntC1C2,DMAEnable 	;DMA enable		AND	[di].EnableIntC1C2,EXPIntEnable	;Expansion board int.	        CALL	ExtEnableInt					MOV	AX,SetEXPslot		CALL	ExtOnWrRstCtlReg		;Enable Expansion slot		;		MOV	Ax,PSOIntEnable	  		;Don't do it until expect it.;		OUT 	i8259OptionsSlaveAddr1, Al	;PSO interrupt enable 				MOV	DX,i186DMAMaskReg		;Un Mask DMA 1 Interrupt		MOV	AX,UnMaskDMA1			;in i186		OUT	DX,AX		POPA		STI		RET	;------------------ PSO board initializaton ----------------------------------PSOSetUp:			PUSHA				MOV	DX,CommandReg				MOV  	AL,PSOResetcom+ClearIntcom	;PSOreset 		OUT	DX,AL				;PSOGo Inactive		MOV	AL,PSOReset+ClearIntCom			OUT	DX,AL		MOV	AL,PSOResetcom+ClearIntCom		OUT	DX,AL						MOV  	AL,PSOResetcom+ClearIntcom	;Clear PSO Intrrpts 		OUT	DX,AL				;PSOGo Inactive		MOV	AL,PSOResetCom+ClearInt			OUT	DX,AL		MOV	AL,PSOResetcom+ClearIntcom		OUT	DX,AL						 				TestPoint:	MOV	DX,ConfigReg			;Set Configuration Register		MOV	AX,ConfigPara			;DMA mode or Non...		OUT	DX,AX				;Print - printer				POPA		RET		;------------------------------- PSO Go --------------------------------------------					PSOReady:	MOV	AL,PSOgo		MOV	DX,CommandReg					;PSOGo		OUT	DX,AL		RET				WaitForBusy:   	MOV	cx,32WaitForBusy1:	push    cx		MOV	cx,0WaitForBusy2:	LOOP	WaitForBusy2	        pop    cx		MOV	DX,PortStatReg		IN	AX,DX		TEST	AL,04H			;Check if printer is busy.		JZ	WaitForBusyRet		LOOP	WaitForBusy1		MOV	AX,06H		JMP	TestError  WaitForBusyRet: ret				;------------------ Set up DMA Channel ---------------------------------------------;AX = Byte count			DMASetUp:	PUSH	BX		PUSH	AX		PUSH	AX				Call    WaitForBusy  		MOV	BX,OFFSET DataBlock	;BX = source		MOV	AX,CS	;Load segment register of Datablock		SHL	AX,4			;Adding 600 to the source address		ADD	BX,AX		MOV	AX,BX						;		MOV	DX,Channel1DMA86	;Point to Lower Source Reg		OUT	DX,AX			;write Lower Source 		INC	DX			;Point to Upper Source Reg		INC	DX			;		XOR	AX,AX			;Ax = 00		OUT	DX,AX			;write Upper Source		INC	DX			;Point to Lower Dest Reg		INC	DX			;		MOV	AX,DataReg 		;write Lower Dest 		OUT	DX,AX			;write Lower Dest 		XOR	AX,AX			;clear AX		INC	DX			;Point to Upper Dest Reg		INC	DX			;		OUT	DX,AX			;write Upper Dest		POP	AX			;get byte count		INC	DX			;Point to TC reg		INC	DX			;		OUT	DX,AX			;write Terminal Count		INC	DX			;Point to control reg		INC	DX			;		MOV	AX,Transtype		;set parms		OUT	DX,AX			;write control reg		POP	AX		POP	BX		RET		;------------------------------ Fill in Data -----------------------------------------------FillData:	PUSHA			MOV	AX,[BX].WORDPattern		MOV	BX,OFFSET DataBlock		MOV	Row,01H		MOV	Col,01H		LineLoop:	MOV	CL,NumberofLine		CMP	Row,CL			;16 row of characters		JG	FormFeedColoop:		MOV	CL,NumberofColumn		CMP	Col,CL			;128 characters/column		JG	LineFeed		MOV	ES:[BX],AL		INC	BX		MOV	ES:[BX],AH		INC	BX		INC	Col		INC	Col		JMP	Coloop		LineFeed:	MOV	DL,LF		MOV	ES:[BX],DL		;Line feed and CR at EOL		INC	BX			;		MOV	Col,01H		INC	Row		JMP	LineLoop		FormFeed:	DEC	BX			;Double line feed at end of block		DEC	BX		MOV	DL,LF		MOV	ES:[BX],DL						POPA				RET;---------------------------------  DMA Interrupt Handler----------------------EndofDMA:	CLI				 	;disable interrupts		PUSHA		INC	DMAIntCount				MOV	AL,0BH				;Clr Int PSO but Do NOT Reset.		MOV	DX,CommandReg		OUT	DX,AL				;Clr Int goes Hi-low-Hi		MOV	AL,09H				;PSOGo active.		OUT	DX,AL		MOV	AL,0BH	;		OUT	DX,AL			;		MOV	AL,PSOgo;		MOV	DX,CommandReg			;PSOGo;		OUT	DX,AL						MOV	DI,ExtMCBlock			;Index to FCB		MOV	SI,ExtMFCBlock 			;Index to Monitor FCB		MOV 	BX,[SI].TCBPointer		;Get Index to TCB				MOV	AX,i186EOIdma1			;Send EOI to i186 DMA1		MOV	DX,i186EOIReg		OUT	DX,AX				MOV	DX,i186InServReg		;Check for any pending Int..		IN	AX,DX				;in the i186		CMP	AX,0		JNE	EndofDMARet					MOV	AL, nonSpecificEOI		;Write an EOI command to the 			OUT	i8259MasterAddr0, AL 		;master i8259		EndofDMARet:	POPA		STI					;Reenable the interrupts		IRET		;---------------------------------------------------------------------------------------FaultHandler:	CLI		PUSHA				INC	FAULTintCount				MOV	DX,CommandReg				MOV  	AL,PSOResetcom+ClearIntcom	;PSOreset 		OUT	DX,AL				;PSOGo Inactive		MOV	AL,PSOReset+ClearIntCom			OUT	DX,AL					MOV	AL,PSOResetcom+ClearIntCom		OUT	DX,AL					MOV  	AL,PSOResetcom+ClearIntcom	;Clear PSO Intrrpts 		OUT	DX,AL				;PSOGo Inactive		MOV	AL,PSOResetCom+ClearInt			OUT	DX,AL						MOV	AL,PSOResetcom+ClearIntcom		OUT	DX,AL				 						MOV	DX,ConfigReg			;Reset PSO to normal		MOV	AX,PSOConfig2			;Configuration.		OUT	DX,AX				MOV	Al,PSOGo		MOV	DX,CommandReg			;PSOGo active again,		OUT	DX,AL		TestFault:	MOV	DI,ExtMCBlock			;Index to FCB		MOV	SI,ExtMFCBlock 			;Index to Monitor FCB		MOV 	BX,[SI].TCBPointer		;Get Index to TCB				MOV	AL,i8259Poll			;Acknowledge the Option slave		OUT	i8259OptionsSlaveAddr0,AL	;upon intrrupt received	       	IN	AL,i8259OptionsSlaveAddr0		 		MOV	AL,NonSpecificEOI		;Write an EOI command to the 		OUT	i8259OptionsSlaveAddr0,AL	;EOI to Option Slave				MOV	Al,0BH				;OCW3_ 00BH		OUT  	i8259OptionsSlaveAddr0,Al	;OCW3_ 00Bh		IN	Al,i8259OptionsSlaveAddr0	;Read Option Slave 8259 IS register		CMP	Al,00H				;Check if another int is in service		JNZ	FaultReturn						MOV	AL,nonSpecificEOI		;EOI command to the Slave i8259 		OUT	i8259SlaveAddr0,AL		;Clear Slave Controller				MOV	Al,0BH				;OCW3_ 00BH		OUT  	i8259SlaveAddr0,Al		;OCW3_ 00Bh		IN	Al,i8259SlaveAddr0		;Read Slave 8259 IS register		CMP	Al,00H				;Check if another int is in service		JNZ	FaultReturn			;						MOV	AL,nonSpecificEOI		;Write an EOI command to the 			OUT	i8259MasterAddr0,AL 		;master i8259				FaultReturn:	MOV	AL,0FFH	  				OUT 	i8259OptionsSlaveAddr1, Al	;PSO interrupt disable 		POPA		STI		Iret			;-----------------------------------------------------------------------------------PSOPreProcess:	 mov bx,18		 CALL ExtReadEEProm		 and ah,0F8H	         cmp ah,8	         je PCEPreProcessRet 		 mov BX,[SI].TCBPointer		 mov AL,[SI].TestNS		 mov [SI].TestN,al		 mov [SI].TestNE,al		 or BYTE PTR [BX][1],SkipTestBitPCEPreProcessRet: RetPSOFRUList:	mov 	Bx,0 	  	mov 	BL, [SI].TestN	  	SHL 	Bx,1	  	mov 	ax, WORD PTR PSOList0 [bx]	  	CALL 	ExtMessagePSOFRUList1:	CALL	ExtDoRunTimeWork	   	cmp 	[di].CurrentInputByte,KSP	   	jne 	PSOFRUList1	   	Ret		PSODummy:	RetPSOList0 DW 5021H 	DW 5021H 	DW 0B5F0H	DW 0B5F0H 	DW 0B5F0H		;------------------ Block of tranfered data --------------------------------------------------DataBlock	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 11111111111111111'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 22222222222222222'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 33333333333333333'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 44444444444444444'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 55555555555555555'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH 		DB	'This is the end of the line as you can see. 66666666666666666'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 77777777777777777'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 88888888888888888'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 99999999999999999'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 10101010101010101'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 11 11 11 11 11 11'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 12 12 12 12 12 12'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 13 13 13 13 13 13'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 14 14 14 14 14 14'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 15 15 15 15 15 15'		Dw	0A0DH		DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 16 16 16 16 16 16'		DW	0A0AH		DW	0D0CH		DW	50	DUP (?)				BlockPtr	DW	DataBlockBlockcount	DW	1018		TransType	DW	00HDMAIntCount	DB	00HFAULTintCount	DB	00HPassCounter	DB	00HRow		DB	00Col		DB	00MonitorPtr	DW	00ConfigPara	DW	0000H							MonitorCode	ENDS		END