$	DEBUG	MOD186$	TITLE (DASH2)	NAME	DASH2$	NOLIST		$	INCLUDE (MoonSys.def)$	INCLUDE (MoonLink.def)$	INCLUDE (MoonPPO.Def)	;PPO equates$	LIST;---------------------------------------------------------------------------;MOONPPO.ASM -- Parallel Port Option (DASH2) Boot Diagnostic;created by: JMA 14-Jul-86 13:32:31 from MoonPS.ASM;;last edited by:;	AXA	19-Dec-88 17:39:41	;Added XP-11 (Red Fox) Printer Code;	HEM	18-Dec-87 16:33:35	;deleted "AND 0F8H" in PPOPreProcess;	HEM	17-Dec-87 19:40:52	;deleted use of PassedPreProc;	HEM	17-Dec-87 14:22:11	;PPOPreProcess uses LPOption,SPOption;	HEM	 2-Oct-87 17:22:51	:skip ALAG tests if neither board present;	JMA	17-Sep-87 11:15:04	:used EEPROM for long ALAG test range;	JMA	 9-Jun-87 14:49:25	:fixed EEPROM option word verification;	JMA	 1-May-87 15:31:45	:rearranged FRU list;	TXM	 1-May-87  9:40:39	:changed OutDataBlock structure;	JMA	21-Apr-87 19:08:14	:made Init-WS Test independent of Inca state;	JMA	20-Apr-87 12:49:33	:removed Inca scanner soft reset;	JMA	17-Nov-86 16:33:26	:changed to run with B0 Inca Scanner;; Copyright (C)  1987  by Xerox Corporation. All rights reserved. ;-------------------- Constants declarations ---------------------------------;See MoonPPO.def;=============================== CODE  SECTION =================================MonitorCode	SEGMENT	COMMON		ASSUME	CS:MonitorCode,	SS: MonitorCode, DS: MonitorCode, ES: MonitorCode		                ORG 	TestCodeLoc		JMP	PPOStart		jmp	PPOPreProcess		jmp	PPOFRUList		jmp	PPODummy		jmp	PPODummy		jmp	PPODummy		jmp	PPODummy				ORG PPOTestCodeLocPPOStart:	MOV	AX, SP		MOV	MonitorPtr, AX		;Store return address to		MOV	AX, CS			;monitor Environment		MOV	ES, AX		MOV	DS, AX				MOV	SavedSI, SI		MOV	SavedDI, DI		;save just in case...				MOV	DMAIntCount, 0		;Counter initialization.		MOV	PassCounter, 0		MOV	ExpIntrpCnt, 0				CALL 	IntVectorSetUp		Proceed:	MOV	BX,[SI].TCBPointer		MOV	CX, [BX].CnfigRegVal		MOV	BaseCnfgVal, CX		MOV	ConfigPara, DfaultCnfgVal		CALL 	PPOSetUp		;set default value for PPO				CMP	BoardType, SPOption	;if running SPO Test then check		JNE	StartTest		;   to see if SPO is installed		JMP	ChkIfBoardInstalled	;   first...		StartTest:	MOV	AL, [BX].TESType	;load test#		CMP	AL, SmartLoopback	;		JNE	Down00			;		CMP	BoardType, SPOption	;determine which type of loopback to use		JNE	CheckIfLPO		JMP	DataRegrLoopback	;  IF SP run Data regr. loopbackCheckIfLPO:	CMP	BoardType, LPOption	;  		JNE	NoSuchOption		;		JMP	MaintenanceW		;  IF LP run Maint regr. loopbackNoSuchOption:	MOV	AX, UnknownOption	;  ELSE EEPROM not configured		JMP	TestError		;Report error condition		Down00:		CMP	AL, MaintLoopBack		JNE	Down01		JMP	MaintenanceW		;		Down01:		CMP	AL, MaintLoopBack		JNE	Down02		JMP	MaintenanceW		;		Down02:		CMP	AL, LPOFaultIntrp	;		JNE	Down03		JMP	LPOFaultGen		;Down03:		CMP	AL, DMAWordsOutP0	;First legitimate SPO test		JNE	Down04		MOV	ConfigPara, PPOConfigP0		JMP	WordTransOut		Down04:		CMP	AL, DMABytesOutP0	;		JNE	Down05		MOV	ConfigPara, PPOConfigP0		JMP	ByteTransOut		Down05:		CMP	AL, DMAWordsOutP1	;		JNE	Down06		MOV	ConfigPara, PPOConfigP1		JMP	WordTransOut		Down06:		CMP	AL, DMABytesOutP1	;		JNE	Down08		MOV	ConfigPara, PPOConfigP1		JMP	ByteTransOut		;Down07:	CMP	AL, SoftResetP1		;commented out;		JNE	Down08;		JMP	ScnrSoftResetDown08:		CMP	AL, InitWSComm		;		JNE	Down09		JMP	InitCommDown09:		CMP	AL, HardResetP1		;		JNE	Down10		JMP	P1HardResetDown10:		CMP	AL, DataRLoopback	;		JNE	Down11		JMP	DataRegrLoopback	;Down11:		CMP	AL, PPOFaultIntrp	;Fault generate		JNE	Down12		JMP	PPOFaultGen		Down12:		CMP	AL, HardResetP0		;		JNE	Down13		JMP	P0HardReset		;			  		Down13:		JMP	DataRegrLoopback	;DEFAULT TEST, if no match found		ChkIfBoardInstalled:		PUSHA		MOV	CX, 0FH			;before doing anything check repeatedly			MOV	DX, PPOStatReg		; if the board is installedChkForInst:	IN	AX, DX			;		TEST	AX, PPOAlwaysOne	;Must be ONE  		JZ	OptionNotInstalled	;		TEST	AX, PPOAlwaysZero	;Must be ZERO		JNZ	OptionNotInstalled	;		CALL	WaitAWhile		;		LOOP	ChkForInst		;		POPA		JMP	StartTest		;option installed proceed...		OptionNotInstalled:		POPA		MOV	AX, PPONotInstalled	;set error status		JMP	TestError		;					;------------------------------------ SCANNER OPERATIONS -----------------------------------;Routine to check for the Attn signal and read in data from scannerCheckAttn:	PUSHA		MOV	ConfigPara, P1CntrlInCnfg						;P1-ByteMode-Control-In-DMA-Int-NonMaint-6		CALL	ZeroOut		CALL 	PPOSetUp		MOV	DI, 0			;		AttnAgain:	MOV	CX, 0FFH		;load loop value, approx 10S waitCA0:		CALL	WaitAWhile		;about 50uS wait		LOOP	CA0			;loop				CALL	WaitForReady		;check if scnr ready		MOV	DX, PortStatReg		IN	AX, DX		TEST	AX, 0100H		;check fault, busy & attn		JNZ	CheckAttnRet				CALL	PPOOn			;Turn on and let the board strobe in		CALL	PPOOff			;  the data, turn off again after				MOV	DX, DataReg		;read data from scanner		IN	AL, DX			;		MOV	InDataBlock[DI], AL	;		INC	DI		CMP	DI, InDataBlockSize+1	;don't overrun input buffer		JE	CA1		JMP	AttnAgain				CheckAttnRet:	CALL	WaitForReady		;		POPA		RET		CA1:		POPA		MOV	AX, IncompleteXfer		JMP	TestError		;------------------------------------ HARD RESET  ----------------------------		;Routine to perform hard reset on specified port using reset signal		P0HardReset:	MOV	ConfigPara, DfaultCnfgVal						;P0-Control-Out-NoDMA-Int-NonMaint-6		JMP	SHORT ResetDev		;						P1HardReset:	MOV	ConfigPara, DfaultCnfgVal OR Port1SelectBit						;P1-Control-Out-NoDMA-Int-NonMaint-6		ResetDev:	CALL 	PPOSetUp		;		MOV	DX, CommandReg		;		MOV	AX, PPODeviceReset	;load reset command regr values		OUT	DX, AX			;		PUSHA				;a little delay		POPA		MOV	AX, DfaultCmdVal	;		OUT	DX, AX			;				MOV	CX, 0FFFFH		;wait before proceedingSHR0:		CALL	WaitAWhile		;let the scanner catch up		CALL	WaitAWhile		LOOP	SHR0		CALL	WaitForReady		;check scanner status		INC	PassCounter		JMP	EndOfPPO				;------------------------------------ SCNR SOFT RESET COMMD ----------------------------;Routine to reset scanner using commands sent to the scanner	ScnrSoftReset:	CALL 	CheckAttn			;check for attn			MOV	ConfigPara, P1CntrlOutCnfg	;P1-Control-Out-DMA-Int-NonMaint-6		CALL 	PPOSetUp			;				MOV	MemPtr, OFFSET IITResetCmd	;load buffer offset ptr		MOV	DMACntrlWrd, DMAByteXferOut	;		MOV	DMAXferCnt, 3				CALL	WaitForReady			;check the status of the device before		CALL 	DMASetUp			;				CALL	SetOpt8259Rdy			;get Opt i8259 ready		MOV	ExpIntrpCnt, 0			;clear counter				CALL 	PPOOn				;		CALL	WaitForDMA					MOV	CX, 0FFHSSR0:		CALL	WaitAWhile			;wait before proceeding		LOOP	SSR0				;		CALL	PPOOff				;									;READ ACK FROM SCANNER USING DMASSR1:		MOV	ConfigPara, P1CntrlInCnfg	;P1-ByteMode-Control-In-DMA-Int-NonMaint-6		CALL	PPOSetUp				MOV	MemPtr, OFFSET InDataBlock	;load buffer offset ptr		MOV	DMAXferCnt, 1			;load byte count, 1 byte		MOV	DMACntrlWrd, DMAByteXferIn	;		CALL 	DMASetUp				CALL	PPOOn			CALL	WaitForDMA				MOV	CX, 0FFH			;wait before proceedingSSR2:		CALL	WaitAWhile			;		LOOP	SSR2				;		CALL	PPOOff				;				CMP	InDataBlock[0], 0FAH		;check if scnr sent ACK		JE	SSR3				;got ACK, successful test		MOV	AX, NoSoftResetAck		;load error code		JMP	TestError			;		SSR3:		CMP	ExpIntrpCnt, 01H		;check for expansion intrp		JE	SSR4		MOV	AX, NoExpansionIntrp		;load error code		JMP	TestError			;		SSR4:		MOV	CX, 0FFFFH			;wait before proceedingSSR5:		CALL	WaitAWhile			;let the scanner catch up		CALL	WaitAWhile		LOOP	SSR5		INC	PassCounter				JMP	EndOfPPO;------------------------------------ INIT WS COMM TEST ------------------------------;Routine to test communication between WS and scanner using scanner InitWSComm command		InitComm:	CALL 	CheckAttn			;chk for attn		MOV	ConfigPara, P1CntrlOutCnfg	;P1-Control-Out-DMA-Int-NonMaint-6		CALL 	PPOSetUp			;				MOV	MemPtr, OFFSET InitWSComm1	;load buffer offset ptr		MOV	DMACntrlWrd, DMAByteXferOut	;		MOV	DMAXferCnt, 5				CALL	WaitForReady			;check the status of the device before		CALL 	DMASetUp			;				CALL	SetOpt8259Rdy		MOV	ExpIntrpCnt, 0			;clear counter				CALL 	PPOOn				;		CALL	WaitForDMA				CALL 	CheckAttn			;READ RESPONSE FROM SCANNER							;  WITHOUT DMA				IC0:		CALL	InOutBuffCMP		CMP	ExpIntrpCnt, 01H		;check for expansion intrp		JE	InitCommOK		MOV	AX, NoExpansionIntrp		;		JMP	TestError			;		InitCommOK:	INC	PassCounter		JMP	EndOfPPOInOutBuffCMP:	PUSHA		MOV	CX, MaxRespLength		;check data received with		MOV	SI, 0				; with expected data		MOV	DI, 0IOBC0:		MOV	AL, InitWSCommResp1[DI]		CMP	AL, InDataBlock[SI]		;		JNE	IOBC1				;		INC	SI		INC	DI		LOOP	IOBC0		POPA		RET		IOBC1:		POPA		MOV	AX, InitCommFailed		;load error code		JMP	TestError	ZeroOut:	PUSHA		MOV	CX, InDataBlockSize		MOV	DI, 0				;zero out data bufferZ0:		MOV	InDataBlock[DI], 0		INC	DI		LOOP	Z0		POPA		RET;------------------------------------ DMATrans -----------------------------------				WordTransOut:	MOV	DMACntrlWrd, DMAWordXferOut	;set up DMA values, Transfer word		JMP	DMAOut		ByteTransOut:	MOV	DMACntrlWrd, DMAByteXferOut	;		DMAOut:		MOV	DX, 80H				;Check M/C ID		IN	AX, DX		TEST	AX, 0040H			;Daisy or Dahlia ?		JZ	MCDaisy		TEST	AX, 0020H			;Dahlia or Daybreak ?		JZ	SetForDahlia		MCDaisy:	MOV	MemPtr, OFFSET OutDataBlock	;load buffer offset ptr		MOV	CX, Blockcount		TEST	DMACntrlWrd, WordMode		;Check if DMA Word transfer		JNZ	DMAT0				;jump if WORD mode		SHL	CX, 1     			;convert to number of bytesDMAT0:		MOV	DMAXferCnt, CX				CALL	PPOSetUp		CALL	WaitForReady			;check the status of the device before		CALL 	DMASetUp			; setting up the DMA channel		DownPPO:	INC	PassCounter				CALL	PPOOn				;DMA transfer Starts...		CALL	WaitForDMA			;wait till DMA over		DMAallright:	MOV	DMAIntCount, 0		MOV	AL, [BX].NUMBERofPass		CMP	PassCounter, AL		JNE	DMAOut		JMP	EndOfPPO		;---------------------------- XP-11 (Red Fox) Printer Code ----------------------------SetForDahlia:	INC	PassCounterSetForDahlia1:	PUSH	BX		MOV	DX, PortStatReg		IN	AX, DX		TEST	AX, 0002H		JNZ	SetForDahlia2		MOV	AX, DeviceNotReady		JMP	TestErrorSetForDahlia2:	MOV	Tray, 0		MOV	Paper, 0		MOV	CountOfWhite, 0		MOV	CountOfStripe, 0		MOV	TransferedByte, 0		MOV	BX, 0		MOV	CX, 1000H - 1		CALL	SetB6		MOV	WORD PTR CompDataBlock[BX], SolicitStatus		MOV	MemPtr, OFFSET CompDataBlock		MOV	CX, 1000H		TEST	DMACntrlWrd, WordMode		JNZ	OutSolicitSt						SHL	CX, 1OutSolicitSt:	MOV	DMAXferCnt, CX			CALL	PPOSetUp		MOV	DX, IntrpSelReg		MOV	AX, PPOIntrpLine		OUT	DX, AX		CALL	SetOpt8259Rdy		CALL	WaitForReady					CALL 	DMASetUp							CALL	PPOOn						CALL	WaitForDMA1					CALL	WaitforPrinterInt		 InPrtSts:	MOV	DX, CommandReg		IN	AL, DX		CMP	AL, StandBy		JE	SolicitTray		CMP	AL, DrumRunDown		JE	SolicitTray		CMP	AL, DeveRunDown		JE	SolicitTray		CMP	AL, WarmUp		JE	WaitForPrinter		MOV	AX, DeviceNotReady		JMP	TestError				;Not Standby		WaitForPrinter:	MOV	CX, 100WaitForPrinter1:		CALL	WaitAWhile		LOOP	WaitForPrinter1		JMP	SetForDahlia1		SolicitTray:	MOV	Tray, SloicitUpperTray			SolicitTray1:	MOV	BX, 0		MOV	CX, 1000H - 1		CALL	SetB6		MOV	AL, 0B6H		MOV	AH, Tray		MOV	WORD PTR CompDataBlock[BX], AX		MOV	MemPtr, OFFSET CompDataBlock		MOV	CX, 1000H		TEST	DMACntrlWrd, WordMode		JNZ	OutSolicitTry						SHL	CX, 1OutSolicitTry:	MOV	DMAXferCnt, CX			CALL	PPOSetUp		CALL	WaitForReady					CALL 	DMASetUp		MOV	DX, IntrpSelReg		MOV	AX, PPOIntrpLine		OUT	DX, AX		CALL	SetOpt8259Rdy					INC	PassCounter		CALL	PPOOn						CALL	WaitForDMA1		CALL	WaitforPrinterInt		InTrySts:	MOV	DX, CommandReg		IN	AL, DX		MOV	Paper, AL		CMP	AL, PaperA4		JE	PresetA4		CMP	AL, PaperB4		JE	PresetB4		CMP	AL, PaperB5		JE	PresetA4		CMP	Tray, SolicitLowTray		JE	InTrySts1		MOV	Tray, SolicitLowTray		JMP	SolicitTray1InTrySts1:	MOV	AX, DeviceNotReady			;UpperTray LowerTray Not Ready		JMP	TestError		PresetA4:	MOV	CountOfWhite, 104			;208/2		MOV	CountOfStripe, 20		JMP	OutCompData		PresetB4:	MOV	CountOfWhite, 77			;104/2		MOV	CountOfStripe, 26		JMP	OutCompData				OutCompData:	MOV	BX, 0		MOV	CL, CountOfWhite		MOV	CH, 0		ADD	CX, 32					CALL	White		MOV	CL, CountOfStripe			;10*2*150		MOV	CH, 0Stripe150:	PUSH	CX		MOV	CX, 1		CALL	Black		MOV	CX, 74					;148 / 2Loop74:		CALL	Stripe		Loop	Loop74		ADD	TransferedByte, BX		TEST	DMACntrlWrd, WordMode		JZ	Loop74A		SHR	BX, 1					;BX/2  for Word ModeLoop74A:	MOV	DMAXferCnt, BX		MOV	MemPtr, OFFSET CompDataBlock		CALL	PPOSetUp		CALL	WaitForReady		CALL 	DMASetUp		CALL	PPOOn				CALL	WaitForDMA1		MOV	BX, 0			POP	CX		LOOP	Stripe150		MOV	CX, 1		CALL	Black		MOV	CL, CountOfWhite		MOV	CH, 0		DEC	CX					;CountOfWhite - 1		CALL	White		MOV	BYTE PTR CompDataBlock[BX], 06H		;End of Scan Line 207		INC	BX		ADD	TransferedByte, BX			EndCOMPData:	MOV	CX, TransferedByte		AND	CX, 1		JZ	DataWord		MOV	BYTE PTR CompDataBlock[BX], 0B6H		INC	BXDataWord:	MOV	AX, TransferedByte		AND	AX, 07FFH		MOV	CX, 800H		SUB	CX, AX		SHR	CX, 1					;Convert Word Number		CALL	SetB6		TEST	DMACntrlWrd, WordMode		JZ	SetEnd		SHR	BX, 1					;Convert Word NumberSetEnd:		MOV	DMAXferCnt, BX		MOV	MemPtr, OFFSET CompDataBlock		CALL	PPOSetUp		CALL	WaitForReady		CALL 	DMASetUpOutCMPData:	CALL	PPOOn				CALL	WaitForDMA1		MOV	BX, 0		MOV	CX, 1000H - 2		CALL	SetB6		MOV	BYTE PTR CompDataBlock[BX], 0B6H		INC	BX		CMP	Tray, SloicitUpperTray		JNE	SetFeedLower		MOV	BYTE PTR CompDataBlock[BX], FeedUpper		INC	BX		JMP	SetPageNumberSetFeedLower:	MOV	BYTE PTR CompDataBlock[BX], FeedLower		INC	BXSetPageNumber:	MOV	WORD PTR CompDataBlock[BX], 0		;Page Number		MOV	DMAXferCnt, 1000H			MOV	MemPtr, OFFSET CompDataBlock		TEST	DMACntrlWrd, WordMode		JNZ	OutData		SHL	DMAXferCnt, 1OutData:	CALL	PPOSetUp		CALL	WaitForReady					CALL 	DMASetUp							CALL	PPOOn						CALL	WaitForDMA1				MOV	BX, 100WaitForOutPut:	MOV	CX, 0FFFFHWaitForOutPut1:	MOV	DX, CommandReg		IN	AL, DX		CMP	AL,PaperAtOutPutTray		JE	ExitPrintOut		LOOP	WaitForOutPut1					DEC	BX		JNZ	WaitForOutPut				MOV	AX, NoExpansionIntrp		JMP	TestError		ExitPrintOut:	MOV	DMAIntCount, 0		POP	BXEndDataXfer:	JMP	EndofPPO						;--------------------------------------------------------SetB6:		MOV	WORD PTR CompDataBlock[BX], 0B6B6H		INC	BX		INC	BX		LOOP	SetB6		RET;SetOutB6:	MOV	WORD PTR OutDataBlock[BX], 0B6B6H;		INC	BX;		INC	BX;		LOOP	SetOutB6;		RETWaitforPrinterInt:		MOV	ExpIntrpCnt, 0		MOV	BX, 100WaitForInterrupt:		MOV	CX, 0FFFFHWaitForInterrupt1:		CMP	ExpIntrpCnt, 1		JE	ExitInt		LOOP	WaitForInterrupt1		DEC	BX		JNZ	WaitForInterrupt		MOV	AX, NoExpansionIntrp		JMP	TestError	ExitInt:	RET		White:		MOV	BYTE PTR CompDataBlock[BX], 07H		;Duplcaite line		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 06H		;End of Scan Line		INC	BX		LOOP	White		RET		Black:		MOV	BYTE PTR CompDataBlock[BX], 07H		;Dupilicate line		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 040H	;5 + 3 Word White		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0F9H	;31 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0F9H	;31 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0F9H	;31 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0F9H	;31 Word Black		INC	BX		CMP	Paper, PaperA4		JNE	BlackB4B5		MOV	BYTE PTR CompDataBlock[BX], 081H	;16 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 028H	;5 Word White		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0		;NOP		INC	BX		JMP	BlackENDBlackB4B5:	MOV	BYTE PTR CompDataBlock[BX], 0F9H	;31 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0A1H	;20 Word Black		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 028H	;5 Word White		INC	BXBlackEND:	MOV	BYTE PTR CompDataBlock[BX], 06H		;End of Scan line		INC	BX		LOOP	Black		RET		Stripe:		MOV	DX, CX		MOV	BYTE PTR CompDataBlock[BX], 07H		;Duplicate line		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 40H		;5 + 3 Word White		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0FBH	;31  Dup Word 		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0FBH	;31 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0FBH	;31 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0FBH	;31 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		CMP	Paper, PaperA4		JNE	StripeB4B5		MOV	BYTE PTR CompDataBlock[BX], 07BH	;15 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0CH		;1 Word Raw Data		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00180H	;Raw Data		INC	BX		INC	BX		JMP	StripeEndStripeB4B5:	MOV	BYTE PTR CompDataBlock[BX], 0FBH	;31 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 09BH	;19 Dup Word		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00080H	;Raw Data		INC	BX		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 0CH		;1 Word Raw Data		INC	BX		MOV	WORD PTR CompDataBlock[BX], 00180H	;Raw Data		INC	BX		INC	BXStripeEnd:	MOV	BYTE PTR CompDataBlock[BX], 028H	;5 Word White		INC	BX		MOV	BYTE PTR CompDataBlock[BX], 06H		;End of Scan Line		INC	BX		MOV	CX, DX		RETWaitForDMA1:	PUSHA		MOV	BX, 200HWFD01:		MOV	CX, 0FFFFH		;WFD02:		MOV	DX, PortStatReg		;		IN	AX, DX		TEST	AX, FaultBit OR BusyBit	;Check if device is ready		JZ	WaitForTCEqual01		;IF device OK check TC		CALL	WaitForReady		WaitForTCEqual01:		MOV	DX, DMA1TransferCnt	;DMA Transfer Count regr (TC)			IN	AX, DX		CMP	AX, 0			;wait for TC = 0		JE	WaitForDMA1EXT		;IF not done check device status again		LOOP	WFD02		DEC	BX		JNZ	WFD01WaitForDMA1EXT:	POPA		RET		;-------------------------------- DataRegr LoopBack -----------------------------------		WaitAWhile:	PUSHA				;wait at least 50 uSec		MOV	CX, 08HWAW:		PUSHA				;waste some time		POPA		LOOP	WAW		POPA		RET				DataRLoopB:	PUSHA		CALL	PPOOff			;make sure it's off first		MOV	DX, DataReg		MOV	AX, TestPatrn		OUT	DX, AX			;load pattern first before		CALL	PPOOn			;  turning board on				CALL	WaitAWhile		CALL	PPOOff		IN	AX, DX		MOV	ReturnPatrn, AX		;save return pattern		CMP	AX, TestPatrn		JE	DataRLoopBRet				MOV	AX, LoopBackErrDR	;load error code		JMP	TestError		DataRLoopBRet:	POPA		RET;--------------------------- WORD LOOPBACK  *  DATA REGR MODE ---------------------------;Word loopback test - write a word test pattern into the DATA REGR, wait some delay time;	then read from the DATA REGR.DataRegrLoopback:		MOV	ConfigPara, PPOMaintenance0	;to satisfy HW requirements		CALL	PPOSetUp			;first send maint-scan-out		MOV	ConfigPara, PPOMaintenance	;second, send maint-scan-in			CALL	PPOSetUp			;   is that kludgy or what?!			DRLBAgain:	INC	PassCounter		MOV	AX, [BX].WORDPattern		MOV	TestPatrn, AX		CALL	DataRLoopB		MOV	CX, 010H		;loop 16 times (1 word)		MOV	AX, 01H			;start with bit0DRWalk:		MOV	TestPatrn, AX		;		CALL	DataRLoopB		SHL	AX, 1			;WALKING 1's test		LOOP	DRWalk				MOV	TestPatrn, 05555H		CALL	DataRLoopB				MOV	TestPatrn, 0AAAAH		CALL	DataRLoopB				MOV	TestPatrn, 0A5A5H		CALL	DataRLoopB				MOV	TestPatrn, 05A5AH		CALL	DataRLoopB				MOV	AL, [BX].NUMBERofPass		CMP	PassCounter, AL		JNE	DRLBAgain		EndofDataR:	JMP	EndOfPPO											;------------------------------------ PPO Fault Generate -----------------------------------		PPOFaultGen:	IN	AL, i8259OptionsSlaveAddr1	;Disable interrupt into		OR	AL, PPOIntrpLine		;option i8259 		OUT 	i8259OptionsSlaveAddr1, Al	;		MOV	ConfigPara, DfaultCnfgVal		CALL	PPOSetUp		;6-BusyforEOX-NonMaintmode-Int-NonDMA				MOV	DX, IntrpSelReg		;Select level 1 interrupts in pso board		MOV	AL, PPOIntrpLine	;		OUT	DX, AL		PPOFaultAgain:	MOV	DX, DataReg		;load Data Reg with ANY data		OUT	DX, AX			; 		CALL	PPOOn				INC	PassCounter		CALL	SetOpt8259Rdy				MOV	DX, ConfigReg		;Set Configuration Register		MOV	AX, PPOPromErr		;Will generates Fault error as Prom error		MOV	ConfigPara, AX				MOV	ExpIntrpCnt, 0		OUT	DX, AX			;MaintMode-DirectionIn-Printer				MOV	CX, 0FFFFHPPOWaitPromErr:	CMP	ExpIntrpCnt, 01H	;Prom error		JE	PPOFaultOK		LOOP	PPOWaitPromErr		MOV	AX, NoExpansionIntrp	;load error code		JMP	TestError			PPOFaultOK:	MOV	ConfigPara, DfaultCnfgVal		CALL	PPOSetUp			;reset board and clr intrp		MOV	AL, [BX].NUMBERofPass		CMP	PassCounter, AL		JE	PPOFaultXit		JMP	PPOFaultAgainPPOFaultXit:	JMP	EndOfPPO;----------------------------- Maintenance Regr LoopBack -------------------------------MainRLoopB:	PUSHA		MOV	DX, DataReg		MOV	AX, TestPatrn		OUT	DX, AL				;first test the low byte		CALL	WaitAWhile		MOV	DX, MaintReg		IN	AL, DX				;		MOV	BYTE PTR ReturnPatrn, AL	;save lo byte				MOV	DX, DataReg		MOV	AX, TestPatrn		OUT	DX, AX				;next, test high byte		CALL	WaitAWhile		MOV	DX, MaintReg		IN	AL, DX		MOV	BYTE PTR ReturnPatrn+1, AL	;save hi byte				MOV	AX, ReturnPatrn			;compare values		CMP	AX, TestPatrn		JE	MainRLoopBRet				MOV	AX, LoopBackErrMR		;load error code		JMP	TestErrorMainRLoopBRet:	POPA		RET;-------------------- WORD LOOPBACK  *  MAINTENANCE REGR MODE ---------------------------;Word loopback test - write a word test pattern into the DATA REGR, wait some delay time;	then read from the MAINTENANCE REGR.MaintenanceW:		MOV	ConfigPara, LPOMaintenance		CALL	PPOSetUp		;6-BusyforEOX-Maintmode-Int-NonDMA				CALL	PPOOn			MRLBAgain:	INC	PassCounter		MOV	AX, [BX].WORDPattern		MOV	TestPatrn, AX		CALL	MainRLoopB		MOV	CX, 010H		;loop 16 times (1 word)		MOV	AX, 01H			;start with bit0MRWalk:		MOV	TestPatrn, AX		CALL	MainRLoopB		SHL	AX, 1			;WALKING 1's test		LOOP	MRWalk		BitAlterW:	MOV	TestPatrn, 05555H		CALL	MainRLoopB		AAW:		MOV	TestPatrn, 0AAAAH		CALL	MainRLoopB		A5W:		MOV	TestPatrn, 0A5A5H		CALL	MainRLoopB		FiveAW:		MOV	TestPatrn, 05A5AH		CALL	MainRLoopB				MOV	AL, [BX].NUMBERofPass		CMP	PassCounter, AL		JNE	MRLBAgain		EndofMaintW:	JMP	EndOfPPO					;------------------------------------ LPO  Fault Generate -----------------------------------		LPOFaultGen:	IN	AL, i8259OptionsSlaveAddr1	;Disable interrupt into		OR	AL, PPOIntrpLine		;option i8259 		OUT 	i8259OptionsSlaveAddr1, Al	;		MOV	ConfigPara, DfaultCnfgVal	;6-BusyforEOX-NonMaintmode-Int-NonDMA		CALL	PPOSetUp				LPOFaultAgain:	MOV	DX, IntrpSelReg		;Select level 1 interrupts in pso board		MOV	AL, PPOIntrpLine	;LPO clears this regr on an LPO reset		OUT	DX, AL				CALL	PPOOn				INC	PassCounter		CALL	SetOpt8259Rdy				MOV	DX, ConfigReg		;Set Configuration Register		MOV	AX, LPOPromErr		;Will generates Fault error as Prom error		MOV	ConfigPara, AX				MOV	ExpIntrpCnt, 0		OUT	DX, AX			;MaintMode-DirectionIn-Printer				MOV	CX, 0FFFFHLPOWaitPromErr:	CMP	ExpIntrpCnt, 01H	;Prom error		JE	LPOFaultOK		LOOP	LPOWaitPromErr		MOV	AX, NoExpansionIntrp	;load error code		JMP	TestError			LPOFaultOK:	MOV	ConfigPara, DfaultCnfgVal		CALL	PPOSetUp			;reset board and clr intrp		MOV	AL, [BX].NUMBERofPass		CMP	PassCounter, AL		JE	LPOFaultXit		JMP	LPOFaultAgainLPOFaultXit:	JMP	EndOfPPO		;----------------------------	 Test Error   -------------------------------			TestError:	MOV	BX, SavedSI		;restore values		MOV	SI, BX		MOV	BX, SavedDI		MOV	DI, BX		MOV	BX, [SI].TCBPointer		MOV	[DI].MesaFault, AL		MOV	[BX].PPOFault, AL	;Information saved in TCB		MOV	DX, PortStatReg		;Error=1 : DMA int not detected.		IN	AX, DX			;Error=2 : No PRMerror detected.		MOV	[BX].PORTstatus, AX	;Error=3 : Fault from printer.		MOV	DX, PPOStatReg		;Error=4 : Mismatched data in		IN	AX, DX			;          Byte maintenance mode		MOV	[BX].PPOstatus, AX	;Error=5 : Mismatched data in		MOV	AL, PassCounter		;	   Word maintenance modeBforeEnd:	MOV	[BX].LASTpass, AL	;Error=6 : Printer is not ready    EndOfPPO:	MOV	AX, MonitorPtr		MOV	SP, AX		MOV	AX, DfaultCmdVal		;Disabled		MOV	DX, CommandReg		OUT	DX, AL		CMP	[BX].ErrorLoop, 0		JE	TestErrorRet		jmp	PPOStartTestErrorRet:	Ret;-----------------------------  Wait For DMA  --------------------------------WaitForDMA:	PUSHA		MOV	CX, 0FFFFH		;WFD0:		MOV	DX, PortStatReg		;		IN	AX, DX		TEST	AX, FaultBit OR BusyBit	;Check if device is ready		JZ	WaitForTCEqual0		;IF device OK check TC		CALL	WaitForReady		;IF not OK wait till device ready		WaitForTCEqual0:MOV	DX, DMA1TransferCnt	;DMA Transfer Count regr (TC)			IN	AX, DX		CMP	AX, 0			;wait for TC = 0		JE	WFD1			;IF not done check device status again		LOOP	WFD0				CALL	DMACleanUp		;		MOV	AX, IncompleteXfer	;Xfer failed, load error code		JMP	TestError		WFD1:		CALL	WaitAWhile		;		CALL	WaitForReady		;some delay time		CMP	DMAIntCount, 01H	;Check if we got DMA intrp		JE	WaitForDMARet		;				CALL	DMACleanUp		;		MOV	AX, NoDMAIntrp		;no intrp call error handling		JMP	TestError		WaitForDMARet:	MOV	DMAIntCount, 0		;		POPA		RET		;------------------ Set up interrupt Vectors ---------------------------------IntVectorSetUp:			CLI		PUSHA								MOV	AX,0H		MOV	DS,AX		MOV	BX, ExtTimerDMAV		MOV	AX, OFFSET DMA1IntrpHandler		;DMA1 intrp vector		MOV	[BX].DMA1V,AX				MOV	BX, ExtInterruptV2		MOV	AX, OFFSET ExpansionIntrpHandler	;Expansion intrp vector		MOV	[BX].ExpansionCV,AX									MOV     AX,CS		MOV     DS,AX        	AND     [di].EnableIntC1C2,DMAEnable 	;DMA enable		AND	[di].EnableIntC1C2,EXPIntEnable	;Expansion board int.	        CALL	ExtEnableInt					MOV	AX,SetEXPslot		CALL	ExtOnWrRstCtlReg		;Enable Expansion slot		DisableExtIntrp:IN	AL, i8259OptionsSlaveAddr1	;Disable interrupt until		OR	AL, PPOIntrpLine		;ready 		OUT 	i8259OptionsSlaveAddr1,Al	;				MOV	DX,i186DMAMaskReg		;Un Mask DMA 1 Interrupt		MOV	AX,UnMaskDMA1			;in i186		OUT	DX,AX		POPA		STI		RET	;------------------ PPO board initializaton ----------------------------------PPOSetUp:			PUSHA				MOV	DX, ConfigReg		;Set Configuration Register		MOV	AX, ConfigPara		;		OUT	DX, AX			;			MOV	DX, CommandReg		;reset PPO board and clear intpr bit		MOV	AX, RstPPONClrIntrp		OUT	DX, AX		MOV	AX, DfaultCmdVal	;load default command val		OUT	DX, AX			;PPO OFFTestPoint:	MOV	DX, ConfigReg		;Set Configuration Register		MOV	AX, ConfigPara		;		AND	AX, 0FFE0H		;mask out the bits0-4		OR	AX, BaseCnfgVal		;use values specified by the base cnfg		MOV	ConfigPara, AX		;save new config		OUT	DX, AX			;				POPA		RET		;------------------------------- PPO Go --------------------------------------------					PPOOn:		PUSHA		MOV	AL, PPOGo		MOV	DX, CommandReg		;Turn on PPO		OUT	DX, AL		POPA		RETPPOOff:		PUSHA		MOV	AL, DfaultCmdVal		MOV	DX, CommandReg		;Turn on PPO		OUT	DX, AL		POPA		RET		;------------------------------- WaitForReady ---------------------------------------			;Routine waits for a NOT-BUSY AND NOT-FAULT condition, until these conditions are satisfied	WaitForReady:   PUSHA		MOV	DX, PortStatReg		MOV	CX, 0FFFFH		;load loop value, approx 10S waitWFR0:		IN	AX, DX		TEST	AX, FaultBit OR BusyBit	;Check if device is ready		JZ	WaitForReadyRet		;		CALL	WaitAWhile		;about 50uS wait		CALL	WaitAWhile		;		CALL	WaitAWhile		;		LOOP	WFR0			;loop				CALL	DMACleanUp		;clean up DMA channel				IN	AX, DX		TEST	AX, FaultBit		;device is at fault		JZ	ChkForBusy		;		MOV	AX, DeviceFault		;		JMP	TestError		ChkForBusy:	TEST	AX, BusyBit		;		JZ	XferIncomplete		;		MOV	AX, DeviceNotReady	;device not Ready		JMP	TestError		XferIncomplete:	MOV	DX, DMA1TransferCnt	;check remaining data in TC		IN	AX, DX			;		MOV	TCRemaining, AX		;		MOV	AX, IncompleteXfer	;		JMP	TestError		;		 		WaitForReadyRet:POPA		RET				;------------------ Set up DMA Channel ---------------------------------------------			DMASetUp:	PUSHA				MOV	AX, MemPtr		;BX = source		MOV	BX, CS			;Load segment register of Data Block		SHL	BX, 4			;calculate IOP address		ADD	AX, BX				TEST	DMACntrlWrd, DestIsMem	;Check if Dest is Mem or IO (1 = Memory)		JZ	DestIO			;If dest is NOT memory, then it MUST be IO				MOV	DX, DMA1DstPtrLo	;dest is memory		OUT	DX, AX			;		MOV	DX, DMA1SrcPtrLo	;source is IO		MOV	AX, DataReg		;		OUT	DX, AX		JMP	ContDMASetUp		;				DestIO:		MOV	DX, DMA1SrcPtrLo	;dest is IO		OUT	DX, AX			;		MOV	DX, DMA1DstPtrLo	;source is memory		MOV	AX, DataReg		;		OUT	DX, AX		ContDMASetUp:	XOR	AX, AX			;AX = 0		MOV	DX, DMA1SrcPtrHi	;both hi ptrs are 0		OUT	DX, AX		MOV	DX, DMA1DstPtrHi		OUT	DX, AX				MOV	DX, DMA1TransferCnt	;load transfer count		MOV	AX, DMAXferCnt		;		OUT	DX, AX				MOV	DX, DMA1CntrlWrdReg	;load control word value		MOV	AX, DMACntrlWrd		;		OUT	DX,AX			;				POPA		RET				 DMACleanUp:	PUSHA				; 		MOV	DX, DMA1CntrlWrdReg	;load default DMA control word value 		MOV	AX, DMACntrlWrd		;		AND	AX, DMAStopBit		;		OUT	DX, AX			;		POPA				;		RET		;---------------------------------  DMA Interrupt Handler----------------------;Routine handles DMA1 interruptsDMA1IntrpHandler:		CLI				 	;disable interrupts		PUSHA		INC	DMAIntCount					MOV	DI,ExtMCBlock			;Index to FCB		MOV	SI,ExtMFCBlock 			;Index to Monitor FCB		MOV 	BX,[SI].TCBPointer		;Get Index to TCB				MOV	AX,i186EOIdma1			;Send EOI to i186 DMA1		MOV	DX,i186EOIReg		OUT	DX,AX				MOV	DX,i186InServReg		;Check for any pending Int..		IN	AX,DX				;in the i186		CMP	AX,0		JNE	EndofDMARet					MOV	AL, nonSpecificEOI		;Write an EOI command to the 			OUT	i8259MasterAddr0, AL 		;master i8259		EndofDMARet:	POPA		STI					;Reenable the interrupts		IRET		;---------------------------------------------------------------------------------------;Routine handles expansion interrupts;ONLY place where the Interrupt line is ENABLEDSetOpt8259Rdy:  PUSHA		MOV	AL, NonSpecificEOI		;Write an EOI command to the 		OUT	i8259OptionsSlaveAddr0, AL	;EOI to Option Slave				IN	AL, i8259OptionsSlaveAddr1	;Enable intrp of option i8259		AND	AL, PPOIntEnable		;for PPO		OUT 	i8259OptionsSlaveAddr1,Al	;				POPA		RETExpansionIntrpHandler:		CLI		PUSHA		IN	AL, i8259OptionsSlaveAddr1	;Disable interrupt into		OR	AL, PPOIntrpLine		;option i8259 		OUT 	i8259OptionsSlaveAddr1, Al	;FH0:		INC	ExpIntrpCnt		TestFault:	MOV	DI,ExtMCBlock			;Index to FCB		MOV	SI,ExtMFCBlock 			;Index to Monitor FCB		MOV 	BX,[SI].TCBPointer		;Get Index to TCB				MOV	AL,i8259Poll			;Acknowledge the Option slave		OUT	i8259OptionsSlaveAddr0,AL	;upon intrrupt received	       	IN	AL,i8259OptionsSlaveAddr0		 		MOV	AL,NonSpecificEOI		;Write an EOI command to the 		OUT	i8259OptionsSlaveAddr0,AL	;EOI to Option Slave				MOV	Al,0BH				;OCW3_ 00BH		OUT  	i8259OptionsSlaveAddr0,Al	;OCW3_ 00Bh		IN	Al,i8259OptionsSlaveAddr0	;Read Option Slave 8259 IS register		CMP	Al,00H				;Check if another int is in service		JNZ	FaultReturn						MOV	AL,nonSpecificEOI		;EOI command to the Slave i8259 		OUT	i8259SlaveAddr0,AL		;Clear Slave Controller				MOV	Al,0BH				;OCW3_ 00BH		OUT  	i8259SlaveAddr0,Al		;OCW3_ 00Bh		IN	Al,i8259SlaveAddr0		;Read Slave 8259 IS register		CMP	Al,00H				;Check if another int is in service		JNZ	FaultReturn			;						MOV	AL,nonSpecificEOI		;Write an EOI command to the 			OUT	i8259MasterAddr0,AL 		;master i8259				FaultReturn:	NOP		EIHRet:		POPA		STI		IRET					;-----------------------------------------------------------------------------------PPOPreProcess:	PUSHA		MOV	DI, OFFSET OutDataBlock		MOV	BX, 0PPOOutDataLoop:	MOV	SI, OFFSET DataPattern0		MOV	CX, 108PPOPattern0:	MOV	AL, [SI]		MOV	[DI], AL		INC	SI		INC	DI		LOOP	PPOPattern0		MOV	SI, BX		SHL	SI, 4		ADD	SI, BX		;SI = BX * 17		ADD	SI, OFFSET DataPattern1		MOV	CX, 17PPOPatternX:	MOV	AL, [SI]		MOV	[DI], AL		INC	SI		INC	DI		LOOP	PPOPatternX		INC	BX		CMP	BX, 16		JE	PPOOutDataExit		MOV	[DI], 0A0DH		ADD	DI, 2		JMP	PPOOutDataLoopPPOOutDataExit:	MOV	[DI], 0A0AH		ADD	DI, 2		MOV	[DI], 0D0CH		POPA				MOV 	BX, 18			;Read EEPROM option word 18		CALL	ExtReadEEProm		;pass BX = EEProm word address (0-63)		MOV	BX, [SI].TCBPointer	;returns AX = EEProm data (16 bits)		MOV	BoardType, AH		;save EEPROM upper byte ;		AND	AH, 0F8H		;check if configured for Parallel Port						;("AND 0F8H" commented out)		CMP	AH, LPOption		;Check If LPO		JE	PPOPreProcRet		;		CheckIfSPO:	CMP	AH, SPOption		;Check If SPO		JE	PPOPreProcRet		;SkipParallel:	mov 	BX, [SI].TCBPointer	;smash FCB if not configured or		mov	AL, [SI].TestNS		;...if PreProc first pass		mov	[SI].TestN, al		mov 	[SI].TestNE, al		or 	BYTE PTR [BX][1], SkipTestBit 	;also, skip this test		PPOPreProcRet:	RETPPOFRUList:	mov 	Bx, 0 	  	mov 	BL, [SI].TestN	  	SHL 	Bx, 1	  	mov 	ax, WORD PTR PPOList0 [bx]	  	CALL 	ExtMessagePPOFRUList1:	CALL	ExtDoRunTimeWork	   	cmp 	[di].CurrentInputByte, KSP	   	jne 	PPOFRUList1	   	Ret		PPODummy:	Ret;FRU Code: 0 - IOP, 1 - MPB, 2 - DCM, 5 - OPTIONS,;	   B - PARALLEL PORT DEVICE (PRINTER/SCANNER), F - CABLES/CONNECTIONSPPOList0 DW 5021H	;Test #00 	 DW 5021H	;Test #01 	 DW 0BF50H	;Test #02	 DW 0BF50H	;Test #03 	 DW 5021H	;Test #04	  	 DW 0BF50H	;Test #05 	 DW 0BF50H	;Test #06	 DW 0FB50H	;Test #07	 DW 5021H	;Test #08	 DW 5021H	;Test #09 	 DW 0FB50H	;Test #0A	 	 DW 0BF50H	;Test #0B	 		;------------------------------ LOCAL VARIABLES -------------------------------Blockcount	DW	1018		TransType	DW	00HDMAIntCount	DB	00HspareByte	DB	00HExpIntrpCnt	DB	00HPassCounter	DB	00HConfigPara	DW	0000HTCRemaining	DW	0HTestPatrn	DW	0HReturnPatrn	DW	0HBaseCnfgVal	DW	0HMonitorPtr	DW	00SavedSI		DW	0H		;monitor ptrs.SavedDI		DW	0HMemPtr		DW	0HSrcPtrLo	DW	0HSrcPtrHi	DW	0HDstPtrLo	DW	0HDstPtrHi	DW	0HDMAXferCnt	DW	0HDMACntrlWrd	DW	0HBoardType	DB	0H		;option word value from the EEPROMProcessorType	DB	0H;------------------------------------------------------------------------------InDataBlockSize	EQU	0FH		;max input data length in bytesMaxRespLength	EQU	05H		;max response length in bytesIITResetCmd	DB	0E1H, 00, 0E1H;---- FOR P1 Inca Scanner Only!;InitWSComm0	DB	0E2H, 02, 12H, 34H, 0C6H;InitWSComm1	DB	0E2H, 02, 0AAH, 55H, 1FH;InitWSCommResp0	DB	0FAH, 0F2H, 03, 12H, 34H, 3AH, 0EDH;InitWSCommResp1	DB	0FAH, 0F2H, 03, 0AAH, 55H, 3AH, 34H;---- FOR B0 Inca Scanner Only!InitWSComm0	DB	0E0H, 02, 12H, 34H, 0C4HInitWSComm1	DB	0E0H, 02, 0AAH, 55H, 1DH;Inca state not compare-tested since it may varyInitWSCommResp0	DB	0FAH, 0F0H, 03, 12H, 34HInitWSCommResp1	DB	0FAH, 0F0H, 03, 0AAH, 55HInDataBlock	DB	InDataBlockSize	DUP (0);------------------ Block of tranfered data --------------------------------------------------DataPattern0	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ12345 abcdefghijklmnopqrstuvwxyz6789'		Dw	0A0DH		DB	'This is the end of the line as you can see. 'DataPattern1	DB	'11111111111111111'DataPattern2	DB	'22222222222222222'DataPattern3	DB	'33333333333333333'DataPattern4	DB	'44444444444444444'DataPattern5	DB	'55555555555555555'DataPattern6	DB	'66666666666666666'DataPattern7	DB	'77777777777777777'DataPattern8	DB	'88888888888888888'DataPattern9	DB	'99999999999999999'DataPattern10	DB	'10101010101010101'DataPattern11	DB	'11 11 11 11 11 11'DataPattern12	DB	'12 12 12 12 12 12'DataPattern13	DB	'13 13 13 13 13 13'DataPattern14	DB	'14 14 14 14 14 14'DataPattern15	DB	'15 15 15 15 15 15'DataPattern16	DB	'16 16 16 16 16 16'OutDataBlock	DB	2134 DUP (?);---------------------------- XP-11 (Red Fox) Printer Code ----------------------------		ORG	TestCodeLoc2Tray		DB	0Paper		DB	0CountOfWhite	DB	0CountOfStripe	DB	0TransferedByte	DW	0		CompDataBlock	DB	5000H DUP (?)EndCpDtBlck:MonitorCode	ENDS		END