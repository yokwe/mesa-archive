$	DEBUG MOD186;Last Edited by U. Khulusi, 3-13-85;This program is configured to test FDC internal Loopback, Interface Loopback, ;Wire External Loopback;This program was taken in parts from i586RevC.asm; Edited by JBinkley & S. T. Chang, 5-Jun-84  8:50:59 and ; Mostly taken from CkEnet.asm by S. Tom Chang 30-May-84 13:57:15 ;;; This program tests the i82586 and i82501 on RevC and higher IOP stitchweld; boards...	NAME	i82586$	TITLE(i82586 Ether chips Test Code)$	NOLIST		;Next lines includes MoonSys.def MoonLink.def and local def$	INCLUDE(MoonSys.def)$	INCLUDE(MoonLink.def);;ConstatntsISCPBase	EQU	0A0H	;temporarily 4x28H, Types 028h-029h ISCP				;Types 02Ah-02Bh E-Net SCB;CommandsCmdAddSetup	EQU	1	;Setup Individual AddressCmdConfig	EQU	2	;ConfigureCmdXmit		EQU	4	;TransmitCmdDump		EQU	6	;DumpCmdDiag		EQU	7	;Diagnose;InitChip	EQU	1	;Flag of 586 Initialization, should use DBAckCXCNA	EQU	0A000HAckFR		EQU	4000HStartCU		EQU	100HStartRU		EQU	10HELIntr		EQU	0A0HRecBufSize	EQU	2C0H	;704DEthLoopBk	EQU	83FFHRstENetIntr	EQU	0C0H;ENet test parametersENetNoStop	EQU 01H			;Don't stop for ErrorENetNoMemParity	EQU 80H			;Don't Log Parity Errors;;RegistersENetAttn	EQU	0A0H	;ENet Channel Attention Reg;ENetBlock	STRUC		;Ethernet Test Control Block Structure startENetRetryCount	DB 00H		ENetTstCtl	DB 01H		;00H= perform one Test  				;01H= perform all Tests ENetPageParity DB  0ENetBankParity DB  0ENetErrCtl	DB 00H		;Error Control				;Bits 0= 0= Stop on Error				;     0= 1= Don't stop if Error 				;     7= 1= Don't log parity errorsENetTstType	DB 00H		;Holds the test to be performed				;00H= IA Setup				;01H= Configure Cmd, Dump Cmd				;02H= Transmit with Receive (controller loopback)				;03H= Transmit without Receive (controller loopback)				;04H= Transmit with Receive (Interface loopback)				;05H= Transmit without Receive (Interface loopback)				;06H= Transmit with Receive (Wire loopback)				;07H=Transmit without Receive (Wire loopback)				ENetPacketSize	DW 00H		;Size of PacketEOutMapReg 	DB 00H		EInMapReg 	DB 00HEOutBank 	DB 00H		EInBank 	DB 00H				ENetIntCount	DB 00H		;number of interrupts received				;only valid with EthIntrHandler fault								;08H= Diagnose CmdENetFault	DB 00H		;Holds the fault type				;01H= Interrupt Count Error				;02H= SetUpISCP				;03H= No Reset				;04H= CU Error				;05H= Dump verify				;06H= Recieve Buffer Data error				;07H= Recieve Buffer Bad On Xmit Only				;08H= Xmit Error				;09H= Recieve ErrorENetBlock	ENDS		;Ethernet Test Control Block Structure end;$	LIST			;NOLIST included MoonSys.def MoonLink.def and local def;;----------------------------------------------------------------------MonitorCode	SEGMENT	COMMON		ASSUME	CS:MonitorCode, SS: MonitorCode, DS: MonitorCode                ORG TestCodeLoc		JMP ENetStart		jmp ENetPreProcess		jmp ENetFRUList		jmp ENetDummy		jmp ENetDummy		jmp ENetDummy		jmp ENetDummy				ORG EthTestCodeLoc;----------------------------------------------------------------------; Data segment 	;SCBSCBStat       	DW	?	;SCB's StatusSCBComm		DW	?	;SCB's CommunicationCBLOffset	DW	?	;SCB's CBL OffsetRFAOffset	DW	?	;SCB's RFA Offset;SetupIACmd	DW	3 DUP (0)	;Cmd to setup Host Address;Daisy Host NumberHostNumWd1	DW	0	;Host Number Word 1HostNumWd2	DW	0ABCDH	;Host Number Word 2HostNumWd3	DW	2	;Host Number Word 3;;Broadcasting Host NumberTargHostNumWd1	DW	0FFFFH	;Target Host Number Word 1TargHostNumWd2	DW	0FFFFH	;Target Host Number Word 2TargHostNumWd3	DW	0FFFFH	;Target Host Number Word 3;;Config commandConfigCmd	DW	3 DUP (0)	;Cmd to setup configByteCnt		DB	(0CH)		;byte count of this Cmd, 0CHFifoLim		DB	(0CH)		;FIFO limit, 8SaveBadF	DB	(3FH)		;save bad frameLoopbkAT	DB	(26H)		;Ext/Int Loopback, PreamLen, AT, AddrLenBackOff		DB	(8H)		;BackOff methodeIntFrameSp	DB	(60H)		;InterFrame space, 9.6 usecRetrySlot	DW	(0FA00H)	;** WORD **, Retry number, Slot TimeCRCPromis	DB	(0)		;CRC length, PromiscuousCollCarr	DB	(0)		;Collision, Carrier SenseMinFrameLen	DW	(0FF40H)		;** WORD **, minimum frame length;;Test OptionsEIntrCount	DB	?	;ENet Interrupt countENetRst		DB	?WorkingFlag	DW	?NTestSize	DW	?	;in bytesOddByteNum	DW	?WXPointer	DW	?NXPointer	DW	?CkPointer	DW	?PRPointer	DW	?StopSeqNum	DW	?LoopBackType	DW	0	;1:Controller(Int), 2:Interface(Ext), 3:Wire(Ext) BytesLoopbk	DW	?;ExitPointer	DW 	0	;Pointer to Stack TOP for exit;;CommandBuffersCmdBuf1		DW	8 DUP (?)CmdBuf4		DW	8 DUP (?);;Transmit Buffer DescriptorTBD12		DW	4 DUP (?)	;TBD42		DW	4 DUP (?)	;;;Receive Frame DescriptorRFD1		DW	11 DUP (?)RFD4		DW	11 DUP (?);;Receive Buffer DescriptorRBD12		DW	5 DUP (?)RBD42		DW	5 DUP (?);Packet HeaderPktHeader	DW	16 DUP (?)EMapOut		DW 0EMapIn		DW 0EOutES		DW 0EInES		DW 0ECRetryCount	DB 0TstCtl		DB	00H	TstType		DB 	00HSaveRet		DW 	00H;Dump areaEnetDumpBuf	DW	32 DUP (?)	;not enough, need 170 bytesSCBBase       	EQU	0	;SCBBaseHigh     EQU	0F0H	;SCBOffset	EQU     OFFSET SCBStat;;--------------------------------------------;      C  O  D  EENetDummy:    RetENetStart:	MOV	BX,[SI].TCBPointer	;Get Index to Test Control Block	mov     ax,0        mov al, [bx].EOutMapReg 	shl ax,1        mov   EMapOut,ax	mov  cl ,12	shl ax,cl        mov   EOutES,ax	or  EMapOut,0F0H		mov     ax,0        mov al, [bx].EInMapReg 	shl ax,1        mov   EMapIn,ax	mov  cl ,12	shl ax,cl        mov   EInES,ax	or  EMapIn,0F0H		mov     dx,Map0IOP        add    dl,[bx].EOutMapReg		mov al, [bx].EOutBank 	OUT 	dx,al	mov     dx,Map0IOP        add    dl,[bx].EInMapReg		mov al, [bx].EInBank 	OUT 	dx,al	;Initialize parameters from Control Block	MOV	[bx].ENetFault, 0	;Clear fault 	MOV	[bx].ENetIntCount, 0	;Clear the Interrupt count	MOV	EIntrCount, 0		;	MOV	ENetRst, 0		;;;check if control block data is valid	MOV	Ax, [bx].ENetPacketSize		MOV	BytesLoopbk, Ax	MOV	Al, [bx].ENetTstCtl	;	MOV	TstCtl, Al	MOV	Al, [bx].ENetTstType	;	MOV	TstType, Al		;	CMP	Al, 08H			;	JLE	EnetTstStart		;EnetStartRet:	OR	[di].IOPFault, FileErrorCode ; Skip test	RETEnetTstStart:        mov ECRetryCount,1	MOV	ExitPointer, SP		;Store TOP of Stack point to exit	CALL	Seti586IntVectors ;Establish interrupt vector for Ethernet	CALL	SetUpISCP	;Setup ISCP	INC	EIntrCount	CALL	ResetChip	;Reset Chip and cause it to read ISCP	CALL	SetUpDefaults	;Setup default options	CALL	SetUpCBLs	;Setup CBL, RFA, TBD, FBL	Call InterrupCheckIntCountOK1:	MOV	BX,[SI].TCBPointer	;Get Index to Test Control Block	jmp	BasicCheck	;verify chip's basic functions	;-------------------------------------------------------------------InterrupCheck:TEST EIntrCount, 0	;check if proper number of interrupts	      JNZ   InterrupErr	      ret	InterrupErr:  MOV	Al, 01H				;Something is wrong	      JMP	ENetError;-------------------------------------------------------------------;  SUBROUTINE :  SetUpISCPSetUpISCP:CLI	MOV AX,0        MOV  DS,AX	MOV	BX, ISCPBase	;	MOV	AX, InitChip	;	MOV	[BX], AX	;set busy flag in ISCP	MOV	BX, ISCPBase+2	;	MOV	AX, SCBOffset	;set SCBOffset in ISCP	MOV	[BX], AX		MOV	BX, ISCPBase+4	;	MOV	AX, CS		MOV  cl,4	shl ax,cl	MOV	[BX], AX	;set SCBBase in ISCP	MOV	BX, ISCPBase+6	;	MOV	AX, SCBBaseHigh	;	MOV	[BX], AX	;set SCBBase in ISCP	MOV  AX,CS	MOV  DS,AX	STI	RET	;-------------------------------------------------------------------;  SUBROUTINE :  SetUpDefaultsSetUpDefaults:		MOV	NTestSize, 32H	MOV	OddByteNum, 16	;was working with 8	MOV	WXPointer, OFFSET CmdBuf1	MOV	NXPointer, OFFSET CmdBuf1	MOV	CkPointer, OFFSET CmdBuf1	MOV	PRPointer, OFFSET RFD1	MOV	StopSeqNum, 0	;0: Don't Stop; Stop on NonZero value	MOV	WorkingFlag, 0	CALL	SetupHeader	RET;-------------------------------------------------------------------;  SUBROUTINE :  SetUpCBLsSetUpCBLs:		CALL	SetupXmit	CALL	SetupRcv	RET		;End of SetupEcho;-------------------------------------------------------------------SetupXmit:	MOV	CmdBuf1 + 4, OFFSET CmdBuf1	;	MOV	CmdBuf1 + 6, OFFSET TBD12		;	MOV	BX, TargHostNumWd1	;Dest Add	MOV	CmdBuf1 + 8, BX		;Dest Add	MOV	CmdBuf4 + 8, BX		;Dest Add	MOV	BX, TargHostNumWd2	;	MOV	CmdBuf1 + 0AH, BX	;	MOV	CmdBuf4 + 0AH, BX	;SetTarg:	MOV	BX, TargHostNumWd3	;	MOV	CmdBuf1 + 0CH, BX	;	MOV	CmdBuf4 + 0CH, BX	;	MOV	CmdBuf1 + 0EH, 06H	;Packet TypeLink3to4:	MOV	CmdBuf4 + 4, OFFSET CmdBuf4	;	MOV	CmdBuf4 + 6, OFFSET TBD42	;	MOV	CmdBuf4 + 0EH, 06H	;Packet TypeTBD1Size:	MOV	BX, NTestSize		;	SUB	BX, OddByteNum		;	OR	BX, 8000H		;TBD2Size:		MOV 	TBD12, BX		;	MOV	TBD42, BX		;	MOV	TBD12 + 6, 0F0H		;forced top four bits to 0FH	MOV	TBD12 + 4, OFFSET XmitBuf12	MOV AX,EMapOut		;	MOV	TBD42 + 6, AX		;forced top four bits to 0FH	MOV	TBD42 + 4, OFFSET XmitBuf42	;use 24 bits address	RET				;End of SetupXmit	SetupRcv:	MOV	RFD1, 0			;reset status bits	MOV	RFD1 + 2, 0		;reset control bits	MOV	RFD4, 0			;reset status bits	MOV	RFD4 + 2, 0		;reset control bits	MOV	RFD1 + 4, OFFSET RFD1	;link to RFD2	MOV	RFD4 + 4, OFFSET RFD4	;link to RFD1	MOV	RFD1 + 6, OFFSET RBD12	;	MOV	RFD4 + 6, OFFSET RBD42	;InitCnt:	MOV	RBD12, 0		;reset actual count	MOV	RBD42, 0		;reset actual countLinkNext:	MOV	RBD12 + 2, OFFSET RBD12	;link to next RBD	MOV	RBD42 + 2, OFFSET RBD42	;link to next RBDShortAdd:	MOV	RBD12 + 6, 0F0H		;forced top four bits to 0FH	MOV AX,EMapIn		;	MOV	RBD42 + 6, AX		;forced top four bits to 0FHRBAdd:		MOV	RBD12 + 4, OFFSET RB12	;use 24 bits address	MOV	RBD42 + 4, OFFSET RB42	;use 24 bits addressRBDTwos:	MOV	BX, RecBufSize		;	SUB	BX, OddByteNum		;	MOV	RBD12 + 8, BX		;	MOV	RBD42 + 8, BX		;	RET				;End of SetupRcv         ; ORG TestCodeLoc1;-------------------------------------------------------------------;  SUBROUTINE :  SetupHeaderSetupHeader:		MOV	PktHeader, 0FFFFH	;CheckSum	MOV	PktHeader + 2, 8201H	;Length	MOV	PktHeader + 4, 0200H	;Echo	MOV	PktHeader + 6, 0	;NetNum	MOV	PktHeader + 8, 0	;NetNum	MOV	BX, TargHostNumWd1	;DestAdd	MOV	PktHeader + 0AH, BX	;DestAdd	MOV	BX, TargHostNumWd2	;DestAdd	MOV	PktHeader + 0CH, BX	;DestAdd	MOV	BX, TargHostNumWd3	;DestAdd	MOV	PktHeader + 0EH, BX	;DestAdd	MOV	PktHeader + 10H, 200H	;SocketNumSourceNet:		MOV	PktHeader + 12H, 0	;NetNum	MOV	PktHeader + 14H, 0	;NetNum	MOV	BX, HostNumWd1		;SourceAdd	MOV	PktHeader + 16H, BX	;SourceAdd	MOV	BX, HostNumWd2		;SourceAdd	MOV	PktHeader + 18H, BX	;SourceAdd	MOV	BX, HostNumWd3		;SourceAdd	MOV	PktHeader + 1AH, BX	;SourceAdd	MOV	PktHeader + 1CH, 800H	;SocketNum	MOV	PktHeader + 1EH, 100H	;EchoReq	RET				;;-------------------------------------------------------------------;  SUBROUTINE :  ResetChip ResetChip:	MOV	ENetRst, 1			MOV	AX, RstENetCtlr			CALL    ExtOffWrRstCtlReg	MOV	AX, EnableMem		Call    ExtOffWrCtlReg		MOV	AX, RstENetCtlr			CALL    ExtOnWrRstCtlReg	MOV	AX, NoResets		        OUT	ENetAttn, Al			CALL    ResetDelay	MOV	AX, EnableMem		Call    ExtOnWrCtlReg	CLI	MOV AX,0        MOV  DS,AX        MOV	BX, ISCPBase	CMP	WORD PTR[BX], 0	JNZ	ResetHalt	MOV  AX,CS	MOV  DS,AX	STI ResetOK:	MOV	SCBStat, 0		;reset status bits	MOV	SCBComm, AckCXCNA	;acknowledge the RU-interrupt Nop	OUT	ENetAttn, AX		;ENet Channel Attention	RET	ResetDelay:	MOV	CX,1FFH				Resetloop:	LOOP	Resetloop						RETResetHalt:MOV  AX,CS	MOV  DS,AX	STI	MOV	Al, 3		;no reset error code	jmp	ENetError ;-------------------------------------------------------------------;  SUBROUTINE :  BasicCheck BasicCheck:CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 00H		;IA Setup	JLE	Tst0			;	JMP	NxtTst1	Tst0:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst0ETst0E:  		CALL	StartChip		;	Call InterrupCheck	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst1			;	RETNxtTst1:		CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 01H		;Configure Cmd, Dump Cmd	JLE	Tst1			;	JMP	NxtTst2	Tst1:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst1E	Tst1E: 		CALL	ClearDumpBuf	CALL	ExDump	CALL	VerifyDump	Call InterrupCheck	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst2			;	RETNxtTst2:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 02H		;Transmit with Receive	JLE	Tst2			;	JMP	NxtTst3	Tst2:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst2E		Tst2E:		CALL	SetupLoopData	CALL	LoopBackCont		;indicate loopback from controller	CALL	CheckXmit	CALL	CheckReciever	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst3			;	RETNxtTst3:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 03H		;Transmit without Receive	JLE	Tst3		JMP	NxtTst4	Tst3:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst3E		Tst3E:		CALL	SetupLoopData	MOV	CmdBuf4 + 8, 0F0F0H	;des address 1	MOV	CmdBuf4 + 0AH, 0F0F0H	;des address 2	MOV	CmdBuf4 + 0BH, 0F0F0H	;des address 3	CALL	LoopBackCont		;indicate loopback from controller	CALL	CheckXmit	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst4			;	RET	NxtTst4:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 04H		;Transmit with Receive	JLE	Tst4			;	JMP	NxtTst5	Tst4:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst4E	Tst4E:	CALL	SetupLoopData	CALL	LoopBackIntf		;indicate loopback from Interface	CALL	CheckXmit	CALL	CheckReciever	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst5			;	RETNxtTst5:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 05H		;Transmit without Receive	JLE	Tst5		JMP	NxtTst6	Tst5:			MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst5ETst5E:	CALL	SetupLoopData	MOV	CmdBuf4 + 8, 0F0F0H	;des address 1	MOV	CmdBuf4 + 0AH, 0F0F0H	;des address 2	MOV	CmdBuf4 + 0BH, 0F0F0H	;des address 3	CALL	LoopBackIntf		;indicate loopback from Interface	CALL	CheckXmit	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst6			;	RETNxtTst6:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 06H		;Transmit with Receive	JLE	Tst6			;	JMP	NxtTst7	Tst6:	MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst6ETst6E:	CALL	SetupLoopData	CALL	LoopBackWire		;	CALL	CheckXmit	CALL	CheckReciever	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst7			;	RETNxtTst7:	CALL	ExtDoRunTimeWork	;keyboard control	CMP	TstType, 07H		;Transmit without Receive	JLE	Tst7		JMP	NxtTst8Tst7:		MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET Tst7ETst7E:  CALL	SetupLoopData	MOV	CmdBuf4 + 8, 0F0F0H	;des address 1	MOV	CmdBuf4 + 0AH, 0F0F0H	;des address 2	MOV	CmdBuf4 + 0BH, 0F0F0H	;des address 3	CALL	LoopBackWire	CALL	CheckXmit	CALL	CheckLpBk	CMP	TstCtl, 0		;perform one test only?	JNE	NxtTst8			;	RET	NxtTst8:		MOV	Al, [bx].ENetRetryCount	mov ECRetryCount,al	mov SaveRet,OFFSET NxtTst8E	NxtTst8E:CALL	ExtDoRunTimeWork	;keyboard control	CALL	DiagnoseTst		;Diagnose test	Call InterrupCheck	RET;-------------------------------------------------------------------;  SUBROUTINE :  ClearDumpBuf ClearDumpBuf:	PUSH	SI 	MOV	CX, 060H		;Setup loop counter, 96 words	XOR	SI, SI			;Zero the index	MOV	BX, 09ABCH		;anything unusalClrDBuf:	MOV	RB12[SI], BX		;	ADD	SI, 2			;	LOOP	ClrDBuf			;	POP	SI	RET;-------------------------------------------------------------------;  SUBROUTINE :  ExDump ExDump:; For reason unknown, chip will not execute dump command, so added a config before it	MOV	AX, 0			;no interrupt	MOV	ConfigCmd, AX		;reset status	MOV	AL, CmdConfig		;form Cmd	MOV	ConfigCmd + 2, AX	;	MOV	ConfigCmd + 4, OFFSET CmdBuf4	;chain the commands	MOV	ByteCnt, 4		;only modifying LoopbkAT; added for testing, will decide later if to remove the above; for unknown reason must use Interrupt bit to get CU completion bit	MOV	AH, ELIntr		;EndList, Interrupt	MOV	AL, CmdDump		;form Cmd	MOV	CmdBuf4 + 2, AX		;	MOV	AX, 0			;no interrupt	MOV	CmdBuf4, AX		;reset status	MOV	CmdBuf4 + 4, AX		;no Cmd chainning	MOV	CmdBuf4 + 6, OFFSET RB12 	;pointed to Dump Buffer	MOV	SCBComm, StartCU	;StartCU, clear the Reset bit	MOV	RFAOffset, OFFSET RFD1	;dump requires RFD	MOV	CBLOffset, OFFSET ConfigCmd	;link to a Cmd	CALL	ExCmd	RET;-------------------------------------------------------------------;  SUBROUTINE :  ExCmd ExCmd:	INC	EIntrCount	;	OUT	ENetAttn, AX	;ENet Channel Attention	NOP			;wait to make sure 586 started CU	MOV	CX, 1000H	;Setup loop counter	 Polling:	MOV	AX, SCBStat	;get status word	AND	AX, 0A000H	;look at CU completion bit	CMP	AX, 0A000H	JE	CmdExed		;CU has executed OK	LOOP	Polling				MOV	Al, 4		; CU Error	jmp	ENetError	CmdExed:	MOV	SCBStat, 0	;reset status bits	MOV	AX, AckCXCNA	;	OR	AX, AckFR	MOV	SCBComm, AX	;acknowledge the CU and  RU interrupt Nop	OUT	ENetAttn, AX	;ENet Channel Attention	RET	;-------------------------------------------------------------------;  SUBROUTINE :  VerifyDump VerifyDump:	MOV	BX, RB12	Test    BX, 0FH		;check if 586 write into this location	JZ	DumpStarted	JMP	DumpHaltDumpStarted:	MOV	AX, BX	AND	AX, 0F00H	;get FIFO limit	MOV	DX, 0	MOV	DH, FifoLim	SUB	AX, DX	JZ	FIFOGood	JMP	DumpHaltFIFOGood:	MOV	BX, RB12 + 2	MOV	AL, SaveBadF	MOV	AH, LoopbkAT	XOR	AX, BX	JZ	LpBkATGood	JMP	DumpHaltLpBkATGood:	MOV	BX, RB12 + 4	MOV	AL, BackOff	MOV	AH, IntFrameSp	XOR	AX, BX	JZ	IntrFrameGood	JMP	DumpHaltIntrFrameGood:	MOV	AX, RB12 + 6	XOR	AX, RetrySlot	JZ	RetrySlotGood	JMP	DumpHaltRetrySlotGood:	MOV	BX, RB12 + 8	MOV	AL, CRCPromis	MOV	AH, CollCarr	XOR	AX, BX	JZ	CollCRCGood	JMP	DumpHaltCollCRCGood:	MOV	AX, RB12 + 0AH	XOR	AX, MinFrameLen	JZ	IAddr1Good	JMP	DumpHaltIAddr1Good:	MOV	AX, RB12 + 0CH	AND	AX, 0FFF7H	XOR	AX, 0FFF7H	;IA  Least Significant Word	JZ	IAddr2Good	JMP	DumpHaltIAddr2Good:	MOV	AX, RB12 + 0EH	XOR	AX, 0FFFFH	;IA  middle Word	JZ	IAddr3Good	JMP	DumpHaltIAddr3Good:	MOV	AX, RB12 + 010H	XOR	AX, 0FFFFH	;IA  Most Significant Word	JZ	MinFrameGood	JMP	DumpHaltMinFrameGood:	RETDumpHalt:	MOV	Al, 05H		;Dump verify test error code	jmp	ENetError;-------------------------------------------------------------------;  SUBROUTINE :  SetupLoopData ; started with 0, +1 per byteSetupLoopData:	PUSH	SI 	MOV	AX,EOutES        MOV	ES, AX	MOV	CX, BytesLoopbk		;Setup loop counter,	XOR	SI, SI			;Zero the index	MOV	BX, 01H			;SetupLBuf:		MOV	AX, BX	MOV	ES:XmitBuf42 [SI], AX	;	ADD	SI, 2			;	ADD	BX, 202H	LOOP	SetupLBuf		;	MOV	CmdBuf4 + 6, OFFSET TBD42	;	MOV	TBD42 + 2, 0FFFH	;no next TBD	MOV	TBD42 + 4, OFFSET XmitBuf42	MOV AX,EMapOut	;	MOV	TBD42 + 6, AX		;forced top 4 bits all one's	MOV	AX, 0FFFFH	MOV	CmdBuf4 + 8, AX		;broadcasting	MOV	CmdBuf4 + 0AH, AX	;	MOV	CmdBuf4 + 0CH, AX	;	POP	SI	RET;-------------------------------------------------------------------;  SUBROUTINE :  LoopBackCont LoopBackCont: 	MOV	LoopBackType, 1		;indicate loopback from controller	CALL	ClrLBkpBuf	OR	LoopbkAT, 40H	;set Internal LoopBack, funny no AT-loc bit	CALL	LoopBack	RET;-------------------------------------------------------------------;  SUBROUTINE :  LoopBackIntf LoopBackIntf: 	MOV	LoopBackType, 2		;indicate loopback from Interface	CALL	ClrLBkpBuf		MOV	AX, ENetLpBk		;	CALL	ExtOnWrRstCtlReg	;loopback from 501 chip		MOV	Al, 0BFH		;Save bad frames	MOV	SaveBadF, Al		;Save bad frames	MOV	Al, 3FH			;	AND	LoopbkAT, Al		;	OR	LoopbkAT, 80H	;set External LoopBack, funny no AT-loc bit	CALL	LoopBack		MOV	AX, ENetLpBk		;	CALL	ExtOffWrRstCtlReg	;back to normal	MOV	Al, 03FH		;Don't Save bad frames	MOV	SaveBadF, Al		;Save bad frames	RET;-------------------------------------------------------------------;  SUBROUTINE :  LoopBackWire LoopBackWire: 	MOV	LoopBackType, 3		;indicate loopback from Wire	CALL	ClrLBkpBuf	MOV	Al, 0BFH		;Save bad frames	MOV	SaveBadF, Al		;Save bad frames	MOV	Al, 3FH			;	AND	LoopbkAT, Al		;	OR	LoopbkAT, 80H	;set External LoopBack, funny no AT-loc bit	CALL	LoopBack	MOV	Al, 03FH		;Don't Save bad frames	MOV	SaveBadF, Al		;Save bad frames	RET;-------------------------------------------------------------------;  SUBROUTINE :  LoopBack LoopBack: ; starting Receiving Unit; for unknown reason must use Interrupt bit to get CU completion bit	MOV	ByteCnt, 4		;only modifying LoopbkAT	MOV	RFD4, 0			;reset status bits	MOV	RFD4 + 2, 0		;reset control bits	MOV	RFD4 + 4, OFFSET RFD4	;link to other will not do anything	MOV	RFD4 + 6, OFFSET RBD42	;loopback receiving buffer	MOV AX,EMapIn	MOV	RBD42 + 6, AX		;top 4 bits address all one's	MOV	RBD42 + 4, OFFSET RB42	;use 24 bits address	MOV	AX, BytesLoopbk	MOV	RBD42 + 8, AX		;RB42 can hold 256 bytes	MOV	SCBComm, StartRU	;Start RU	MOV	RFAOffset, OFFSET RFD4	;	OUT	ENetAttn, AX		;ENet Channel Attention	NOPWaiting:	MOV	AX, SCBStat		;get status word	AND	AX, 040H		;look at RU ready bit	CMP	AX, 040H		JE	ExLoopBack		;RU is ready	JMP	Waiting			;; so it is configured to do LoopBack; for unknown reason must use Interrupt bit to get CU completion bitExLoopBack:	MOV	AH, 0			;No Interrupt	MOV	AL, CmdConfig		;form Config Cmd	MOV	ConfigCmd + 2, AX	;	MOV	ConfigCmd + 4, OFFSET CmdBuf4	;next Command is Xmit	MOV	AH, ELIntr		;EndList, Interrupt	MOV	AL, CmdXmit		;form Xmit Cmd	MOV	CmdBuf4 + 2, AX		;	MOV	CmdBuf4 + 4, 0FFFFH	;no Cmd chainning	MOV	AX, BytesLoopbk		;get the number of bytes to be loopbacked	OR	AX, 8000H	        ;indicate last buffer	MOV	TBD42, AX		;	MOV AX,EMapOut	MOV	TBD42 + 6, AX		;forced top four bits to 0FH	MOV	TBD42 + 4, OFFSET XmitBuf42	;use 24 bits address	MOV	SCBComm, StartCU	;Start CU, clear the Reset bit	MOV	CBLOffset, OFFSET ConfigCmd	;link to a Cmd	CALL	ExCmd	Call InterrupCheck	RET;-------------------------------------------------------------------CheckXmit:	MOV	Ax, TBD42	xor     ax,BytesLoopbk		cmp     ax,08000H	je      CheckXmitRet			MOV	Al, 8	;xmit  error code	jmp	ENetErrorCheckXmitRet:	RET;-------------------------------------------------------------------CheckReciever:	MOV	Ax, RBD42	xor     ax,BytesLoopbk		cmp     ax,0C000H	je      CheckRecieverRet			MOV	Al, 9	;xmit  error code	jmp	ENetErrorCheckRecieverRet:	RET;-------------------------------------------------------------------;  SUBROUTINE :  ClrLBkpBuf ClrLBkpBuf:	PUSH	SI	MOV	AX,EInES        MOV	ES, AX	MOV	CX, BytesLoopbk	ADD	CX, 4	XOR	SI, SI			;Zero the index	MOV	BX, 0ABCDH		;anything unusalClearBuf:	MOV	ES:RB42 [SI], BX		;	ADD	SI, 2			;	LOOP	ClearBuf		;	POP	SI	RET;-------------------------------------------------------------------;  SUBROUTINE :  CheckLpBk CheckLpBk: 	MOV	AX,EInES        MOV	ES, AX	MOV	CX, BytesLoopbk	;Setup loop counter	SHR	CX, 1		;comparasion is excuted in pair-of-bytes	XOR	SI, SI		;Zero the index	MOV	BX, 01H	;CkLoop:	MOV	AX, ES:RB42 [SI]	;	SUB	AX, BX		;	JNZ	DataBad		;NoRecCont:	ADD	SI, 2		;	ADD	BX, 202H	;	LOOP	CkLoop		;	RETDataBad:	MOV	AX, CmdBuf4 + 8	;Test least significant destination address word	CMP	AX, HostNumWd1	;is it a xmit with receive test	JNZ	NextTestB	;	MOV	Al, 6		;xmit with receive test data error code	jmp	ENetErrorNextTestB:	MOV	AX, ES:RB42 [SI]	;	SUB	AX, BX		;	JZ	NoRecError	;	JMP	NoRecCont	;data not received continueNoRecError:	MOV	Al, 7	;xmit without receive test data error code	jmp	ENetError;-------------------------------------------------------------------;  SUBROUTINE :  StartChip StartChip: 	MOV	AX, 0			;no interrupt	MOV	SetupIACmd, AX		;reset status	MOV	AH, ELIntr		;EndList, Interrupt	MOV	AL, CmdAddSetup		;form Cmd	MOV	SetupIACmd + 2, AX	;	MOV	SetupIACmd + 4, 0	;no Cmd chainning	MOV	SetupIACmd + 6, 0FFFFH;Individual Address	MOV	SetupIACmd + 8, 0FFFFH	;	MOV	SetupIACmd + 0AH, 0FFFFH ;	MOV	SCBComm, StartCU	;StartCU, clear the Reset bit	MOV	RFAOffset, OFFSET RFD1	;dump requires RFD	MOV	CBLOffset, OFFSET SetupIACmd ;link to a Cmd	CALL	ExCmdFinishStartChip:	RET;-------------------------------------------------------------------;  SUBROUTINE :  DiagnoseTst DiagnoseTst: 	MOV	AX, 0			;no interrupt	MOV	CmdBuf4, AX		;reset status	MOV	AH, ELIntr		;EndList, Interrupt	MOV	AL, CmdDiag		;form Cmd	MOV	CmdBuf4 + 2, AX		;	MOV	CmdBuf4 + 4, 0		;no Cmd chainning	MOV	SCBComm, StartCU	;StartCU, clear the Reset bit	MOV	RFAOffset, OFFSET RFD1	;	MOV	CBLOffset, OFFSET CmdBuf4	;link to a Cmd	CALL	ExCmd	RET;-------------------------------------------------------------------------; SUBROUTINE : Seti586IntVectorsSeti586IntVectors:	CLI	MOV AX,0        MOV  DS,AX	MOV  BX, ExtInterruptV1		MOV  AX, OFFSET MemParityInt	;	MOV  [bx].ParityV, AX	MOV	BX, ExtInterruptV2		MOV	AX, OFFSET EthIntrHandler 	MOV	[BX].EthernetV, AX	MOV  AX,CS	MOV  DS,AXENetIntOn:	AND  [di].EnableIntC1C2,ParityIntEnAble         AND	[di].EnableIntC1C2, ENetIntEnable ;Enable ENet Int	MOV ParityCount,0	CALL ExtReadMemStatus    	CALL ExtReadMemStatus    	CALL ExtReadMemStatus    	IN	Ax, EtherNetIntLatch       ;Clears the interrupt flipflop	CALL	ExtEnableInt		;Enable all Int in Monitor Control	STI	RET	;--------------------------------------------------------------------		MemParityInt:ClI					;disable interrupts	    PUSHA	    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    TEST [bx].ENetErrCtl,ENetNoMemParity	    jnz MemParityIntRet 	    or [di].IOPFault,MemoryParityErrorMemParityIntRet:MOV  AL, nonSpecificEOI			;Reset IS0	    OUT  i8259MasterAddr0, Al		;  OCW2_ 061h 	    cmp ParityCount,00FFH	    JE MemParityRet            CALL ExtReadMemStatus	    inc  ParityCount    MemParityRet:POPA            STI					;Reanable the interrupts	    IRet ParityCount Dw 0;--------------------------------------------------------------------; This is the Ethernet Interrupt HandlerEthIntrHandler:		CLI	PUSHA	DEC	EIntrCount	;IntCountOKB:	MOV	AL, nonSpecificEOI	;Write an EOI command to the 					        ;Slave i8259, resets IS5	OUT	i8259SlaveAddr0, AL	;Clear Slave Controller	MOV	Al, 00BH		;OCW3 _ 00BH	IN	Al, i8259SlaveAddr0	;Read Slave 8259 IS register	CMP	Al, 0			;Check if another interrupt is in service	JNZ	EthIntrHandlerRet	;			MOV	AL, nonSpecificEOI	;Write an EOI command to the 		OUT	i8259MasterAddr0, AL	;master i8259EthIntrHandlerRet:	IN	Ax, EtherNetIntLatch    ;Clears the interrupt flipflop 	POPA	STI				;Reenable the interrupts	IRET				 	;------------------------------------------------------------ENetError:mov cl,al        MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	MOV	BX,[SI].TCBPointer	;Get Index to Test Control Block	MOV	SP, ExitPointer		;Restore stack pointer	MOV	SCBStat, 0	;reset status bits	MOV	AX, AckCXCNA	;	OR	AX, AckFR	MOV	SCBComm, AX	;acknowledge the CU and  RU interrupt Nop	OUT	ENetAttn, AX	;ENet Channel Attention	TEST	[bx].ENetErrCtl,ENetNoStop;	JnZ	ReStart	dec ECRetryCount	jz ENetErrorRet	mov ax,SaveRet	push ax	retENetErrorRet:        OR	[bx].ENetFault, cl	;	OR	[di].MesaFault, cl	;		RET	ReStart:        jmp ENetStart	ENetPreProcess:  MOV    BX, 13	         Call   ExtReadEEProm	         cmp    al,1 	         jne     ENetPreProcessRet		 mov 	dl,0		 MOV	CX, 17 UpdateTCB:	  	mov 	[SI].TestN,dl		PUSHA            	CALL 	ExtSetTCBPointer    	        POPA	    	Mov 	bx,[si].TCBPointer ;Get Index to TCB	    	OR 	[bx].ENetErrCtl, 80H		INC	Dl		LOOP	UpdateTCBENetPreProcessRet:Ret		ENetFRUList: mov Bx,0 	   mov BL, [SI].TestN	   SHL Bx,1	   mov ax, WORD PTR ENetList0 [bx]	   CALL ExtMessageENetFRUList1:CALL ExtDoRunTimeWork	   cmp [di].CurrentInputByte,KSP	   jne ENetFRUList1	   Ret ENetList0 DW  060FEHENetList1 DW  060FEHENetList2 DW  060FEHENetList3 DW  060FEHENetList4 DW  0670FHENetList5 DW  0670FHENetList6 DW  060FEHENetList7 DW  060FEHENetList8 DW  060FEHENetList9 DW  060FEHENetListA DW  060FEHENetListB DW  0670FHENetListC DW  0670FHENetListD DW  0760FHENetListE DW  0670FHENetListF DW  060FEHENetList10 DW  0760FH	;----------------------------------------------------------------------		ORG TestCodeLoc3+1000HXmitBuf12	DW	 200H DUP (?)		ORG TestCodeLoc3+1000H+200HRB12		DW	 200H DUP (?)		ORG TestCodeLoc3+1000H+200H+200HXmitBuf42	DW	 1000H DUP (?)		ORG TestCodeLoc3+1000H+200H+200H+1000HRB42		DW	 1000H DUP (?)MonitorCode	ENDS	END