{File name:  <KATSIROUMBAS>KATZ.mc Description: katz test code, Author: J. KATZ, Created: May 16, 1980  12:01 PM, Last Edited: } {Reserve[0001,001E];{ For moonBus}Reserve[0020,002E];{ For moonBus}Reserve[0030,003E];{ For moonBus}Reserve[0040,005F];{ For moonBus}}Reserve[0060,00FF];{ moonsun1}Reserve[0110,0180];{ moonsun1}Reserve[0181,01FF];{ moonsun2}Reserve[0210,03CF];{ moonsun2}Reserve[03D0,03FF];{ moonsun3}Reserve[0401,04D2];{ moonsun3}Reserve[04D4,04FF];{ moonsun3}Reserve[0400];	   { moonsun4}Reserve[0500,05FF];{ moonsun4}Reserve[0600,060F];{ moonsun4}Reserve[0700,070F];{ moonsun4}Reserve[0800,08D2];{ moonsun4}Reserve[08D4,08FF];{ moonsun4}Reserve[0610,06D2];{ moonsun5}Reserve[06D4,06FF];{ moonsun5}Reserve[04D3];	{moontime }Reserve[06D3];	{moontime }Reserve[0710,07FF];{ moontime}Reserve[0AD3,0AD4];{ moontime}Reserve[0900,09FF];{ MoonMr}Reserve[0A00,0AD2];{ For OTHER TEST}Reserve[0AD5,0FEF];{ For OTHER TEST}  Reserve[0060,00FF];Reserve[0101,01FF];Reserve[0201,0FEF];Reserve[0FE1,0FEF]; Reserve[0FF1,0FFE]; SetTask[0]; StartAddress[TERROR1];TERROR1:ClrIntErr,CANCELBR[$,0F],   c*, at[0];        R6 _ RRot1 ErrnIBnStkp, ClrIntErr,CANCELBR[$,0F],   c*, at[1F];        R8 _ RRot1 ErrnIBnStkp, ClrIntErr,CANCELBR[$,0F],   c*, at[3F];        R1 _ R1 or R6,ClrIE,	c*, at[2F];        GOTO[xSTART],	c*, at[100];xSTART:	GOTO[START],	c*, at[200];START:	R0_R0 xor R0, NZeroBr,				c*,at [001];	BRANCH[Test1,ErrorR0ZeroBranch],		c*;{R0=0000}Test1:	R1 _ 0FF,					c*, at[010];	R0 _ R0 xor R0,					c*;	R0_~R0, NZeroBr,				c*;{R0=FFFF}	ClrIE,BRANCH[ErrorR0OnesBranch,Test2],		c*;{R0=FFFF R1=00FF}Test2:	R0 _ 0FF,					c*, at[013];	R0_ 0, ZeroBr,					c*;	RH0_R0_R0 LRot0,BRANCH[XBusNotZero,Test3],	c*;{R0=0000 R1=00FF}Test3:	R0 _ 0,						c*, at[003];	R0 _ R0, ZeroBr,				c*;	R0 _ LShift1 R0,SE_1,BRANCH[YBusNotZero,Test4],	c*;{R0=0000}Test4:	R0 _ 0,						c*, at[015];	R1 _ 0FF,					c*;	R0_ LShift1 R0,SE_1, {1}			c*;	R0_ LShift1 R0,SE_1, {2}			c*;	R0_ LShift1 R0,SE_1, {3}			c*;	R0_ LShift1 R0,SE_1, {4}			c*;	R0_ LShift1 R0,SE_1, {5}			c*;	R0_ LShift1 R0,SE_1, {6}			c*;	R0_ LShift1 R0,SE_1, {7}			c*;	R0_ LShift1 R0,SE_1, {8}			c*;	[]_ R0 xor R1, ZeroBr,				c*;	BRANCH[LowerXBusNotOnes,Test5],			c*;{R0=00FF R1=00FF}	Test5:	R0_ 0FF,					c*, at[009];	R1_ 0FF,					c*;	R0_ R0 LRot0,					c*;	[]_ R0 xor R1, ZeroBr, { _ 00FF xor 00FF}	c*;	BRANCH[LowerYBusNotOnes,Test6],			c*;{R0=00FF R1=00FF}Test6:	R0_ 0FF,					c*, at[017];	R1_ 0FF,					c*;	R0_ R0 LRot8,					c*;	[]_R0 xor ~R1, ZeroBr, { _ FF00 xor FF00}	c*;	BRANCH[UpperXBusNotOnes,Test7],			c*;{R0=FF00 R1=00FF}Test7:	R0 _ 0FF,					c*, at[00B];	R0 _ R0 LRot8,					c*;	R1 _ 0FF,					c*;	[]_R0 xor ~R1, ZeroBr, { _ FF00 xor 00FF}	c*;	BRANCH[UpperYBusNotOnes,Test8],			c*;Test8:	RH0 _ 0,					c*, at[019];	R1 _ 0FF,					c*;	R0_ RH0, ZeroBr,				c*;	BRANCH[YHBusNotZero,Test9],			c*;{RH0=00 R1=00FF}Test9:	R1 _ 0FF,					c*, at[00D];	RH1_ R1 LRot0,					c*;	R0_ 0FF,					c*;	R1_ RH1 					c*;	[]_R0 xor R1, ZeroBr, { _ 00FF xor 00FF}	c*;	BRANCH[YHBusNotOnes,Test10],			c*;{R0=00FF R1=00FF}Test10: R1 _ RRot1 ErrnIBnStkp,				c*, at[01B];        Xbus _ R1 LRot0, XwdDisp,			c*;	DISP2[TrapType],				c*;TrapType:GOTO[Test11],	c*, at[0,4,TrapType];	GOTO[Trap],	c*, at[1,4,TrapType];	GOTO[Trap],	c*, at[2,4,TrapType];	GOTO[Trap],	c*, at[3,4,TrapType];Test11:	Noop,				c1, at[045];Add5cy: XC2npcDisp,			c2;	BRANCH[BadCy, GoodCy, 0D],	c3;BadCy:	Noop,		c*, at[0D,10,GoodCy];	Noop,		c*;	GOTO[Add5cy]	c*;	GoodCy:	GOTO[NOERROR],	c1, at[0F,10,BadCy];ErrorR0ZeroBranch: CANCELBR[ErrorR0ZeroBranch],GOTO[ErrorR0ZeroBranch], c*;ErrorR0OnesBranch: GOTO[ErrorR0OnesBranch],		c*;XBusNotZero:	GOTO[XBusNotZero],				c*;YBusNotZero:	GOTO[YBusNotZero],				c*;LowerXBusNotOnes: GOTO[LowerXBusNotOnes],		c*;LowerYBusNotOnes: GOTO[LowerYBusNotOnes],		c*;UpperXBusNotOnes: GOTO[UpperXBusNotOnes],		c*;UpperYBusNotOnes: GOTO[UpperYBusNotOnes],		c*;YHBusNotZero:	GOTO[YHBusNotZero],			c*;YHBusNotOnes:	GOTO[YHBusNotOnes],			c*;Trap:		GOTO[Trap],   c*;NOERROR:   ClrMPIntIOP,GOTO[NOERROR],	      c*, at[0FF0];LoaderCheck:	ClrMPIntIOP,GOTO[LoaderCheck],c*, at[0FFF];