$	DEBUG MOD186;MoonMul1.asm;;last edited by HEM		 5-Jun-86 15:23:35;;first half of multiple test	NAME	MoonMemoryTest$	TITLE(Memory Test)$	NOLIST		;Next line includes Daisy.def	$	INCLUDE(MoonSys.def)$	INCLUDE(MOONLINK.def)$	INCLUDE(MoonMul.def)$	LIST		;Previous line included Daisy.def;--------------------------------------------MonitorCode	SEGMENT COMMON	ASSUME	CS:MonitorCode, SS:MonitorCode, DS:MonitorCode, ES:MonitorCode;--------------------------------------------;PUBLIC symbols needed by MoonMul2.asm;Public proceduresPUBLIC	E0StackPUBLIC	E1StackPUBLIC	E2StackPUBLIC	E3StackPUBLIC	E4StackPUBLIC	E5StackPUBLIC	E6StackPUBLIC	E0StackRetPUBLIC	E1StackRetPUBLIC	E2StackRetPUBLIC	E3StackRetPUBLIC	E4StackRetPUBLIC	E5StackRetPUBLIC	E6StackRetPUBLIC	ESaveEsPUBLIC	ESetRegPUBLIC	ExcMemTimePUBLIC	NewMap;Public LabelsPUBLIC	DisplayIntPUBLIC	EthIntrHandlerPUBLIC	ExcKeyWakePUBLIC	ExecLoopPUBLIC	i8272IrqHandlerPUBLIC	MemParityIntPUBLIC	MesaPIntPUBLIC	ResetChipPUBLIC	RS232CommInt;Public VariablesPUBLIC	BackOffPUBLIC	ByteCntPUBLIC	CBLOffsetPUBLIC	CmdBuf1PUBLIC	CmdBuf4PUBLIC	CollCarrPUBLIC	ConfigCmdPUBLIC	CRCPromisPUBLIC	ECRetryCountPUBLIC	ExitPointerPUBLIC	FifoLimPUBLIC	IntFrameSpPUBLIC	LoopbkATPUBLIC	MinFrameLenPUBLIC	ParityCountPUBLIC	RetrySlotPUBLIC	RFAOffsetPUBLIC	RBD12PUBLIC	RBD42PUBLIC	RFD1PUBLIC	RFD4PUBLIC	SaveBadFPUBLIC	SaveRetPUBLIC	SCBCommPUBLIC	SCBStatPUBLIC	SetupIACmdPUBLIC	TBD12PUBLIC	TBD42PUBLIC	TstCtlPUBLIC	TstType;Public ConstantsPUBLIC	SCBOffsetPUBLIC	SCBBaseHigh;--------------------------------------------;External Symbols from MoonMul2.asmEXTRN	ExecDone: NEAREXTRN	ExecStart: NEAREXTRN	ExecPreProcess: NEAREXTRN	ExecFRUList: NEAREXTRN	LoadMapReg: NEAREXTRN	ECheckPass: NEAREXTRN	RsRxES: WORDEXTRN	RsTxES: WORDEXTRN	EIntrCount: BYTEEXTRN	ENetRst: BYTE		ORG TestCodeLoc ;-----------------------------------------------------------------         jmp ExecStart	 jmp ExecPreProcess	 jmp ExecFRUList	 jmp ExecDummy	 jmp ExecDummy	 jmp ExecDummy	 jmp ExecDummy	 	ORG MultTestCodeLoc	 ;SCBSCBStat       	DW	?	;SCB's StatusSCBComm		DW	?	;SCB's CommunicationCBLOffset	DW	?	;SCB's CBL OffsetRFAOffset	DW	?	;SCB's RFA Offset;CommandBuffersCmdBuf1		DW	8 DUP (?)CmdBuf4		DW	8 DUP (?);;Transmit Buffer DescriptorTBD12		DW	4 DUP (?)	;TBD42		DW	4 DUP (?)	;;;Receive Frame DescriptorRFD1		DW	11 DUP (?)RFD4		DW	11 DUP (?);;Receive Buffer DescriptorRBD12		DW	5 DUP (?)RBD42		DW	5 DUP (?)SetupIACmd	DW	3 DUP (0)	;Cmd to setup Host Address;Config commandConfigCmd	DW	3 DUP (0)	;Cmd to setup configByteCnt		DB	(0CH)		;byte count of this Cmd, 0CHFifoLim		DB	(0CH)		;FIFO limit, 8SaveBadF	DB	(3FH)		;save bad frameLoopbkAT	DB	(26H)		;Ext/Int Loopback, PreamLen, AT, AddrLenBackOff		DB	(8H)		;BackOff methodeIntFrameSp	DB	(60H)		;InterFrame space, 9.6 usecRetrySlot	DW	(0FA00H)	;** WORD **, Retry number, Slot TimeCRCPromis	DB	(0)		;CRC length, PromiscuousCollCarr	DB	(0)		;Collision, Carrier SenseMinFrameLen	DW	(0FF40H)		;** WORD **, minimum frame lengthSCBBaseHigh     EQU	0F0H	SCBOffset	EQU     OFFSET SCBStatTstCtl		DB	00H	;TstType		DB 	00H	;ECRetryCount	DB 0SaveRet		DW 	00HExitPointer	DW 	0	;Pointer to Stack TOP for exit ;----------------------------------------------------------------- ExecDummy:    Ret     ExecLoop:	push cx                CALL NewMap    	        CALL LoadMapReg                Call ExtDoRunTimeWork		pop cx           	cmp  [di].IOPFault,NoIOPFault	    	jnz ExecExit1		cmp  [di].MesaFault,NoIOPFault	    	jz ExecLoop1ExecExit1:	jmp ExecDoneExecLoop1:  	TEST [bx].EDevicesNeedService,E0Task	    	jz  NoE0Task		xor [bx].EDevicesNeedService,E0Task	   	CALL  E0StackNoE0Task:	TEST [bx].EDevicesNeedService,E1Task	    	jz  NoE1Task		xor [bx].EDevicesNeedService,E1Task		CALL  E1StackNoE1Task:	TEST [bx].EDevicesNeedService,E2Task	    	jz  NoE2Task		xor [bx].EDevicesNeedService,E2Task		CALL  E2StackNoE2Task:	TEST [bx].EDevicesNeedService,E3Task	    	jz  NoE3Task		xor [bx].EDevicesNeedService,E3Task		CALL  E3StackNoE3Task:	TEST [bx].EDevicesNeedService,E4Task	    	jz  NoE4Task		xor [bx].EDevicesNeedService,E4Task		CALL  E4StackNoE4Task:	TEST [bx].EDevicesNeedService,E5Task	    	jz  NoE5Task		xor [bx].EDevicesNeedService,E5Task		CALL  E5StackNoE5Task:	TEST [bx].EDevicesNeedService,E6Task	    	jz  NoE6Task		xor [bx].EDevicesNeedService,E6Task		CALL  E6StackNoE6Task:	TEST [bx].EDevicesNeedService,E7Task	    	jz  NoE7Task		mov  cx,8000		xor [bx].EDevicesNeedService,E7TaskNoE7Task:	TEST [bx].EActiveDevices,AnyDevice	    	jnz ExecLooping 		jmp ECheckPassExecLooping:	LOOP  ExecLoop2		or [di].MesaFault,E7TaskExecLoop2:	jmp ExecLoopNewMap:  	TEST [bx].EErrorControl,ENoIncMap	    	jnz  NewMapRet		inc [bx].EMap		and [bx].EMap,7		jz   NewMap		cmp [bx].EMap,5		jg   NewMapNewMapRet:      mov al,0		mov ah,[bx].EMap		ret				    	     ESYSStack:   CLI	     MOV AX, StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV AL, [bx].ESYSPSP	     MOV sp, AX	     STI	     POPA             RET	     E0Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E0StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E0SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE0StackRet:  PUSHA             Call ESaveEs	     CALL ESetReg             MOV  AX,sp             MOV [bx].E0SP,AL	     JMP ESYSStack	     E1Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E1StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E1SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE1StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E1SP,AL	     JMP ESYSStack	     E2Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E2StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E2SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE2StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E2SP,AL	     JMP ESYSStack	     E3Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E3StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E3SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE3StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E3SP,AL	     JMP ESYSStack	     E4Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E4StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E4SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE4StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E4SP,AL	     JMP ESYSStack	     E5Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E5StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E5SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE5StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E5SP,AL	     JMP ESYSStack	     E6Stack:     PUSHA             MOV  AX,sp             MOV  [bx].ESYSPSP,AL	     CLI	     MOV  AX, E6StackLoc/16	     MOV  SS, AX	     MOV  AH, 0	     MOV  AL, [bx].E6SP	     MOV sp, AX	     STI	     Call ERestoreEs	     POPA             RETE6StackRet:  PUSHA             CALL ESaveEs             CALL ESetReg             MOV  AX,sp             MOV [bx].E6SP,AL	     JMP ESYSStack	     ESaveEs:    POP DX	    MOV  AX, ES 	    PUSH ES	    PUSH DX            RET		    ERestoreEs: POP DX	    POP  AX 	    MOV  ES, AX 	    PUSH DX	    RET	         	     ESetReg:    MOV	DI, ExtMCBlock ;Index to Monitor Control Block	    MOV	SI, ExtMFCBlock ;Index to Monitor File Control Block	    Mov bx,[si].TCBPointer ;Get Index to TCB	    ret             	     	     ExcKeyWake:     PUSHA	        CALL ESetReg		cmp  [di].IOPFault,NoIOPFault	    	jz EXCheckMF		jmp  ExcKeyWakeRetEXCheckMF:	cmp  [di].MesaFault,NoIOPFault	    	jz ExcCkActive  	        jmp  ExcKeyWakeRet             ExcCkActive:    TEST [bx].EActiveDevices,E0Task		jnz  CkE1NotActive		cmp  [bx].E0IntCount,0		jz   CkE1NotActive		mov  dl,E0Task		call NotActiveErrorCkE1NotActive:	TEST [bx].EActiveDevices,E1Task		jnz  CkE2NotActive		cmp  [bx].E1IntCount,0		jz   CkE2NotActive		mov  dl,E1Task		call NotActiveErrorCkE2NotActive:	TEST [bx].EActiveDevices,E2Task		jnz  CkE3NotActive		cmp  [bx].E2IntCount,0		jz   CkE3NotActive		mov  dl,E2Task		call NotActiveErrorCkE3NotActive:	TEST [bx].EActiveDevices,E3Task		jnz  CkE4NotActive		cmp  [bx].E3IntCount,0		jz   CkE4NotActive		mov  dl,E3Task		call NotActiveErrorCkE4NotActive:	TEST [bx].EActiveDevices,E4Task		jnz  CkE5NotActive		cmp  [bx].E4IntCount,0		jz   CkE5NotActive		mov  dl,E4Task		call NotActiveErrorCkE5NotActive:	TEST [bx].EActiveDevices,E5Task		jnz  CkE6NotActive		cmp  [bx].E5IntCount,0		jz   CkE6NotActive		mov  dl,E5Task		call NotActiveErrorCkE6NotActive:	TEST [bx].EActiveDevices,E6Task		jnz  CkE0Active		cmp  [bx].E6IntCount,0		jz   CkE0Active		mov  dl,E6Task		call NotActiveErrorCkE0Active:	TEST [bx].EActiveDevices,E0Task		jz  CkE1Active		dec [bx].E0IntWaitTime		jz   E0TimeError		cmp [bx].E0IntCount,0		je   CkE1Active		dec   [bx].E0IntCount		jnz   E0ActiveError		TEST [bx].EDevicesNeedService,E0Task		jnz   E0ActiveError		CALL ExcMemTime		or [bx].EDevicesNeedService,E0Task		jmp CkE1ActiveE0TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E0Task		jmp CkE1ActiveE0ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E0Task		jmp CkE1Active	CkE1Active:	TEST [bx].EActiveDevices,E1Task		jz  CkE2Active		dec [bx].E1IntWaitTime		jz   E1TimeError		cmp [bx].E1IntCount,0		je   CkE2Active		dec   [bx].E1IntCount		jnz   E1ActiveError		TEST [bx].EDevicesNeedService,E1Task		jnz   E1ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E1IntWaitTime,Ax		or [bx].EDevicesNeedService,E1Task		jmp CkE2ActiveE1TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E1Task		jmp CkE2ActiveE1ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E1Task		jmp CkE2Active			CkE2Active:	TEST [bx].EActiveDevices,E2Task		jz  CkE3Active		dec [bx].E2IntWaitTime		jz   E2TimeError		cmp [bx].E2IntCount,0		je   CkE3Active		dec   [bx].E2IntCount		jnz   E2ActiveError		TEST [bx].EDevicesNeedService,E2Task		jnz   E2ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E2IntWaitTime,Ax		or [bx].EDevicesNeedService,E2Task		jmp CkE3ActiveE2TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E2Task		jmp CkE3ActiveE2ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E2Task		jmp CkE3Active	CkE3Active:	TEST [bx].EActiveDevices,E3Task		jz  CkE4Active		dec [bx].E3IntWaitTime		jz   E3TimeError		cmp [bx].E3IntCount,0		je   CkE4Active		dec   [bx].E3IntCount		jnz   E3ActiveError		TEST [bx].EDevicesNeedService,E3Task		jnz   E3ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E3IntWaitTime,Ax		or [bx].EDevicesNeedService,E3Task		jmp CkE4ActiveE3TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E3Task		jmp CkE4ActiveE3ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E3Task		jmp CkE4Active			CkE4Active:	TEST [bx].EActiveDevices,E4Task		jz  CkE5Active		dec [bx].E4IntWaitTime		jz   E4TimeError		cmp [bx].E4IntCount,0		je   CkE5Active		dec   [bx].E4IntCount		jnz   E4ActiveError		TEST [bx].EDevicesNeedService,E4Task		jnz   E4ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E4IntWaitTime,Ax		or [bx].EDevicesNeedService,E4Task		jmp CkE5ActiveE4TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E4Task		jmp CkE5ActiveE4ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E4Task		jmp CkE5ActiveCkE5Active:	TEST [bx].EActiveDevices,E5Task		jz  CkE6Active		dec [bx].E5IntWaitTime		jz   E5TimeError		cmp [bx].E5IntCount,0		je   CkE6Active		dec   [bx].E5IntCount		jnz   E5ActiveError		TEST [bx].EDevicesNeedService,E5Task		jnz   E5ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E5IntWaitTime,Ax		or [bx].EDevicesNeedService,E5Task		jmp CkE6ActiveE5TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E5Task		jmp CkE6ActiveE5ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E5Task		jmp CkE6Active			CkE6Active:	TEST [bx].EActiveDevices,E6Task		jz  CkE7Active		dec [bx].E6IntWaitTime		jz   E6TimeError		cmp [bx].E6IntCount,0		je   CkE7Active		dec   [bx].E6IntCount		jnz   E6ActiveError		TEST [bx].EDevicesNeedService,E6Task		jnz   E6ActiveError		MOV  AX,[bx].EIntWaitTime	        MOV  [bx].E6IntWaitTime,Ax		or [bx].EDevicesNeedService,E6Task		jmp CkE7ActiveE6TimeError:    or   [di].IOPFault,NoExpectedInterrupt				or   [di].MesaFault,E6Task		jmp CkE7ActiveE6ActiveError:  or   [di].IOPFault,EarlyExpectedInterrupt				or   [di].MesaFault,E6Task		jmp CkE7Active	CkE7Active:	or [bx].EDevicesNeedService,E7TaskExcKeyWakeRet:	POPA	   	jmp   ExtPutNextKey		NotActiveError: or   [di].IOPFault,UnExpectedInterrupt				or   [di].MesaFault,E6Task		jmp CkE7Active		;-----------------------------------------------------------------		MemParityInt:ClI					;disable interrupts	    PUSHA	    Call ESetReg	    TEST [bx].EErrorControl,ENoMemoryParityErrors	    jnz MemParityIntRet	    or [di].IOPFault,MemoryParityErrorMemParityIntRet:MOV  AL, nonSpecificEOI			;Reset IS0	    OUT  i8259MasterAddr0, Al		;  OCW2_ 061h 	    cmp ParityCount,00FFH	    JE MemParityRet            CALL ExtReadMemStatus	    inc  ParityCount    MemParityRet:POPA            STI					;Reanable the interrupts	    IRet ParityCount Dw 0 	    ;-----------------------------------------------------------------MesaPInt:   ClI					;disable interrupts	    PUSHA	    Call ESetReg	    inc [bx].E0IntCount            MOV  AL, nonSpecificEOI			;Reset IS5	    OUT  i8259SlaveAddr0, Al		;  OCW2_ 061h 	    MOV  AL, 00Bh			;Set up to read IS register	    OUT  i8259SlaveAddr0, Al		;OCW3_ 00Bh	    IN   AL, i8259SlaveAddr0		;Read Slave 8259 IS register	    CMP  AL, 0				;Check if another interrupt is	    JNZ  MesaPIntRet			;  in service	    MOV  AL, nonSpecificEOI		;Write an EOI command for the 		    OUT  i8259MasterAddr0, AL		;  Master 8259MesaPIntRet:CALL  ExtResetMesaInt            POPA	    STI					;Reanable the interrupts	    IRet;-----------------------------------------------------------------DisplayInt:  ClI					;disable interrupts	     PUSHA	     Call ESetReg	     MOV  AL, nonSpecificEOI			;Reset IS5	     OUT  i8259SlaveAddr0, Al		;  OCW2_ 061h 	     MOV  AL, 00Bh			;Set up to read IS register	     OUT  i8259SlaveAddr0, Al		;OCW3_ 00Bh	     IN   AL, i8259SlaveAddr0		;Read Slave 8259 IS register	     CMP  AL, 0				;Check if another interrupt is	     JNZ  DisplayPIntRt			;  in service	     MOV  AL, nonSpecificEOI		;Write an EOI command for the 		     OUT  i8259MasterAddr0, AL		;  Master 8259DisplayPIntRt:MOV  dx,DVIntLatch	     IN AX,DX	     add bx,DVTCBLoc    ;Get Index to TCB	     inc [bx].DVIntCount	     add [bx].DVSpare0,4	     JNZ DisplayPIntRET	     Call ESetReg             inc [bx].E6IntCount ;LOOK AT EVERY 64 DISPLAY INTDisplayPIntRET:POPA	       STI	       IRet				;Reanable the interrupts ;----------------This is the main subroutine   ----------------------------ChASpecial:  		Call ESetReg		inc [bx].E2IntCount 		Call SetReg		Mov	Al,1		OUT	chanlacommand,al		in	al,chanlacommand		mov dl,al	        Mov	Al,ErrorReset		OUT	chanlacommand,al		Test   dl,80h		jz     ChASpecialRet		Test   dl,70h		jnz     ChASpecialRet		JMP	Rs232IntHandlerAChASpecialRet:  mov	DL,error15		JMP     IntError	 ChATxEmpty:  		CMP    [bx].RsCTxACount,0		je     CAExit		dec    [bx].RsCTxACount		inc     [bx].RsTxABufP   		Mov     BX,[bx].RsTxABufP		dec     BX 		Mov	Al, BYTE PTR ES:[BX]		OUT	Chanladata,AL 		Mov	Al,RstTxEomLatch ;		OUT	chanlacommand,al		JMP	Rs232IntHandlerACAExit:	        in	al,chanlacommand		Mov	Al,RstTxIntPending ;		OUT	chanlacommand,al		JMP	Rs232IntHandlerAChAExtStat:	  		Mov	Al,ResetExt	; Reset External Interrupt of Ch-A	        OUT	chanlacommand,al	        mov	DL,error13		JMP     IntError                	ChAReceive:  		MOV	ES, RsRxES                in    AL,Chanladata		cmp    [bx].RsCRxACount,0		je     ChAReceiveDone		dec    [bx].RsCRxACount		inc     [bx].RsRxABufP   		Mov     BX,[bx].RsRxABufP		dec     BX 		Mov	BYTE PTR ES:[BX],AL		Call SetReg                cmp    [bx].RsCRxACount,0		je     ChAReceiveDoneChAReceiveRet:	JMP	Rs232IntHandlerAChAReceiveDone: cmp     [bx].RsTest,6     	        jne     ChAReceiveRet		Call ESetReg		inc [bx].E2IntCount 		add bx,RSTCBLoc    ;Get Index to TCB     	        JMP	Rs232IntHandlerA 	        RS232CommInt:  		CLI	        PUSHA		CALL ESaveEs		Call SetReg                Mov	Al,2		OUT	chanlbcommand,al		in	al,chanlbcommand		and al,7		jz ChBTxEmpty		cmp al,1		je ChBExtStat		cmp al,2		je ChBReceive		cmp al,3		je ChBSpecial		cmp al,4		jne RS232CommInt1		jmp ChATxEmptyRS232CommInt1:	cmp al,5		je ChAExtStat		cmp al,6		je ChAReceive		jmp ChASpecial				ChBTxEmpty:  		cmp    [bx].RsCTxBCount,0		je     CBExit		dec    [bx].RsCTxBCount		inc     [bx].RsTxBBufP   		Mov     BX,[bx].RsTxBBufP		dec     BX 		Mov	Al, BYTE PTR ES:[BX] 		OUT	Chanlbdata,AL 		Mov	Al,RstTxEomLatch ;		OUT	chanlbcommand,al                JMP	Rs232IntHandlerACBExit:	        in	al,chanlbcommand                Mov	Al,RstTxIntPending ;		OUT	chanlbcommand,al                JMP	Rs232IntHandlerAChBExtStat:  	Mov	Al,ResetExt	; Reset External Interrupt of Ch-b	        OUT	chanlbcommand,al	        mov	DL,error16		JMP     IntErrorChBReceive:  		MOV	ES, RsRxES                in    AL,Chanlbdata		cmp    [bx].RsCRxBCount,0		je     ChBReceiveDone		dec    [bx].RsCRxBCount		inc     [bx].RsRxBBufP   		Mov     BX,[bx].RsRxBBufP		dec     BX 		Mov	BYTE PTR ES:[BX],AL		Call SetReg		cmp    [bx].RsCRxBCount,0		je     ChBReceiveDoneChBReceiveRet:	JMP	Rs232IntHandlerAChBReceiveDone: cmp     [bx].RsTest,6     	        jne     ChBReceiveRet		Call ESetReg		inc [bx].E2IntCount 		add bx,RSTCBLoc    ;Get Index to TCB     	        JMP	Rs232IntHandlerA	ChBSpecial:  		Call ESetReg                inc [bx].E2IntCount 		Call SetReg		Mov	Al,1		OUT	chanlbcommand,al		in	al,chanlbcommand		mov     dl,al	        Mov	Al,ErrorReset		OUT	chanlbcommand,al		Test    dl,80h		jz      ChBSpecialRet		Test    dl,70h		jnz     ChBSpecialRet		JMP	Rs232IntHandlerAChBSpecialRet:  mov	DL,error18		JMP     IntError		IntError:       mov	[bx].RsFault,Dl		or	[di].MesaFault,E2TaskRs232IntHandlerA: 		mov	al,i8274EOI		out	chanlacommand,al		;IN	Al, chanlacommand	;Is there another interrupt	        ;TEST	Al, i8274IntPending	;pending?	        ;JNZ	Rs232IntRet		;Yes, there is		mov	al,nonspecificeoi	 	out	i8259MasterAddr0,al	;clear 8259 int latchRs232IntRet: 	Call ERestoreEs                POPA	        STI		IRET						SetReg:         CALL ESetReg ;Get Index to TCB	        add bx,RSTCBLoc    ;Get Index to TCB	        MOV	ES, RsTxES		RET		ExcMemTime:  add bx,MemTCBLoc    ;Get Index to TCB	     MOV  CX,0	     MOV  AX,0	     MOV  CL,[bx].MPassCount	     Mov bx,[si].TCBPointer ;Get Index to TCBExcMemTimeLoop:add AX,[bx].EIntWaitTime	     LOOP ExcMemTimeLoop	     MOV  [bx].E0IntWaitTime,AX		     Ret	;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ i8272IrqHandler:		CLI				;disable interrupts		PUSHA		Call ESetReg	        MOV	AL, nonSpecificEOI	;Write an EOI command to the 							;Slave i8259, resets IS5		OUT	i8259SlaveAddr0, AL	;Clear Slave Controller		MOV	Al, 00BH		;OCW3 _ 00BH		OUT  	i8259SlaveAddr0, Al	;OCW3_ 00Bh		IN	Al, i8259SlaveAddr0	;Read Slave 8259 IS register		CMP	Al, 0		;Check if another interrupt is in service		JNZ	i8272IrqHandlerRet	;				MOV	AL, nonSpecificEOI	;Write an EOI command to the 			OUT	i8259MasterAddr0, AL	;master i8259i8272IrqHandlerRet:		MOV	DX,i186Timer1MCWAddr	;write control reg		MOV	AX, FloppyDMATC		;set parms 		OUT	DX, AX			;to turn TC off		inc [bx].E3IntCount     	        POPA		STI				;Reenable the interrupts		IRET;--------------------------------------------------------------------;; This is the Ethernet Interrupt Handler;EthIntrHandler:		CLI	PUSHA	Call ESetReg	add bx,ETCBLoc 	;Get Index to Test Control Block	DEC	EIntrCount	;	; Now send an EOI to the i8259A,; and (if it makes sense) an EOI to the internal interrupt controller;;Send a specific EOI command to the 8259EndEthIntr: 	TEST	EIntrCount, 0		;check if proper number of interrupts	JZ	IntCountOKB	MOV	Al, 01H			;Something is wrong	OR	[bx].ENetFault, Al	;	OR	[di].MesaFault,E1Task	;	MOV	Al, EIntrCount		;	MOV	[bx].ENetIntCount, Al	;IntCountOKB:	MOV	AL, nonSpecificEOI	;Write an EOI command to the 					        ;Slave i8259, resets IS5	OUT	i8259SlaveAddr0, AL	;Clear Slave Controller	MOV	Al, 00BH		;OCW3 _ 00BH	IN	Al, i8259SlaveAddr0	;Read Slave 8259 IS register	CMP	Al, 0			;Check if another interrupt is in service	JNZ	EthIntrHandlerRet	;			MOV	AL, nonSpecificEOI	;Write an EOI command to the 		OUT	i8259MasterAddr0, AL	;master i8259EthIntrHandlerRet:	IN	Ax, EtherNetIntLatch		;	Call ESetReg        inc [bx].E1IntCount   ;Clears the interrupt flipflop 	POPA	STI				;Reenable the interrupts	IRET				; 			;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ;  SUBROUTINE :  ResetChip ;ResetChip:MOV	ENetRst, 1			MOV	AX, RstENetCtlr			CALL    ExtOffWrRstCtlReg	CLI	MOV	AX, EnableMem		Call    ExtOffWrCtlReg		MOV	AX, RstENetCtlr			CALL    ExtOnWrRstCtlReg	MOV	AX, NoResets		        OUT	ENetAttn, AlResetDelay:	MOV	CX,1FFH				Resetloop:	LOOP	Resetloop		MOV	AX, EnableMem		Call    ExtOnWrCtlReg	STI	retMonitorCode	ENDS	END