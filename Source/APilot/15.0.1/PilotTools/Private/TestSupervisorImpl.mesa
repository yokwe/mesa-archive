-- Copyright (C) 1981, 1987  by Xerox Corporation. All rights reserved. -- TestSupervisorImpl.mesa    25-Mar-87 19:54:39 by RSV    DIRECTORY  Process USING [Detach],  Runtime USING [GetBcdTime],  Supervisor,  Time USING [Current],  TTY USING [    Create, Destroy, GetChar, Handle, PutChar, PutCR, PutDate, PutLine, PutString];TestSupervisorImpl: PROGRAM  IMPORTS Process, Runtime, Supervisor, Time, TTY =  BEGIN OPEN Supervisor;  ssA, ssB, ssC, ssD, ssE, ssF: Supervisor.SubsystemHandle;    maxEvents: CARDINAL = 50;  EventNameIndex: TYPE = [0..maxEvents);  eventNames: ARRAY EventNameIndex OF LONG STRING ¬ ALL[NIL];  clientsFirstEvent: Supervisor.Event;  implementorsFirstEvent: Supervisor.Event;    aClientsEvent: Supervisor.Event;  aImplementorsEvent: Supervisor.Event;  bClientsEvent: Supervisor.Event;  bImplementorsEvent: Supervisor.Event;  cClientsEvent: Supervisor.Event;  cImplementorsEvent: Supervisor.Event;  dClientsEvent: Supervisor.Event;  dImplementorsEvent: Supervisor.Event;  eClientsEvent: Supervisor.Event;  eImplementorsEvent: Supervisor.Event;  fClientsEvent: Supervisor.Event;  fImplementorsEvent: Supervisor.Event;    Error: SIGNAL = CODE;    tty: TTY.Handle;  Run: PROC =    BEGIN    tty ¬ TTY.Create["TestSupervisor.log"L];    TTY.PutString[tty, "Supervisor Test of "L];    TTY.PutDate[tty, Runtime.GetBcdTime[], dateOnly];    TTY.PutCR[tty];    TTY.PutDate[tty, Time.Current[], full];    TTY.PutCR[tty];    DO      TestSupervisor[];      IF YesOrNo["Run test again? (y or n) "L, tty] THEN EXIT      ELSE TTY.PutCR[tty];      ENDLOOP;    TTY.Destroy[tty];    END;  -- Run  YesOrNo: PROC [prompt: STRING, ttyHandle: TTY.Handle]    RETURNS [answer: BOOLEAN] =    BEGIN    reply: CHARACTER;    TTY.PutString[ttyHandle, prompt];    DO      reply ¬ TTY.GetChar[ttyHandle];      SELECT reply FROM        'y, 'Y => {TTY.PutLine[ttyHandle, "Yes"L]; answer ¬ TRUE; EXIT};        'n, 'N => {TTY.PutLine[ttyHandle, "No"L]; answer ¬ FALSE; EXIT};        ENDCASE =>          TTY.PutChar[ttyHandle, '?];      ENDLOOP;    END;  -- YesOrNo      agentAInstanceData: LONG STRING = "Agent A";    AgentA: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent A called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  agentBInstanceData: LONG STRING = "Agent B";    AgentB: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent B called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  agentCInstanceData: LONG STRING = "Agent C";    AgentC: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent C called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  agentDInstanceData: LONG STRING = "Agent D";    AgentD: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent D called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  agentEInstanceData: LONG STRING = "Agent E";    AgentE: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent E called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  agentFInstanceData: LONG STRING = "Agent F";    AgentF: Supervisor.AgentProcedure    --[event: Event, eventData: LONG POINTER TO UNSPECIFIED, instanceData: LONG POINTER TO UNSPECIFIED]--     = BEGIN     TTY.PutString[tty, "Agent F called for "L];     TTY.PutString[tty, eventNames[event.eventIndex]];     TTY.PutString[tty, " with "L];     TTY.PutString[tty, eventData];     TTY.PutString[tty, " and instance data for "L];     TTY.PutString[tty, instanceData];     TTY.PutCR[tty];     END;  TestSupervisor: PROCEDURE =    BEGIN  dontCare: BOOLEAN;  nextEventIndex: Supervisor.EventIndex ¬ FIRST[EventIndex];    clientsFirstEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "clients-first event";  nextEventIndex ¬ SUCC[nextEventIndex];    implementorsFirstEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "implementors-first event";  nextEventIndex ¬ SUCC[nextEventIndex];    aClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "A clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    aImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "A implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    bClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "B clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    bImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "B implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    cClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "C clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    cImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "C implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    dClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "D clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    dImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "D implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    eClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "E clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    eImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "E implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    fClientsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "F clients event";  nextEventIndex ¬ SUCC[nextEventIndex];    fImplementorsEvent ¬ Supervisor.Event[nextEventIndex];  eventNames[nextEventIndex] ¬ "F implementors event";  nextEventIndex ¬ SUCC[nextEventIndex];    IF nextEventIndex > maxEvents THEN ERROR;  -- smashed memory.      -- creating and deleting:    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    DeleteSubsystem[ssA];    BEGIN DeleteSubsystem[ssA ! InvalidSubsystem => GOTO OK];    TTY.PutLine[tty, "Didn't raise InvalidSubsystem"L];    EXITS OK => NULL END;    -- adding and deleting dependencies - simple:    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    IF DependsOn[ssA, ssA] THEN Error;    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    IF DependsOn[ssA, ssB] THEN Error;    IF DependsOn[ssB, ssA] THEN Error;    AddDependency[ssA, ssB];    IF ~DependsOn[ssA, ssB] THEN Error;    IF DependsOn[ssB, ssA] THEN Error;    BEGIN AddDependency[ssB, ssA ! CyclicDependency => GOTO OK];    TTY.PutLine[tty, "Didn't raise CyclicDependency"L];    EXITS OK => NULL END;    RemoveDependency[ssA, ssB];    IF DependsOn[ssA, ssB] THEN Error;    IF DependsOn[ssB, ssA] THEN Error;    BEGIN RemoveDependency[ssA, ssB ! NoSuchDependency => GOTO OK];    TTY.PutLine[tty, "Didn't raise NoSuchDependency"L];    EXITS OK => NULL END;    DeleteSubsystem[ssB];    DeleteSubsystem[ssA];    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    AddDependency[ssA, ssB];    DeleteSubsystem[ssB];    BEGIN dontCare ¬ DependsOn[ssA, ssB ! InvalidSubsystem => GOTO OK];    TTY.PutLine[tty, "Didn't raise InvalidSubsystem"L];    EXITS OK => NULL END;    DeleteSubsystem[ssA];    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    AddDependency[ssA, ssB];    DeleteSubsystem[ssA];    BEGIN dontCare ¬ DependsOn[ssB, ssA ! InvalidSubsystem => GOTO OK];    TTY.PutLine[tty, "Didn't raise InvalidSubsystem"L];    EXITS OK => NULL END;    DeleteSubsystem[ssB];        -- Create several dependents on one susbsystem and remove them:    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    ssC ¬ CreateSubsystem[AgentC, agentCInstanceData];    AddDependency[ssA, ssC];    AddDependency[ssB, ssC];    RemoveDependency[ssA, ssC];    RemoveDependency[ssB, ssC];    DeleteSubsystem[ssA];    DeleteSubsystem[ssB];    DeleteSubsystem[ssC];    -- Create several dependents on one susbsystem    -- and remove them in inverse order:    ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    ssC ¬ CreateSubsystem[AgentC, agentCInstanceData];    AddDependency[ssA, ssC];    AddDependency[ssB, ssC];    RemoveDependency[ssB, ssC];    RemoveDependency[ssA, ssC];    DeleteSubsystem[ssA];    DeleteSubsystem[ssB];    DeleteSubsystem[ssC];    -- complex dependencies:    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "The dependency graph illustrated below is constructed."L];    TTY.PutLine[tty, "A block which is completely above another block is a client of it."L];    TTY.PutLine[tty, "A block which is one level above another is a direct client of it."L];    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "   Clients this end"L];    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "  ~~~~~"L];    TTY.PutLine[tty, "  | F |"L];    TTY.PutLine[tty, "  ~~~~~"L];    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "  ~~~~~   ~~~~~"L];    TTY.PutLine[tty, "  | C |   |   |"L];    TTY.PutLine[tty, "  ~~~~~   |   |"L];    TTY.PutLine[tty, "          | A |"L];    TTY.PutLine[tty, "  ~~~~~   |   |"L];    TTY.PutLine[tty, "  | D |   |   |"L];    TTY.PutLine[tty, "  ~~~~~    ~~~~~"L];    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "  ~~~~~   ~~~~~"L];    TTY.PutLine[tty, "  | E |   | B |"L];    TTY.PutLine[tty, "  ~~~~~   ~~~~~"L];    TTY.PutLine[tty, ""L];    TTY.PutLine[tty, "  Implementors this end"L];    TTY.PutLine[tty, ""L];        ssA ¬ CreateSubsystem[AgentA, agentAInstanceData];    ssB ¬ CreateSubsystem[AgentB, agentBInstanceData];    AddDependency[ssA, ssB];    ssC ¬ CreateSubsystem[AgentC, agentCInstanceData];    ssD ¬ CreateSubsystem[AgentD, agentDInstanceData];    AddDependency[ssC, ssD];    AddDependency[ssD, ssB];    ssE ¬ CreateSubsystem[AgentE, agentEInstanceData];    AddDependency[ssA, ssE];    AddDependency[ssD, ssE];    ssF ¬ CreateSubsystem[AgentF, agentFInstanceData];    AddDependency[ssF, ssA];    AddDependency[ssF, ssC];    IF DependsOn[ssA, ssA] THEN Error;    IF DependsOn[ssA, ssC] THEN Error;    IF DependsOn[ssA, ssD] THEN Error;    IF DependsOn[ssA, ssF] THEN Error;    IF DependsOn[ssB, ssA] THEN Error;    IF DependsOn[ssB, ssB] THEN Error;    IF DependsOn[ssB, ssC] THEN Error;    IF DependsOn[ssB, ssD] THEN Error;    IF DependsOn[ssB, ssE] THEN Error;    IF DependsOn[ssB, ssF] THEN Error;    IF DependsOn[ssC, ssA] THEN Error;    IF DependsOn[ssC, ssC] THEN Error;    IF DependsOn[ssC, ssF] THEN Error;    IF DependsOn[ssD, ssA] THEN Error;    IF DependsOn[ssD, ssC] THEN Error;    IF DependsOn[ssD, ssD] THEN Error;    IF DependsOn[ssD, ssF] THEN Error;    IF DependsOn[ssE, ssA] THEN Error;    IF DependsOn[ssE, ssB] THEN Error;    IF DependsOn[ssE, ssC] THEN Error;    IF DependsOn[ssE, ssD] THEN Error;    IF DependsOn[ssE, ssE] THEN Error;    IF DependsOn[ssE, ssF] THEN Error;    IF ~DependsOn[ssA, ssB] THEN Error;    IF ~DependsOn[ssA, ssE] THEN Error;    IF ~DependsOn[ssC, ssB] THEN Error;    IF ~DependsOn[ssC, ssD] THEN Error;    IF ~DependsOn[ssC, ssE] THEN Error;    IF ~DependsOn[ssD, ssB] THEN Error;    IF ~DependsOn[ssF, ssA] THEN Error;    IF ~DependsOn[ssF, ssB] THEN Error;    IF ~DependsOn[ssF, ssC] THEN Error;    IF ~DependsOn[ssF, ssD] THEN Error;    IF ~DependsOn[ssF, ssE] THEN Error;    -- enumeration:    TTY.PutLine[tty, "Notify all subsystems in clients-first order"L];    NotifyAllSubsystems[clientsFirstEvent, "clients-first event data"L, clients];    TTY.PutLine[tty, ""L];        TTY.PutLine[tty, "Notify all subsystems in implementors-first order"L];    NotifyAllSubsystems[implementorsFirstEvent, "implementors-first event data"L, implementors];    TTY.PutLine[tty, ""L];        TTY.PutLine[tty, "Notify clients of A"L];    NotifyDirectSubsystems[      aClientsEvent, "clients of A event data"L, clients, ssA];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of A"L];    NotifyDirectSubsystems[      aImplementorsEvent, "implementors of A event data"L, implementors, ssA];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify clients of B"L];    NotifyDirectSubsystems[      bClientsEvent, "clients of B event data"L, clients, ssB];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of B"L];    NotifyDirectSubsystems[      bImplementorsEvent, "implementors of B event data"L, implementors, ssB];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify clients of C"L];    NotifyDirectSubsystems[      cClientsEvent, "clients of C event data"L, clients, ssC];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of C"L];    NotifyDirectSubsystems[      cImplementorsEvent, "implementors of C event data"L, implementors, ssC];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify clients of D"L];    NotifyDirectSubsystems[      dClientsEvent, "clients of D event data"L, clients, ssD];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of D"L];    NotifyDirectSubsystems[      dImplementorsEvent, "implementors of D event data"L, implementors, ssD];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify clients of E"L];    NotifyDirectSubsystems[      eClientsEvent, "clients of E event data"L, clients, ssE];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of E"L];    NotifyDirectSubsystems[      eImplementorsEvent, "implementors of E event data"L, implementors, ssE];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify clients of F"L];    NotifyDirectSubsystems[      fClientsEvent, "clients of F event data"L, clients, ssF];    TTY.PutLine[tty, ""L];          TTY.PutLine[tty, "Notify implementors of F"L];    NotifyDirectSubsystems[      fImplementorsEvent, "implementors of F event data"L, implementors, ssF];    TTY.PutLine[tty, ""L];          DeleteSubsystem[ssF];    DeleteSubsystem[ssB];    DeleteSubsystem[ssD];    DeleteSubsystem[ssC];    DeleteSubsystem[ssE];    DeleteSubsystem[ssA];    END; --TestSupervisor--  -- Initialization:  Process.Detach[FORK Run[]];  END.LOGMay 27, 1980  10:46 AM   WDK       Created file.Sept. 22, 1981  9:33 AM   XXL   Added NotifyDirectSubsystems.  5-Oct-81 11:09:54   WDK        Make consistent with new interface.  Give it a tty interface. 3-Dec-81  8:35:32   WDK       Add tests for deleting dependencies in forward and backward orders.25-Mar-87 19:55:13   RSV   LONG STRINGs instead of STRINGs for MDS relief.