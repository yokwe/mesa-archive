-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- CHStubImpl2.mesa--last edited by Gealy,   1-Mar-84  0:28:44DIRECTORY  CH USING [    Buffer, ConversationHandle, Element, EnumerateNewGroupElements, Name,    NameStreamProc, Pattern, Properties, PropertyID, ReturnCode, unspecified],  CHMUX USING [PEParm, PEResult],  CHStubInternal USING [CommonDispatcher],  CHSwitches USING [doStubDebug],  MoreCH USING [ACLFlavor];CHStubImpl2: MONITOR IMPORTS CHStubInternal EXPORTS CH, CHStubInternal, MoreCH =  BEGIN  doDebug: BOOLEAN = CHSwitches.doStubDebug;  DumpObject: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachBlock: PROCEDURE [LONG POINTER, CARDINAL], distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    -- raw word dump for debugging    parm: CHMUX.PEParm ¬ [      procedure: dumpObject, chName: name, conversation: conversation,      blkStreamProc: eachBlock];    result: CHMUX.PEResult ¬ [procedure: dumpObject, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupDistinguishedName: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    -- user gives it name, it fills in distingName    parm: CHMUX.PEParm ¬ [      procedure: lookupDistinguishedName, chName: name,      conversation: conversation];    result: CHMUX.PEResult ¬ [      procedure: lookupDistinguishedName, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupValueProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    buffer: CH.Buffer, distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: lookupValue, pn: pn, chName: name, conversation: conversation];    result: CHMUX.PEResult ¬ [      procedure: lookupValue, dn: distingName, rhs: buffer];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupGroupProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    eachElement: CH.NameStreamProc, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: lookupGroup, pn: pn, chName: name, conversation: conversation,      userNameStreamProc: eachElement];    result: CHMUX.PEResult ¬ [procedure: lookupGroup, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupPropertyAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    acl: MoreCH.ACLFlavor, eachElement: CH.NameStreamProc, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: retrievePropertyAccessList, pn: pn, aclist: acl, chName: name,      conversation: conversation, userNameStreamProc: eachElement];    result: CHMUX.PEResult ¬ [      procedure: retrievePropertyAccessList, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupDomainAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, domain: CH.Name, acl: MoreCH.ACLFlavor,    eachElement: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: retrieveDomainAccessList, aclist: acl, chName: domain,      conversation: conversation, userNameStreamProc: eachElement];    result: CHMUX.PEResult ¬ [procedure: retrieveDomainAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupOrgAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, org: CH.Name, acl: MoreCH.ACLFlavor,    eachElement: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: retrieveOrgAccessList, aclist: acl, chName: org,      conversation: conversation, userNameStreamProc: eachElement];    result: CHMUX.PEResult ¬ [procedure: retrieveOrgAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  LookupAliasesOfName: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachAlias: CH.NameStreamProc, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateAliasesOfAName, chName: name,      conversation: conversation, userNameStreamProc: eachAlias];    result: CHMUX.PEResult ¬ [      procedure: enumerateAliasesOfAName, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  IsMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Name, name: CH.Name,    pn: CH.PropertyID, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode, isMember: BOOLEAN] =    BEGIN    -- isMember is FALSE if anything goes wrong.    parm: CHMUX.PEParm ¬ [      procedure: isMemberClosure, pn: pn, chName: name,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: isMemberClosure, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    isMember ¬ result.bool.value;    END;  IsMemberClosure: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Name, name: CH.Name,    pn: CH.PropertyID, distingName: CH.Name, pn2: CH.PropertyID]    RETURNS [rc: CH.ReturnCode, isMember: BOOLEAN] =    BEGIN    -- isMember is FALSE if anything goes wrong.    parm: CHMUX.PEParm ¬ [      procedure: isMemberClosure, pn: pn, pn2: pn2, chName: name,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: isMemberClosure, dn: distingName];    IF pn2 = CH.unspecified THEN parm.pn2 ¬ pn;    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    isMember ¬ result.bool.value;    END;  IsMemberOfPropertyAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, name: CH.Name,    pn: CH.PropertyID, acl: MoreCH.ACLFlavor, distingName: CH.Name,    pn2: CH.PropertyID] RETURNS [rc: CH.ReturnCode, isMember: BOOLEAN] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: isInPropertyAccessList, pn: pn, aclist: acl, pn2: pn2,      chName: name, conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: isInPropertyAccessList, dn: distingName];    IF pn2 = CH.unspecified THEN parm.pn2 ¬ pn;    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    isMember ¬ result.bool.value;    END;  IsMemberOfDomainAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, domain: CH.Name,    acl: MoreCH.ACLFlavor, pn2: CH.PropertyID]    RETURNS [rc: CH.ReturnCode, isMember: BOOLEAN] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: isInDomainAccessList, aclist: acl, pn2: pn2, chName: domain,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: isInDomainAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    isMember ¬ result.bool.value;    END;  IsMemberOfOrgAccess: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, org: CH.Name,    acl: MoreCH.ACLFlavor, pn2: CH.PropertyID]    RETURNS [rc: CH.ReturnCode, isMember: BOOLEAN] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: isInOrgAccessList, aclist: acl, pn2: pn2, chName: org,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: isInOrgAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    isMember ¬ result.bool.value;    END;  Enumerate: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    eachName: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerate, pn: pn, chName: name, conversation: conversation,      userNameStreamProc: eachName];    result: CHMUX.PEResult ¬ [procedure: enumerate];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  EnumerateDomains: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Element,    eachDomain: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateDomains, chName: name, conversation: conversation,      userNameStreamProc: eachDomain];    result: CHMUX.PEResult ¬ [procedure: enumerateDomains];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  EnumerateOrganizations: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, orgPattern: CH.Element,    eachOrg: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateOrganizations, conversation: conversation,      chName: orgPattern, userNameStreamProc: eachOrg];    result: CHMUX.PEResult ¬ [procedure: enumerateOrganizations];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  EnumerateAliases: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachAlias: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateAliases, chName: name, conversation: conversation,      userNameStreamProc: eachAlias];    result: CHMUX.PEResult ¬ [procedure: enumerateAliases];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  GetProperties: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Pattern, distingName: CH.Name,    heap: UNCOUNTED ZONE] RETURNS [rc: CH.ReturnCode, properties: CH.Properties] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateProperties, chName: name, conversation: conversation,      heap: heap];    result: CHMUX.PEResult ¬ [procedure: enumerateProperties, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    properties ¬ result.properties;    END;  FreeProperties: PUBLIC PROCEDURE [    properties: LONG POINTER TO CH.Properties, heap: UNCOUNTED ZONE] =    BEGIN    freeArray: LONG POINTER ¬ BASE[properties­];    heap.FREE[@freeArray];    properties­ ¬ NIL;    END;  EnumerateObjects: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachName: CH.NameStreamProc] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: enumerateObjects, chName: name, conversation: conversation,      userNameStreamProc: eachName];    result: CHMUX.PEResult ¬ [procedure: enumerateObjects];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddDistinguishedName: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addName, chName: name, conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: addName, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteDistinguishedName: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteName, chName: name, conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: deleteName, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddAlias: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name, newAliasName, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addAlias, chName: newAliasName, conversation: conversation,      element: name];    result: CHMUX.PEResult ¬ [procedure: addAlias, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteAlias: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, aliasName: CH.Name, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteAlias, chName: aliasName, conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: deleteAlias, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddValueProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    rhs: CH.Buffer, distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addValue, pn: pn, chName: name, conversation: conversation,      rhs: rhs];    result: CHMUX.PEResult ¬ [procedure: addValue, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  ChangeValueProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    newRhs: CH.Buffer, distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: changeValue, pn: pn, chName: name, conversation: conversation,      rhs: newRhs];    result: CHMUX.PEResult ¬ [procedure: changeValue, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddGroupProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    elementEnumerator: CH.EnumerateNewGroupElements ¬ NIL, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    NoElements: CH.EnumerateNewGroupElements = {};    parm: CHMUX.PEParm ¬ [      procedure: addGroup, pn: pn, chName: name, conversation: conversation,      newElementEnumerator: elementEnumerator];    result: CHMUX.PEResult ¬ [procedure: addGroup, dn: distingName];    IF elementEnumerator = NIL THEN parm.newElementEnumerator ¬ NoElements;    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteProperty: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteProperty, pn: pn, chName: name,      conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: deleteProperty, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddGroupMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Name, name: CH.Name,    pn: CH.PropertyID, distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addMember, pn: pn, chName: name, conversation: conversation,      element: element];    result: CHMUX.PEResult ¬ [procedure: addMember, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteGroupMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Name, name: CH.Name,    pn: CH.PropertyID, distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteMember, pn: pn, chName: name, conversation: conversation,      element: element];    result: CHMUX.PEResult ¬ [procedure: deleteMember, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddPropertyAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, name: CH.Name,    pn: CH.PropertyID, acl: MoreCH.ACLFlavor, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addMemberToPropertyAccessList, pn: pn, aclist: acl, chName: name,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [      procedure: addMemberToPropertyAccessList, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeletePropertyAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, name: CH.Name,    pn: CH.PropertyID, acl: MoreCH.ACLFlavor, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteMemberFromPropertyAccessList, pn: pn, aclist: acl,      chName: name, conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [      procedure: deleteMemberFromPropertyAccessList, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddDomainAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, domain: CH.Name,    acl: MoreCH.ACLFlavor] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addMemberToDomainAccessList, aclist: acl, chName: domain,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: addMemberToDomainAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteDomainAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, domain: CH.Name,    acl: MoreCH.ACLFlavor] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteMemberFromDomainAccessList, aclist: acl, chName: domain,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: deleteMemberFromDomainAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddOrgAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, org: CH.Name,    acl: MoreCH.ACLFlavor] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addMemberToOrgAccessList, aclist: acl, chName: org,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: addMemberToOrgAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteOrgAccessMember: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, element: CH.Element, org: CH.Name,    acl: MoreCH.ACLFlavor] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteMemberFromOrgAccessList, aclist: acl, chName: org,      conversation: conversation, element: element];    result: CHMUX.PEResult ¬ [procedure: deleteMemberFromOrgAccessList];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  AddSelf: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: addSelf, pn: pn, chName: name, conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: addSelf, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  DeleteSelf: PUBLIC PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name, pn: CH.PropertyID,    distingName: CH.Name] RETURNS [rc: CH.ReturnCode] =    BEGIN    parm: CHMUX.PEParm ¬ [      procedure: deleteSelf, pn: pn, chName: name, conversation: conversation];    result: CHMUX.PEResult ¬ [procedure: deleteSelf, dn: distingName];    CHStubInternal.CommonDispatcher[conversation.address, @parm, @result];    rc ¬ [result.code, result.which];    END;  END..LOG 1-Sep-83 11:54:22 - BLyon23-Nov-83 16:37:37 - Gealy - Convert to 8.0 CH and Auth 1-Mar-84  0:29:11 - Gealy - Move Creds checkout to StubImpl