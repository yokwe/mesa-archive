-- Copyright (C) 1984  by Xerox Corporation. All rights reserved. -- CHStubInternal.mesa-- last edited by read,   17-Jun-84 15:46:30  DIRECTORY  CH USING [    Buffer, Code, ConversationHandle, Element, ReturnCode, Name, NameStreamProc],  CHProtocol USING [Parm, Result, TimestampPtr],  ExpeditedCourier USING [AddrList, AddrObject, ExpandingRingAction],  NSString USING [String],  System USING [NetworkAddress];CHStubInternal: DEFINITIONS =  BEGIN  -- utilities  CopyNames: PROCEDURE [    to, from: CH.Name, copyOrg, copyDomain, copyLocal: BOOLEAN ¬ TRUE];  -- may SIGNAL CH.NameTooSmall  CheckName: PROCEDURE [    name: CH.Name, wildOrgOK, wildDomainOK, wildLocalOK: BOOLEAN]    RETURNS [code: CH.Code];  -- given a three part CH name, this procedure verifies that   -- a) each subfield is the right length  -- b) each subfield is a valid NSString.String, and   -- c) that wildcard do not exist if not allowed.  CheckString: PROCEDURE [    s: NSString.String, maxLength: CARDINAL, wildcardOK: BOOLEAN]    RETURNS [ok: BOOLEAN];  -- used by CheckName  Dispatcher: TYPE = PROCEDURE [p: CHProtocol.Parm, r: CHProtocol.Result];  PokeTheStub: PROCEDURE;  -- internal workings  StubDispatcher: Dispatcher;  -- stub dispatcher  -- uses three transport mechanisms - Courier, PacketExchnage, or   -- direct call to CHServerDispatcher.Dispatch (via its notice routine).  CommonDispatcher: PROCEDURE [server: LONG POINTER TO System.NetworkAddress,    p: CHProtocol.Parm, r: CHProtocol.Result];  NoteCHServer: PROCEDURE [    notice: Dispatcher, localEnumerator: PROC [CH.NameStreamProc]];  -- Server calls this to tell stub about its existence.  The stub can then use  -- notice to call directly into the server.  notice, localEnumerator  -- may be NIL.  localEnumerator lets the stub call back to the server to   -- discover what domains are local  SetTestMode: PROCEDURE[on: BOOLEAN, testModeNumber: CARDINAL[0..100]];  RemoteIHaveYourName: PROCEDURE [    conversation: CH.ConversationHandle, serverName: CH.Name];  WhoAreYou: PROCEDURE [    conversation: CH.ConversationHandle, rhs: CH.Buffer, distingName: CH.Name]    RETURNS [rc: CH.ReturnCode];  EnumerateYourDomains: PROCEDURE [    server: System.NetworkAddress, eachName: CH.NameStreamProc]    RETURNS [rc: CH.ReturnCode];  -- cache interface  AddrList: TYPE = ExpeditedCourier.AddrList;  AddrObject: TYPE = ExpeditedCourier.AddrObject;  BuildCHServerAddrList: PROCEDURE [    maxRingSize: CARDINAL, action: ExpeditedCourier.ExpandingRingAction]    RETURNS [l: AddrList];  FreeAddrList: PROCEDURE [l: AddrList];  AddressMappingsInFlux: PROCEDURE RETURNS [influx: BOOLEAN];  FindOrgAddr: PROCEDURE [name: CH.Name] RETURNS [addr: System.NetworkAddress];  FindDomainAddr: PROCEDURE [names: CH.Name]    RETURNS [addr: System.NetworkAddress];  NoteBusyServer: PROCEDURE [queryName: CH.Name, addr: System.NetworkAddress]    RETURNS [foundAlternateAddr: BOOLEAN];  ProcessHint: PROCEDURE [conversation: CH.ConversationHandle,    hint: CH.Name, currentServer: System.NetworkAddress]    RETURNS [ok: BOOLEAN];  NoteLocalServer: PROCEDURE [    isAlive: BOOLEAN, localEnumerator: PROC [CH.NameStreamProc]];  -- companion to NoteCHServer.  InvalidateAddr: PROCEDURE [addr: System.NetworkAddress];  RestartTheCache: PROCEDURE;  TimestampPtr: TYPE = CHProtocol.TimestampPtr;  RemoteNewDumpObject: PROCEDURE [    conversation: CH.ConversationHandle, objectName: CH.Name,    myServerName: CH.Name, eachBlock: PROCEDURE [LONG POINTER, CARDINAL],    distingName: CH.Name] RETURNS [rc: CH.ReturnCode];  CompareObject: PROCEDURE [    conversation: CH.ConversationHandle, objectName: CH.Name,    myServerName: CH.Name, myChecksum: CARDINAL, myGts: CHProtocol.TimestampPtr]    RETURNS [rc: CH.ReturnCode, theObjectShouldBeSnarfed: BOOLEAN];  DumpObject: PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachBlock: PROCEDURE [LONG POINTER, CARDINAL], distingName: CH.Name]    RETURNS [rc: CH.ReturnCode];  -- raw word dump for debugging  EnumerateObjects: PROCEDURE [    conversation: CH.ConversationHandle, name: CH.Name,    eachName: CH.NameStreamProc]    RETURNS [rc: CH.ReturnCode];  -- name.localName is ignored.  No wildcard characters are allowed in name.  -- Only the LocalName field of the record is filled-in for each Name   -- acquired through the call back procedure eachName.    GetDomainSize: PROCEDURE [    conversation: CH.ConversationHandle, domainName: CH.Name]    RETURNS [rc: CH.ReturnCode, size: LONG CARDINAL];    -- returns the size of the domain in bytes.      AddToUnavailableDomains: PROCEDURE [domainName: CH.Name];  -- tells the stub to remember (for a short time) that a domain is unreachable    IsDomainAvailable: PROCEDURE [domainName: CH.Name] RETURNS [itIs: BOOLEAN];  END..LOG 4-May-83 10:46:05 - BLyon    2-Sep-83 11:23:09 - BLyon30-Sep-83 16:32:26 - Stucke    11-Oct-83 16:54:52 - Read 23-Nov-83 15:28:34 - Gealy - Convert to 8.0 CH and Auth      9-Jan-84 15:28:50 - Gealy - mode number for TestMode     13-Feb-84 12:30:09 - Gealy - Allow test mode to be turned off.28-Apr-84 21:28:13 - read - added GetDomainSize 17-Jun-84 15:46:15 - read - added AddToUnavailableDomains and IsDomainAvailable 