-- Copyright (C) 1982, 1984  by Xerox Corporation. All rights reserved. -- File: GateStream.mesa - last edit:-- Danielson.PA         4-Jan-84 17:35:17-- This interface is the public interface to Gateway software-- Gateway software allows communication with non-NS devicesDIRECTORY  Auth USING [ConversationHandle, Credentials, Verifier],  RS232C USING [    AutoRecognitionOutcome, CharLength, CommParamObject,    Parity, ReserveType, StopBits],  NSName USING [Name],  NSString USING [String],  Stream USING [Handle, SubSequenceType],  System USING [NetworkAddress, nullNetworkAddress];GateStream: DEFINITIONS IMPORTS System =  BEGIN     -- NOTE: the only procedure that may be called remotely is  -- Create.  All other procedures are only supported locally.    -- Create and Reserve now take ConversationHandle.  If the handle is NIL,  -- then it is assumed that no authentication information is being passed and  -- no calls will be made by Gateway software to the Authentication stub.    -- Create creates a Gateway stream.  -- Use System.nullNetworkAddress to access local machine  Create: PROCEDURE [    service: System.NetworkAddress ¬ System.nullNetworkAddress,    sessionParameterHandle: SessionParameterHandle,    transportList: LONG DESCRIPTOR FOR ARRAY OF TransportObject,    createTimeout: WaitTime ¬ infiniteTime,    conversation: Auth.ConversationHandle ¬ NIL]     RETURNS [stream: Stream.Handle];  -- Reserve reserves a resource without creating a Gateway stream.  The client  -- can later create the Gateway stream using the reserved resource.  The  -- client may optionally supply a client-supplied procedure to be called  -- when the resource becomes active (e.g., when DSR becomes TRUE for  -- RS232C dial-in lines) or when auto-recognition occurs.  Currently,  -- Reserve only works for the rs232c transport.  Reserve: PROCEDURE [    transport: TransportObject,     completionProcedure: CompletionProcedure,    callBackType: CallBackType,    conversation: Auth.ConversationHandle ¬ NIL]     RETURNS [resource: Resource];    -- AbortReserve is used to free a resource allocated with Reserve that  -- has not been later passed to a GateStream.Create.    AbortReserve: PROCEDURE [resource: Resource];  -- After Reserving a resource, the client can later pass that resource to  -- the NS routing software.  This is normally done after auto-recognition occurs  -- and currently only works for rs232c devices.  UseMediumForNS: PROCEDURE [transport: TransportObject];  -- Transfer and obtain allow gateway streams to be passed between clients.  -- These procedures are currently unimplemented  Transfer: PROCEDURE [sH: Stream.Handle] RETURNS [transfer: TransferID];  Obtain: PROCEDURE [    service: System.NetworkAddress ¬ System.nullNetworkAddress,    transfer: TransferID] RETURNS [stream: Stream.Handle];  -- SetWaitTime sets the timeout value for Stream.Gets and Stream.Puts.  -- SetWaitTime removed.  Clients should use Stream interface calls.  -- ExportGatewayService exports the GAP protocol.  ExportGAP: PROCEDURE;  UnexportGAP: PROCEDURE;   -- The following procedures allow services to register themselves with  -- Gateway software. Register specifies the service ID  -- and the validate and create  -- procedure to be called when GAP receives an incoming call for that service  -- ID.  For backward compatibility, connections to RS-232-C lines numbers  -- of ID+32000 are also passed to the service.    -- The validate procedure can either accept the call or reject it.  -- To accept the call the procedure simply returns.  To reject the call,  -- the procedure should signal GateStream.Error with an appropriate reason.    -- If the call is accepted, the client's create procedure is  -- called.  This procedure is passed a stream handle for data transfer use.  -- The client ends the connection by returning from the create procedure.  -- The client should not call Stream.Delete.   Register: PROCEDURE [serviceID: LONG CARDINAL,    validate: ValidateProcedure, create: CreateProcedure];  UnRegister: PROCEDURE [serviceID: LONG CARDINAL];      ValidateProcedure: TYPE =  PROCEDURE [    systemElement: System.NetworkAddress,    sessionParameters: SessionParameterHandle,    transport: LONG DESCRIPTOR FOR ARRAY OF TransportObject,     credentials: Auth.Credentials,    verifier: Auth.Verifier];  CreateProcedure: TYPE = PROCEDURE [    systemElement: System.NetworkAddress,    sessionParameters: SessionParameterHandle,    transport: LONG DESCRIPTOR FOR ARRAY OF TransportObject,     credentials: Auth.Credentials,    verifier: Auth.Verifier,    sH: Stream.Handle];    -- Note: Some of the following types are machine dependent records aligned  -- so they can be used as Courier data types  -- The SessionParameterHandle describes parameters about the session  -- and the foreign device.  SessionParameterHandle: TYPE = LONG POINTER TO SessionParameterObject;  SessionParameterObject: TYPE = MACHINE DEPENDENT RECORD [    variantPart(0): SELECT foreignDevice(0): ForeignDevice FROM      xerox800 => NULL,      xerox850, xerox860 => [pollProc(1): PollProc],      system6, cmcII, ibm2770, ibm2770Host, ibm6670, ibm6670Host,      ibm2780, ibm2780Host, ibm3780, ibm3780Host => [        sendBlocksize(1), receiveBlocksize(2): [1..512]],      ttyHost, tty => [        charLength(1): RS232C.CharLength,        parity(2): RS232C.Parity,        stopBits(3): RS232C.StopBits,        frameTimeout(4): CARDINAL],  -- milliseconds      ibm3270, ibm3270Host, siemens9750, siemens9750Host => NULL,      other => NULL,      unknown => NULL,      ENDCASE];  -- A TransportObject specifies a single level of the transport service.  TransportObject: TYPE = MACHINE DEPENDENT RECORD [    transport(0): SELECT transportType(0): Transport FROM      rs232c => [         commParams(1): LONG POINTER TO RS232C.CommParamObject,  --     	preemptOthers(3), preemptMe(4): RS232C.ReserveType,  -- preemption 	phoneNumber(5): LONG STRING,  -- phone number to dial, if auto-dailed	line(7): Line],  -- RS232C line number/resource to use      bsc => [        localTerminalID(1): LONG STRING,  -- my terminal ID        localSecurityID(3): LONG STRING,  -- my security ID        lineControl(5): LineControl, -- primary or secondary        authenticateProc(6): AuthenticateProc,  -- proc to handle incoming IDs	bidReply(8): BidReply,  -- how to reply to bids	sendLineHoldingEOTs(9): SpecialBoolean, -- do we send EOTS?	expectLineHoldingEOTs(10): SpecialBoolean],  -- do we expect EOTS?      teletype => NULL,  -- no parameters yet!      polledBSCController => [-- used by ECS to create BSC controller        hostControllerName(1): LONG STRING, -- Controller/Host coupling	alternateControllerName(3): LONG STRING, -- Alternate name	controllerAddress(5): ControllerAddress, -- Control Unit Host Address	portsOnController(6): CARDINAL, -- dependent on Host configuration	sendBlockSize(7): CARDINAL, -- maximum size of send block	devicesOnController(8): LONG DESCRIPTOR FOR ARRAY OF DeviceType,	accessControl(11): LONG DESCRIPTOR FOR ARRAY OF NSName.Name,	controllerName(14): NSName.Name,	controllerPassword(16): NSString.String],       sdlcController => [ -- used to create SDLC controller        hostControllerName(1): LONG STRING, -- Controller/Host coupling	alternateControllerName(3): LONG STRING, -- Alternate host name	controllerAddress(5): ControllerAddress, -- Control Unit Host Address	portsOnController(6): CARDINAL, -- dependent on Host configuration	linkBlockSize(7): CARDINAL, -- maximum size of block on SDLC link	controllerXID(8): LONG STRING, -- XID response of controller (hex chars)	devicesOnController(10): LONG DESCRIPTOR FOR ARRAY OF DeviceType, 	accessControl(13): LONG DESCRIPTOR FOR ARRAY OF NSName.Name,	controllerName(16): NSName.Name,	controllerPassword(18): NSString.String],       polledBSCTerminal, sdlcTerminal, polledBSCPrinter, sdlcPrinter =>        [-- used by Client to create term/printer        hostControllerName(1): LONG  STRING,	  -- for associating Terminal Address with  Controller/Host coupling        deviceAddress(3): DeviceAddress], -- Device Address (CU Port)      service => [ -- virtual terminal connecting to a service        id(1): LONG CARDINAL], -- service identification      ttyPort => [ -- create a TTY stream transducer        name(1): LONG STRING],  -- name of TTY instance	ENDCASE];      DeviceType: TYPE = {undefined, terminal, printer};      CodeSet: TYPE = {ascii, ebcdic};  -- Currently unused  BidReply: TYPE = {WACK, NAK, default};  SpecialBoolean: TYPE = {true, false, default};    Line: TYPE = MACHINE DEPENDENT RECORD [    line(0): SELECT reserve(0): ReserveType FROM  -- line to use      alreadyReserved => [resource(1): Resource],  -- using pre-allocated line      reserveNeeded => [lineNumber(1): CARDINAL],  -- allocate line      ENDCASE];    -- CompletionProcedure describes the type of client-supplied procedure  -- called when either autoRecognition occurs or the line becomes active.  -- No GateStream operations may be called by this procedure.  Normally,  -- it will either FORK a process which calls either GateStream.Create or  -- GateStream.UseMediumForNS.  CompletionProcedure: TYPE = PROCEDURE [resource: Resource,    results: ReserveResults];  ReserveResults: TYPE = MACHINE DEPENDENT RECORD [    variantPart(0): SELECT callback(0): CallBackType FROM      callOnAutoRecognition => [outcome(1): RS232C.AutoRecognitionOutcome],      callOnActive => [success(1): BOOLEAN],      dontCall => NULL,      ENDCASE];  CallBackType: TYPE = {callOnAutoRecognition, callOnActive, dontCall};    -- ForeignDevice describes the types of non-NS systems supported by GateStream.  -- The word host in a device name means that GateStream talks to a host as  -- though GateStream was device named (emulation) rather than GateStream   -- talking to the device named.  ForeignDevice: TYPE = {    xerox800, xerox850, xerox860, system6, cmcII, ibm2770, ibm2770Host, ibm6670,    ibm6670Host, ibm3270, ibm3270Host, ttyHost, tty, other, unknown, ibm2780,    ibm2780Host, ibm3780, ibm3780Host, siemens9750, siemens9750Host};  LineControl: TYPE = {primary, secondary};    ControllerAddress: TYPE = CARDINAL;  DeviceAddress: TYPE = CARDINAL;  unspecifiedDeviceAddress: DeviceAddress = LAST[DeviceAddress];      -- unspecifiedDeviceAddress means use ANY available terminal/printer  ReserveType: TYPE = {alreadyReserved, reserveNeeded};  Resource: TYPE [2];  TransferID: TYPE [2];  Transport: TYPE = {rs232c, bsc, teletype, polledBSCController,    polledBSCTerminal, sdlcController, sdlcTerminal, service, ttyPort,    polledBSCPrinter, sdlcPrinter};    -- AuthenticateProc is a client-supplied procedure called for certain BSC  -- devices to authenticate remote security and terminal identifications.  -- AuthenticateProcs are only supported for local GateStreams.  Remote  -- GateStreams should specify a NopAuthenticateProc.  AuthenticateProc: TYPE = PROCEDURE [idString: IDString] RETURNS [BOOLEAN];  IDString: TYPE = MACHINE DEPENDENT RECORD [    variantPart(0): SELECT idType(0): IDType FROM    remoteTerminalID => [string(1): LONG STRING],    securityID => [string(1): LONG STRING],    ENDCASE];  IDType: TYPE = {remoteTerminalID, securityID};  NopAuthenticateProc: AuthenticateProc = NIL;  -- PollProc is a client-supplied procedure called on receipt to a file poll  -- from a Xerox850 or Xerox860.  PollProcs are only supported for local  -- GateStreams.  Remote GateStreams should specify a NopPollProc.  PollProc: TYPE = PROCEDURE [pollString: LONG STRING] RETURNS [BOOLEAN];  NopPollProc: PollProc = NIL;  -- WaitTime describes the timeout value for Creates  WaitTime: TYPE = CARDINAL;  -- in seconds --  infiniteTime: WaitTime = LAST[CARDINAL];  -- Constants  -- generic controls (SSTs and attentions to/from client)  -- these are out-of-band  none: Stream.SubSequenceType = 300B;  -- no control, i.e. data  interrupt: Stream.SubSequenceType = 301B;  resume: Stream.SubSequenceType = 302B;  audibleSignal: Stream.SubSequenceType = 303B;  areYouThere: Stream.SubSequenceType = 304B;  iAmHere: Stream.SubSequenceType = 305B;  abortGetTransaction: Stream.SubSequenceType = 306B;  abortPutTransaction: Stream.SubSequenceType = 307B;  -- these are in-band    endOfTransaction: Stream.SubSequenceType = 310B;  yourTurnToSend: Stream.SubSequenceType = 311B;  disconnect: Stream.SubSequenceType = 312B;  transparentDataFollows: Stream.SubSequenceType = 313B;  endOfTransparentData: Stream.SubSequenceType = 314B;  abortMark: Stream.SubSequenceType = 315B;    -- The following SST is used to color parameter data  parameters: Stream.SubSequenceType = 343B;    -- Data errors: these are errors that some protocols can't correct  -- so they are returned to the client  parityError: Stream.SubSequenceType = 316B;  garbledReceiveData: Stream.SubSequenceType = 317B;  -- Gateway global status (attentions from Gateway Software only)  -- need these because they don't relate to single operations  -- these are out-of-band    -- Note: the attention cleanup is no longer used to abort operations.  Instead,  -- clients issue a Process.Abort.  Also, get no longer returns the sst  -- cleanup when the stream ends.  Instead, Stream.EndOfStream is returned.  mediumUp: Stream.SubSequenceType = 321B;  mediumDown: Stream.SubSequenceType = 322B;  ourAccessIDRejected: Stream.SubSequenceType = 323B;  weRejectedAccessID: Stream.SubSequenceType = 324B;  noGetForData: Stream.SubSequenceType = 325B;  unsupportedProtocolFeature: Stream.SubSequenceType = 326B;  unexpectedRemoteBehavior: Stream.SubSequenceType = 327B;  unexpectedSoftwareFailure: Stream.SubSequenceType = 330B;  remoteNotResponding: Stream.SubSequenceType = 331B;  remoteNotReceiving: Stream.SubSequenceType = 332B;  excessiveRetransmissions: Stream.SubSequenceType = 333B;    -- 3270 specific controls    chain3270: Stream.SubSequenceType = 334B;      -- Controller to Terminal  [In-band]      -- Following logical message has more than one command   unchained3270: Stream.SubSequenceType = 335B;      -- Controller to Terminal  [In-band]       -- Following logical message has one command  readModified3270: Stream.SubSequenceType = 336B;      -- Terminal to Controller  [In-band]       -- Following message is of type Read Modified  readModifiedAll3270: Stream.SubSequenceType = 344B;      -- Terminal to Controller  [In-band]       -- Following message is response to Read Modified All  readBuffer3270: Stream.SubSequenceType = 345B;      -- Terminal to Controller  [In-band]       -- Following message is response to Read Buffer  status3270: Stream.SubSequenceType = 337B;      -- Terminal to Controller  [In-band]      -- Following message is status of Workstation  testRequest3270: Stream.SubSequenceType = 340B;      -- Terminal to Controller  [In-band]      -- Following message is of type Test Request  sscpData: Stream.SubSequenceType = 342B;      -- Terminal to Controller [In-band]      -- Controller to terminal [In-band]      -- Following message is part of SSCP-LU session  configurationMismatch3270: Stream.SubSequenceType = 341B;      -- Controller to Controller Creator [Out-of-band]      -- 3270 Host/Controller configuration mismatch  hostPolling3270: Stream.SubSequenceType = 370B;      -- Controller to Terminal [Out-of-band]      -- 3270 Host/Controller polling  hostNotPolling3270: Stream.SubSequenceType = 371B;      -- Controller to Terminal [Out-of-band]      -- 3270 Host/Controller not polling                    bindFailed: Stream.SubSequenceType = 346B;      -- Controller to ControllerCreator [Out-of-band]      -- 3270 SNA bind failed.  Possible bind param mismatch.  puActive: Stream.SubSequenceType = 347B;      -- Controller to Controller Creator/Terminal [Out-of-band]      -- SNA PU activated  puInactive: Stream.SubSequenceType = 350B;      -- Controller to Controller Creator/Terminal [Out-of-band]      -- SNA PU deactivated         -- Extra SSTs for emergencies     spareSSTValue1: Stream.SubSequenceType = 372B;  spareSSTValue2: Stream.SubSequenceType = 373B;  -- The following SSTs are used internally by Gateway software.    -- NetworkStream.closeReplySST: Stream.SubSequenceType = 377B;  -- NetworkStream.closeSST: Stream.SubSequenceType = 376B;  sstToRemoveAttentionByte: Stream.SubSequenceType = 375B;  endOfTransactionAck: Stream.SubSequenceType = 374B;  cleanup: Stream.SubSequenceType = 320B;  -- no longer used by client  -- Errors  Error: ERROR [reason: ErrorReason];  ErrorReason: TYPE = {    unimplemented,  -- device, option or procedure not implemented    noCommunicationHardware,  -- the line specified does not exist    illegalTransport,  -- the transport specified is not supported    mediumConnectFailed,  -- dialing failed because of no answer or busy signal,    badAddressFormat,  -- phone number has bad format or too long    noDialingHardware,  -- tried to dial, but dialing hardware didn't exist,    dialingHardwareProblem,  -- tried to dial, but hardware failure occurred    transmissionMediumUnavailable,  -- could not reserve RS232C line.    inconsistentParams,  -- parameters invalid or conflict with hardware    tooManyGateStreams,  -- too many clients using Gateway software    bugInGAPCode, -- Courier returned error type indicating bug in GAP code,    gapNotExported, -- GAP is not exported by the system element specified,    gapCommunicationError, -- network connection failed during Create,    controllerAlreadyExists, -- 3270 Controller Create only,    controllerDoesNotExist, -- 3270 Terminal/Printer Create only,    deviceAddressInUse, -- 3270 Terminal/Printer Create only,    deviceAddressInvalid,       -- 3270 Terminal/Printer Create - not [0..portsOnController),    -- The following are new error reasons for Services 8.0 --    serviceTooBusy,  -- service create only - too busy to accept connection    userNotAuthenticated, -- could not verify that user is valid user    userNotAuthorized, -- user not authorized to use this service,    serviceNotFound, -- service requested not registered on this server    registeredTwice,  -- (Register only) service with same ID registered    -- The following are failures happen for remote calls (via GAP) only.    networkTransmissionMediumHardwareProblem,  --  net access/hardware problem    networkTransmissionMediumUnavailable,  -- net access/perm. unavailable    networkTransmissionMediumNotReady,  -- net access/temp unavailable/need dial?    networkNoAnswerOrBusy, -- remote modem not answering/responding    noRouteToGAPService,  -- remote service not reachable/internet problem    gapServiceNotResponding,  -- remote service doesn't response/probably dead    courierProtocolMismatch,  -- server and stub use incompatible Courier impls    gapVersionMismatch};  -- server and stub use incompatible GAP impls  END.LOG20-May-81 15:36:56  BRD  Back to using transportList; added Reserve procedure.10-Aug-81 18:38:19  BRD  Added abortMark sst.18-Sep-81 17:10:49  BRD  Mod to UnexportGAP25-Nov-81 11:18:25  BRD  Added readModified3270 SST 5-Dec-81 11:56:07  DDM  Added unchained3270 SST and 3270 ErrorReasons15-Dec-81 12:02:15  BRD  Longified strings16-Dec-81 17:05:31  MMC  Added to polledBSCController variant of Transport Object16-Mar-82 14:12:09  BRD/SAB  1) Added option for bid reply type                          2) Added option for sending/receiving line holding EOTs			 3) Added additional SSTs for 3270 configuration errors  			 4) Added some "extra" SST values for emergencies 6-Oct-82 14:51:54  MZA  Renamed extraSSTs to host(Not)Polling3270;  			 added spareSSTs 8-Jul-83 14:48:29  BRD  1) Added ibm2780 and ibm2780Host device types 			 2) Added service registering			 3) Added definitions for SNA 3270			 4) Merged changes from GateStreamExtras.26-Aug-83 18:11:34  BRD  1) Added authentication26-Sep-83 11:07:24  BRD  1) Suggestions/fixes from Mary and Sarah Ann 9-Dec-83 10:37:09  BRD  1) Added siemens device types 			 2) Added more communication related errors			 3) New Auth interface 4-Jan-84 16:55:54  BRD  1) New attentions for 3270 SNA 