-- Copyright (C) 1981, 1985  by Xerox Corporation. All rights reserved. -- CFDStream.mesa (last edited by: Danielson on: 27-Nov-81 14:08:23) --DIRECTORY  Environment: FROM "Environment",  Stream: FROM "Stream";CFDStream: DEFINITIONS =  BEGIN  --The following types are used by all clients   Handle: TYPE = LONG POINTER TO Object;  SubSequenceType: TYPE = Stream.SubSequenceType;  Byte: TYPE = Stream.Byte;  PhysicalRecordHandle: TYPE = POINTER TO PhysicalRecord;  PhysicalRecord: TYPE = RECORD [    header: Environment.Block,    body: Environment.Block,    trailer: Environment.Block];  InputOptions: TYPE = Stream.InputOptions;  CompletionCode: TYPE = Stream.CompletionCode;  --The following are useful defaults available to all clients     nullPhysicalRecord: PhysicalRecord = [[NIL, 0, 0], [NIL, 0, 0], [NIL, 0, 0]];  defaultInputOptions: InputOptions = Stream.defaultInputOptions;  --The following are the data transmission operations   GetBlock: PROCEDURE [sH: Handle, physicalRecordHandle: PhysicalRecordHandle]    RETURNS [      bytesTransferred: CARDINAL, why: CompletionCode, sst: SubSequenceType] =    INLINE    -- Calls sH.get with the appropriate parameters    BEGIN    [bytesTransferred, why, sst] ¬ sH.get[sH, physicalRecordHandle, sH.options];    END; --GetBlock  SetInputOptions: PROCEDURE [sH: Handle, options: InputOptions] = INLINE    -- Sets the input options in the Object pointed to by sH    BEGIN sH.options ¬ options; END; --SetInputOptions  PutBlock: PROCEDURE [    sH: Handle, physicalRecordHandle: PhysicalRecordHandle,    endPhysicalRecord: BOOLEAN] = INLINE    -- Calls sH.put with the appropriate parameters    BEGIN sH.put[sH, physicalRecordHandle, endPhysicalRecord]; END; --PutBlock  SendNow: PROCEDURE [sH: Handle] = INLINE    -- Calls sH.put with a block of no bytes to terminate the physical record    BEGIN bl: PhysicalRecord ¬ nullPhysicalRecord; sH.put[sH, @bl, TRUE]; END;  --SendNow  SetSST: PROCEDURE [sH: Handle, sst: SubSequenceType] = INLINE    -- Changes the current SubSequenceType by calling sH.setSST    BEGIN sH.setSST[sH, sst]; END; --SetSST  SendAttention: PROCEDURE [sH: Handle, byte: Byte] = INLINE    -- Calls sH.sendAttention    BEGIN sH.sendAttention[sH, byte]; END; --SendAttention  WaitForAttention: PROCEDURE [sH: Handle] RETURNS [Byte] = INLINE    -- Waits for an attention by calling sH.waitAttention    BEGIN RETURN[sH.waitAttention[sH]]; END; --WaitForAttention  Delete: PROCEDURE [sH: Handle] = INLINE    -- Calls sH.delete    BEGIN sH.delete[sH]; END; --Delete  --The following are the signals which can be generated by a Stream  SSTChange: SIGNAL [sst: SubSequenceType, nextIndex: CARDINAL];  TimeOut: SIGNAL [nextIndex: CARDINAL];  LongBlock: SIGNAL [nextIndex: CARDINAL];  ShortBlock: ERROR;  EndOfStream: SIGNAL [nextIndex: CARDINAL];  --The following are the types used by implementors of filters and transducers  Object: TYPE = RECORD [    options: InputOptions,    get: GetProcedure,    put: PutProcedure,    setSST: SetSSTProcedure,    sendAttention: SendAttentionProcedure,    waitAttention: WaitAttentionProcedure,    delete: DeleteProcedure];  GetProcedure: TYPE = PROCEDURE [    sH: Handle, physicalRecordHandle: PhysicalRecordHandle, options: InputOptions]    RETURNS [      bytesTransferred: CARDINAL, why: CompletionCode, sst: SubSequenceType];  PutProcedure: TYPE = PROCEDURE [    sH: Handle, physicalRecordHandle: PhysicalRecordHandle,    endPhysicalRecord: BOOLEAN];  SetSSTProcedure: TYPE = PROCEDURE [sH: Handle, sst: SubSequenceType];  SendAttentionProcedure: TYPE = PROCEDURE [sH: Handle, byte: Byte];  WaitAttentionProcedure: TYPE = PROCEDURE [sH: Handle] RETURNS [byte: Byte];  DeleteProcedure: TYPE = PROCEDURE [sH: Handle];  END.		--CFDStreamLOGTime: March 17, 1978  11:39 AM   By: HCL	Action: Created fileTime: April 6, 1978  3:24 PM	By: HCL	Action: Updated to conform to revised Functional SpecificationsTime: April 18, 1978  9:58 AM	By: HCL	Action: Updated for compilation by Alpha release of Mesa 4.0  (LONG POINTER is allowed).Time: May 5, 1978  2:19 PM	By: Lauer	Action: Recompiled for storage on "official" directory on  CoPilot; added GetWord and PutWordTime: December 1, 1978  2:01 PM	By: Garlick	Action: Added endofstream stuff and revised data transfer  ops to pass physicalrecs instead of Stream.Blocks.  Added attention data.Time: February 8, 1979  11:47 AM	By: Garlick	Action: Revised definition of Physical Record not  to refer to RS232C.  Also added nullPhysicalREcord.Time: April 10, 1979  12:15 PM	By: Garlick	Action: Added handle arg to procs.  Made stream operations  in-line. Altered type of attention data.Time: 27-Nov-81 14:09:02	By: Danielson	Action: Made Handle a LONG POINTER