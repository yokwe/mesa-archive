-- BandBLTVersionImpl.mesa-- Copyright (C) 1986 by Xerox Corporation.  All rights reserved.-- Last edited by CRF, 20-Aug-86 19:02:37DIRECTORY  BandBLT,  BandBLTVersion,  Inline,  Space,  VM;BandBLTVersionImpl: PROGRAM  IMPORTS BandBLT, Inline, Space, VM  EXPORTS BandBLTVersion =  BEGIN  BandList: TYPE = MACHINE DEPENDENT RECORD [    -- Fields oldNop1 through yMax look to the new microcode like the    -- following trapezoid entry:    --    -- trap: trapezoid BandBLT.BlItem ¬ [trapezoid[    --   xloc: 0, nScans: 1,    --  yMin:    --    [val: [parts[frac: 0, int: 0]], dVal: [parts[frac: 0, int: 100000B]]],    --  yMax:    --    [val: [parts[frac: 0, int: 16]], dVal: [parts[frac: 0, int: 0]]]]],    --    -- To the old microcode, they look like the definition below with a nop, two    -- characters, and an end of band.  The old microcode never sees the rest of    -- the bandlist, starting with yMax, because it stops on the first end of    -- band entry (eob0).      oldNop1: OldNop1 ¬ [],    charA: char BandBLT.BlItem ¬ [char[      font: font, cc: cc1,      xloc: 0, yloc: 0]],    charB: char BandBLT.BlItem ¬ [char[      font: font, cc: cc0,      xloc: 0, yloc: 0]],    eob0: endOfBand BandBLT.BlItem ¬ [endOfBand[]],    yMax: BandBLT.Interpolator ¬       [val: [parts[frac: 0, int: 16]], dVal: [parts[frac: 0, int: 0]]],    eob1: endOfBand BandBLT.BlItem ¬ [endOfBand[]]];  Character: TYPE = CARDINAL [0..256);  Displacement: TYPE = CARDINAL;  DummyCharBitMap: TYPE = ARRAY [0..1) OF CARDINAL;  FontPointerTable: TYPE = ARRAY Font OF LONG POINTER TO FontVectorTable;  FontVectorTable: TYPE = ARRAY Character OF Displacement;  Font: TYPE = CARDINAL [0..177B];  Inkwell: TYPE = ARRAY [0..16) OF CARDINAL;  OldNop1: TYPE = MACHINE DEPENDENT RECORD [      type(0:0..3): BandBLT.Command ¬ oldNop1Cmd,      pad(0:4..15): [0..7777B] ¬ 0];  OneFontEntry: TYPE = RECORD [  -- one entry in the font bitmap memory    scanLines: CARDINAL,  -- count of scan lines in this bitmap.    bitsPerLine: CARDINAL,  -- count of bits along scan line of this bitmap.    bitMap: DummyCharBitMap];  -- the bitmap (in this case one word).  ReadLO: TYPE = MACHINE DEPENDENT RECORD [    eob: endOfBand BandBLT.BlItem ¬ [endOfBand[]]];  cc0: Character = 0;  cc1: Character = 1;  font: Font = 0;  oldNop1Cmd: BandBLT.Command = BandBLT.trapezoidCmd;  Check: PUBLIC PROC RETURNS [version: BandBLTVersion.Version] = {    bandlist: BandList ¬ [];    fontVectorTbl: BandBLT.PageNumber ¬ 0;    inkwell: Inkwell ¬ ALL[177777B];    readLO: ReadLO ¬ [];    result: CARDINAL ¬ 0;    b: BandBLT.BandBLTTablePtr ¬ BandBLT.AlignedBandBLTTable[@bbTableSpace];    bbTableSpace: BandBLT.BBTableSpace;    fontVectorTbl ¬ AllocateStorage[b];    b.bandbuf ¬ @result;    b.bandlist ¬ @bandlist;    Inline.LongCOPY[from: @inkwell, nwords: SIZE[Inkwell],      to: Space.LongPointerFromPage[b.inkwells]];      -- default inkwell number is zero    Inline.LongCOPY[from: @readLO, nwords: SIZE[ReadLO],      to: Space.LongPointerFromPage[b.readLO]];    LoadFont[b, fontVectorTbl];    [] ¬ BandBLT.BandBLT[b];    FreeStorage[b, fontVectorTbl];    RETURN[SELECT TRUE FROM      result = 177777B => trapezoidsImplemented,      result = 125252B => preTrapezoid,      result = 0 => trapezoidsSkipped,      ENDCASE => unknown];    };  AllocateStorage: PROCEDURE [b: BandBLT.BandBLTTablePtr]    RETURNS [fontVectorTbl: BandBLT.PageNumber] = {    b.readLO ¬ Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    b.writeLO ¬ Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    b.fontPtrTbl ¬ Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    fontVectorTbl ¬      Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    b.fontRasters ¬      Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    b.inkwells ¬      Inline.LowHalf[Space.PageFromLongPointer[Space.ScratchMap[1]]];    VM.MakeResident[VM.FindMapUnit[b.readLO], wait];    VM.MakeResident[VM.FindMapUnit[b.writeLO], wait];    VM.MakeResident[VM.FindMapUnit[b.fontPtrTbl], wait];    VM.MakeResident[VM.FindMapUnit[fontVectorTbl], wait];    VM.MakeResident[VM.FindMapUnit[b.fontRasters], wait];    VM.MakeResident[VM.FindMapUnit[b.inkwells], wait];    };  FreeStorage: PROCEDURE [b: BandBLT.BandBLTTablePtr,    fontVectorTbl: BandBLT.PageNumber] = {    VM.MakeSwappable[VM.FindMapUnit[b.readLO]];    VM.MakeSwappable[VM.FindMapUnit[b.writeLO]];    VM.MakeSwappable[VM.FindMapUnit[b.fontPtrTbl]];    VM.MakeSwappable[VM.FindMapUnit[fontVectorTbl]];    VM.MakeSwappable[VM.FindMapUnit[b.fontRasters]];    VM.MakeSwappable[VM.FindMapUnit[b.inkwells]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[b.readLO]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[b.writeLO]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[b.fontPtrTbl]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[fontVectorTbl]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[b.fontRasters]];    [] ¬ Space.Unmap[Space.LongPointerFromPage[b.inkwells]];    };  LoadFont: PROCEDURE [b: BandBLT.BandBLTTablePtr,    fontVctrTbl: BandBLT.PageNumber] = {    fontPtrTbl: LONG POINTER TO FontPointerTable ¬      LOOPHOLE[Space.LongPointerFromPage[b.fontPtrTbl]];    fontVectorTbl: LONG POINTER TO FontVectorTable ¬      LOOPHOLE[Space.LongPointerFromPage[fontVctrTbl]];    fontRasters: LONG POINTER TO OneFontEntry ¬      LOOPHOLE[Space.LongPointerFromPage[b.fontRasters]];    fontRasters­ ¬ [scanLines: 1, bitsPerLine: 16, bitMap: [125252B]];    fontVectorTbl[cc0] ¬ 0;  -- displacement of 0 => first entry in fontRasters    fontVectorTbl[cc1] ¬ 0;  -- point both characters at the same font entry    fontPtrTbl[font] ¬ fontVectorTbl;    };  END....LOG20Aug86 - CRF - created file.