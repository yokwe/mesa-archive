-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- MagtapeFace.mesa last edited 26-Sep-84  2:44:51 by DXG     -- There should be a notion of multiple controllersMagtapeFace: DEFINITIONS =   BEGIN    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Drives  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Attributes: TYPE = RECORD [    legalConfig: ConfigInfo,    changeDensity: ModifyTime,    changeSpeed: ModifyTime,    typeDrive: DriveType];  ModifyTime: TYPE = {beginningOfTape, anyOperation};  DriveType: TYPE = {normal, streaming};  ConfigInfo: TYPE = ARRAY Density OF PACKED ARRAY Speed OF BOOLEAN;      Drive: TYPE[1];  nullDrive: READONLY Drive;    GetDriveAttributes: PROCEDURE[drive: Drive] RETURNS[driveAttributes: Attributes];  GetNextDrive: PROCEDURE[thisDrive: Drive ¬ nullDrive] RETURNS[nextDrive: Drive];    -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Operation and Status  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Operations are hex aligned, and live in the first 64K  OperationPtr: TYPE = LONG POINTER TO Operation;  Operation: TYPE = MACHINE DEPENDENT RECORD [    command(0):      Command,    dataBytes(1):    CARDINAL,      -- Byte count for write, buffer size for read.      -- Updated to count after a read operation.    dataPtr(2):      LONG POINTER,      -- Only interesting for read, write.    clientUse(4):    RECORD [a, b: WORD] ¬ NULL,      -- Unused by head, reserved for client use.    drive(6):        Drive,    speed(7):        Speed,    density(8):	     Density,    deviceStatus(9): RECORD [a, b: WORD] ¬ NULL      -- machine dependent hardware bits --];    operationAlignment: CARDINAL = 16;  operationSize: READONLY CARDINAL;					        -- Note:  Edit Commands are not supported.  -- After rewind or rewindUnload, the only Operation  --  that should be submitted for a particular drive is GetStatus  --  until the Status indicates that the operation is complete.  Command: TYPE = MACHINE DEPENDENT {    getStatus,		rewind,		rewindUnload,    fixedLengthErase,	securityErase,	variableLengthErase,    spaceForward,	spaceBackwards,	noop,    setDensity,		writeFileMark,     fileSearchForward,	fileSearchBackwards,     read,		readBackwards,	write,    (LAST[CARDINAL])};      Density: TYPE = {bpi800, bpi1600, bpi2400, bpi3200, bpi6250};     Speed: TYPE = {ips25, ips50, ips75, ips100, ips125, ips150};    Status: TYPE = RECORD [    readOnly:           BOOLEAN,    bot:		BOOLEAN,    eot:    		BOOLEAN,    parityError:        BOOLEAN,    phaseEncodeIdBurst: BOOLEAN,    errorCorrected:     BOOLEAN,    hardErrorFound:     BOOLEAN,    fileMarkFound:      BOOLEAN,    rewinding:          BOOLEAN,    notOnLine:          BOOLEAN,    tapeNotReady:       BOOLEAN,    tapeDriveIdle:      BOOLEAN,    oddByteTransferred: BOOLEAN,    overRun:            BOOLEAN,    executionError:	BOOLEAN,    illegalCommandType: BOOLEAN,    inProgress:         BOOLEAN];      -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- Running Operations  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     << Multiple operations can be submitted at once, but they must be polled in the order submitted.     An error returned drops the remainder of the queued operations on the floor.     The startOperations in Initiate will normally be TRUE.     Certain streaming applications will desire to get several operations queued up before starting any of them.     These operations will use startOperations: FALSE.      Start operations will start all operations which have been Initiated but not yet started.       Specifically this means that all operations are started irrespective of the drive mentioned by the operation.          Initiate returns okay = FALSE if a valid density and speed are not specified.     >>  Initiate: PROC [op: OperationPtr, startOperations: BOOLEAN] RETURNS[okay: BOOLEAN];  Poll:   PROC [op: OperationPtr] RETURNS [status: Status];      -- EmergencyStop stops the current operations DEAD in its  tracks.  --  It may take a long time to execute,  and the stopped operation  --  will come back saying otherError.  EmergencyStop: PROC [drive: Drive];      -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -- MISC OPERATIONS  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  InitializeController:    PROC [nakedNotifyMask: WORD];  InitializeDeviceCleanup: PROC;  ResidentCodeHandle: PROC;    END...  -- 16-Apr-82  7:54:31  FXH      Created File--  6-May-83 17:42:39  DXG      Make more device independent.Time: 26-Sep-84  2:44:46	By: DXG     	Action: Added copyright notice and rebuild for 11.1 release.