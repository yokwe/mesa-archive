-- File: FixedPoint.mesa-- last edit: castillo    5-Sep-86 16:24:33-- Copyright (C) 1986 by Xerox Corporation. All rights reserved.FixedPoint: DEFINITIONS = BEGIN  Num: TYPE = MACHINE DEPENDENT RECORD [    SELECT OVERLAID * FROM	wholeThing => [li: LONG INTEGER],	parts	   => [frac: CARDINAL ¬ 0, int: INTEGER],	ENDCASE]; <<   Num uses an implied scaling of 200000B, i.e. the low order 16 bits hold the   fraction, the high order 16 bits hold the integer part of the number. These   numbers can be added, subtracted and compared straightforwardly with full   precision by operating on the LONG INTEGER. (Divide and multiply are harder).   The speedy part of this is that the truncated integer value can be obtained   without shifting or dividing, merely by using a Mesa Variant Record and pulling   out the correct field. The most non-obvious part is that Mesa (Dandelion)   reverses the high and low order words in a LONG INTEGER.   The numbers that can be expressed in such a FixedPointNum can express all   practical slopes with only small errors.>>  zero: Num = [wholeThing[0]];  Overflow: ERROR; -- may be raised by RealToFPN, Divide or Mult -- ===========================  FPN: PROCEDURE [i: INTEGER] RETURNS [Num] = INLINE {	RETURN[[parts [frac: 0, int: i]]]};  Frac: PROCEDURE [f: Num] RETURNS [CARDINAL] = INLINE {RETURN[f.frac]};  Int: PROCEDURE [f: Num] RETURNS [INTEGER] = INLINE {RETURN [f.int]};	-- greatest integer <= f.li/200000B  Add: PROCEDURE [a, b: Num] RETURNS [Num] = INLINE {	RETURN [[wholeThing[a.li + b.li]]]};  Sub: PROCEDURE [a, b: Num] RETURNS [Num] = INLINE {	RETURN [[wholeThing[a.li - b.li]]]};  Mult: PROCEDURE [a, b: Num] RETURNS [p: Num];  Divide: PROCEDURE [num, den: Num] RETURNS [Num];  half: CARDINAL = 100000B; -- as a Num.frac  Round: PROCEDURE [f: Num] RETURNS [INTEGER] = INLINE {	f.li ¬ f.li+half; RETURN [f.int]};  Abs: PROCEDURE [a:Num] RETURNS [Num] = INLINE {	RETURN [ [parts[frac: a.frac, int: ABS[a.int]]] ]}; -- =========================== Utility Types, and Functions  Interpolator: TYPE = MACHINE DEPENDENT RECORD [val, dVal: Num]; <<   Type used by graphics clients (BandBLT, TrapezoidBLT, etc). The number val   is a scan-line-relative offset, while dVal is a delta amount to be added to   val after every scan line to calculate the new offset in the next scan line.>>  FPNVec: TYPE = RECORD [f, s: Num];	-- vector element (f is fast direction, s is slow direction)  RealToFPN: PROCEDURE [r: REAL] RETURNS [Num];  FPNToReal: PROCEDURE [val: Num] RETURNS [REAL]; END.LOG 5Sep86 - castillo - split from BitOps, and Extra; plus added some other.