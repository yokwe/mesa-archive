-- Copyright (C) 1980, 1981, 1982  by Xerox Corporation. All rights reserved. -- ProcessorFace.mesa  26-Sep-84  2:50:31 by DXG     DIRECTORY  Environment USING [PageCount, PageNumber],  ESCAlpha USING [aRRIT, aWRMP],  HostNumbers USING [ProcessorID],  Mopcodes USING [zESC];ProcessorFace: DEFINITIONS =  BEGIN  -- Initialization  Start: PROCEDURE;  -- Initializes the implementation of ProcessorFace.  After Start has been called  -- all exported variables in this interface are defined.  -- Maintenance panel  SetMP: PROCEDURE [CARDINAL];     -- Sets maintenance panel display and ProcessorFace.mp to given value.  SpecialSetMP: PROCEDURE [CARDINAL] =    -- Sets maintenance panel display to given value.  Does not set    -- ProcessorFace.mp.  For use when ProcessorFace not started or when you    -- can not call a procedure.    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aWRMP END;  mp: READONLY CARDINAL;     -- Last value of maintenance panel display set by SetMP (NOT SpecialSetMP).  -- Processor id  -- At any moment in time, no two processors will have the same processor id.  The processor id remains constant as long as a system element remains running, but may change across system restarts.  Programs should make no assumptions about the structure of a processor id.   ProcessorID: TYPE = HostNumbers.ProcessorID;  processorID: READONLY ProcessorID;    -- Note: processorID=HostNumbers.nullProcessorID indicates that the processor    -- has not had a unique processor id assigned.  This is likely to prevent many    -- client systems (e.g. Pilot) from running.  -- Virtual memory layout  GetNextAvailableVM: PROCEDURE [page: Environment.PageNumber]    RETURNS [firstPage: Environment.PageNumber, count: Environment.PageCount];    -- Returns next area of virtual memory, beginning at or after given page,    -- which is available on this processor.  Returns a count of zero if no such    -- available area exists.  The available areas exclude pages used by device    -- face implementations and unimplemented page map entries but include pages    -- allocated in the Principles of Operation (e.g. process data area, AV, SD,    -- GFT, Germ).  -- Greenwich mean time  -- A greenwich mean time t represents the time which is t-gmtEpoch (mod 232) seconds after midnight, 1 January 1968, where gmtEpoch (defined below) is the number of seconds between midnight, 1 January 1968, and midnight, 1 January 1901.  This representation was chosen because it assigns the same bit pattern to times as does the Alto time standard for times between 1968 and 2037 but provides an additional 67 years of range.  -- NOTE: Before operating on greenwich mean times (e.g. converting to external representation, comparing for other than equality), it is best to convert them to "seconds since epoch", by subtracting gmtEpoch.  GreenwichMeanTime: TYPE = LONG CARDINAL;  gmtEpoch: LONG CARDINAL = 2114294400;    -- (67years*365daysPerYear+16leapDays)*24hoursPerDay*60minutesPerHour*60secondsPerMinute  GetGreenwichMeanTime: PROCEDURE RETURNS [GreenwichMeanTime];    -- Returns the current value of the system's greenwich mean time clock.    -- This clock runs continuously and, once set, maintains reasonable accuracy.    -- NOTE: If the clock has not been set, GetGreenwichMeanTime returns gmtEpoch.   SetGreenwichMeanTime: PROCEDURE [GreenwichMeanTime];    -- Sets the system's greenwich mean time clock to the given value.  -- Interval time  -- The interval timer is 32 bits long, and is incremented by one at a constant rate, but this rate may vary from processor to processor.  It should be somewhere between 1 and 100 micorseconds, so that reasonable assumptions about precision and period may be made by timing software.   -- NOTE: The interval timer is considered to be unsigned, so one may measure an interval up to 2**32 pulses simply by subtracting initial from final timer reading, with no concern for wrap-around.  GetClockPulses: PROCEDURE RETURNS [LONG CARDINAL] = MACHINE CODE    -- Returns the current value of the interval timer.    BEGIN Mopcodes.zESC, ESCAlpha.aRRIT END;  microsecondsPerHundredPulses: READONLY CARDINAL;  -- max error is .33%  -- Naked notifies  reservedNakedNotifyMask: READONLY WORD;    -- A bit-mask with a one in each position corresponding to a naked-notify    -- "channel" used for some private purpose below the Principles of Operation    -- and therefore not available to normal programs.  -- Condition variable time  -- A timeout value may be specified for any condition variable, in units of "ticks".  The size of a tick should be between about 15 and 50 milliseconds.   millisecondsPerTick: READONLY CARDINAL;  -- Booting and power control  BootButton: PROCEDURE;    -- Simulates pressing the processor "boot button".  PowerOff: PROCEDURE;    -- If the processor is suitably equipped, turns off electrical power to the    -- system.    -- NOTE: On processors not equipped with a power control relay, this may be    -- implemented as disabling interrupts, turning off devices using    -- DeviceCleanup.Perform[turnOff], and spinning.  SetAutomaticPowerOn: PROCEDURE [gmt: GreenwichMeanTime, externalEvent: BOOLEAN];    -- If the processor is suitably equipped, causes system electrical power to be    -- turned on at or after the given time: if externalEvent is FALSE, turns    -- power on at the given time; if externalEvent is TRUE, turns power on    -- in response to the first external event occurring after the given time.    -- NOTE: On processors not equipped with an independently powered alarm clock    -- connected to a power control relay, this may be implemented by causing a    -- subsequent PowerOff to wait for the appropriate condition and then execute    -- BootButton.  ResetAutomaticPowerOn: PROCEDURE;    -- Cancels a previous SetAutomaticPowerOn.  END.LOGAugust 7, 1979  12:05 PM   DXR      Create file from JYW  's OISProcFace; replace DeviceNumber machinery with   DeviceHandles and GetNextDeviceJanuary 30, 1980  2:16 PM   PXM       Delete all but GreenwichMeanTime; add maintenance panel, process id, virtual   memory layout, greenwich mean time, interval time, and power control facilitiesMay 14, 1980  3:59 PM   PXM       Add Start, reservedNakedNotifyMaskMay 30, 1980  10:00 AM   PXM       Change ProcessorID from 32 to 48 bits; drop OIS from interface nameAugust 12, 1980  10:01 AM   PXM       Add dedicatedRealMemory; use MiscAlpha   Change ProcessorID from 32 to 48 bits; drop OIS from interface name11-Aug-81 16:45:28   AWL         Add SetMPSpecial, mp.  Made SetMP not be inline.27-Oct-81  8:29:38   WDK       New instruction set.  Improved documentation. 9-Nov-81 13:48:06   AWL         HostNumbers.24-Nov-82  9:23:11   AWL         Removed dedicatedRealMemory - made obsolete by the RealMemory interface.Time: 26-Sep-84  2:50:26	By: DXG     	Action: Added copyright notice and rebuild for 11.1 release.