--File = BiParallelPortChannel.mesa--   The Mask for the BiParallel Port "Face".--   created 23-Jun-86 11:23:56 by JMA--   last edited 27-Feb-87 18:17:57 JMA-- Copyright (C) 1986, 1987 by Xerox Corporation. All rights reserved.DIRECTORY   Environment USING [Block],   BiParallelPortFace USING [CommandStatus, CompletedTransferStatus, ControlOrData,   	DeviceStatus, InitializationStatus, nullPortNumber, Port,	PortType, PulseWidth, TransferProtocol, TransferStatus ];   BiParallelPortChannel: DEFINITIONS  IMPORTS BiParallelPortFace =  BEGIN      << ERRORs raised >>  ChannelDriverError: ERROR;		-- misc error  InvalidPortNumberOrPortType: ERROR;  NilChannelHandle: ERROR;  ParallelPortInUse: ERROR;  TransferExceedsMaxSize: ERROR;	-- data to be transferred is 512 bytes maximum        << Type Definitions >>  CompletionHandle: TYPE [2];  PortHandle: TYPE [2];        Parameters: TYPE = RECORD [    transferProtocol: TransferProtocol ¬ useAck,    pulseWidth: PulseWidth ¬ pw1uSec    ];      BlockPtr: TYPE = LONG POINTER TO Environment.Block;    -- copied TYPEs  CommandStatus: TYPE = BiParallelPortFace.CommandStatus;  CompletedTransferStatus: TYPE = BiParallelPortFace.CompletedTransferStatus;  ControlOrData: TYPE = BiParallelPortFace.ControlOrData;  DeviceStatus: TYPE = BiParallelPortFace.DeviceStatus;  InitializationStatus: TYPE = BiParallelPortFace.InitializationStatus;  PortType: TYPE = BiParallelPortFace.PortType;  Port: TYPE = BiParallelPortFace.Port;  PulseWidth: TYPE = BiParallelPortFace.PulseWidth;  TransferProtocol: TYPE = BiParallelPortFace.TransferProtocol;  TransferStatus: TYPE = BiParallelPortFace.TransferStatus;     << Contants >>   maxBlockSizeInBytes: READONLY CARDINAL;   nullPortNumber: Port = BiParallelPortFace.nullPortNumber;   nilHandle: READONLY PortHandle;     << PROCEDURES >>    Create: PROCEDURE [port: Port, portType: PortType]    RETURNS [portHandle: PortHandle, initStatus: InitializationStatus];    -- will raise  appropriate ERROR signals      Delete: PROCEDURE [lp: LONG POINTER TO PortHandle];    -- performs an automatic port reset!    -- returns with nilHandle immediately      DeviceReset: PROCEDURE [portHandle: PortHandle]     RETURNS [commandStatus: CommandStatus];    -- queues a command to reset the port and the device connected     -- returns immediately after queueing               Get: PROCEDURE [portHandle: PortHandle, controlOrData: ControlOrData,    	 	  transferBlock: BlockPtr]      RETURNS [commandStatus: CommandStatus, completionHandle: CompletionHandle];    -- returns immediately    -- implies data transfer FROM a port capable of INPUT    -- need a TransferWait to get results of tranfer      GetNextAvailablePort: PROCEDURE [portType: PortType]    RETURNS [nextPort: Port];    -- returns immediately    -- returns next available port number of the specified port type  GetRawStatus: PROCEDURE [portHandle: PortHandle]    RETURNS [commandStatus: CommandStatus, statusWord1, statusWord2: WORD];    -- returns immediately  GetStatus: PROCEDURE [portHandle: PortHandle]    RETURNS [commandStatus: CommandStatus, stat: DeviceStatus];    -- returns immediately          GetTestResult: PROCEDURE [portHandle: PortHandle]    RETURNS [returnPattern: WORD];    -- returns immediately   InitiateTest: PROCEDURE [portHandle: PortHandle, diagnosticTestPattern: WORD]      RETURNS [commandStatus: CommandStatus];    -- portHandle MUST have originated from a SUCCESSFUL call to Create     -- returns immediately          PortReset: PROCEDURE [portHandle: PortHandle]     RETURNS [commandStatus: CommandStatus];    -- queues a command to reset the port     --    and ALL on-going processes of the specified port    -- returns immediately after queueing       Put: PROCEDURE [portHandle: PortHandle, controlOrData: ControlOrData,    		  transferBlock: BlockPtr]    RETURNS [commandStatus: CommandStatus, completionHandle: CompletionHandle];    -- returns immediately    -- implies data transfer TO a port capable of OUTPUT    -- need a TransferWait to get results of tranfer            SetParameters: PROCEDURE [portHandle: PortHandle, parameters: Parameters];    -- returns immediately            StatusChangeWait: PROCEDURE [portHandle: PortHandle, stat: DeviceStatus]    RETURNS [newStat: DeviceStatus];    -- returns on new status found	     TransferWait: PROCEDURE [portHandle: PortHandle, completionHandle: CompletionHandle]    RETURNS [status: TransferStatus, byteCount: CARDINAL];    -- returns when status is IN CompetedTransferStatus        END...-- BiParallelPortChannel.mesa    LOG23-Jun-86 11:23:56	JMA	Created27-Feb-87 18:20:01	JMA	Change from Parallel to BiParallel