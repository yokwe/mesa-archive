-- File: SpecialCommunication.mesa - last edit:-- SMA                 16-May-86  9:58:49-- Copyright (C) 1984 , 1986, 1986 by Xerox Corporation. All rights reserved. -- SpecialCommunication.mesa. (Last editted by: AOF on: 21-May-84  9:47:06) DIRECTORY  Buffer USING [Buffer, Function, Type],  System USING [HostNumber];SpecialCommunication: DEFINITIONS =  BEGIN  <<  The SPY PROC allows a client to look at buffers before they are dispatched.  That client may return that buffer, some other buffer, or no buffer (NIL).  If, when setting the SPY PROC, the returned value is not NIL, the client  should, if not consuming the buffer, call that second SPY PROC.  >>  --LEVEL 0  --The following procs modify driver (level-0) behavior.  SetEthernetListener: PROCEDURE [    physicalOrder: CARDINAL, newHostNumber: System.HostNumber]    RETURNS [success: BOOLEAN];  SetEthernetOneListener: PROCEDURE [    physicalOrder: CARDINAL, newHostNumber: CARDINAL] RETURNS [success: BOOLEAN];  SetEthernetCollectGarbageToo: PROCEDURE [    physicalOrder: CARDINAL, collectGarbage: BOOLEAN] RETURNS [success: BOOLEAN];  SetEthernetOneCollectGarbageToo: PROCEDURE [    physicalOrder: CARDINAL, collectGarbage: BOOLEAN] RETURNS [success: BOOLEAN];  --LEVEL 1  <<  Spy procs are registered with a particular protocol family name, plus tha  additional catch-all name "trash."  Each spy proc will return only packets  of the type that was registered.  >>  SpyProc: TYPE = PROCEDURE [b: Buffer.Buffer, function: Buffer.Function]    RETURNS [Buffer.Buffer];  SpyType: TYPE = Buffer.Type(FIRST[Buffer.Type]..LAST[Buffer.Type]];  SetSpyProc: PROCEDURE [spy: SpyProc ¬ NIL, name: SpyType] RETURNS [SpyProc];  END. Log:17-May-84  9:24:22  AOF  Post Klamath16-May-86  9:50:51  SMA  Moved ns-specific stuff out and added function to SpyProc   