-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- VMPerf.mesa        22-Jun-83 14:55:33 by WDK     -- This Friends interface contains performance data, parameters, and procedures for the VMDriver configuration.DIRECTORY  BackingStore USING [TransferData, TransferProc],  System USING [Pulses];VMPerf: DEFINITIONS =  BEGIN  -- VM Operations:  operations:  --     -- VM operations (excluding GetMapUnitAttributes, SupplyBackingStore);     --    total includes queuedOperations)    READONLY LONG CARDINAL;  maps: READONLY CARDINAL;  -- number of VM.Maps  mapPulses: READONLY System.Pulses;  -- total elapsed time of all Maps  unmaps: READONLY CARDINAL;  -- number of VMUnmaps  forceOuts: READONLY CARDINAL;  -- number of VM.ForceOuts  batches: -- number of batches processed. (See SetBatchCount)    READONLY LONG CARDINAL;  -- Page Faults:  pageFaults: READONLY LONG CARDINAL;  pageFaultPulses: READONLY System.Pulses;  -- total of elapsed time of each page fault.  pageFaultInputs: READONLY LONG CARDINAL;  -- total intervals actually read.  pageFaultPagesInput: READONLY LONG CARDINAL;  -- total pages read.  -- Swap Out Data:  (See also ResMemPerf)  swapOutJobs: READONLY LONG CARDINAL;  -- a job is the work done between when a SwapOutProcess is told to recover some pages and when it finishes reclaiming enough memory or swapping something out.  swapOutJobPulses: READONLY System.Pulses;  -- total of elapsed time of each jobs.  swapOutPagesActuallyOutput: READONLY LONG CARDINAL;  -- total pages actually written out.  swapOutOutputs: READONLY LONG CARDINAL;  -- total intervals written out.  -- Queued VM Operations:   (i.e. returnWait = return)  queuedOperations: READONLY CARDINAL;  queuedOperationsDelayed: READONLY CARDINAL;  -- Swap Buffer Data:  swapBufferTotalAllocations: READONLY LONG CARDINAL;  swapBufferEmergencyAllocations: READONLY CARDINAL;  swapBufferMaxBackupsUsed: READONLY CARDINAL;  swapBufferWaits: READONLY CARDINAL;  -- Managing VM Performance:   (See also ResMemPerf)  BatchCount: TYPE = --Environment.PageCount-- CARDINAL [0..256); -- (no subranges of LONGs)  SetBatchCount: PROCEDURE [batchCount: BatchCount]    RETURNS [oldBatchCount: BatchCount];  -- To fit within the limitations of real memory size, Pilot breaks large input/output operations into "batches", and performs the opeation one batch at a time. This operation sets the batch size.  -- Larger values may increase thrashing; smaller values may increase the time to perform large input/output operations.  AnotherPageFaultProcess: PROCEDURE [];  -- Create another process to service page faults. Clients should probably create two for each disk spindle (past the first) to which vm is mapped.  -- The process lives forever.    clientPageFaultProcesses: READONLY CARDINAL;  -- number available to service client page faults (excludes page fault processes for helper processes).  AnotherSwapOutProcess: PROCEDURE [];  -- Create another process to swap out cold pages. Clients should probably create two for each disk spindle (past the first) to which vm is mapped.  -- The process lives forever.    swapOutProcesses: READONLY CARDINAL;  AnotherExecutorProcess: PROCEDURE [];  -- Create another process to execute queued VM operations.  -- The process lives forever.    executorProcesses: READONLY CARDINAL;    -- Monitoring VM Performance:   (See also ResMemPerf)   InstallTransferWatcher: PROCEDURE [transferWatcher: TransferWatcher]    RETURNS [prevTransferWatcher: TransferWatcher];  -- Installs transferWatcher to monitor all backing store transfer  -- operations. When a transfer operation is done by VM,  -- transferWatcher will be called to allow it to record  -- the transfer parameters. transferWatcher's code and data  -- MUST be resident. transferWatcher may be NIL.  TransferWatcher: TYPE = PROCEDURE [    transferProc: BackingStore.TransferProc,    transData: LONG POINTER TO --READONLY-- BackingStore.TransferData];  -- A TransferWatcher's code and data MUST be resident.  END.LOG27-Jul-82 15:29:20   WDK       Created file.29-Aug-82 12:33:11   WDK       Added swapOutJobs. 6-Oct-82  9:43:26   WDK       Added operations, maps, page fault stuff, queuedOperations, emergencyAllocations, process creation stuff.28-Oct-82 10:40:15   WDK        Split out ResMemPerf items.22-Feb-83 13:21:55   WDK        Added TransferWatcher and a few other items.22-Jun-83 14:54:27   WDK         swapOutPagesReclaimed moved to ResMemPerf.