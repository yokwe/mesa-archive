-- Copyright (C) 1983, 1987  by Xerox Corporation. All rights reserved. -- BootServerTypes.mesa       16-Sep-87 12:41:27 by CAJ-- This Friends interface defines TYPEs and constants used for invoking the Boot Server and passing parameters to it. It also defines some well-known boot file numbers.DIRECTORY  Boot USING [EthernetBootFileNumber],  Environment USING [wordsPerPage],  Stream USING [SubSequenceType],  NSTypes USING [ConnectionID];BootServerTypes: DEFINITIONS =  BEGIN    EtherBootPacketType: TYPE = MACHINE DEPENDENT {    simpleRequest(1), simpleData(2), sppRequest(3),    (LAST[CARDINAL] - 1)};  EthernetBootFileNumber: TYPE = Boot.EthernetBootFileNumber;  BootFileRequest: TYPE = MACHINE DEPENDENT RECORD [    body(0): SELECT etherBootPacketType(0): EtherBootPacketType FROM      simpleRequest => [bootFileNumber(1): Boot.EthernetBootFileNumber],      simpleData => [        bootFileNumber (1): Boot.EthernetBootFileNumber,        packetNumber(4): CARDINAL,  -- starts with 1        data(5):  -- one page of data normally, no data means end of file.	  ARRAY [0..0) OF WORD],      sppRequest => [        bootFileNumber(1): Boot.EthernetBootFileNumber, connectionID(4): NSTypes.ConnectionID],      ENDCASE];  <<  This is the format of the level two packet sent to  request transmission of a boot file.  The NS packet type is NSTypes.PacketType[bootServerPacket].  There are two boot file transmission protocols, "simple" which is used by  the microcode, and SPP-based which is used by the Pilot boot loader ("germ").    The "simple" protocol is as follows:  The bootee sends a microcodeRequest packet to initiate transmission.  The boot server then responds by transmitting sequentially each  of the boot file pages, one per simpleData packet,  followed by a final end-of-file packet with zero bytes in the data field.  No acknowledgements are transmitted by the bootee,  nor retransmissions performed by the boot server. If anything goes wrong,  the bootee will try again, from the top.    The SPP-based protocol is as follows:    The bootee sends a sppRequest packet to initiate transmission.  The boot server then responds by transmitting the boot file pages,  one per packet, using the Sequenced Packet Protocol.    Finally, the boot server will close the connection using  the NetworkStream Close Protocol (NetworkStream.closeSST, etc).  >>  dataWords: CARDINAL = Environment.wordsPerPage;  -- one page of data per packet.  dataSST: Stream.SubSequenceType = 0;  -- for SPP data packets.  END.LOG10-Jun-83  9:56:16   WDK   Created file.  (1-May-87  8:00:24   names -> initials).16-Sep-87 12:40:59   CAJ   Deleted obsolete bootfile numbers.