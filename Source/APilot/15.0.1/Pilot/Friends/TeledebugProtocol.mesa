-- Copyright (C) 1981  by Xerox Corporation. All rights reserved. -- TeledebugProtocol.mesa last edited by -- FXH     24-Nov-81 10:24:10-- Bruce    9-Oct-81 11:36:55DIRECTORY  Environment   USING [wordsPerPage],  VMMapLog      USING [Entry];TeledebugProtocol: DEFINITIONS =  BEGIN  PageData:   TYPE = ARRAY [0..Environment.wordsPerPage) OF WORD;  PageNumber: TYPE = LONG CARDINAL;  PageFlags:  TYPE = MACHINE DEPENDENT {    clean(0), referenced(1), dirty(2), dirtyReferenced(3),     writeProtected(4), writeProtectedReferenced(5), vacant(6),    illegal(7), (177777B)};        PacketType: TYPE = MACHINE DEPENDENT {    mayday(0), ack(1), nak(2),                  -- replyer    coreStore(10),      coreFetch(11),          -- requester    diskStore(12),      diskFetch(13),          -- requester    go(14),             goReply(15),            -- requester     remoteDestruct(16), remoteDestructReply(17),-- requester    last(LAST[CARDINAL])};   RequestType: TYPE = MACHINE DEPENDENT {    null(0), coreStoreReq(1), coreStoreAck(2), coreFetchReq(3), coreFetchAck(4),    diskStoreReq(5), diskStoreAck(6), diskFetchReq(7), diskFetchAck(8),    last(LAST[NAT])};   Handle: TYPE = LONG POINTER TO TeledebugBuffer;  CoreStoreReqHandle: TYPE = LONG POINTER TO coreStoreReq TeledebugBuffer;  CoreStoreAckHandle: TYPE = LONG POINTER TO coreStoreAck TeledebugBuffer;  CoreFetchReqHandle: TYPE = LONG POINTER TO coreFetchReq TeledebugBuffer;  CoreFetchAckHandle: TYPE = LONG POINTER TO coreFetchAck TeledebugBuffer;  DiskStoreReqHandle: TYPE = LONG POINTER TO diskStoreReq TeledebugBuffer;  DiskStoreAckHandle: TYPE = LONG POINTER TO diskStoreAck TeledebugBuffer;  DiskFetchReqHandle: TYPE = LONG POINTER TO diskFetchReq TeledebugBuffer;  DiskFetchAckHandle: TYPE = LONG POINTER TO diskFetchAck TeledebugBuffer;    TeledebugBuffer: TYPE = MACHINE DEPENDENT RECORD [    type:  PacketType,    spare: [0..1) ¬ 0,    body:  SELECT request: RequestType FROM      null => [],      coreStoreReq => [page: PageNumber, flags: PageFlags, data: PageData],      coreStoreAck => [page: PageNumber, flags: PageFlags],      coreFetchReq => [page: PageNumber],      coreFetchAck => [page: PageNumber, flags: PageFlags, data: PageData],      diskStoreReq => [page: PageNumber, entry: VMMapLog.Entry, data: PageData],      diskStoreAck => [page: PageNumber, entry: VMMapLog.Entry],      diskFetchReq => [page: PageNumber, entry: VMMapLog.Entry],      diskFetchAck => [page: PageNumber, entry: VMMapLog.Entry, data: PageData],      ENDCASE];  -- Checks (not in interface to elimate dependency on OISCPTypes)  -- At least one of the implementors of this module should check these values by including this  -- code.  MaxSize: TYPE = CARDINAL --[0..OISCPTypes.maxDataBytePerExchange/2]--;    coreStoreReqSize: MaxSize = SIZE[coreStoreReq TeledebugBuffer];  coreStoreAckSize: MaxSize = SIZE[coreStoreAck TeledebugBuffer];  coreFetchReqSize: MaxSize = SIZE[coreFetchReq TeledebugBuffer];  coreFetchAckSize: MaxSize = SIZE[coreFetchAck TeledebugBuffer];  diskStoreReqSize: MaxSize = SIZE[diskStoreReq TeledebugBuffer];  diskStoreAckSize: MaxSize = SIZE[diskStoreAck TeledebugBuffer];  diskFetchReqSize: MaxSize = SIZE[diskFetchReq TeledebugBuffer];  diskFetchAckSize: MaxSize = SIZE[diskFetchAck TeledebugBuffer];  END.....