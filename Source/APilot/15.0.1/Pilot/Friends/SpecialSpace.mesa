-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- SpecialSpace.mesa  23-Jun-83 15:28:46 by JXG    DIRECTORY  Environment USING [PageCount, PageNumber],  Space USING [Interval];SpecialSpace: DEFINITIONS =  BEGIN  realMemorySize: READONLY Environment.PageCount;  -- Maximum amount of real memory which might be present in virtual memory, including  -- dedicated real memory (e.g. Dandelion display bitmap, but not Dandelion page map).  AllocateForCode: PROCEDURE [    count: Environment.PageCount, within: Space.Interval]    RETURNS [interval: Space.Interval];  -- Allocates interval which does not cross a 64K boundary.  AllocateAligned: PROCEDURE [count: Environment.PageCount, within: Space.Interval]    RETURNS [interval: Space.Interval];  -- Allocates interval which begins at a page within virtual memory which is  -- an integral multiple of the smallest power of two not less than the given count.  -- (Thus if count is already a power of two, the beginning page number  --  will have at least as many low-order zero bits as does count.)  MakeGlobalFrameResident, MakeGlobalFrameSwappable: PROCEDURE [    frame: --GENERIC-- PROGRAM];  -- Makes the swap unit containing the global frame of the program  -- to be resident/swappable.  -- May raise SpecialError[alreadyResident/alreadySwappable].  MakeProcedureResident, MakeProcedureSwappable: PROCEDURE [    proc: --GENERIC-- PROCEDURE];  -- Makes the swap unit containing the first word of the code of the procedure  -- resident/swappable.  -- May raise SpecialError[alreadyResident/alreadySwappable].  -- Normal usage is  proc: LOOPHOLE[any PROCEDURE].  MakeEntryVectorResident, MakeEntryVectorSwappable: PROCEDURE [    proc: --GENERIC-- PROCEDURE];  -- Makes the swap unit containing the entry vector of the procedure  -- to be resident/swappable.  -- May raise SpecialError[alreadyResident/alreadySwappable].  -- Normal usage is  proc: LOOPHOLE[any PROCEDURE].  MakeCatchCodeResident, MakeCatchCodeSwappable: PROCEDURE [    proc: --GENERIC-- PROCEDURE];  -- Makes the swap unit containing the catch code of the module  -- containing proc to be resident/swappable  -- May raise SpecialError[alreadyResident/alreadySwappable].  -- Normal usage is  proc: LOOPHOLE[any PROCEDURE].  DonateDedicatedRealMemory: PROCEDURE [    page: Environment.PageNumber, count: Environment.PageCount];  -- Takes any real memory mapped (in the PrincOps sense) to the specified  -- virtual pages and moves it to Pilot's swapping pool.  The virtual  -- pages should lie within a space which is not mapped (in the Pilot sense);  -- on return they will no longer be mapped (in the PrincOps sense).  -- This operation is useful for hardware configurations containing dedicated real memory  -- not normally accessed through the virtual memory (e.g. special I/O buffers)  -- when an application doesn't use the function for which the real memory is dedicated  -- and could use the extra swapping memory.      -- Fault Fielder mechanism.  The following define the means by which clients can  -- wait for address and write protect faults.    FaultFielder: TYPE =    PROCEDURE [process: PROCESS, page: Environment.PageNumber]      RETURNS [action: FaultAction];    FaultAction: TYPE = {    notInterested, -- call another fault fielder    restart, -- restart the faulted process    handled, -- the problem has been handled by the fault fielder; do nothing more    callDebugger -- the debugger should be called    };    RegisterAddressFaultFielder: PROCEDURE [fielder: FaultFielder];    -- fielder must be a valid FaultFielder.  This is not checked.    -- The effect of registering a given fielder multiple times is not defined;    --   this condition is not checked.      RegisterWriteProtectFaultFielder: PROCEDURE [fielder: FaultFielder];    -- fielder must be a valid FaultFielder.  This is not checked.    -- The effect of registering a given fielder multiple times is not defined;    --   this condition is not checked.    DoneWithAddressFaultFielder: PROCEDURE [fielder: FaultFielder];    -- This is a no-op if fielder is not currently registered.      DoneWithWriteProtectFaultFielder: PROCEDURE [fielder: FaultFielder];    -- This is a no-op if fielder is not currently registered.      SpecialError: ERROR [error: SpecialErrorType];  SpecialErrorType: TYPE = {alreadyResident, alreadySwappable, fixedSwappability};  END.LOGAugust 28, 1978  10:07 AM	HXL  	Created fileJuly 10, 1979  12:06 PM		WDK    	Made compatible with Teak interfacesAugust 9, 1979  6:41 PM		PXM    	Added realMemorySizeJanuary 25, 1980  7:49 PM	FXH    	Added default base for CreateForCodeJune 5, 1980  2:00 PM		WDK    	Added MakeGlobalFrame*, MakeProcedure*, etcJune 17, 1980  1:15 PM		PXM    	Added CreateAlignedSeptember 2, 1980  3:35 PM	PXM    	Added DonateDedicatedRealMemory8-Nov-81 19:11:53		AWL         Added MakeEntryVectorResident, MakeEntryVectorSwappable, MakeCatchCodeResident,   MakeCatchCodeSwappable, Error and ErrorType.16-Nov-81 15:03:57		WDK    	Export confilcts force renaming Error to SpecialError.14-Jul-82 11:08:49		WDK       Made compatible with new Space interface: AllocateForCode ¬ CreateForCode, etc. For MakeResident, MakeSwappable see VM.mesa. MakeCodeResident, MakeCodeSwappable deleted.10-Aug-82 14:32:46		AWL         Deleted base argument from AllocateForCode - it makes no sense.  Added Fault Fielder mechanism.23-Jun-83 15:28:58		JXG       added new SpecialErrorType: fixedSwappability