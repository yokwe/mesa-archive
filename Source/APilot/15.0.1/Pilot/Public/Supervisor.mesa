-- Copyright (C) 1982  by Xerox Corporation. All rights reserved. -- Supervisor.mesa   22-Nov-82 16:14:07 by AWL      Supervisor: DEFINITIONS =-- Supervisor for interdependent set of subsystems.-- Suitable for subsystems having a partially ordered (loop free) dependency relation.  BEGIN  SubsystemHandle: TYPE [1];  nullSubsystem: READONLY SubsystemHandle;  EventIndex: TYPE = CARDINAL;  Event: TYPE = RECORD [eventIndex: EventIndex];  nullEvent: Event = Event[LAST[EventIndex]];  AgentProcedure: TYPE = PROCEDURE [    event: Event, eventData: LONG POINTER TO UNSPECIFIED,    instanceData: LONG POINTER TO UNSPECIFIED];  -- An agent procedure should prepare its subsystem for the specified event. It may use facilities which it DependsOn[] (see below).  -- eventData is supplied by the caller of EnumerateSubsystems (see below) and its interpretation depends on event.  -- eventData would like to be declared as:  eventData: LONG POINTER TO RECORD [SELECT COMPUTED EventIndex FROM . . . ENDCASE;  -- instanceData is supplied by the caller of CreateSubsystem. It may be used to convey any data necessary for a particular instance of a module.  nullAgentProcedure: AgentProcedure = NIL;  -- for subsystems having no AgentProcedure.  InvalidSubsystem: ERROR;  -- Raised by any of the procedures below upon detection of an invalid SubsystemHandle.  CreateSubsystem: PROCEDURE [    agent: AgentProcedure ¬ NIL,    instanceData: LONG POINTER TO UNSPECIFIED ¬ NIL]    RETURNS [handle: SubsystemHandle];  -- Creates a new subsystem, with the specified agent procedure.  DeleteSubsystem: PROCEDURE [handle: SubsystemHandle];  -- Deletes an existing subsystem.  AddDependency: PROCEDURE [client, implementor: SubsystemHandle];  -- Declares that client is directly dependent on implementor and directly uses its services.  -- Duplicate (direct) dependencies are ignored.  -- If implementor is directly or indirectly dependent on client, raises CyclicDependency.  CyclicDependency: ERROR;  RemoveDependency: PROCEDURE [client, implementor: SubsystemHandle];  -- Declares that client is no longer directly dependent on implementor and directly uses its services.  -- If client was not directly dependent on implementor, raises NoSuchDependency.  NoSuchDependency: ERROR;  DependsOn: PROCEDURE [client, implementor: SubsystemHandle] RETURNS [BOOLEAN];  -- Returns TRUE if and only if client directly or indirectly depends on implementor.  ClientsImpls: TYPE = {clients, implementors};  NotifyAllSubsystems: PROCEDURE [    event: Event, eventData: LONG POINTER TO UNSPECIFIED,    whichFirst: ClientsImpls];  -- Calls the agent procedures of all subsystems.  -- For whichFirst=clients, visits a subsystem only after all of its clients have been visited.  -- For whichFirst=implementors, visits a subsystem only after all of its implementors have been visited.  -- Please see the definition of AgentProcedure for a description of eventData.  NotifyRelatedSubsystems: PROCEDURE [    event: Event, eventData: LONG POINTER TO UNSPECIFIED ¬ NIL,    which: ClientsImpls, whichFirst: ClientsImpls,    subsystem: SubsystemHandle];  -- For which=clients, calls all agent procedures which are direct or indirect clients of subsystem.  -- For which=implementors, calls all agent procedures which are the direct or indirect implementors of subsystem.  -- For whichFirst=clients, visits a subsystem only after all of its clients have been visited.  -- For whichFirst=implementors, visits a subsystem only after all of its implementors have been visited.  -- Please see the definition of AgentProcedure for a description of eventData.  NotifyDirectSubsystems: PROCEDURE [    event: Event, eventData: LONG POINTER TO UNSPECIFIED ¬ NIL,    which: ClientsImpls,    subsystem: SubsystemHandle];  -- For which=clients, calls all agent procedures which are direct clients of subsystem.  -- For which=implementors, calls all agent procedures which are the direct implementors of subsystem.  -- Please see the definition of AgentProcedure for a description of eventData.  EnumerationAborted: ERROR;  -- An agent procedure wishing to abort an enumeration of subsystems may raise this signal;  the enumerating procedure should catch it.  END.--LOGMay 2, 1980  7:04 PM		PXM       Created file.May 23, 1980  5:37 PM		WDK       Added eventData, instanceData, nullSubsystem.April 21, 1981  1:43 PM		WDK       Converted to Mesa 7. September 21, 1981  4:41 PM	Lui   Added NotifyDirectSubsystem, EnumerationAborted.24-Sep-81 15:49:59		WDK       Added nullAgentProcedure. 2-Dec-81 15:53:24		WDK       Added NotifyRelatedSubsystems.22-Nov-82 16:14:03		AWL         Made nullAgentProcedure an explicit NIL and used NIL in place of nullAgentProcedure in CreateSubsystem.