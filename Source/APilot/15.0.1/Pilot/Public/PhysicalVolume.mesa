-- Copyright (C) 1982, 1983  by Xerox Corporation. All rights reserved. -- PhysicalVolume.mesa    11-Jul-83 14:07:19 by JXP   DIRECTORY  Device USING [Type],  System USING [nullID, PhysicalVolumeID, VolumeID];PhysicalVolume: DEFINITIONS =  BEGIN  Handle: TYPE [3];  -- for dealing with drives  -- Types to deal with Pilot Physical Volumes:    ID: TYPE = System.PhysicalVolumeID;  Layout: TYPE = {    partialLogicalVolume, singleLogicalVolume, multipleLogicalVolumes,    empty};  PageCount: TYPE = LONG CARDINAL;  -- Simulate [0..LAST[LONG CARDINAL])    firstPageCount: PageCount = 0;    lastPageCount: PageCount = LAST[LONG CARDINAL]-1;  PageNumber: TYPE = LONG CARDINAL;  -- Simulate [0..LAST[LONG CARDINAL])    firstPageNumber: PageNumber = 0;    lastPageNumber: PageNumber = LAST[LONG CARDINAL]-1;  VolumeType: TYPE = {notPilot, probablyNotPilot, probablyPilot, isPilot};  maxNameLength: CARDINAL = 40;  -- maximum Physical Volume name length  nullBadPage: PageNumber = LAST[PageNumber];  nullDeviceIndex: CARDINAL = LAST[CARDINAL];  nullID: ID = [System.nullID];      -- Drive operations:  GetNextDrive: PROCEDURE [index: CARDINAL] RETURNS [nextIndex: CARDINAL];    GetHandle: PROCEDURE [index: CARDINAL] RETURNS [Handle];    InterpretHandle: PROCEDURE [instance: Handle]    RETURNS [type: Device.Type, index: CARDINAL];      IsReady: PROCEDURE [instance: Handle] RETURNS [ready: BOOLEAN];  -- Drive state changes, mounted volume info:    AwaitStateChange: PROCEDURE [    changeCount: CARDINAL, index: CARDINAL ¬ nullDeviceIndex]    RETURNS [currentChangeCount: CARDINAL];    GetHints: PROCEDURE [instance: Handle, label: LONG STRING ¬ NIL]    RETURNS [pvID: ID, volumeType: VolumeType];  -- Accessing Pilot Physical Volumes:  maxSubvolumesOnPhysicalVolume: READONLY CARDINAL;     AssertPilotVolume: PROCEDURE [instance: Handle] RETURNS [ID];    ChangeName: PROCEDURE [pvID: ID, newName: LONG STRING];  CreatePhysicalVolume: PROCEDURE [instance: Handle, name: LONG STRING]    RETURNS [ID];      GetAttributes: PROCEDURE [pvID: ID, label: LONG STRING ¬ NIL]    RETURNS [instance: Handle, layout: Layout];      GetContainingPhysicalVolume: PROCEDURE [lvID: System.VolumeID]    RETURNS [pvID: ID];      GetNext: PROCEDURE [pvID: ID] RETURNS [ID];    GetNextBadPage: PROCEDURE [pvID: ID, thisBadPageNumber: PageNumber]    RETURNS [nextBadPageNumber: PageNumber];      GetNextLogicalVolume: PROCEDURE [pvID: ID, lvID: System.VolumeID]    RETURNS [System.VolumeID];      MarkPageBad: PROCEDURE [pvID: ID, badPage: PageNumber];    Offline: PROCEDURE [pvID: ID];   -- Scavenging Physical Volumes:    Scavenge: PROCEDURE [    instance: PhysicalVolume.Handle, repair: RepairType, okayToConvert: BOOLEAN]    RETURNS [status: ScavengerStatus];  RepairType: TYPE = {checkOnly, safeRepair, riskyRepair};  ScavengerStatus: TYPE = RECORD [    badPageList: DamageStatus,    bootFile: DamageStatus,    germ: DamageStatus,    softMicrocode: DamageStatus,    hardMicrocode: DamageStatus,    internalStructures: RepairStatus];  DamageStatus: TYPE = {okay, damaged, lost};  RepairStatus: TYPE = {okay, damaged, repaired};  noProblems: ScavengerStatus = [    badPageList: okay,    bootFile: okay,    germ: okay,    softMicrocode: okay,    hardMicrocode: okay,    internalStructures: okay];  -- Accessing non-Pilot volumes:    AssertNotAPilotVolume: PROCEDURE [instance: Handle];  FinishWithNonPilotVolume: PROCEDURE [instance: Handle];  -- Errors:    NeedsScavenging: ERROR;  Error: ERROR [error: ErrorType];  ErrorType: TYPE = {    badDisk, badSpotTableFull, containsOpenVolumes, diskReadError, hardwareError,    hasPilotVolume, alreadyAsserted, insufficientSpace, invalidHandle,    nameRequired, notReady, noSuchDrive, noSuchLogicalVolume,    physicalVolumeUnknown, writeProtected, wrongFormat, needsConversion};  END.--LOGMay 29, 80 11:24 AM  Luniewski	Created fileJun 10, 80 10:52 AM  Luniewski   Changed Handle to an exported type.  Made the truth for ID's be in System.Jun 28, 80 5:47 PM   Forrest   Moved in many procs from old SpecialVolume.  Re-arranged.   Made nullID compile-time constant.Jul 25, 80 9:17 AM   Luniewski	Updated ErrorType.Sep 2, 80 5:11 PM   Jose   added to ErrorType. 8-Aug-81 14:58:44   Luniewski	GetAttributes takes a LONG STRING. 4-Nov-81 11:07:55   Luniewski   CreateLogicalVolume takes a LONG STRING.  Replaced CanNotScavenge with   NeedsScavenging.  Added Scavenge, RepairType, ScavengerStatus,   DamageStatus, RepairStatus, noProblems. 5-Oct-82 15:25:07   Luniewski   Added PageCount, {first last}Page{Count Number}.24-Nov-82  9:14:27   AWL         Removed Device.Type argument and result from GetNextDrive. Removed type argument   from GetHandle and AwaitStateChange.  Deleted CreateLogicalVolume and   EraseLogicalVolume.  GetHints and GetAttributes now take a LONG STRING.   Changed all instances of Volume.ID to System.VolumeID. Added empty to Layout.10-Dec-82 18:57:11   LXD         Moved ErrorTypes pageCountTooSmallForVolume, subvolumeHasTooManyBadPages,   tooManySubvolumes to Volume.23-Jun-83 13:31:12   WDK     	Added ChangeName, needsConversion.11-Jul-83 14:07:30   JXP   	Don't default okayToConvert in Scavenge.