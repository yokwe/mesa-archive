-- Copyright (C) 1986  by Xerox Corporation. All rights reserved. -- DataTransfer.mesa     8-Jul-86 17:14:29 by RSV    -- This Private interface supplies the operations for reading and writing-- NOTES:-- -- Operations applicable only to logical volumes have an LVToken-- argument; the disk channel is obtained from it. Operations-- applicable more generally have an explicit disk channel argument.DIRECTORY  DiskChannel USING [Handle, IOStatus],  Environment USING [PageNumber],  File USING [PageCount],  KernelFile USING [Descriptor, PageGroup],  PhysicalVolumeFormat USING [PageNumber],  VM USING [Interval],  VolTable USING [LVToken],  Volume USING [ID, PageNumber];DataTransfer: DEFINITIONS =  BEGIN  DataStatus: TYPE = {  -- result of a data transfer operation.    valid, invalid, diskError};   DiskStatus: TYPE = disk DiskChannel.IOStatus;    DiskStatusToDataStatus: PROCEDURE [diskStatus: DiskStatus]    RETURNS [dataStatus: DataStatus];  -- General remarks on transfer operations:    -- * All transfer operations return a DiskStatus which may examined directly.  --  -- * Many transfer operations take an argument "handleErrors".  --   If handleErrors = TRUE, DataTransfers will perform  --   any necessary error recovery. If the operation can not  --   be sucessfully performed, the debugger is called.  ReadData: PROCEDURE [    volume: Volume.ID, volumePage: Volume.PageNumber,    memoryPage: Environment.PageNumber, handleErrors: BOOLEAN ¬ TRUE,    tok: VolTable.LVToken] RETURNS [status: DiskStatus] =    INLINE {    RETURN RealReadData[volume, volumePage, memoryPage, handleErrors]};  ReadPVData: PROCEDURE [    channel: DiskChannel.Handle, pvPage: PhysicalVolumeFormat.PageNumber,    memoryPage: Environment.PageNumber]    RETURNS [status: DiskChannel.IOStatus];      VerifyData: PROCEDURE[    file: KernelFile.Descriptor, group: KernelFile.PageGroup,    handleErrors: BOOLEAN ¬ TRUE, tok: VolTable.LVToken]    RETURNS [countValid: File.PageCount, status: DiskStatus] = INLINE {    RETURN RealVerifyData[      file, group, handleErrors]};    WriteData: PROCEDURE [    file: KernelFile.Descriptor, group: KernelFile.PageGroup, data: VM.Interval,    handleErrors: BOOLEAN ¬ TRUE, tok: VolTable.LVToken]    RETURNS [status: DiskStatus] = INLINE {    RETURN RealWriteData[      file, group, data, handleErrors]};  -- The first data.count disk pages will be initialized from  -- data.pointer­; the interval described by data MUST BE RESIDENT.  -- Any remaining disk pages will be initialized to zeros.   -- Private Procedures:  RealReadData: PRIVATE PROCEDURE [    volume: Volume.ID, volumePage: Volume.PageNumber,    memoryPage: Environment.PageNumber, handleErrors: BOOLEAN]    RETURNS [status: DiskStatus];  RealWriteData: PRIVATE PROCEDURE [    file: KernelFile.Descriptor, group: KernelFile.PageGroup, data: VM.Interval,    handleErrors: BOOLEAN]    RETURNS [status: DiskStatus];  RealVerifyData: PRIVATE PROCEDURE [    file: KernelFile.Descriptor, group: KernelFile.PageGroup,    handleErrors: BOOLEAN]    RETURNS [countValid: File.PageCount, status: DiskStatus];  END.   LOGTime:	 8-Jul-86 17:14:29	By: RSV   Action: Created File from LabelTransfer for labeless conversion.  Changed name of DiskStatusToLabelStatus to DiskStatusToDataStatus.  Added procedure ReadPVData