-- Copyright (C) 1983, 1986  by Xerox Corporation. All rights reserved. -- RuntimeInternal.mesa       30-Jun-86 14:27:15 by MEW     DIRECTORY  CPSwapDefs USING [OperandDesc, SignalError, StorageFaultType],  Environment USING [PageNumber],  PrincOps USING [FrameSizeIndex, LocalFrameHandle, StateVector],  PrincOpsExtras USING [SourceDest],  PrincOpsExtras2 USING [LongGlobalFrameHandle],  ProcessOperations USING [DisableInterrupts, EnableInterrupts],  VM USING [Interval, Swappability];RuntimeInternal: DEFINITIONS LOCKS frameHeapLock  IMPORTS ProcessOperations =  BEGIN  -- Global Frame Management:  SourceDest: TYPE = PrincOpsExtras.SourceDest;    -- Local Frame Management:  FlushLargeFrames: --**-- ENTRY --**-- PROCEDURE[] = INLINE {    -- Recovers any memory available from recently-freed large frames.    -- Done automatically on any large frame allocation.    flushLargeFramesInternal[]};  frameHeapLock: PRIVATE MONITORLOCK;  FlushLargeFramesInternal: PRIVATE TYPE = RECORD [proc: PROCEDURE[]];  flushLargeFramesInternal: PRIVATE FlushLargeFramesInternal;  MakeFsi: PROCEDURE [words: CARDINAL] RETURNS [fsi: PrincOps.FrameSizeIndex];    -- Returns local frame size index which will hold the specified number of    -- client words; "words" should not count frame overhead word.  FrameSize: PROCEDURE [fsi: PrincOps.FrameSizeIndex] RETURNS [CARDINAL];    -- Returns number of client words which can be held in a local frame    -- of given frame size index.  -- Debugger Communication:  CleanMapLog: PROCEDURE;    -- Calls debugger to empty the map log.  GetOperand: PROC [    opDesc: LONG POINTER TO CPSwapDefs.OperandDesc,    lFrame: PrincOps.LocalFrameHandle, state: POINTER TO dst PrincOps.StateVector]    RETURNS [opVal: LONG CARDINAL];    -- Returns value described by OperandDesc. Short operands are longified.    -- Perf tools use this.  ProcessUncaught: PROCEDURE [    signal: --GENERIC-- SIGNAL, signalArgs: PrincOps.LocalFrameHandle,    signalError: CPSwapDefs.SignalError,    raiser: PrincOps.LocalFrameHandle,  -- frame raising signal    root: PrincOps.LocalFrameHandle];  -- root frame of process    -- Calls debugger to process an uncaught SIGNAL or ERROR.  ReportFault: PROCEDURE [    process: PROCESS, faultType: CPSwapDefs.StorageFaultType];    -- Calls debugger to report an illegal memory read or write.  -- The following should occur lexically BEFORE its use in Bug  -- in order to get decent code generated. (AR 2508)  BugInternal: PRIVATE VAR PROCEDURE [bugType: UNSPECIFIED];    -- Actually implemented as a PortHandle.    -- Since DisableInterrupts is a machine code proc,     -- it doesn't actually help here.  Bug: PROCEDURE [bugType: --any subrange of CARDINAL-- UNSPECIFIED] = INLINE    << Reports a fatal problem.    For use when caller is not allowed to raise a SIGNAL.    Caller should assume that Bug never returns. [It may, but only after    the user has signed in blood that he will accept the consequences.]    Use of this procedure is UNNECESSARY for swappable code; for such code,    its use is NOT RECOMMENDED unless the error condition is so serious    that continued execution is likely to compromise the integrity    of permanent data.    All other clients should use a private SIGNAL instead of Bug.>>    BEGIN    << This is the simple implementation:    (We don't use it because it generates poor code.)    ProcessOperations.DisableInterrupts[];    BugInternal[bugType];    Bug is not expected to return, so we do not enable interrupts.    >>    -- This is the implementation to work around poor code generation:    PushTypeAndDisableInterrupts: PROC [bugType: UNSPECIFIED] =      LOOPHOLE[ProcessOperations.DisableInterrupts];    BugWithTypeAlreadyStacked: TYPE = PROC[];    PushTypeAndDisableInterrupts[bugType];    LOOPHOLE[BugInternal, BugWithTypeAlreadyStacked][];    END;  WorryCallDebugger: PROCEDURE [message: LONG STRING] = INLINE {    -- Calls the debugger - for when you are not allowed to take frame faults.    ProcessOperations.DisableInterrupts[];    WorryCallDebuggerInternal[message];    ProcessOperations.EnableInterrupts[]};  WorryCallDebuggerInternal: PRIVATE VAR PROCEDURE [message: LONG STRING];  -- Loader communication:    GetSwapUnitsFromLoadedBcd:     PROCEDURE[gf: PrincOpsExtras2.LongGlobalFrameHandle, page: Environment.PageNumber]     RETURNS [interval: VM.Interval, swappability: VM.Swappability,       changeableSwappability:BOOLEAN];    -- Returns attributes of the code pack or frame pack containing page.    -- gf may have been loaded either at runtime or by MakeBoot.    -- If page is not in a code pack of frame pack of gf, returns nullInterval.    -- If gf was loaded by MakeBoot to be permanently-resident,    -- the results are undefined.  END.LOG    (For earlier log entries, see Pilot 10.0 archive version.)14-Sep-82  9:35:03   AWL         Fixed bug in impl of GlobalFrameFromProgram and ProgramFromGlobalFrame.14-Sep-82 11:47:42   WDK     	AR 12349: Improved implementation of Bug. 6-Oct-82  9:20:42   WDK     	Added ReportFault.23-Nov-82 13:29:18   AWL         Moved GetNextGlobalFrame, GlobalFrameFromProgram and ProgramFromGlobalFrame   to SpecialRuntime.23-Jun-83 15:00:22   JXG       Merged RuntimeInternalExtras: GetSwapUnitsFromLoadedBcd  1-Jul-83  9:37:26   JXG     pp WDK        Delete loadStatePage; SignalError, FaultType moved to CPSwapDefs;   changes to parameters of ProcessUncaught 6-Jul-83 11:30:30   JXP      Get rid of References to the Global Frame Table.11-Jul-83  9:36:01   WDK        Added ProgramFromFrame, FrameFromProgram, SourceDest, MainBody.14-Jul-83 11:24:32   JXP      Add parameter to ProcessUncaught, FaultType => StorageFaultType in ReportFault. 4-Aug-83 13:54:40   WDK        Utilize PrincOpsExtras. Deleted FrameFromProgram, ProgramFromFrame (get from SpecialRuntime).18-Aug-83  9:21:33   WDK        ProcessUncaught: Rename raiserFrame to raiser, rootFrame to root. Add comments to Bug.   Try nicer workaround to AR 2508 in Bug. Use VAR for bugInternal.18-Aug-83  9:21:33   WDK        Added GetOperand for perf tools. Use VAR for WorryCallDebuggerInternal.19-Feb-86 17:45:56   ET   Convert to new princops: Moved MainBody to ControlModuleFormat. Take out unused RemoveGlobalFrame.30-Jun-86 14:27:34   MEW   Changed GetSwapUnitsFromLoadedBcd to use a long globalframe handle.