-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- SimpleFile.mesa        14-Nov-83 11:28:17 by WDK      -- This Private interface supplies elementary file operations. It should-- be used only within the File Manager and Space Allocation-- subsystems of PilotKernel.-- Use of some of these routines requires previous use of the Volume Table-- locking mechanism - see the comments with the individual procedures.DIRECTORY  DiskBackingStore USING [Data],  File USING [File, ID, PageCount, PageNumber, Type],  KernelFile USING [Descriptor, FilePtr, PageGroup],  LogicalVolumeFormat USING [Handle],  PhysicalVolumeFormat USING [Handle, MarkerHandle],  VM USING [Interval],  VolTable USING [LVToken, PVToken];SimpleFile: DEFINITIONS =  BEGIN  PVHandle: TYPE = PhysicalVolumeFormat.Handle;  LVHandle: TYPE = LogicalVolumeFormat.Handle;  MarkerHandle: TYPE = PhysicalVolumeFormat.MarkerHandle;  -- Basic File Operations:  GetAttributes: PROCEDURE [file: File.File]    RETURNS [type: File.Type, temporary: BOOLEAN];  -- Returns the attributes of file. For clients who do not have the  -- LV locked. Can raise File.Unknown, Volume.NotOpen, and Volume.NotOnline.  GetBackingStoreData: PROCEDURE [    file: File.ID, lvHandle: LVHandle, filePage: File.PageNumber,    type: File.Type, tok: VolTable.LVToken]    RETURNS [      fileData: DiskBackingStore.Data, runLength: File.PageCount,      resultType: File.Type];  << Returns the DiskBackingStore Data and length of the run of contiguous  pages of file which start at filePage. If the type passed in by the caller  is not PilotFileTypes.tUnassigned, then it will be used in constructing the  BackingStoreRun. Otherwise, the type will be determined for the caller.  In either case, the File Type is returned as a convenience. If the caller  passes in an incorrect type, the resulting Data is undefined.  NOTE: If filePage = 0, fileData is only valid as long as the  temporary/permanent attribute of the file does not change.  For clients who have the LV locked.  Can raise File.Unknown and File.MissingPages.>>    GetFileDescriptor: PROCEDURE [    file: File.File, lvHandle: LogicalVolumeFormat.Handle, tok: VolTable.LVToken,    fileDescPtr: KernelFile.FilePtr] RETURNS [found: BOOLEAN];  -- If file exists, returns found = TRUE and a File Descriptor in fileDescPtr­  -- else returns found = FALSE.  -- For clients who do not have the LV locked.  GetPageGroup: PROCEDURE [    lvHandle: LogicalVolumeFormat.Handle, fileDescPtr: KernelFile.FilePtr,    page: File.PageNumber, tok: VolTable.LVToken]    RETURNS [found: BOOLEAN, group: KernelFile.PageGroup];  << [This procedure is a version of VolFileMap.GetPageGroup  that handles uniformly the case of missing pages of a file.]    Searches for "page" of the file fileDescPtr.fileID  and returns information about the containing page group.    [Page Exists] If the page exists, returns found = TRUE, group will  describe the containing page group, and fileDescPtr.type  will have been set to the type of the file.    [Off End of File] If the page does not exist BUT an earlier page  AND no later pages in that file exist, returns found = TRUE,  group.filePage = group.nextFilePage = size of file,  and fileDescPtr.type will have been set to the type of the file.  [Missing Pages in File] If the page does not exist  BUT a later page of that file exists, returns found = TRUE,  group will describe the missing page group with volumePage = nullVolumePage,  and fileDescPtr.type will have been set to the type of the file.    If no page of the file exists, returns found = FALSE,  group = TRASH, and fileDescPtr.type is unchanged.>>  GetSize: PROCEDURE [file: File.File] RETURNS [size: File.PageCount];  -- Returns the size of file. For clients who do not have the  -- LV locked. Can raise File.Unknown, Volume.NotOpen, and Volume.NotOnline.  GetSizeInternal: PROCEDURE [    file: File.File, handle: LVHandle, tok: VolTable.LVToken]    RETURNS [size: File.PageCount];  -- Version of GetSize for clients who have the LV locked.  SetSize: PROCEDURE [file: File.File, size: File.PageCount, data: VM.Interval];  << If the file is growing and data.count > 0, the new pages are initialized  from the contents of data. The VM described by data MUST BE RESIDENT.  For clients who do not have the LV locked.  Can raise File.Unknown, Volume.InsufficientSpace, Volume.NotOpen, and Volume.NotOnline.  If data.count > 0 and the file is not growing, the debugger is called.>>  SetSizeInternal: PROCEDURE [    fileD: KernelFile.Descriptor, vol: LVHandle, size: File.PageCount,    tok: VolTable.LVToken, data: VM.Interval];  -- Version of SetSize for clients who have the LV locked.  -- Values of fileD.type and .temporary are ignored  -- The file MUST exist and fileD.size MUST be accurate.  -- Marker Page Manipulation:  UpdateLogicalMarkerPages: PROCEDURE [    lvHandle: LVHandle, tok: VolTable.LVToken] = INLINE {    RealUpdateLogicalMarkerPages[lvHandle]};  -- Forces consistency between the root page and all marker pages of the  -- LV by copying info. from the root page into the marker pages. LV must  -- be online, and no SV's locked.  UpdatePhysicalMarkerPages: PROCEDURE [    pvHandle: PVHandle, tok: VolTable.PVToken] = INLINE {    RealUpdatePhysicalMarkerPages[pvHandle]};  -- Forces consistency between the root page and all marker pages of the  -- PV by copying info. from the root page into the marker pages. PV must  -- be online, and no SV's locked.  -- PRIVATE Procedures:  RealUpdateLogicalMarkerPages: PRIVATE PROCEDURE [lvHandle: LVHandle];  RealUpdatePhysicalMarkerPages: PRIVATE PROCEDURE [pvHandle: PVHandle];  END.LOG   (For earlier entries, see Mesa 8.0 archive version.)11-Oct-82 11:43:06   JXP   	Created For Klamath19-Oct-82 16:29:38   JXP      Added tok param. to SetSizeInternal. Change all references of FileInternalto KernelFile. 5-Nov-82 12:03:46   JXP      Added svToken and pvToken Parms to CreateMarkerPage[]. Document Errors.Add a VM.Interval parm. to SetSize{Internal} add GetSizeInternal[].30-Nov-82 10:58:38   JXP      Update comments. GetBSData now takes an LVToken and Handle instead of an   LV ID. Reverse order of return parms in GetAttributes. Add token parm to   UpdateLogicalMarkerPages[]. Add GetPageGroup[] and GetFileDescriptor[].   Add token parameters to Update?MarkerPages. Add private procedures which   are called inline by Public items. Use File.File instead of (fID, volume).13-Dec-82 15:51:01   JXP   	Update comments.16-Feb-83 10:54:15   WDK     	Deleted CreateMarkerPage. Improved documentation. 4-Mar-83 16:49:40   JXP      Change interface to GetBackingStoreData; add new parameter and return   result (both type: File.Type).14-Nov-83 11:28:13   WDK        Improved documentation of GetPageGroup! and SetSizeInternal.