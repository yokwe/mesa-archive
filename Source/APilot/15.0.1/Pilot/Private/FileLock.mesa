-- Copyright (C) 1986, 1988, 1989  by Xerox Corporation and Fuji Xerox Co., Ltd. All rights reserved. -- FileLock.mesa   10-May-89 22:40:53 by TxH   DIRECTORY  VM   USING [PageCount, Interval],  File USING [File, ID, PageCount, PageNumber];FileLock: DEFINITIONS =  BEGIN    LockState: TYPE = {notLocked, readOnlyLock, readWriteLock};  LockType: TYPE = LockState[readOnlyLock..readWriteLock];  LockHandle: TYPE [2];  nullLockHandle: LockHandle = LOOPHOLE[LONG[0]];    SearchLocation: TYPE = {checkOnlyPage, checkPageAndAbove};    Error: ERROR [error: ErrorType];  ErrorType: TYPE = {notLocked, lockedReadOnly, lockedReadWrite};    fileLockNodeSize: READONLY CARDINAL;  -- the size of a lock data structure in words    lockingEnabled: READONLY BOOLEAN;  -- says whether locking is enabled on this boot session.    --SpaceInit: PROCEDURE =    -- Allocates VM for file lock nodes.  Initializes pool showing all nodes     -- as free.  Maps first part of VM.    DeleteLock: PROCEDURE [lock: LockHandle]    RETURNS [storage: LONG POINTER, count: CARDINAL];    -- Deletes the specified lock out of the fileLockTable and returns the     -- storage the locked node used along with a count indicating the size,    -- in word, of the storage returned.      FileLockInit: PROCEDURE;    -- Initializes the module.      GetFileIDFromLock: PROCEDURE [lock: LockHandle] RETURNS [fileID: File.ID];    -- Returns the fileID associated with the given lock.      GetLock: PROCEDURE [    storage: LONG POINTER, file: File.File, firstPage: File.PageNumber,    mappedCount: VM.PageCount, lockType: LockType, mapUnitIndex: LONG CARDINAL]    RETURNS [lock: LockHandle];    -- Obtains a lock of the specified type on file using the storage passed    -- in.      GetLockHandleFromFileID: PROCEDURE [file: File.File, page: File.PageNumber]    RETURNS [lock: LockHandle];    -- Returns a lock handle associated with the given fileID and page number.      IsLocked: PROCEDURE [file: File.File, page: File.PageNumber,    searchLocation: SearchLocation] RETURNS [lockState: LockState];    -- Checks to see if the file page is locked in the location specified     -- and returns the result.    DiscardLockAndVMData: PROCEDURE[file: File.File, size: File.PageCount]     RETURNS [ok: BOOLEAN];     -- Checks to see if it is possible to shrink the given mapped file.    -- If possible, then eliminate the file lock nodes which back the part    -- to be shrinked, also adjusted run and swap unit data table    -- with vm-data-map fuctions. And thier vm spaces threw away into    -- trushedSpace list.  AnyTrashedSpace: PROCEDURE [sp: VM.Interval]     RETURNS [newSpace: VM.Interval];    --  Checks to see if there is any trushed space exists     --  consecutively after the given vm.  IsOkToDeleteFile: PROCEDURE[file: File.File] RETURNS [ok: BOOLEAN];     -- Checks to see if the given file has any locked pages.    -- 1. When there's no locked pages, returns ok(TRUE).    -- 2. If they're mapped with lock handle,  does Space.Unmap their    --      virtual memories and then returns ok(TRUE).    -- 3. If there's any mapped without lock handle, returns not-ok(FALSE).          END.  LOG.22-Jul-86 15:56:13  RSV  Created File.18-Sep-86 10:55:42  RSV  Type of fileLockNodeSize is now READONLY CARDINAL.22-Oct-86 18:00:18  RSV  Added GetLockHandleFromFileID. 3-Nov-86 10:39:55  RSV  Realphabetize.29-Jul-88 17:08:21  RSV  Added lockingEnabled.27-Mar-89 18:06:56  TXT  Add mappedCount in GetLock procedure.11-Apr-89 10:21:48  TxH  Added DiscardLockAndVMData and AnyTrashedSpace. Changed the argment list for GetLock("count" field deleted and "mapUnitIndex" added). Added Space interface to DIRECTORYs. (SS-FX: AR#6, AR#26)10-May-89 22:40:50  TxH  Added IsOkToDeleteFile and changed AnyTrashedSpace.