-- Copyright (C) 1983, 1988  by Xerox Corporation. All rights reserved. -- KernelObjAlloc.mesa (last edited by: RSV     on: 29-Aug-88 14:53:13)-- This is the PilotKernel-level interface to the ObjAlloc facility.-- This is a Private interface.  It may be called from anywhere within the Kernel.DIRECTORY  ObjAlloc USING [AllocPoolDesc, AllocFree, Interval, ItemCount, ItemIndex];KernelObjAlloc: DEFINITIONS =  BEGIN    AllocateAt: PROCEDURE [     pool: ObjAlloc.AllocPoolDesc, interval: ObjAlloc.Interval,     validate: BOOLEAN ¬ TRUE];     -- Marks the objects named by interval as allocated.     -- If the objects named by interval lie outside of pool,     --   Error[invalidParameters] is raised.     -- If valdiate is TRUE, AllocateAt verifies that all objects named by interval     --   are currently free.  It raised the error     --     AlreadyAllocated [     --         smallest ItemIndex of an allocated object in interval]     --   if any are already allocated (marking NO objects as allocated in     --   this case).     -- If validate is FALSE, AllocateAt does no verification on the current status     --   of the objects named by interval; it simply marks them as allocated.  FindBackwardFreeRange: PUBLIC PROCEDURE [    pool: ObjAlloc.AllocPoolDesc, offset: ObjAlloc.ItemCount ¬ 0,    count: ObjAlloc.ItemCount, willTakeSmaller: BOOLEAN ¬ FALSE,     carryIn: ObjAlloc.ItemCount ¬ 0]    RETURNS [interval: ObjAlloc.Interval, carryOut: ObjAlloc.ItemCount];  -- FindBackwardFreeRange is used to perform queries on the database to find   --   ranges of free objects before actually taking action; it only queries the   --   database, it performs no actual allocation.  It returns interval.count = 0   --   if no interesting range of objects can be found (willTakeSmaller is TRUE   --   and there are no free objects; willTakeSmaller is FALSE and no range of   --   count free objects can be found).  The difference between FindFreeRange  --   and FindBackwardFreeRange is that FindFreeRange searches a range forward  --   looking for free objects, while FindBackwardFreeRange searches backwards.  --   Thus the two procedures may return the same or different intervals given  --   the same pool of objects.  -- If the objects named by interval lie outside of pool,  --   Error[invalidParameters] is raised.  -- willTakeSmaller indicates whether intervals smaller than count are of  --   interest.  -- carryIn is the number of objects that FindBackwardFreeRange should assume are  --   free immediately following pool.  -- carryOut is the number of objects free at the very beginning of pool (this  --   is valid only if interval.count < count)  FindFreeRange: PROCEDURE [     pool: ObjAlloc.AllocPoolDesc, offset: ObjAlloc.ItemCount ¬ 0,      count: ObjAlloc.ItemCount, willTakeSmaller: BOOLEAN ¬ FALSE,      carryIn: ObjAlloc.ItemCount ¬ 0]     RETURNS [interval: ObjAlloc.Interval, carryOut: ObjAlloc.ItemCount];  -- FindFreeRange is used to perform queries on the database to find ranges of  --   free objects before actually taking action; it only queries the database,  --   it performs no actual allocation.  It returns interval.count = 0 if no  --   interesting range of objects can be found (willTakeSmaller is TRUE and  --   there are no free objects; willTakeSmaller is FALSE and no range of count  --    free objects can be found).  -- If the objects named by interval lie outside of pool,  --   Error[invalidParameters] is raised.  -- willTakeSmaller indicates whether intervals smaller than count are of  --   interest.  -- carryIn is the number of objects that FindFreeRange should assume are free  --   immediately preceding pool.  -- carryOut is the number of objects free at the very end of pool (this is valid  --   only if interval.count < count)    AllSameState: PROCEDURE [     pool: ObjAlloc.AllocPoolDesc, interval: ObjAlloc.Interval,     desiredState: ObjAlloc.AllocFree]     RETURNS [allSame: BOOLEAN, firstDifferent: ObjAlloc.ItemIndex];  -- checks that each entry in the specified interval is set to the  -- desired state. If they are, then allSame is returned TRUE  -- and firstDifferent is undefined. If there is an entry which has  -- other than the desired state, then allSame is returned FALSE and  -- firstDifferent is set to the itemIndex of the first entry which has  -- the undesired state.    AlreadyAllocated: ERROR [item: ObjAlloc.ItemIndex];  -- Raised by AllocateAt on an attempt to allocate an already allocated object.  END.        LOG  14-Jul-82 14:02:23	AWL      	Created file.17-Mar-83 16:28:29	JXG    	Added offset parameter to FindFreeRange and new procedure AllSameState29-Aug-88 14:53:13      RSV        Added FindBackwardFreeRange procedure definition.