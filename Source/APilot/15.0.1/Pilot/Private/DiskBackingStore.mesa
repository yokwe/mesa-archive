-- Copyright (C) 1983, 1985, 1986, 1988  by Xerox Corporation. All rights reserved. -- Store>DiskBackingStore.mesa    29-Jul-88 13:41:10 by RSV -- This Private interface defines the data structures and functions-- implemented by the disk backing store implementation.-- THINGS TO DO:---- We need a way for the client to report the error to the debugger,-- or to report it to VM.DIRECTORY  BackingStore USING [Data, TransferData, TransferProc],  DiskChannel USING [Handle, IORequest, IORequestHandle],  Environment USING [LongNumber],  File USING [ID, PageCount, PageNumber, Type],  FileLock USING [LockHandle],  Inline USING [HighHalf, LowHalf],  PhysicalVolume USING [PageNumber],  PilotDiskFace USING [Status];DiskBackingStore: DEFINITIONS IMPORTS Inline =  BEGIN  --~~~~~~~~~~ TYPES:  -- Data structure passed by VM to define a run of data:  Data: TYPE = MACHINE DEPENDENT RECORD [    type(0): File.Type,    -- The next two fields are a 23 bit File.PageNumber in    -- a way that Mesa will accept.    filePageLow(1:0..15): FilePageLow,    filePageHigh(1:16..22): FilePageHigh,    fileAttributes(1:23..24): FileAttributes,    channelHandle(1:25..31): ChannelHandle,    volumePage(3): PhysicalVolume.PageNumber,    placeHolder(5): SELECT COMPUTED BOOLEAN FROM      TRUE => [lock(5): FileLock.LockHandle],      FALSE => [file(5): File.ID],      ENDCASE];  dataSizeCorrect: PRIVATE BOOLEAN [TRUE..TRUE] =  -- since it is an implementation    (SIZE[Data] = SIZE[BackingStore.Data]);  -- of the "opaque type" BackingStore.Data.  FilePageLow: TYPE = CARDINAL;  -- since Mesa will not pack 23 bit fields.  FilePageHigh: TYPE = CARDINAL [0..128);  FileAttributes: TYPE = RECORD [    temporary: BOOLEAN,  -- HINT: if wrong, a retry will be performed    readOnly: BOOLEAN -- read-only'ness of the file, or the containing volume    ];  ChannelHandle: TYPE = CARDINAL [0..128);  -- An eight-bit identifier of a disk channel.  InvalidChannelHandle: ERROR;  TooManyChannels: ERROR;  --~~~~~~~~~~ PROCEDURES:  AwaitError: PROCEDURE    RETURNS [      op: DiskChannel.IORequest, status: PilotDiskFace.Status,      transData: LONG POINTER TO --READONLY-- BackingStore.TransferData];  -- (AR 12396).  << Waits for a disk error, then returns information describing it.  On return, if it is desired to retry the operation  or some modified version), call Restart.  The pointer transData is valid until Restart is called.  The calling process must have done RegisterErrorProcess before calling this proc.>>  BSDataFromDiskData: PROCEDURE [diskData: DiskBackingStore.Data]    RETURNS [BackingStore.Data] = INLINE {RETURN[LOOPHOLE[diskData]]};  DiskDataFromBSData: PROCEDURE [data: BackingStore.Data]    RETURNS [DiskBackingStore.Data] = INLINE {RETURN[LOOPHOLE[data]]};  GetDiskChannel: PROCEDURE [channel: ChannelHandle]    RETURNS [channelHandle: DiskChannel.Handle];  PackFilePageNumber: PROCEDURE [low: FilePageLow, high: FilePageHigh]    RETURNS [page: File.PageNumber] = INLINE {    RETURN[      LOOPHOLE[Environment.LongNumber[num[lowbits: low, highbits: high]]]]};  PBSDataFromPDiskData: PROCEDURE [    pDiskData: LONG POINTER TO DiskBackingStore.Data]    RETURNS [LONG POINTER TO BackingStore.Data] = INLINE {    RETURN[LOOPHOLE[pDiskData]]};  -- Note: Not usable on POINTER TO READONLY.  PDiskDataFromPBSData: PROCEDURE [pData: LONG POINTER TO BackingStore.Data]    RETURNS [LONG POINTER TO DiskBackingStore.Data] = INLINE {    RETURN[LOOPHOLE[pData]]};  -- Note: Not usable on POINTER TO READONLY.  RegisterErrorProcess: PROCEDURE;  -- Declares the calling process to be in the business of handling  -- disk errors. It must register before calling AwaitError.  -- It is an error to register an already-registered process.  RegisterChannel: PROCEDURE [channel: DiskChannel.Handle]    RETURNS [channelHandle: ChannelHandle];  -- Creates a ChannelHandle.  -- If all channel handles are in use, TooManyChannels is raised.  ReleaseHandle: PROCEDURE [channelHandle: ChannelHandle];  -- Destroys a ChannelHandle (caller should discard all copies). Inverse of  -- RegisterChannel.  -- If channelHandle is not valid, raises InvalidChannelHandle.  -- Note: channelHandle may be reissued by RegisterChannel at a later time.  RemoveErrorProcess: PROCEDURE;  -- Declares the calling process to be no longer in the business of handling  -- disk errors. Inverse of RegisterErrorProcess.  -- It is an error to deregister an already-deregistered process.  ReportErrorToDebugger: PROCEDURE [    channel: DiskChannel.Handle, request: DiskChannel.IORequestHandle,    countValid: File.PageCount, status: PilotDiskFace.Status];  Restart: PROCEDURE [    transData: LONG POINTER TO --READONLY-- BackingStore.TransferData]  -- (AR 12396)    RETURNS [      result: Result, op: DiskChannel.IORequest, status: PilotDiskFace.Status];  << Retrys a failed operation (or some modified version of it).  If the operation suceeds, returns [ok, NULL, NULL, NULL],  Else returns [error, <errorData>]. The returned op.label    is always NIL. The error will not be reported to AwaitError.  The operation must have been reported by AwaitError, and the fields of transData  must have the same values as the transData returned by AwaitError  (except possibly pageData and data). >>  Result: TYPE = {ok, error};  Transfer: BackingStore.TransferProc;  -- Proc to be passed to VM for disk data transfers.  UnpackFilePageNumber: PROCEDURE [page: File.PageNumber]    RETURNS [low: FilePageLow, high: FilePageHigh] = INLINE {    RETURN[low: Inline.LowHalf[page], high: Inline.HighHalf[page]]};  END.LOG29-Jun-82 15:56:01   KAM        Created file.13-Sep-82 16:33:10   WDK         Make compatible with new VM. Modify Restart, etc to take args through a pointer. New results from Restart. Added type converters. Error replaced by InvalidChannelHandle, TooManyChannels.20-Oct-82 17:11:42   WDK        PackFilePageNumber grossly wrong due to UNSPECIFIED.27-Oct-82 17:10:33   WDK        Remove READONLY per AR 12396. 3-Nov-82 18:45:34   WDK        Catch up with MidP version.22-Jun-83 17:22:03   WDK        Added ReportErrorToDebugger.25-Oct-83 11:44:10   AWL        Added readOnly to FileAttributes. 5-Apr-85 14:45:20   CAJ        New args for ReportErrorToDebugger. 7-Jul-86 16:10:45   RSV        Deleted PilotDiskFace.Label references.18-Sep-86 10:11:13   RSV        Deleted Data.file field and added Data.lock field for file locking. 3-Nov-86 12:10:00   RSV        Added DIRECTORY for FileLock.  Deleted File.ID use.29-Jul-88 13:41:10   RSV        Change Data to allow both locking and non-locking complete information.