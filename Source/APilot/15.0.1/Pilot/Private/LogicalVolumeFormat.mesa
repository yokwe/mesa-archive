-- Copyright (C) 1983, 1986, 1987  by Xerox Corporation. All rights reserved. -- LogicalVolumeFormat.mesa    18-Feb-87 18:31:27 by RSV   -- This Private interface defines the format of the permanent data structures of a logical volume: its root page, the logical volume part of a marker page, and the root directory.DIRECTORY  Boot USING [DiskFileID, LVBootFiles],  Environment USING [PageCount, wordsPerPage],  File USING [    ID, nullID, PageCount, PageNumber, Type],  FileTypes USING [PilotFileType],  PilotDisk USING [nullFileID],  PilotFileTypes USING [    PilotRootFileType, tFreePage, tVolumeFileMap, tVolumeAllocationMap],  PilotFileTypesExtraExtras USING [tETable],  System USING [GreenwichMeanTime, gmtEpoch],  Volume USING [ID, nullID, PageCount, PageNumber, Type];LogicalVolumeFormat: DEFINITIONS =  BEGIN    -- CONSTANTS:  maxLogicalVolumeLabelLength: CARDINAL = 40;  -- DO NOT EVER CHANGE THIS VALUE!  nullBoot: Boot.LVBootFiles =  -- (only fID field is significant)    ALL[      Boot.DiskFileID[        fID: PilotDisk.nullFileID, firstPage: 0, da: LOOPHOLE[LONG[0]]]];  nullName: LabelArray = ALL[0C];  nullRootFileIDs: ARRAY PilotFileTypes.PilotRootFileType OF File.ID =    ALL[File.nullID];  nullVolumePage: Volume.PageNumber = 0;  rootPageNumber: Volume.PageNumber = 0;  rootPageSize: Environment.PageCount = 1;  -- LOGICAL VOLUME ROOT PAGE DEFINITIONS:  <<  The Descriptor is divided into two portions:  (1) Header: This portion MUST be the first portion of the Descriptor. It contains basic information that describes a logical volume and which NEVER changes format or meaning. The Header is special so that any version of Pilot may understand a Header even if the Header was created by a different version of Pilot. This is useful when a physical volume contains logical volumes of several different versions; for example, it allows any Othello to obtain the name of any logical volume, and to set debugger pointers between volume of different versions. [But see note at end of file for scheme for handling Header format changes.]    (2) Body: This portion follows the Header. It contains logical volume information which is expected and allowed to change in different versions of Pilot, and which is not essential to allow cross-version operations.  >>  lvRootSeal: CARDINAL = CARDINAL[131313B];  -- DO NOT EVER CHANGE THIS VALUE!  currentVersion: CARDINAL = 9;    -- INCREMENT whenever Body or the volume data structures change format    -- or meaning!  Descriptor: TYPE = MACHINE DEPENDENT RECORD [      --========    Header:    ========    -- DO NOT CHANGE THE FORMAT OR MEANING OF THESE FIELDS!    seal(0):          CARDINAL  -- absolutely must be 1st field      -- First word of a valid logical volume root page.      -- If Descriptor.seal # lvRootSeal, the Descriptor is TRASH.      ¬ lvRootSeal,    version(1):       CARDINAL  -- absolutely must be 2nd field      -- Indicates the format and meaning of the Body part of a Descriptor.      ¬ currentVersion,    vID(2):           Volume.ID,    labelLength(7):   CARDINAL [0..maxLogicalVolumeLabelLength] ¬ 0,    label(10B):       LabelArray ¬ nullName,    type(34B):        Volume.Type,    volumeSize(35B):  Volume.PageCount,    bootingInfo(37B): Boot.LVBootFiles ¬ nullBoot,    pad(125B):	      CARDINAL ¬ 0,    pad1(126B:0..14):  [0..77777B] ¬ 0,    changing(126B:15..15): BOOLEAN ¬ TRUE,  -- see documentation for semantics.       --========    Body:    ========    -- The format and/or meaning of these fields may change    -- in different versions of Pilot.    freePageCount(127B):       Volume.PageCount ¬ 0,    vamStart(131B):            Volume.PageNumber ¬ 1,    primaryETableStartPage(133B): Volume.PageNumber ¬ 0,    copyETableStartPage(135B): Volume.PageNumber ¬ 0,    lowerBound(137B):          Volume.PageNumber       -- maintained by allocater; first page looked at by allocator      ¬ 2,    volumeRootDirectory(141B): File.ID ¬ File.nullID,    rootFileID(143B):          ARRAY PilotFileTypes.PilotRootFileType OF File.ID      ¬ nullRootFileIDs,    lastIDAllocated(165B):     LONG CARDINAL      -- Highest numbered File.ID given out on this volume.      -- We reserve the first set of IDs for Pilot's own use.      -- In particular, files of type IN PilotRootFileType may have their ID      --   the same as their File.Type.      ¬ LAST[FileTypes.PilotFileType],    scavengerLogVolume(167B):  Volume.ID      -- ID of volume containing the Scavenger log for THIS volume      ¬ Volume.nullID,    lastTimeOpendForWrite(174B):         System.GreenwichMeanTime ¬      System.gmtEpoch,    statusPrimaryETableFile(176B:0..7):  [0..400B) ¬ 0,    statusCopyETableFile(176B:8..15):    [0..400B) ¬ 0,    numberOfFile(177B):        LONG CARDINAL ¬ 0,    lock(201B): VolumeLock,    numberOfBadPagesLastTime(207B): Volume.PageCount ¬ 0,    fill(211B):                ARRAY [0..377B - 211B) OF WORD ¬ ALL[0],      -- fill to whole page    checksum(377B):            CARDINAL ¬ 0];  -- MUST be the last field  Handle: TYPE = LONG POINTER TO Descriptor;  LabelIndex: TYPE = [0..maxLogicalVolumeLabelLength);  LabelArray: TYPE = PACKED ARRAY LabelIndex OF CHARACTER;    LockState: TYPE = MACHINE DEPENDENT {unlocked(0), write(1), read(2), spare(3)};  VolumeLock: TYPE = MACHINE DEPENDENT RECORD [    owner (0): Volume.ID ¬ Volume.nullID,    lock (5:0..15): SELECT stateTag (5:0..1): LockState FROM      unlocked => [null (5:2..15): [0..16384) ¬ 0],      write => [null (5:2..15): [0..16384) ¬ 0],      read => [count (5:2..5): [0..16) ¬ 0, null (5:6..15): [0..1024) ¬ 0],    ENDCASE];      -- LOGICAL VOLUME SUB-MARKER DEFINITIONS:    -- See comments on Descriptor (above) vis-a-vis Header and Body.  LSMSeal: CARDINAL = 151515B;  -- DO NOT EVER CHANGE THIS VALUE!  LSMCurrentVersion: CARDINAL = 3;    -- increment each time SubVolEndMarkerDesc is reformatted    -- incremented to 2 for Klamath for 2 word File.ID for volumeRootDirectory    -- incremented to 3 for Pilot 13.0 since adding ETables and Status to body  -- The subvolume end marker page marks the end of each subvolume on a  -- physical volume and contains non-reconstructable information from both  -- the physical and logical (preceding) volume root pages, and a checksum.  -- The following defines the form of the logical submarker part of the marker  -- page.    LogicalSubvolumeMarker: TYPE = MACHINE DEPENDENT RECORD [      --========    Header:    ========    -- DO NOT CHANGE THE FORMAT OR MEANING OF THESE FIELDS!    -- The Header contains constant information, which is set    -- only at logical volume creation time.    seal(0):                   CARDINAL  -- absolutely must be 1st field      -- First word of a valid subvolume marker page.      -- If LogicalSubvolumeMarker.seal # LSMSeal, the LogicalSubvolumeMarker is TRASH.      ¬ LSMSeal,    version(1):                CARDINAL  -- absolutely must be 2nd field      -- Indicates the format and meaning of the Body part of a LogicalSubvolumeMarker.      ¬ LSMCurrentVersion,    labelLength(2:0..5):       CARDINAL [0..maxLogicalVolumeLabelLength] ¬ 0,    type(2:6..7):              Volume.Type,    pad(2:8..15):              [0..256) ¬ 0,    label(3):                  LabelArray ¬ nullName,       --========    Body:    ========    -- The format and/or meaning of these fields may change    -- in different versions of Pilot.    -- The body contains information which may be updated    -- during the life of the volume.    bootingInfo(27B):          Boot.LVBootFiles ¬ nullBoot,    volumeRootDirectory(115B): File.ID ¬ File.nullID,    primaryETableStartPage(117B):       Volume.PageNumber ¬ 0,    copyETableStartPage(121B):          Volume.PageNumber ¬ 0,    statusPrimaryETableFile(123B:0..7): [0..400B) ¬ 0,    statusCopyETableFile(123B:8..15):   [0..400B) ¬ 0,    padding(124B):             ARRAY [0..4) OF WORD ¬ ALL[0]];    SubmarkerHandle: TYPE = LONG POINTER TO LogicalSubvolumeMarker;  -- MISC. OPERATIONS ON LOGICAL VOLUMES    -- Procs to get/Set Free, Vam, Vfm  -- Following necessary to get around a compiler bug  tFreePage: CARDINAL = LOOPHOLE[PilotFileTypes.tFreePage, CARDINAL];  tVolumeAllocationMap: CARDINAL =    LOOPHOLE[PilotFileTypes.tVolumeAllocationMap, CARDINAL];  tVolumeFileMap: CARDINAL = LOOPHOLE[PilotFileTypes.tVolumeFileMap, CARDINAL];    Free: PROCEDURE [v: Handle] RETURNS [File.ID] = INLINE    {RETURN[v.rootFileID[tFreePage]]};  Vam: PROCEDURE [v: Handle] RETURNS [File.ID] = INLINE    {RETURN[v.rootFileID[tVolumeAllocationMap]]};  ETable: PROCEDURE [v: Handle] RETURNS [File.ID] = INLINE    {RETURN[v.rootFileID[tVolumeFileMap]]};  SetFree: PROCEDURE [v: Handle] = INLINE    {v.rootFileID[tFreePage] ¬ LOOPHOLE[LONG[PilotFileTypes.tFreePage], File.ID]};  SetVam: PROCEDURE [v: Handle] = INLINE    {v.rootFileID[tVolumeAllocationMap] ¬ LOOPHOLE[LONG[PilotFileTypes.tVolumeAllocationMap], File.ID]};  SetETable: PROCEDURE [v: Handle] = INLINE    {v.rootFileID[tVolumeFileMap] ¬      LOOPHOLE[LONG[PilotFileTypesExtraExtras.tETable], File.ID]};    -- ROOT DIRECTORY:     RootDirSeal: CARDINAL = 72727B;  -- DO NOT EVER CHANGE THIS VALUE!    RootDirVersion: CARDINAL = 2; -- INCREMENT whenever Body changes format or meaning!    -- incremented to 2 in Klamath for conversion to 2 word File.ID's.   RootDirectory: TYPE = MACHINE DEPENDENT RECORD [      --========    Header:    ========    -- DO NOT CHANGE THE FORMAT OR MEANING OF THESE FIELDS!    seal(0):         CARDINAL  -- absolutely must be 1st field      -- First word of a valid root directory.      -- If RootDirectory.seal # RootDirSeal, the RootDirectory is TRASH.      ¬ RootDirSeal,    version(1):      CARDINAL  -- absolutely must be 2nd field      -- Indicates the format and meaning of the Body part of a Descriptor.      ¬ RootDirVersion,       --========    Body:    ========    -- The format and/or meaning of these fields may change    -- in different versions of Pilot.    maxEntries(2):   CARDINAL ¬ MaxEntriesInRootDirectory,    countEntries(3): CARDINAL ¬ FIRST[CARDINAL],    entries(4):      ARRAY [0..0) OF RootDirEntry];    RootDirEntry: TYPE = MACHINE DEPENDENT RECORD [    type(0): File.Type,	-- Key for lookup    file(1): File.ID]; -- "Value" provided by the client of the facility  longMaxEntriesInRootDirectory: PRIVATE LONG CARDINAL =    (Environment.wordsPerPage*MaxPagesInRootDirectory-4)/SIZE[RootDirEntry];    -- SIZE[RootDirectory[0]] not work    MaxEntriesInRootDirectory: CARDINAL =    CARDINAL[longMaxEntriesInRootDirectory];    MaxPagesInRootDirectory: File.PageCount = 1;        -- VALIDITY CHECKS:    descriptorSizeCheck: PRIVATE BOOLEAN =    Environment.wordsPerPage*rootPageSize = SIZE[Descriptor];    submarkerSizeCheck: PRIVATE BOOLEAN [TRUE..TRUE] =    SIZE[LogicalSubvolumeMarker] < Environment.wordsPerPage;    checkMaxEntriesInRootDirectory: PRIVATE BOOLEAN =    longMaxEntriesInRootDirectory <= LAST[CARDINAL];  END.<<If the format of a Descriptor's Header ever HAS to be changed, the following scheme can accomplish it in a semi-compatible way:   Change  version(1): CARDINALto   headerVersion(1:0..4): [0..37B], bodyVersion(1:5..15): [0..3777B]This will make old Descriptors look like version zero of a header. Of course, old versions of Pilot will be confused by the new header format.>>LOG 6-Oct-82 13:47:34	AWL         Created from LogicalVolume of October 23, 1981 and LogicalVolumeFormat interface created by L. LXD       of June 7, 1982.  Chief changes from Pilot 8.0 LogicalVolume are to eliminate the level cache and related definitions and to modify for volume relative IDs.  Also, kept skeleton of Trinity LV Root Page for use of Klamath (and beyond?) scavengers.  Changed Descriptor.labelLength to be [0..maxLabelLength]20-Oct-82  9:14:00	AWL         Added LabelArray, SubmarkerHandle, rootPageSize. Renamed descriptorSize to descriptorSizeCheck and made it PRIVATE. 9-Nov-82 18:40:07	AWL         Made RootDirectory.entries be an ARRAY to make constructors easier. 2-Dec-82 16:05:08	LXD         Modified SetFree, SetVam, SetVfm to use respective PilotFileTypes in assigning ids.22-Mar-83 11:25:59	WDK        Documented meaning of seal and version. Moved changing to Header. Inserted more dire warnings.22-Apr-83 15:36:56	AWL         Added Descriptor.lastTimeOpendForWrite.  Moved Descriptor.changing to the place it has always been in the root page for comaptibility.25-Aug-83 13:11:51	JXP      Version number incremented to 8 to reflect change in VFM format. Done to    force scavenge.10-Jun-86 14:08:25      RSV   Updated currentVersion of LV root page to 9 (from 8) because of adding copyETableStartPage, changing VFMStart to primaryETableStartPage, and adding status bytes.  Incremented LSMCurrentVersion to 3 (from 2) to add primaryETableStartPage, copyETableStartPage, and status bytes.  Deleted Trinity stuff (was for Scavenger use only).  Changed SetVfm to SetETable.  Deleted FreeVolumePages.24-Sep-86 12:45:12      RSV   SetETable now set rootFileID to tETable, not tVolumeFileMap.11-Jan-87 16:00:42      RSV   Added numberOfFile to LV Root Page26-Jan-87 11:17:50	CJS   Added VolumeLock and lock field to root page Descriptor.18-Feb-87 18:31:27      RSV   Added numberOfBadPagesLastTime.