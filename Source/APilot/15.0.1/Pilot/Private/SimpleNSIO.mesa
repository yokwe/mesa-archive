-- Copyright (C) 1983  by Xerox Corporation. All rights reserved. -- SimpleNSIO.mesa      11-Nov-83 13:14:09 by WDK     -- This interface provides simple facilities for transmitting-- and receiving level two internet packets.DIRECTORY  BootChannel USING [Result],  Device USING [Type],  NSTypes USING [BufferBody, bytesPerSppHeader, maxDataBytesPerSpp, PacketType],  PilotMP USING [cGermDriver, cGermTimeout, Code],  System USING [    HostNumber, Microseconds, NetworkAddress, NetworkNumber, nullHostNumber,    nullNetworkNumber, nullSocketNumber, SocketNumber];SimpleNSIO: DEFINITIONS =  BEGIN  ByteCount: TYPE = CARDINAL;  maxTransmitReceiveDataLength: ByteCount =    NSTypes.maxDataBytesPerSpp - NSTypes.bytesPerSppHeader;  GetRawBufferSize: PROCEDURE RETURNS [rawBufferSize: CARDINAL];  Initialize: PROCEDURE [    deviceType: Device.Type, deviceOrdinal: CARDINAL, rawBuffer: LONG POINTER,    cleanups: Cleanups ¬ avoidCleanup]    RETURNS [      result: BootChannel.Result, bufferBody: LONG POINTER TO NSTypes.BufferBody];  <<Prepares for transfers on given device.  rawBuffer­ is resident storage, of the size given by GetRawBufferSize.    It becomes the property of SimpleNSIO until Finalize or error.  Clients running in germ-land should use cleanups = avoidCleanup.  Returns pointer to buffer to and from which subsequent transfers    take place. Client level two packet starts at    bufferBody.nsBody. Fields preceeding nsBody are private to SimpleNSIO.  If requested device is not available, returns result = cantHandleDevice,    either because the device does not exist or because the    implementation does not know how to talk to it. >>  Cleanups: TYPE = {avoidCleanup, doCleanup};  cantHandleDeviceCode: PilotMP.Code = PilotMP.cGermDriver;  cantHandleDevice: BootChannel.Result = [error[cantHandleDeviceCode]];  Finalize: PROCEDURE [cleanups: Cleanups ¬ avoidCleanup];  -- Shuts down device. Ownership of rawBuffer­ returns to client.  ReceivePacket: PROCEDURE [    getFrom: System.NetworkAddress, mySocket: System.SocketNumber,    timeout: System.Microseconds ¬ noTimeOut]    RETURNS [      result: BootChannel.Result, dataBytes: ByteCount, type: NSTypes.PacketType,      source, destination: LONG POINTER TO System.NetworkAddress];  <<Level two packet is read into bufferBody.nsBody    (returned by ActivateDriver).  getFrom.net = nullNetworkNumber means from any net.  getFrom.host = nullHostNumber means from any host.  getFrom.socket = nullSocketNumber means from any socket.  mySocket = nullSocketNumber means to any socket.  timeout = noTimeOut = LAST[System.Microseconds] means no timeout.  source, dest pointers are valid until next call into SimpleNSIO.  If timed out, returns result = timeOut and dataBytes = timeOutBytes. >>  fromAnyHost: System.HostNumber = System.nullHostNumber;  fromAnyNetwork: System.NetworkNumber = System.nullNetworkNumber;  fromAnySocket: System.SocketNumber = System.nullSocketNumber;  noTimeOut: System.Microseconds = LAST[System.Microseconds];  timedOutCode: PilotMP.Code = PilotMP.cGermTimeout;  timedOutResult: BootChannel.Result =  --    [error[timedOutCode]];  -- NOTE: Mesa won't compare this to an unbound Result.  timedOutBytes: ByteCount = ByteCount.LAST;  ReturnPacket: PROCEDURE [dataBytes: ByteCount, type: NSTypes.PacketType]    RETURNS [result: BootChannel.Result];  <<Sends Level two packet in bufferBody.nsBody back to where    last received packet came from. AT PRESENT, ReturnPacket is the only way    to transmit data to hosts on other networks.  Note that doing a SendPacket or ReturnPacket does not invalidate    this return address. >>  SendPacket: PROCEDURE [    dataBytes: ByteCount, type: NSTypes.PacketType,    sourceSocket: System.SocketNumber, dest: System.NetworkAddress]    RETURNS [result: BootChannel.Result];  <<Transmits level two packet stored at bufferBody.nsBody (returned by Initialize).  dest is both the immediate destination and the final destination.  Packet is sent with source network = nullNetworkNumber.  NOTE: Since the destination addresses are overloaded on "dest",    SendPacket can NOT be used to transmit data to hosts on other networks.>>  END.LOG 6-Dec-81  3:48:20   FXH        Created file10-Dec-81 10:46:19   AWL         Deleted MicrosecondsToPulses.10-Dec-81 10:46:19   FXH        Use System not SpecialSystem.22-Apr-83 11:18:08   WDK        OISCP => NS. Renamed from MiniOISCPDriver.mesa => SimpleNSIO.   Added Result and constants for ReceivePacket. Storage now passed in to   Initialize. Improved documentation. Get stuff from NSTypes. ActivateDriver   gets device type and ordinal. Deleted MyID.19-Jul-83 10:53:45   AWL         NSTypes.bytesPerPktHeader => NSTypes.bytesPerSppHeader,   NSTypes.maxBytesPerPkt => NSTypes.maxDataBytesPerSpp.11-Nov-83 13:14:52   WDK     	Improved documentation on ReturnPacket, SendPacket.