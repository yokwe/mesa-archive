-- Copyright (C) 1983, 1987  by Xerox Corporation. All rights reserved. -- PilotKernel and Germ> GermOps.mesa     17-Nov-87 15:09:38 by CAJ    -- Definitions for Pilot invoking the Germ or the Germ invoking Pilot, switching MDS's in the process.  Types and constants used to pass parameters to the Germ are defined in Boot.mesa.-- When these facilities are invoked, the caller is expected to have interrupts disabled and devices turned off.-- Since the caller typically is not allowed to perform any frame allocations, all procedures defined here are INLINEs or are implemented as coroutines (except the initialization routine).-- Also defines special facilities available in the germ's world only.-- Implementation notes:-- The crux of the cross-mds linkage mechanism here is a coroutine which has PORT interfaces to both systems (Pilot and the Germ).  This allows both systems to consider the other as a server or as a client.  In performing the linkage, the mechanism saves the caller's context (e.g. handle of local frame of caller) in Boot.pInitialLink­ in the caller's mds, switches to the destination mds specified in pCrossMdsData.mdsOther in the caller's mds, remembers the caller's mds in pCrossMdsData.mdsOther in the destination mds, and xfers to Boot.pInitialLink­ in the destination mds.  Thus, when the destinataion system is invoked, the linkage mechanism's data is exactly set up to return to the caller in the other mds.  The return trip could be done either by procedure or port call or procedure return, at the invoked system's convenience.DIRECTORY  Boot USING [    Action, currentRequestBasicVersion, currentRequestExtensionVersion,    inLoad, Location, mdsiGerm, outLoad, pageGerm, pRequest, Session, teledebug],  BootFile USING [Header, InLoadMode, MDSIndex],  --DeviceCleanup USING [Perform],  Environment USING [Long, PageNumber, wordsPerPage],  ESCAlpha USING [aLOADRAMJ],  Inline USING [LongCOPY],  Mopcodes USING [zESC, zSFC],  PrincOps USING [frameSizeMap, FSIndex, Port],  PrincOpsExtras2 USING [ControlLink, GlobalOverhead, LocalOverhead],  SDDefs USING [SD, sFirstPilot --,sLastPilot--],  StartList USING [Base],  System USING [Switches];GermOps: DEFINITIONS  IMPORTS Boot, --DeviceCleanup,-- Inline =  BEGIN    --~~~~~~~~~~ Public Procedures: ~~~~~~~~~~    InitializeLinkage: PUBLIC PROCEDURE [mdsiOther: BootFile.MDSIndex];  -- Sets up pCrossMdsData­ for Pilot<=>Germ linkage.  Invoked by the Germ.    GetPStartListHeader: PUBLIC PROCEDURE RETURNS [base: StartList.Base] =    -- This procedure should be called by Pilot after the InLoad of virgin    -- boot file before the first call to OutLoad.    INLINE {RETURN[Boot.pRequest.pStartListHeader]};  InvokersMds: PUBLIC PROCEDURE RETURNS [BootFile.MDSIndex] = INLINE {    -- If caller is Pilot, returns MDS of Germ.  If caller is Germ,    -- returns MDS of Pilot (i.e. the system that called InLoad etc).    RETURN[pCrossMdsData.mdsOther]};      CallPilotInMds: PUBLIC PROCEDURE [mds: BootFile.MDSIndex] = INLINE {    -- Used by the Germ to invoke Pilot following an InLoad.    pCrossMdsData.mdsOther ¬ mds;    InvokeSystemInOtherMds[]};      BackToPilot: PUBLIC PROCEDURE [] = INLINE {    -- Used by the Germ to continue execution of Pilot following an OutLoad,    -- Teledebug, ...    -- Uses mds saved in linkage by call to Germ.    InvokeSystemInOtherMds[]};      InLoad: PUBLIC PROCEDURE [    pMicrocodeCopy: LONG POINTER ¬ NIL,    pGermCopy: LONG POINTER ¬ NIL,    nGerm: CARDINAL,  -- word count    pLocation: LONG POINTER TO Boot.Location,    pSwitches: LONG POINTER TO System.Switches] = INLINE {    -- Loads boot file described by pLocation, loading new microcode and    -- germ if necessary.    -- Never returns to caller; begins executing from inloaded system.    -- Interrupts must be disabled, all devices turned off.        -- IF pMicrocodeCopy~=NIL THEN DeviceCleanup.Perform[kill]; ++ causes FATAL ERROR IN PASS 4    IF pGermCopy ~= NIL THEN      -- Note that enough real memory must be waiting there in the Germ's MDS      -- to accomodate the new possibly-larger Germ, it must have a compatible      -- linkage protocol, its image must be properly initialized      -- for our mds, etc etc..      Inline.LongCOPY[        from: pGermCopy, nwords: nGerm,        to:	  LOOPHOLE[	    LOOPHOLE[	      Environment.Long[any[high: Boot.mdsiGerm, low: 0]], LONG CARDINAL] +	    Boot.pageGerm*Environment.wordsPerPage]];    SetGermGeneralArguments[Boot.inLoad, pLocation, pSwitches];    IF pMicrocodeCopy ~= NIL THEN      LoadRam[pMicrocode: pMicrocodeCopy, andJump: TRUE]  -- never returns.    ELSE CallGerm[]};  -- never returns.  OutLoad: PUBLIC PROCEDURE [    pLocation: LONG POINTER TO Boot.Location, inLoadMode: BootFile.InLoadMode]    RETURNS [session: Boot.Session] = INLINE {    -- Saves state of processor on file,    -- then returns session=continuingAfterOutLoad.    -- Later, when the saved system image is InLoaded, we again return    -- from OutLoad, this time with session=newSession.    -- Interrupts must be disabled, all devices turned off.        SetGermGeneralArguments[Boot.outLoad, pLocation];    -- Set additional arguments for OutLoad:    Boot.pRequest.inLoadMode ¬ inLoadMode;    CallGerm[];    RETURN[Boot.pRequest.session]};  Teledebug: PUBLIC PROCEDURE [pLocation: LONG POINTER TO Boot.Location] =    INLINE {    -- Call germ to teledebug for a while.    -- Sets up request in cross-MDS linkage shared with germ and calls germ.    -- Assumes interrupts disabled, all devices turned off.    SetGermGeneralArguments[Boot.teledebug, pLocation];    CallGerm[]};      --~~~~~ Facilities implemented in Germ's world ONLY: ~~~~~    -- These facilities are implemented by the Germ (GermOpsImpl and other germ modules) for the use of programs which comprise the Germ (e.g. BootChannelDisk, TeledebugImpl).  They are declared PRIVATE here to prevent accidental use by programs running in the Pilot world.  debug: PRIVATE BOOLEAN;  -- controlled by boot switch.    Start: PUBLIC PROCEDURE [program: PROGRAM];  -- This startTraps all of the modules used by the germ, guarenteeing everyone  -- is started explicitly.  GermWorldError: PRIVATE PROCEDURE [mpCode: --PilotMP.Code-- UNSPECIFIED];  << Displays mpCode in the maintenance panel.  (mpCode declared UNSPECIFIED to break compilation dependency.)  If in germ debug mode (boot switch), also displays additional  state information in the maintenance panel, as follows:    Normal mode: Displays the mpCode passed.  Debug mode: Displays, in sequence    1. The mpCode passed.    2. The code 999    3. For each frame up the stack (limit 5), displays:    3a.  globalFrameIndex/1000, globalFrameIndex MOD 1000.    3b.  pc/1000, pc MOD 1000.    The mp cycles repeatedly through these values.    NOTE: ALL VALUES DISPLAYED ARE DECIMAL. >>  PointerFromPage: PRIVATE PROCEDURE [page: Environment.PageNumber]    RETURNS [POINTER];  ShowCodeInMP: PRIVATE PROCEDURE [mpCode: --PilotMP.Code-- UNSPECIFIED];  -- Displays mpCode in DECIMAL in the Maintenance Panel,  -- delays for a second or so, then returns.  ShowCardinalInMP: PRIVATE PROCEDURE [cardinal: UNSPECIFIED];  -- Displays cardinal's most significant DECIMAL digit in the Maintenance Panel,  -- delays for a second or so, then displays cardinal's four least  -- significant DECIMAL digits, delays for a second or so, then returns.  GetTeledebugged: PROCEDURE [    pLocation: LONG POINTER TO Boot.Location,    scratchPage: Environment.PageNumber];  -- Speaks to any teledebugger, returns when instructed to by same.  -- (scratchPage is used for reading (disk labels and) data.)    GetNextPilotVM: PRIVATE PROCEDURE [page:Environment.PageNumber]     RETURNS [firstPage, endPage:Environment.PageNumber];  -- Returns next area of virtual memory, beginning at or after given page,  -- which is available for Pilot on this processor.  Similar to  -- ProcessorFace.GetNextAvailableVM except that Germ VM is also excluded.    ProcessMachineDependentSwitches: PRIVATE PROCEDURE [     header: LONG POINTER TO BootFile.Header,     highestMappedPage:Environment.PageNumber]     RETURNS [newHighestMappedPage:Environment.PageNumber];  -- If supplied, gives a chance for machine specific processing of  -- germ switches.  Note that header contains inLoadMode (load/restore) and  -- default switches in case implied by PilotSwitches  -- The highestMappedPage is made available so that clients can make  -- more memory available should they want to (eg, display bank)    BoundsReservedMemory: PRIVATE PROCEDURE RETURNS [    reservedMin, reservedMax: Environment.PageNumber];  -- Returns the bounds on reserved real memory    BoundsVanillaMemory: PRIVATE PROCEDURE RETURNS [    vanillaMin, vanillaMax: Environment.PageNumber];  -- Returns the bounds on regular real memory  --~~~~~ Private data for the cross-MDS linkage between the Germ and Pilot: ~~~~~  pCrossMdsFrames: POINTER TO CrossMdsFrames =    -- Don't use @SD[sFirstPilot] here to avoid awful generated code.    LOOPHOLE[((LOOPHOLE[SDDefs.SD, CARDINAL]      + (SDDefs.sFirstPilot*SIZE[LONG UNSPECIFIED])+3)/4)*4];      pCrossMdsData: POINTER TO CrossMdsData =    LOOPHOLE[((LOOPHOLE[pCrossMdsFrames + SIZE[CrossMdsFrames],CARDINAL]+3)/4)*4];    pCodeSharingHandles: POINTER TO CodeSharingHandles =    LOOPHOLE[pCrossMdsData + SIZE[CrossMdsData]];  CrossMdsData: PRIVATE TYPE = MACHINE DEPENDENT RECORD [    -- This data is used to accomplish the cross-MDS linkage between the    -- Germ and Pilot.    -- This data is allocated in both Pilot's and the Germ's MDS.    -- Must be aligned on 0 MOD 4 boundary..    mdsOther (0): BootFile.MDSIndex,      -- If Pilot is running, this is the mds of the Germ.  If the Germ      -- is running, this is the mds of Pilot.    fill (1): CARDINAL ¬ 0,    linkage (2): Linkage ];  -- must be at 2 MOD 4 boundary.      Linkage: PRIVATE TYPE = MACHINE DEPENDENT RECORD [    -- must be at 0 MOD 4 boundary.    vp (0): SELECT OVERLAID * FROM      portUse => [  -- for implementation of linkage mechanism.        awaitSwitchMdsRequest (0): PORT [] RETURNS []],      portImpl => [  -- for implementation of linkage mechanism.        portRep (0): PrincOps.Port],      ENDCASE];        InvokeSystemInOtherMds: PROCEDURE [] RETURNS [] = INLINE {    Call[[indirect[port[@pCrossMdsData.linkage.portRep]]]] };   -- Calling InvokeSystemInOtherMds is a request to invoke the system in   -- pCrossMdsData.mdsOther (whose entry point is Boot.pInitialLink­ in   -- pCrossMdsData.mdsOther).  If Boot.pInitialLink­ is a procedure, it should   -- take no arguments; if a coroutine or return frame, it should expect no   -- results.  CrossMdsFrames: TYPE = MACHINE DEPENDENT RECORD [    -- Space in which copies of global frame and local frame of    -- GermOpsLinkageImpl.InitializeMdsSwitcher are constructed    -- (by GermOpsLinkageImpl.InitializeLinkage) to accomplish the    -- cross-MDS linkage between the Germ and Pilot.    -- Copies exist in both the Germ's and Pilot's MDS.    -- Must start on a 0 MOD 4 boundary.    pad (0): ARRAY [0..2) OF WORD,  -- 0 MOD 4 boundary.    globalOverhead (2): PrincOpsExtras2.GlobalOverhead,      -- GlobalOverhead is 2 words now    globalVariables (4): GermOpsImplGlobals,  -- 0 MOD 4 boundary.    localOverhead (8): PrincOpsExtras2.LocalOverhead,  -- 0 MOD 4 boundary.    localVariables (12): MdsSwitcherLocals];  -- 0 MOD 4 boundary.      nGermOpsImplGlobals: CARDINAL = 4;    -- max size of PrincOps.GlobalVariables of GermOpsImpl.    -- Must be a multiple of 4.  fsiMdsSwitcherLocals: PrincOps.FSIndex = 0;    -- frameSizeIndex of PrincOps.LocalVariables of    -- GermOpsImpl.InitializeMdsSwitcher.    GermOpsImplGlobals: TYPE = ARRAY [0..nGermOpsImplGlobals) OF UNSPECIFIED;  MdsSwitcherLocals: TYPE = ARRAY [    0..PrincOps.frameSizeMap[fsiMdsSwitcherLocals] -      PrincOpsExtras2.LocalOverhead.SIZE) OF UNSPECIFIED;    CodeSharingHandles: TYPE =    ARRAY SharedCode OF --GENERIC-- PROCEDURE;  -- proc in code pack to be shared.    -- Copies exist in both the Germ's and Pilot's MDS.  SharedCode: TYPE = MACHINE DEPENDENT    {codePackA(0), codePackB(1), codePackC(2), codePackD(3)};  --~~~~~ Private Procedures: ~~~~~  SetGermGeneralArguments: PRIVATE PROCEDURE [    action: Boot.Action, pLocation: LONG POINTER TO Boot.Location,    pSwitches: LONG POINTER TO System.Switches ¬ NIL] = INLINE {    -- Fills in fields in Request to the Germ.    Boot.pRequest.requestBasicVersion ¬ Boot.currentRequestBasicVersion;    Boot.pRequest.action ¬ action;    Boot.pRequest.location ¬ pLocation­;    Boot.pRequest.requestExtensionVersion ¬ Boot.currentRequestExtensionVersion;    IF pSwitches~=NIL THEN Boot.pRequest.switches ¬ pSwitches­};  CallGerm: PRIVATE PROCEDURE = INLINE {    -- The mds in pCrossMdsData­ and entry point of the germ are already set,    -- left over from when the Germ last invoked Pilot.    InvokeSystemInOtherMds[] };  Call: PRIVATE PROCEDURE [PrincOpsExtras2.ControlLink] =    MACHINE CODE BEGIN Mopcodes.zSFC END;      LoadRam: PRIVATE PROCEDURE [pMicrocode: LONG POINTER, andJump: BOOLEAN] =    MACHINE CODE BEGIN Mopcodes.zESC, ESCAlpha.aLOADRAMJ END;      END.LOG  April 17, 1980  12:39 AM   FXH       Move teledebug to BootApril 24, 1980  5:07 PM   FXH       FrameOps => Frame, ControlDefs => PrincOpsJuly 19, 1980  7:16 PM   FXH      Started programming around SDDefs changing.  Took self out of PMon.  13-Aug-81 15:31:55   WDK       Switches defined in System and passed in Boot.Request. GetPStartListHeader returns a StartList.Header.  InLoad.switches renamed to pSwitches and now a long pointer to switches; deleted default value for it.  Added pSwitches to SetGermGeneralArguments.10-Nov-81 21:12:58   WDK       Major rework.  New instruction set.  New SD.  Moved mdsiGerm, pageGerm, pCountGerm to Boot.  Restructured cross-mds linkage.  Added PointerFromPage, GermWorldError, CodeSharingHandles.29-Nov-82 11:06:56   AWL         Change InLoad to deal with long page numbers.25-May-83 15:20:58   WDK        Added ShowCodeInMP, ShowCardinalInMP, GetTeledebugged. 7-Jul-83 11:57:25   WDK        MdsSwitcherLocals needed local overhead subtracted. Make compatible with new PrincOps/SDDefs. 3-Aug-83 18:13:33   WDK        Compiler generated awful code for @SD[sFirstPilot] etc.10-Aug-83  9:58:33   JXG       Added GetNextPilotVM 24-Aug-83 11:16:12   JXG        Added ProcessMachineDependentSwitches 15-Sep-83 13:33:00   JXG        Added BoundsVanillaMemory13-Jan-87 14:02:45   CAJ        Transformed BoundsVanillaMemory to BoundsReservedMemory, with renamed parameters, to reflect semantics change.20-Jun-86 17:36:28   MEW   MDS relief: Upgraded to move global frames out of MDS.15-Aug-86 10:31:22   AHL   MDS relief: Somethin16-Jan-87 10:41:51   CAJ   Merge in changes represented by previous 3 entries.17-Nov-87 15:09:31   CAJ   Add pLocation arg to GetTeledebugged.  Add BoundsVanillaMemory.  Correct some comments.