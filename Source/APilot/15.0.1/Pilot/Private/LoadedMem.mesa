-- Copyright (C) 1983, 1986  by Xerox Corporation. All rights reserved. -- LoadedMem.mesa       20-Aug-86 19:28:13 by ET  <<This Friends interface supplies the ONLY access to the "target" address space into which a bcdis being loaded. The LoaderCore does not itself directly access this address space at all.This allows the target address space to be e.g. in a boot file being constructed,and not actually mapped in virtual memory at its nominal address.Most addresses dealt with below are "target" addresses.>>DIRECTORY  BcdOps USING [BcdBase, MTHandle],  PrincOps USING [GlobalCodebase],  PrincOpsExtras2 USING [    ExtraGlobalWord, GlobalWord, GFTIndex, GFTHandle, ImportLink,     LongGlobalFrameHandle];LoadedMem: DEFINITIONS =  BEGIN  TargetAddress: TYPE = POINTER;  TargetLongAddress: TYPE = LONG POINTER;  Interval: TYPE = RECORD [pointer: TargetLongAddress, pages: CARDINAL];  nullInterval: Interval = [NIL, 0];  -- An address in the "target" address space into which a bcd  -- is being loaded. Does not (necessarily) refer to the address space  -- in which execution is taking place.   -- Redundantly defined types: (to avoid bootstrapping problems)    <<--Space.--Usage: TYPE = [0..2048);  --Space.--Class: TYPE = MACHINE DEPENDENT{    unknown(0), code(1), globalFrame(2), localFrame(3), zone(4), file(5), data(6),    spareA(7), spareB(8), pilotResident(31)};>>    -- Storage Allocation:    Content: TYPE = {controlModuleList, framePack, unpackagedFrame};  AllocatePages: PROCEDURE [size: CARDINAL, content: Content]    RETURNS [targetAddress: TargetLongAddress];    -- Allocates sufficient scratch target pages to hold size words.    -- Should swap as a unit.      AllocateMDSPages: PROCEDURE [size: CARDINAL, content: Content]    RETURNS [targetAddress: TargetAddress];    -- Same as AllocatePages except from the mds    AllocateWords: PROCEDURE [size: CARDINAL, content: Content]    RETURNS [targetAddress: TargetLongAddress];    <<Allocates size words of swappable target scratch storage.    Implementation Notes:     o  Common client use is 	storage ¬ AllocateWords[size];	IF <page boundary at unfortunate spot> THEN {	  FreeWords[storage];	  storage ¬ AllocateWords[size+4]};     o Storage for the different Content classes should be allocated       in separate spaces.>>         AllocateMDSWords: PROCEDURE [size: CARDINAL, content: Content]    RETURNS [targetAddress: TargetAddress];    -- Same as AllocateWords except from the mds  FreePages: PROCEDURE [targetAddress: TargetLongAddress]    RETURNS [nil: TargetLongAddress];    -- Deallocates target storage allocated by AllocateMDSPages.    -- targetAddress may be NIL.      FreeMDSPages: PROCEDURE [targetAddress: TargetAddress]    RETURNS [nil: TargetAddress];    -- Same as FreePages except for the mds.  FreeWords: PROCEDURE [targetAddress: TargetLongAddress]    RETURNS [nil: TargetLongAddress];    -- Deallocates target storage allocated by AllocateWords.    -- targetAddress may be NIL.      FreeMDSWords: PROCEDURE [targetAddress: TargetAddress]    RETURNS [nil: TargetAddress];    -- Same as FreeWords except for the mds.  -- Storage mapping:    SwapUnitSize: TYPE = CARDINAL;  SwapUnits: TYPE = LONG DESCRIPTOR FOR ARRAY [0..0) OF SwapUnitSize;  MapCode: PROCEDURE [    bcd: BcdOps.BcdBase, pageOffset, pageCount: CARDINAL, swapUnits: SwapUnits,     access: Access]    RETURNS [targetAddress: TargetLongAddress];    -- Allocates pageCount target hyperspace pages (not crossing 64KW boundary),    -- and maps it to the backing file of bcd at the given offset from bcd.    -- If swapUnits = NIL, it should swap as a unit.    -- Should be mapped readWrite initially when doing code links;    -- MakeCodeReadOnly will be called later.  MakeCodeReadOnly: PROCEDURE [targetAddress: TargetLongAddress];    -- Makes the code space previously mapped by MapCode to be readOnly.    -- (Called after code links written.)  UnmapCode: PROCEDURE [targetAddress: TargetLongAddress]    RETURNS [unmapped: Interval];    -- Unmaps and deallocates storage allocated by MapCode.    -- targetAddress may be NIL.  -- Storage reading and writing:    Access: TYPE = {readWrite, readOnly};    -- Pointer conversions; Better be sure when you do a Short!!!    Long: PROCEDURE [targetAddress: TargetAddress] RETURNS [TargetLongAddress];  Short: PROCEDURE [targetAddress: TargetLongAddress] RETURNS [TargetAddress];  ReadWord: PROCEDURE [targetAddress: TargetLongAddress] RETURNS [UNSPECIFIED];    ReadMDSWord: PROCEDURE [targetAddress: TargetAddress] RETURNS [UNSPECIFIED];    ReadBlock: PROCEDURE [    targetAddress: TargetLongAddress, localAddress: LONG POINTER, size: CARDINAL];    -- Reads size words from target memory at targetAddress­    -- into ordinary virtual memory at localAddress­.      ReadMDSBlock: PROCEDURE [    targetAddress: TargetAddress, localAddress: LONG POINTER, size: CARDINAL];  WriteWord: PROCEDURE [    targetAddress: TargetLongAddress, word: UNSPECIFIED, access: Access];     WriteMDSWord: PROCEDURE [    targetAddress: TargetAddress, word: UNSPECIFIED, access: Access];  WriteBlock: PROCEDURE [    targetAddress: TargetLongAddress,    localAddress: LONG POINTER --TO READONLY UNSPECIFIED--,    size: CARDINAL, access: Access];    <<Writes size words from ordinary virtual memory at localAddress­ into    target memory at targetAddress­.    Access indicates the desired (final) access state of the memory.    If access = readOnly, the memory may or may not be readOnly    to start with. If access = readWrite, the memory is    definitely readWrite to start with and should remain that way.>>      WriteMDSBlock: PROCEDURE [    targetAddress: TargetAddress,    localAddress: LONG POINTER, size: CARDINAL, access: Access];      ReadCodeLinks: PROCEDURE [    targetAddress: TargetLongAddress,    mth: BcdOps.MTHandle,     localAddress: LONG DESCRIPTOR FOR ARRAY OF PrincOpsExtras2.ImportLink];      WriteCodeLinks: PROCEDURE [    targetAddress: TargetLongAddress,    mth: BcdOps.MTHandle,     localAddress: LONG DESCRIPTOR FOR ARRAY OF PrincOpsExtras2.ImportLink,    access: Access];  ReadGlobal: PROCEDURE [gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS [PrincOpsExtras2.GFTIndex];  ReadGlobalWord: PROCEDURE [gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS [PrincOpsExtras2.GlobalWord];  ReadExtraGlobalWord: PROCEDURE [gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS [PrincOpsExtras2.ExtraGlobalWord];  ReadCodebase: PROCEDURE [gf: PrincOpsExtras2.LongGlobalFrameHandle]    RETURNS [gcb: PrincOps.GlobalCodebase];  WriteGlobalIndex: PROCEDURE [    gfi: PrincOpsExtras2.GFTIndex, gf: PrincOpsExtras2.LongGlobalFrameHandle];  WriteGlobalWord: PROCEDURE [    gw: PrincOpsExtras2.GlobalWord, gf: PrincOpsExtras2.LongGlobalFrameHandle];  WriteExtraGlobalWord: PROCEDURE [    xgw: PrincOpsExtras2.ExtraGlobalWord,     gf: PrincOpsExtras2.LongGlobalFrameHandle];  WriteCodebase: PROCEDURE [    gcb: PrincOps.GlobalCodebase, gf: PrincOpsExtras2.GFTHandle];      GlobalFrameFromGFTHandle: PROC[gfth: PrincOpsExtras2.GFTHandle]     RETURNS[gf: PrincOpsExtras2.LongGlobalFrameHandle];  GFTHandleFromGlobalFrame: PROC[gf: PrincOpsExtras2.LongGlobalFrameHandle]     RETURNS[gfth: PrincOpsExtras2.GFTHandle];  END.LOG23-Aug-83 10:11:37   WDK        Renamed from PilotLoaderOps to LoaderCore. Ditch OPENs. Deleted BadCode. AllocateFramePack returns gf. FreeFramePacks simplified. Reorganize FrameItem. MaxNGfi went away. Shuffled New to LoaderCore.mesa. AllocateFramePack gets very simple. {OpenLinkSpace, WriteLink, ReadLink, CloseLinkSpace} replaced by ReadLinks and WriteLinks.14-Sep-83 14:17:33   RES  	Added access to MapCode (and changed comment).10-Nov-83  9:14:40   WDK        Deleted spurious files from DIRECTORY clause. Expanded USING clause. 9-Oct-84 13:43:46   EKN     copyrite formatted.18-Feb-86 12:00:15   ET   Convert to new princops: Deleted Long, WriteMDSBlock, ReadMDSBlock. Changed ReadGlobalExtra, WriteGlobalExtra to ReadGlobalIndex, WriteGlobalIndex, respectively. Changed other MDS dependent procedures to be non mds dependent, i.e. name change and argument pointers to long pointers.18-Jun-86 17:18:26   ET   Convert to the other princops. (Add above Deleted things back in).12-Aug-86 10:57:43   ET   Added WriteCodeLinks for the new makeboot to use.20-Aug-86 19:28:22   ET   Added ReadCodeLinks for the new makeboot to use.